{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "byteorder": "<",
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "shape": [
                        6,
                        6
                    ],
                    "values": "eJwBIAHf/s5Sh/pCWvA/+zWRtLBFtT9xY4IRTH+lP3n2UD8H0XG/QSPtTCJqp79v2FG/yv6Ev/4rbv1JDJ6/pLv8xzNa7j9zVzUT+fukvwbODoeX8Zu/wOENyxJ6ij8tijdON9qMP3ruOGEvYqA/+Z7twwyJlT8PqWBMmFPtP+YzvDoYKnA/RnhCNJhzk78P2kP9PrprP9W1G9sStaS/5qbb34cWi78Zw2DcDlqcvxyiPwAX9O0/KHRc8t92l79z278X5cuQP+ZCmh++QbM/CQZIyesFoD+z3fTqswKTPy3UoU9gEq2/TDZOAxrj7j/WMejAPo+qv5HSzGbbVay/5y3Idt4lpr9EEFHekoikP205VDAFckm/R0RAvQBGgj+KmSiJA6DuP2zNj1c="
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    6,
                    6
                ],
                "strides": [
                    8,
                    48
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.09119594566840614,
                    0.158031108085434,
                    0.4493974290213097,
                    0.18403762566394252,
                    0.06095879947245654,
                    0.06722620259700786
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.023361930308856246,
                    0.00851138687735363
                ]
            },
            "V0": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    6,
                    6
                ],
                "values": "eJxj4Dd9E/tqtT1DzK3r9prz9zP43bLpvTRtPwPDDZuHnhn2DG+Lpp1xX7m/YfWfmi97Z8PVHWgRe71LZJP9AlaXc45bFu1n6DbemWDSas8gc+3jnD9t9grdUj3/2rbAzYOpm3dvA3vtkoP2Bx7sPah3qGs/wwsPe+XevP0MP3i//t0dh7AXah5M3YPX26ef2rDBnuFbZOHXkJb9Ddd0Cxyse/fD3AezF24eVB3DjYLFb4y32jdM0uacuWauPcwfcPdB7YWZB1OXxGLdy9tzyB4AuceRZA=="
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            6
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            6,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkzNDgzNzEycQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5MzQ4MzcxMnEBYS4yAAAAAAAAAM5OC5mAWNc/wvbF3Ff30z85xQBzjYa/P4nvzy11ltC/r4GVt2IB5L9oUwTA/RTUP7IlaMflg9i/CazcAprR1L9QA/OM5nbUP/NXQc86F+M/DuUtzBnK1b++i7aL7gXTPxxXzPqbk9U/s4OiIKrC1L+TRwk+QTDBPwc8H2eX7NE/T4Vb6zA7uL/9I3sA0GbiP0AHOrQivLQ/AaANwIo91T+nVRVpw+LTP81Qz36OLMQ/sJWBQZ6c2r+RXHKsLL7Ev3pCiiGtDNE/r82QpiUE8r+a5ogubPKCv+D7tpFswOE/hkCXtwkIxb9nTKH5AFXcv2aymVFuCd6/mMr4cxt34b/FVM2oVw67v5oeq9XpV8U/Kq81KD1owr8fc9QxnEncvzGEF9CZ7uQ/FXosMpOO2b865ELXnPXfvwOgBV8FMMG/y+5EaI301j+U+HNVj3raP0pDJ83fQeQ/Wui0YrH82r+y2NKnXUbgv1f5LyMpAOG/mrNg88dl178K9sH5HQbFP6+ET7G+/9O/Nvb//Sc3zD8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDAwMTk0MTEycQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTQwMDE5NDExMnEBYS5kAAAAAAAAACMKI+lFebw/ZAqBqJKggz8ABo4PDXygvyQuL0KCxJk/k1V4P7VMsD+ARI5zVFrKP9EhddfK0m2/8FwIxZuqir8TkQWf/QCmvxeIkfaJlaG/10Zm4pijzz8oxgLOibtzv4FSezC2+rA/b1pm+G/7gD9efFM6XcPSv+CdsajUOKC/b973FVH3xT+voJLvm+nMv21YmuOuJMU/jUKHSeT3x79nYRMo6AWFv3HdtHd/ecS/Y6fefUGUmL/aJkUau2/DP65NBKf1i6g/MXpgjfLWzL82WisbkifDv/vTMSHxG7a/1O72OPZR0b+4T8tx4GWgP6m/DU7WgcS/8DsEFzelmD+dTs7FgQR4v1C4oC5/WbK/MqA92ANQk78calVIwZp2P32jC5ybfrm/0YzveEmRjr+/QXhXWMPKv55whdq/xmK/AqkrZFZvmj8UdKYfS9Oyv9VqWpyjZ9E/kSoskAQduj846vQ0H8y9P/nVVRkilYQ/cjcat4AUzb+zD4KMsyO7P+LaQ75FULo/p2Gevngiyr9z0gCwizW0v+PzwFMGmY0/jd55ujwWpD9LjDJ74CieP8SOhA1wHrK/NJDEAz3axr8jiaX8zXDEv5aXSFqKGIO/j5JBDYsClD9CzTuDYDKUvzqdOcbY08E/IPRL+qk9yD8x5JixG9liP/LZhEQypXC/Br+AzHwrPD+wGZmOFi5uP7Ph54iQy6G/jb8QD/kwvr/BvNGuZAG7v2dr2yh+iZU/hadGCP5lkr+dPNHlGHl6P5ggRDxJ2ag/ytxPHyb2s7+neZ9Wm1bRPwH5REHdBKY/NStt7of+p79Ky3Nz+W6wv2XUyNcC0aw/k6CYvtBHrz9gJFnsfgKyPzezgDQUvZ+/E03RMT1SuL+Whzm3PxWsvx15lMZl8Ka/I8oEE4VvoD9CucUv6EfBv1tUHjD148m/as1AlcfasL+y5ok6DEdOP7TaNlOdwKM/kHnM1fbHYj9fER3H3Oqxv0UCNqR3aLm/Z8u9cHkvwb+kuhm7iPy4P73UK1735qy//9Sczn8gwD+rx++LkgapP7HY/Y7juLy/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk3MTI1Mzc2cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5NzEyNTM3NnEBYS4CAAAAAAAAAATRVmKbcsg/LuWb0UUqmr8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    6,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        3.1655223313705965,
                        -2.1131357212098214,
                        -0.6111878494717452,
                        1.414777463286368,
                        -4.510547004122334,
                        0.6198897324718348
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    6
                ],
                "values": [
                    3.1655223313705965,
                    -2.1131357212098214,
                    -0.6111878494717452,
                    1.414777463286368,
                    -4.510547004122334,
                    0.6198897324718348
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 35
    }
}