{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "byteorder": "<",
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "shape": [
                        6,
                        6
                    ],
                    "values": "eJwBIAHf/lF+Ngy/J/A/DUsDU/I8tz+wd3JFXkuJPxEqrgev7Ya/xf/HWpSrl78711wczq50v7ph2tZ5cJu/YyrpQady7j/BBE51TDWgv1bZ43Kjm5y/90rAL63Uaj9YpEhguEqaP9et19hKwpA/9euq1GUOfD9Xis6p1/vsPyPZ17r0xGC/Qh456G5+az+WPgzo9jNTv9W3KvMl3pG/zpJXharIgT/Nr3z8XVabv3ghyEiN2e0/VyzWL3LFnL/O69YcK6WWP2bBgKwAzag/OeCvh2AEcT9bQhgY4bysP2Z2M6+HO56/Tm0dt06x7j/BREv2WaCpv8dPsd1YHLG/kMuxdFmSp78BozmlgEdovxE7pxpQ8mS/O2+xicjFcT+amUTmtUrvP8E3lpY="
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    6,
                    6
                ],
                "strides": [
                    8,
                    48
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.1349044895928428,
                    0.26570034269104664,
                    0.7099506435588966,
                    0.2820828350566021,
                    0.12674479346176717,
                    0.1761590770800199
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.05613980493407871,
                    0.007450165764815551
                ]
            },
            "V0": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    6,
                    6
                ],
                "values": "eJxrsJW/kndgr32DfDuv2fZ5+xteWERWuK3ff0B4NbtB0Kr9DL8TrS7f3rPf4aS3mc/FBXB1F5ySZs9av9v+wNNS7S9vlu9/cGM291nF5fsZbtxkmajebO+z4pjXBs0DCPOg6gr2X3znseW8fUPdbwdJkXX2DD/en1u7tdT+Q9Y7yZ6yLXB7YebB1Cl86Ni/6+5le4ZJbyofLm23ZziwoD+DMwXuPpi9MPNg6hpE9SbWbzpqr+C4yZLPZ4M9zB8w98HshZkHU/dmtSzjIdvL9gATo5JQ"
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            6
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            6,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk3NjY3MzYwcQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5NzY2NzM2MHEBYS4yAAAAAAAAAFK12hNC7dg/K/OhgGsRyj9mrqmSDGKwPyjd9iRm18C/JEBKpZK+4b8+8rq3hlPSP36q+sFPyNG/PtjqPoiR1r87OQ35iYvOP0mi2rvztuA/TkiJ6dWl2L+Nw0NjLIfUPwVtYF3K8to/iN88YgKfzb8OJIio48RlP1eo9wc3VNQ/YKabQ3BupL/KM+6kpubcP5zf47aIDrQ/5leclC0Bzz8sNX89FIPSP2m2SB/Dkso/NDOawPn42b9fyt1B923Kv/eintSMDsg/yijqcylm6b9mQK9wxpisvyPdtVUtDuI/aVch8au7xb9jr2494iLbv+g6e9uCuN2/dkaRubtA3L+F2aOSsCekv8xDnq+NDL0/v4Mq/thWyL97EkflkFbXvzAQoNKyaOI/kq7mbXk527+92vlRQzvhvyNFWnVo4MS/tfTDsEue1z9S6aXx85LSP9IcQRBOttw//BH5dJ/x1r/ouZw93z3gv+nFdRmH2d2/pzEKNW8yz7/jTVWA5O3IP2JkrGTf49K/1MURvcbWwT8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk2Mzg1NTA0cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5NjM4NTUwNHEBYS5kAAAAAAAAAIJuO/ZVBLc/O6sr/Gtco7+T7IztJiG3v5TSh3qQVro/EQFgZQJVvz8CpBeuSxfHP5wy+LnyT4E/dEI9aydXgT8U35cfi1OuvwVZGc7cbqO/Qf4Bchl7zD+6Rx9ln0Kzv55SO0Tvibg/v5FgzA0npj/AyxYCa6nPv3Db18xMP5K/W7JAsLfWwj/luqSxTJq7v59vqYqLXMI/6+Wf8Ajlwb+D+uZ4d1aiv28qNRfYccG/c982avZHaj/7jBuZOqrCPzGhoBx2la0/1UVxUi5Ryb9LkNrAQwDCv1hxcC63L7C/FS/uYB1lz79GnOMpnc6UP+nKd3kAc8W/v+DXH411pz+irmiX4NWivxFbbWwqAMG/zWSepkMep79mx4Pw3VSWvzgQdvPEPbm/isituLwLeD9y/pBHo4vJv/05SfV1R5S/CjvtyvcntD/EqcSC72K8v/ANAP6ucc8/oI/g2llQvD84INEGPyHFP4y5VXpALIm/2Sx6tp0Oyr+vup+JSYy0Py/4jEp4w7Q/SY73uSVhx7+ceWuMbNC7v9AsphAH9KQ/yFwoU91PoT+1MEjQ7sqev+Jc8VsaEKK/9ZnGdkD/wr82s21PaaK8v/6P0tDqUZa/cEwe0KkxlD8XljDtnCOgvwhsNviIR8A/JlsDlhSTwT94RYxLvFuiP5VIm3vYrpS/TZa9CkfTqr/0xumYSD6Qv9SllhQb4Ki/1J7pZMD+tL8a7dQW0aG6v5qu4FiVwKE/SJTU9DFntr8mK+zRxBScv2nw3No5G70/XfXMELHYqL9cLfO1Kh/KP3Cjm45E0p0/4dQUHYZepb/nzAL40C6yv/QSvDrs8LE/uTo+WiVLrD/m349OidGlP87hHfRRcDi/+axNG0auu78KQ2SNg9iwv8UAvlf9+Zu/AilpM/pYjD9hpl+tVhC9vx9EACfF28m/Igk0+nZ3oL82HRl3l6Z4Pw6B++TdDK8/jQtXQnhknb95pQA788Klv0vAtySIJba/kpKkX/NotL940Op2Aei6P4gQ1NVt+LG/ZrvnyI4zvT++cJ0HnL+iP26ahqr6nLe/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk1NTA5MTIwcQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5NTUwOTEyMHEBYS4CAAAAAAAAACF4v97R7MQ/oUQsmLnlh78="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    6,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        2.470896329881659,
                        -1.2412008761675841,
                        -1.7767487231860153,
                        1.5152512307460801,
                        -3.619541649027811,
                        0.67239024588302
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    6
                ],
                "values": [
                    2.470896329881659,
                    -1.2412008761675841,
                    -1.7767487231860153,
                    1.5152512307460801,
                    -3.619541649027811,
                    0.67239024588302
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 25
    }
}