{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9999387029015644,
                            0.00599144461887943
                        ],
                        [
                            -0.004742661134092136,
                            0.9912601390859378
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2,
                    2
                ],
                "strides": [
                    8,
                    16
                ],
                "values": [
                    [
                        0.9999387029015644,
                        -0.004742661134092136
                    ],
                    [
                        0.00599144461887943,
                        0.9912601390859378
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.10144835832390876,
                    0.08780929332587875
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.020551161333683923,
                    0.034366539237781636
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.008479535754554735,
                        -0.0015413583793879582
                    ],
                    [
                        -0.0015413583793879582,
                        0.06486664504723194
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcwODQwMjg4cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM3MDg0MDI4OHEBYS5kAAAAAAAAAH8T3UKgKee/A3o9Zol3279Z0Fh6Z/rUvw0tYP8PZOi/kvLsI3AQvL/a0UkD+7fbv0cVG3fuXec/C+5mXTpi2z+KDEi9Vm/fvxR0lIO5UNW/cO542raw4L/UPkWFpE3KP5hg87cPdtQ/eWlpoXRT4T+Q44Yfa166v9ZzvSW0AHa/D5MZHASE77/jXB4EnmXgP0IevtVmLbw/ILmlLQRpnT/8iQw5fdnQvy18Di5Xab8/oaXSBeMLx78KMtcEpFvEv3lvrComcOG/KPue298557+NBaktl8/hP3ORIdj5JOW/RePv38pJ2L8bpn5MRzzXv/xGP64ZqNW/seP/errPyb9Y2liBYFLxv3ECHgqAjNE/S6l87u1DpT9fRgGy0lPmP/RfCkHun8Y/pUm8dlg477/aPJMXNXC8v9btN10mKdC/mJZHJaXT6j9AsXPqpd/qv5IPnheIy8a/ewvOSQ1vv7/cM8bngGvbP65XmXTwpOo/HRI2lNxhxr8UyDSHg5Div5AGdd/Bm8E/q5sdPzsrgj+H3jvIAcbAPxXa60/PSbS/yRGvs3B30r8xfVXo9ly1Pwpri7rLY8s/gMM04PZv1z+u4NgV87LDv/abj4987pm/aCEy8XskuT/Yhr7Gl/rXv10u7AJHlN6/MKTyOpMP5D/GT5K8zTG/v2BU9vV3L9k/Lt9DLqQexb/DWl33es3Ev2i6QP+HXbq/cZg8s8pJ6T8UnMmBT2nRP6V5zS1kKea//XZQ9yI2yz+yoxATAi/zPyioNTdX/6y/FPuA3aBM5r9v9kAURhHJP6Qd2j/jTOq/8t8mkhXByz9+qWyPPwriP4alkh41stm/XdC6AsFRuT/92/19JBa2P0g/Oi0QC6G/H9q2rGSh0j92UuGERubmv2vdXUun9+A/v54MAuEe4T8bDI1tBL3Ev8QgH/itPOk/0q8kCXdW6L/Dg19q5SPTvzvJEMsC7ug/ZW9lYdQrpb9fk/8CDh3Vv0hemvHAxNo/XtU+fE9E8D8JMvFXYcXlv4rYmSI7eLs/E9vkELUC4D/HZxBJOKfbv+SoFHuqK94/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcwMzUwODgwcQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM3MDM1MDg4MHEBYS4yAAAAAAAAANNHsr3cmem/eNNAnQYpuz/JLgEKRYzrPxzXxxEIU7a/e5U+Tkum0T8uIu75tjnmP7tW+5iwPOG/+HXmuYmX0r/RFDr0K5XzP6azOIxdn9I/lSSSR/Zg57+Vp1C/cWHcvwIvONhP2s+/X6brDzMC8L+dbq3lO5vQv5XUjefhZt4/2L8Rl9du+j+3STMcOa3svzG6YzH+1PA/5aZAVidbyT/l1uuQ2Wncv5exORIwQN2/71Xv4S7R4b+89d47ewnQP4BzkKzVV+M/JkRaCx9YzT8NIhCCWcTsv6itMVEo9No/g29YCEwb67/8EZ5HfNLov5ulh7S/GeU/DQcRm8o/6D9nTzgYs9ayP0+Yz7mZmMu/YfGMSN6g6b9CFUMDmqXUP95/LgQoCss/r9hJ6TAq2z/x/G5GWobGv5HnyXL5KfC/xLzMEBJC0b8mweazHK/IP4kf1xF0oOS/kjEKJsyOzb+ZRYZ/VELlv5/Zn4bU+d2/OocQiM1Qpj8uPHTd7ALzvzKKZeWdXuK/CCzfHDK8vL8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcwMzYxNjk2cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM3MDM2MTY5NnEBYS5kAAAAAAAAAED70gm2eW6/nqR6YHOjrD/l+kF1xELDP7cg7WQ6JrK/pLIiDb0Fvz+Vl6V4+HzPP5GcsMNqqLm/ZnJE1sGGuT+LbWYF2JXPP8sezWIlL8K/90h6lyU6mr+tNznoTFHTP4WjzmEqC7Y/2Dg305feyL8smpf5tf3BP7WzJZgNkc0/9IMFbzDo1D9nI3z+96KuP+0v51xePrq/56ZhgGjwoT+Uj9aVZWC5v3JZ0C/K2s4/7TF+TIgcnb/G8TD30IyzP/y24B/9YMC/hCtY5DQ2hD91txkoxCWmv6K+jgcO58O/ZvirGgGUlz9/I7Q1L+avvzgDfbzX2b0/tK8CqGTwsj+ykQfPeTbTP8P0X+pOYLk/Lz+xbvVdwL/GqtKiq/WNvyB6RpWV/II/Czkvdxr4yL9xO10qsQWxvyPxxUifvKa/TKpiOp6Wu79/TnfqILy9v3MRbZ8Jhse/nol4dUU8tT/cKceoF4d8v6K3vgq9mtC/6/9tZyZjvz8L/2DrCYfQvyPY+mPD35K/+ck418FnlD800HTqQ960P8MvTMT9Maa/3G1v5M3N0b+TqIk/Jnp5v9XzC4U+Urc/lk8F8/f8xT8JWgj8/Ry1P4aLPSkdL8Y/D95LbkXynz+pC1LshL3Hv5wF8kY4hMA/zNpP0bCCdb8YE7T93XCmv3WKNQ3+AZg/DZekNlszl795FUq+qyu5P5rDMnG1saY/bAHSi5rbyz9gaz4EzlhmPzstLPfF5Y6/JAALrtY5sz87N5gsy/vCP8cjv0x6N78/Mg2XYVyutL+XojoaRBLYv1n6cPtuXK+/++zGILuG0T+1YcrCF8Ssv6KlElqzRdE/8AQ9S4rWyz+3uxBj3UmNv+xkTgm9F82/IgDMw9aaub8v0AYrUG2pPynenY7Wa9U/12NK0Le0oj/ls+0hdB+lv8rIMwzUass/pnI5H1sjxD/ySz2V5U28P5YNLK72PMm/dB0MaWF0uD9h+j4DJfXBP3gYXK06z8u/6KdOLlkQlz8EBxBqZba7v9L/v9zv47U/Znh8SuSRdr8A212HKq3EP+OvI6j3opS/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcxODU3MzEycQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM3MTg1NzMxMnEBYS4CAAAAAAAAAPtQzfYHTrE/3V9QArCpvj8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    2,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        0.9990464354464269,
                        8.71073701327344
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2
                ],
                "values": [
                    0.9990464354464269,
                    8.71073701327344
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 25
    }
}