{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9367272909114539,
                            0.029258522647613503
                        ],
                        [
                            -0.058128993782829326,
                            1.0170093505458182
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2,
                    2
                ],
                "strides": [
                    8,
                    16
                ],
                "values": [
                    [
                        0.9367272909114539,
                        -0.058128993782829326
                    ],
                    [
                        0.029258522647613503,
                        1.0170093505458182
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.0032494277159472434,
                    0.005701436015119989
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.004917968459129042,
                    0.04294260932781492
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.0012688775143755437,
                        0.0002866328308943622
                    ],
                    [
                        0.0002866328308943622,
                        0.003503616729368275
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzY5MDMyMzUycQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM2OTAzMjM1MnEBYS5kAAAAAAAAAFEDxlrhzei/wKVFczqP1b9wKQWotRnavxfGX90vFue/Tt/+59FqnD9vToI2kzHcv6z4yvY1seU/TrLVkqDE4T/YLiG9IpvavxTcwWCywty/AjQQ+ROd4r+2fopSBbHFPyHU2kymA8w/DlLyzlDi3z+dTwvXIx7Qvz1LbgkKv7W/aCPKd66t778Eku0vL4TTP9gsVKYbusI/84FKXlbTsz8DWpGptNDav4aKy1KV8Ia/nalYvAr41L+UotE+YMTDv9oormf7YuC/ApVxKgrw57+Vr8Xs6KXeP+glDzXNteG/ZMuVihfL2r9TjXasdFnVvxgLx6hRi9K/Q7h63pBH2L+ZE081IEfyv3EIB4k8ZcE/9uqXVZssZL85+vGRWJTsPztpL8DXbco/yYuWFCGF67/JEN9wixq5Pzt5IsUNSZ8/B1OIRzkA8D/vWkGY60Dzv9CZUl9h9tC/c6LsRDSJvL/FfwEFKfHVPwSSnQ8E6+0/ZToNyLVvvr9BBHtkGsTZvwK2XNf+FtY/3+Ow/2Gvuz/cWEbNW97JP5SWUlUtk7Y/yrCVzfkH278mrFUaJa2qP5+XePZzP9s/4JWeVbtv0D+9i0RVZE7ev7jMcXLThsK/kPcJEOYQuz8Cctdf8M/nv1tnpAlf8+O/ByMuYgUL7T8S7MwM8ZPQv+Vi07gcyOg/GGnCQZqVkb/Wpg4xpKzSv+OEB26k+b6/4QBs/kiQ4j+Ks2oMffHgP5vX8xAXg/G/TOOYfvAR2D9Q7O5xJ7HrPwixe3TFVrI/x2FMCoT+rj8eLQdvlPTdP5oS98/RgOy/Ud65Na1byz8Q+RbFjO7iPxg0v6Wqid6/7SpYLnAyqz8VoXFaWJrLP7WyKITl4ra/LygT/4o21j8mXFv7FMHgvwM1F0B2e9Y/xxtCMBw55T/hA1DUQAbdv5V1Kgid4vA/BK6dqn1A5L/fWyaoP9jPv9bm0gbWdeo/3iyaxoaxs78QFMHCfz3UvziO8s3vF9I/fxIgMGy37j+iTjR0YOPgvxRNgqVNybO/ntB7sjBm2z/9P6d7TyjIvxwqHZI1Fb6/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzY4OTkxMTM2cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM2ODk5MTEzNnEBYS4yAAAAAAAAAHE/3IfBce2/FT15HU3izj8yF78s+intP5Y85XIWVH4/pepVFMQ20D8o9OUyjrXnP0AbxQPdyuS/bKVsSorJx78nD5Qfq3f0P3Utsruwbs8/dEd4XLSd57+H7+GsM+jTv6n8MtU7sM+/DBL222it8L9arql5hdLCvzwxAqbRFdw/unqGBggv/D+6kXHGhF71v5IiNeEfpfA/HXSoJkB8vT/n7vogieXnv/RR+OZGddW/2jl+xCH1579QnC6Z1n7YP9nXiBB88Ns/Pun39PqGxD+Ek1C9hg/qv6CCiopgp9E/jyCa/xro5L+o92+XGh7wvxn/Auu5CO4/cjbXDIYC8T9VFen2BOmlP8O+gnsmJ9C//QNAwES4879vsYX7JUvDv4dDo2/Dlsg/FTB3r8R3wT8E/x+QXenXv6Pb6uMrtu+/0Ji2m6wf0r/ACzCnpk6zP0vZIZRwA+K/+O89xQ4r0D8jNp8GMb3tvybcQGZfsOS//F6+4YcUib9dNAkFg7HzvzlzmWYU6+S/lKztCyrp0L8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzY4NzI3ODQwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM2ODcyNzg0MHEBYS5kAAAAAAAAADe6jc5aJs8/N/g/vtMIqD90bN8PXkTVP0tseuqgtdS/kWRYTftfwz8KkK0S6nzWP1yQ0+yie92/Nj7uRiPHnz/h2fhEC7/WP8sjY9kKQGy/tCn5cD5At7+9v3/4jrjEPyg/zLQynL0/vlZhx3dHzr+TfEw46AzVP+W3ZUo8474/V2LmZ1sC3D/9QZVUl4qfP4qDeUu1Or6/MjtUjKvQi79fstGyD4C4v0zIfSYblYs/KURoK302u7/vpZFqUTK0P383buR1WYq/PbQCpg3WXz+KzSSDFyi+vzYQsfVqAc6/+DR5CEp2oT++K38sFnO3v+ygnqngMcA/hYyPmqWYuT9uxj/lasbNP86paveMRLk/UNwo5GIEw7/ljNaoxRJRP2VahrrQ8Z0/9VagkNwbyL9nFyHW2yq7vyK8W5BfOr6/PoUvtSa7wb/V9Ir/jkbCvx+qb0zqFdm/EH5t+5MLtD+61kcD0sa+P/QeLo3Oede/YoS+3lOVsj94upbwqHjXv4SZwBIsLKe/dH4rcEwlaD+fBl3cF4rWP+4KlYtk9KW/xCk7EL9e07+jYaXNjkO1v+08WSN7t7o/aQiKR9dK1j9pt/Wo1JfCP4piRLZw26A/f+CaYKkZyT81wivdmRueP2cTqBi3U8M/H+BiU2h1o7+tV2jaddRjP3ylpNT+e7I/evB+L1Z1ij/qOdpjjoHHP87YoL7Y3s0/1THUfGwI0D+gGuR5+Gqpv21RrrJC3Zi/yHh4Qusvwj+8E2Yu9JR0v8OQRS3ikb0/hlsk1GZbtr+2pT/5wVqjP9XToUp/NnA/N9uPJ+aF0D/GViZy7EWDv5YSM/Xg3qg/E3+VzLMQ2T9GvbyaipPQv3Sq2pCyItq/cJBMjzRRwL+mFrQDdvuyP1B3khnTLt0/RazSfIx0sj86nH3JumCgP/IGastiv8c/dzhD7sNEwT/UBm/td7TFP3R8U2J17dW/rvpcBUhPtT/A8vFIh0HEP25TlAwZ88i/hMoI3JN10j/SSsUacqLSv4qGBrClgJ4/8XKOUgQUvr+ETB+XklbCP10vtN7Ms5S/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzY5MjM1MjMycQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM2OTIzNTIzMnEBYS4CAAAAAAAAAD915kWB78Y//JY41yXZ0z8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    2,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.8179438236852791,
                        6.5319066811339495
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2
                ],
                "values": [
                    -0.8179438236852791,
                    6.5319066811339495
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 65
    }
}