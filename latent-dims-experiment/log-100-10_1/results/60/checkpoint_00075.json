{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9333372789696313,
                            0.03386166500062965
                        ],
                        [
                            -0.06595797373498367,
                            1.0245530554157893
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2,
                    2
                ],
                "strides": [
                    8,
                    16
                ],
                "values": [
                    [
                        0.9333372789696313,
                        -0.06595797373498367
                    ],
                    [
                        0.03386166500062965,
                        1.0245530554157893
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.002240091504389709,
                    0.005371722752273515
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.05530038890716969,
                    0.011727681827858077
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.0008999997727480169,
                        1.9183615719953195e-05
                    ],
                    [
                        1.9183615719953195e-05,
                        0.0019457214836506864
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcxNDc0MDgwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM3MTQ3NDA4MHEBYS5kAAAAAAAAANsmSb6pYee/oy7A7Joh2b9DV9x3W7fYvx0CGxnmC+m/aEiAIZdywD/ZdkVqQIvbv28YAF1HNuM/jcbLI1y14z9JZNf/Ec7Wv/ZltlsIVd6/hqlfUHdK4b9gMu8YTMzHP1pZDVRBJME/gCFLYQVW3z+1Qoz/TzLMv+X0d3bNCbS/er3tS58A6780FsiN0tTPPz69GV4CTcI/iNPMQRoAlj+YyZ5WF5jYv7PJWTWgMLG/yYM41Lm00L/LMye0PyLBv0qZggOTNdy/eZSJr5VW6r9Ll5UbV9TWP0WApfHNSuG/dpo+IMIl1b/yuHd6Wf3Yv3wle9nNmNC/wD3WTNHS278cFeh5h57xv8bu4grKcsE/f2Nud2xwk79AOYGBoB3tP8EjgbkNmrc/2F1AWYML6b+jF5gwP3a1Pwj6nX7jRZc/Ap+p0lMC8D9p5/CP/4fzv0ojLWdbYMy/9xaDy6zOtL8la9fj98DRP9f/GlIqO/A/hVZCjw3zq781Ccs6qRDYv3UUD24FrdM/TCY9heGKtj84L8hKh1PDP0id2Wz3KLw/l9GkqqS92b+37doNDtqRPwpln+lEcNY/Qj0lfmQp0j/Gch+1xprbv7rvh5BqwcO/C4GNlhMBsz8ColS8RzbrvzV96K+wVuS/Fd1D4sK47j/BMUByeKDTv5iU0b36uew/gcu7WSPrtT9N4/fjA+DQvzy2I64Qa3S/VyvFgllT4T/7bBNHcA3kP8mgeiCdmvO/HutZDjTk2D8T9xul4mnrP34H2QvCdLk/BZWfr+ZegD8fRK/b4NjWP64C0zyUTuy/P0YFHBSowj82duUCEjLlP033XtbqPd2/JtwSFUFzpT+PtALfwPbAP+P/dkr+14s/RC+UcjpizD9DJ4Zxk0vgvzIqdJC5aM4/nitrKoBv5j/jzi6h0sHev5mGy2uE//E/VXoQr0xo5b/WolNu4BnQv/DFcyoveOo/4eVwzKe3ur/hPDxWI+zJv32ULAxRMNI/L3mWuWKj6T9PvdKmDcHbv64aEnHI17W/KVJ5nesO1z8ftb8vIjLJv1WRO+gCVKu/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcwODEzMjgwcQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM3MDgxMzI4MHEBYS4yAAAAAAAAAMf8m0okHe+/mQCtm++nyD9t+jgG9rPsPytluiPY6rI/jE9kYxMMyj8naQGgJHvjP0VRiWz/lOO/eyf0NpWByr8xKjyOn5LxP35rOvUOg8w/8Ip0Vywo6b+wYKtPOS3Sv0i7Vpp8d9W/yBJ/kwhR7b/rBV9d8DHKv4iAA0vNX9k/bcMiM2X2+j8kdMsXUPj2v5JLArnT2PI/Dl19AeTFuj/shbGhHWTov1sDOfBiytO/rlAeMmsT5b9d/FTsT0fWPzRDPJyvp9s/j3Z77QhFyj+e6T1IB+3rv/EvGEIyptU/4PY7zMcl5b+yQGoDwXbxvxi73JjQMPA/WfIxyBxK8z+nt1a+os2bPwhxlZwUEtm/TrkPABwc9r/H3mpb553Vv4n9nr2nrMI/allEXl0+wz8WsoWwywHTv+avYFBNbfC/Jar5M0lPx7/dP7NR2SvCP7NZcSO/Cd2/6pwXVzOD0z9nl3FLdu/sv0WEy+iuEOO/2ZTgk8ZPu7/9i7sQ7Z3wv/CCve5+fea/AOU20gB1yL8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcxMzY0MTI4cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM3MTM2NDEyOHEBYS5kAAAAAAAAAGdYTUB0JtI/vMlTmAE2pz9H3jPLNk/UPzxw8iqyWeC/9yNnPat70T+RQ6AuckbYP0cN3AC6rOG/wpkZ3TNujz8dm76JJIzYP9N3MYw4t5m/1xzvkkfVlj+bz5Bu90CyPwJrkFSgu7k/fUQiDYbs0L/0WyhJOOXXPxSR4ZIDucI/wxTYEuzO3T9ZYVXgYhafP4FS4J/8eb6/LW0TBnxrir/XmaRu2a+/v+NIaQaum5s/ngZ2pQJsub+bijKx1wywP/fBISx7Qoa/U08BuVlBpL9zNzapg5hqPwcmUeUz2dG/zNzrX6/hsD/T8g8aVYO+vwaWMz0YycM/QH7WCiBgwD/AzPeOprnJP0oX1WBkh7s/ulxrC+Cbxr/92kGhA6tqPxARUtpHFoU/IfSvgCGXy79vMyfK2XW3v+MyMBngqHw/2Z648WYTwr/3VLRjk1PFv4WPIyxLUNq//0PXISMwuz98T1knYiXEPxV1heocTNm/6hQBG2Kitz+JOQ5TKkXZvwf4EMZi55+/UAfQu8SAmD+JIOIajrTaPxJYxfqbiLC/wXbtoghA1b+Nh/zI5Gq8v+ZixqhooME/FkcDjyKq1j/5Uw+6zTvEP4e2CAFrkIi/YuOCM4C1yT9f6lDJ3Uqav8VnUjCatJY/sB75rs3Guz/TuC0UDauKvw8LlsvRLbE/2Me282SOnz9OZi8yO3vFP/xaj9cBdc4/tKHBX3uT0T+xr8lbpv61v9IGklN12IG/rOz7EGeZwT8j0bNWGlKsP0n/R49xccI/1fEjL8dluL8bT3Rh0z+Bvwzjz6cFGZK/E04mAUAKvD9i5HPlcHmxv5jw2+Szz6U/qcA3oRK52D+tB8Tgk0bQvztl6Oyj0tm/CgY2+GpTwb/EJpxRwgK4PzPbOIrF49w/OW7Vci5DtT+vqekSin5/vzbuNLr/zsY/sLP0aFZewz+sr4H3o9CoP87NliPq5NW/TcMDcwBmsj+FCorl3ybJP9LIzciJRsi/7KhSSVCf1T8ijmu39f3Sv8l+l4CN46U/QnOco75Iv78elxnbH67AP6ZJp1Cv4Vk/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcwOTM1NDU2cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM3MDkzNTQ1NnEBYS4CAAAAAAAAAGtz8IBbh8o/vY0vagsj1D8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    2,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.880510077090772,
                        5.405048719051018
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2
                ],
                "values": [
                    -0.880510077090772,
                    5.405048719051018
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 75
    }
}