{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9520664272190971,
                            0.026261248918266613
                        ],
                        [
                            -0.05042501282582504,
                            1.0163276438044493
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2,
                    2
                ],
                "strides": [
                    8,
                    16
                ],
                "values": [
                    [
                        0.9520664272190971,
                        -0.05042501282582504
                    ],
                    [
                        0.026261248918266613,
                        1.0163276438044493
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.003665036803737961,
                    0.004339321856136366
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.008025970302200222,
                    0.022419146635585262
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.0005320510838860981,
                        5.1480144106719194e-05
                    ],
                    [
                        5.1480144106719194e-05,
                        0.001291139542576758
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcxNzk3MTUycQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM3MTc5NzE1MnEBYS5kAAAAAAAAAMZle9akquy/i1EUw1Ib1L9uGVvLkmnWvwRjaz5fdee/kwRuUQo1wj8XaK+C4a3Zv1B9qkLhcuM/lPcxLr/z4j+u1CagWXPVv407Z7Shpd2/fcnpKrGS37/lFZ5ZrSTBP+rosymJB70/Gho0cApb4T/qB7Wv3GfMv6qqyH2B0b6/kZopYHnD6b91mYXqnRbLP3eyyDUPE8Q/fzFShgmFpD+nMGLCC+fcv1+8aqzgxqO/NMEPzxTd0b8GL4h0Qa7Bv31y7cO24eK/h8pbOTuu4r9+xd86CzPPPwUiigHWIeG/ognHq7fi17/ch3WqMuvUvwlVc5fHINm/uGZYbQIg2b9UjI8skCfxv2tFh9N9QLY/jZ5mCKAws78YaQu+FxnsP7beR+1P7ag/N6cHBfR56L+FMbuYlTOxPwgepDiNIrw/krKV/Ac98j8/R9NiRWD1v4MZuqkx4tG/QGJPLQAqwb/eTqf5BP7NP4GiC0v2D+8/ZWMaIwFsnL9Kc2Ew8IHVv8ep7Hh/mNc/p12Bl8XZwj/dr5caubzGP/tMI2cC47I/qwA56zAs278EjOsatpZZvySZWrted9s/GWp+FiNdzT+P/Nh8D37evyj1FYCM88G/1Wek6iU/vD/VB2Hu607uvxiud/RlIOi/RYSL3Ike8T+O36s8cnnZv9bjHPnpHPA/HY0Xn2Gkvj/8ApeRo8bQv1zHAKiUD52/ydkX3LXQ4T+U+GqdKSPpP7vIjZTI6fW/6pnkHOkM2D9dzVkJjgrsP5Xmg2TIn6s/YrdOvkjtXj/EkZxenJjWP2PQ2heMtu6/uGbeyXPwqj+9EwkdMfTkPwSAAjbPyN2/+Fqgu/h4tj9+G75DxQnMP3K01RtttbA/Id5mjgEnwT9QLyrhxPzcv+YAwDWaaMo/ISlybQcS5z9mLa40Sjfjv1EB3/T1uvM/5Brpggzn6b94ORsGcwTSv1zBFHB+BOk/4AHz3mFLrb9wN/7Qhs/Fv7Lv4MwDjcE/6mgTR1II5z8nvy32KITXv91lybV+J8G/R0ANrt760z9Jkl7WKfPEv+VLTyuonb6/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcwODAyMTQ0cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM3MDgwMjE0NHEBYS4yAAAAAAAAABeoYjGex+2/33kBJX3S0z+UESH7X5LtPxZnRPrBias/DIT20wdMyD/9U+2DdbTiP1kc6BUL2+K/wLD+xXXNyb/swj5Mqp/wPxX8a9dhP8U/7mFTNoTt5r8tR9kk+KLRv66QaF5PXcW/V7F5vWUc7L8NGGHqXaDBv9LdW2btuto/fddv98Ec+j96AJ8vawn4vzx8LSsmIPM/07UCCfu7tT9rpgtbRRDuv5tqbg6cMtK/XPXPf7wS6L9FCtNsw2HaP7DxjaoBT9k/3bA3ovPqxj+u5sDQiXzqv+yOwX4GPdM/Gu8zGriU478J4ZuwBTzzv12mdq7oo/I/HLz5BYZ+9T/jfGZcI4ysP30ivSNQe96/TN5QY7RK+b/UOCp60J7bv0Qj0TrK4rY/c7106a+tsD/DOguFHTrYv+imXrwnz+6/k6vQzsW+wb/pdT5hxdLHP1G61PeSsN2/dtjYUkd13T8iAIHOp5/tvwbTeIYNM+K/QvUlSLKlzr88nociSODtv5W6cWSLuOe/SFOV3pkWx78="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcwODQwODAwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM3MDg0MDgwMHEBYS5kAAAAAAAAAP/8bR/Vx9I/QhINY8Wasj+qh5vaal/SP9uPjpU579i/5sPBlbYusD/h8FzrW3HXP1q53tBlA+C/B//mGWatlb+Kh14zaK7XP9D4C9otvHe/rqhlCKdVgD99uaxSSfiHP7BtMLi4YLs/QFmNkVEt0L8f4UkcIgLTP9OOmW6oHsw/S5jNHdHr3D/TxoMOOAObP7Blk0Ko27a/1L43DKLbob+0TLYz2/a4v4oKIyN0iYO/hbi/vE3pvL94RDG6oCSwPxn+fRTT2oU/7xGJU3jdhz9NyWqNUoKaP3sU8rSYU8K/bQqgG8VRbT/Tpt6IPTq6v/V1NHbDUsM/p+NjAEQXvT82Bi4JNXjLP+AFrvMvLrU/TR7R3wg7xb+aX78zXqaZv9o4EM6gcZK/0a0dv2B0yL98VSyJK+S7v75kYdZpfmI/3pmgBLLPwL/6ez+7NerBvzYCnqq8vdq/ky8EoctatD9kfak6XejLP0uDuMgXe9i/l9Ha86Q3rz9c+F/m72HYv/A6X9teJqa/Ssc99iqAj7/XMZfBX8rVP+pW0kEBQa2/vRhY3BWQ0b/mOVNy/uijvzY6wXNB56m/93plQx961j+coUKKNevCPxoJAx7etcI/40L9VbS0yT/Fwy1g+zygP/ANOy3kcnW/APDUCLTEsT9ojKN5NGR7v3aG+wL6ebA/pbEFegjakz/vbfYhcDPFP9KGT8OliM4/FcN6GCQW0T9KQakQbVC4vwgseKRi1X6/qFEBE2n8wj9gg9OWxjugPy/NXBRCtcE/x1kWzS9Npr+hib32XJq2v/YgmNu2+66/uTMKbRYKeD9S3wQWbz6mvzm9gBma77Y/qMT2zitQ2T9y383zaOjQv8ptvTnIKdu/IuKlXjExwL97Y50g01G8PynF0NZnfN4/DVlZ0Mt1tD+0gq0j7L6aPzFGqF3Pycc/nOpvU09xwT9YR1POKLScP1UfLc84e9m/q3xUvIFUoj/SP9bRz1LIP2WIlekhhsm/wljVjqNFwT+8ILfgjerSv5xhj1t/QKY/x8shzcUjv7/RR7/RlWS1P1lgvTjN75C/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzY5NDg0NjQwcQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM2OTQ4NDY0MHEBYS4CAAAAAAAAABbzjZxuu8g/Qm29atAu1D8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    2,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.42184625726631453,
                        4.717134155705009
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2
                ],
                "values": [
                    -0.42184625726631453,
                    4.717134155705009
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 90
    }
}