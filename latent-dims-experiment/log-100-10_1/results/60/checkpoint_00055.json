{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9510250553117702,
                            0.015957104138588397
                        ],
                        [
                            -0.043662211000523005,
                            1.0028190513079651
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2,
                    2
                ],
                "strides": [
                    8,
                    16
                ],
                "values": [
                    [
                        0.9510250553117702,
                        -0.043662211000523005
                    ],
                    [
                        0.015957104138588397,
                        1.0028190513079651
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.004666573268425969,
                    0.00924598295820536
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.017928168609547355,
                    0.053614043565328985
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.0017512676273383487,
                        0.0004873795147579685
                    ],
                    [
                        0.0004873795147579685,
                        0.0064902854261461584
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzY4NjkzMzQ0cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM2ODY5MzM0NHEBYS5kAAAAAAAAAIPPawSPcei/k5JBKAKQ1L85vzQc4HvYv1UYCmFV5+a/4DvfyPQipr88QuWBPiXev1rHYB5ryeU/isUzOjBD4j/DgpwOATbbv3T4jjVWjdq/caX2BFpI5L93fWPLaIvDP6bSe+esvtA/vpWEwXRH4D8hgT995VDQvxuVmMlPcLa/iLKRi5VS8b+w+S6QkbTZP/Da9hsXh8k/tSQIvbZUrT8DFTdHOnLdv1tTLHo5+a4/S2X2Bq+E07/a1EDC5oXEvy5sijn8veG/lvyt21JN5r/7ER6kER3hP+86qlQ/jeK/Z7+LIuvX27/KDDYskTrWvzDDwLnl4dS/azEk8xlF1b9R1fiE6SDzv6kTmd4PCcM/eIyhhQMBpb9Hphlp+FbuP/eFja6BxtE/E/Y0ik0m77+HvLwNANmmP2DU+ZneGa4/ei6hMG5i7D9TgR1MW6Pxv8lhWmuV2dG/tPkxYjxew7/7T3CD3f/XPyqKFtVAi+w/TtcRYCgiw796NBnrczPdv8ky76ghQ9g/8uw92jAtwj9vE0a+g+jLP9lnxGGoCbw//OW0EM2z3L/fG1lMoUS5PyNeXV/s9Nk/Pp31II3v0D+iwk9pOW7evzWKzIxAl7y/t6RzmzJqvT8IhKYa1nrlvzdzCPR4QOK/xlB8WFNU6j9RI8ZmE+TJv7SIl32HOeY/7fhQ01gBtL+SGsyemCHUv6HL5lsV6cm/rCORn4Jl5j8UsNqlHJTbPyxtWt+21O6/R7Apa+HPyj/+djCqxznwP3wBlT46vMM/NyvZ4oEMcr+51j7uZ87dP9XSsL79u+u/zqaxtbx2zz984LLWjuzhPwb2DHp1c+C/Q6vGFvFAvD8YrdqjxevMP1hVI29RFru/v0rytyM02z+a87PYP/ngv2YPnAVk0do/i7JR3Psd5j8DXAyskYPav5//Gbwm++4/JRhdNElp5L+9dochWHvNv1utDAE3AOo/3IM4WvUPs7+Kk9uS2Lrav0tzUexUBdM/ip98QUxt8D/pcpRJHxLkv069MFq0Taa/8EHErDll3D9mnhlHPKzXv2HeSXNhjYY/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcwODE1NjQ4cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM3MDgxNTY0OHEBYS4yAAAAAAAAANnWGsHZyO2/CLM8n2o4zT8aeC/HjajuP3o39KQx5Us/3UanrCwd0T+w05flZSPrP28+SNVWjOS/ZLy98Fjmx782NN8Xiub1P6DygGmK28k/7NzRIAW05L/oeiK+m/fUv0J3YdQEw8i/W83HSlPO8L+3b3IbRhvFvwWC8pfAYt0/lYnZizCl/T9dmR+a+/nyv9o7gXmEcO4/32KzDtg3wz9DB47QmPjiv4+mvU18Ida/yrt56hl26b/JONIw4LXYP+xDqHHrfNw/a7Yp+evEwz/waSrcXsjnv6QTwEJ3pNI/GroJVEfN5L8+4XDU0pftv96H0sK6D+o/dZe6T+nS7T+LaYbSD1+4PxU6QSj25sO/viiXmij/8L/BU5n9kDSuP2EZY1s8q7w/ajJTFtApxT9FB+Kde7XZvye61KMmuu2/Fq0+6hWL07+HHu7f8qKmP7kTq5Lp4OO/TXkRhnCHwj+NB4xGYIXtvxxkOLeiYeW/zsoDlfEXtT+vtavpC7L0v//doah3jeW/opQGGIz0ub8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcwMjc5MjY0cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM3MDI3OTI2NHEBYS5kAAAAAAAAAAeqBcoUKb8/p6P9JNB9sT+D7iRUux/QP6OtP82wq8K/hrJMA0uUtj+DRpkN6V3WP86Dwh1qGdG/5cBVmOncgj/2Q2kExZbWP/l3jqVU1JI/Gu7hvLofxL8xz/NQmzPNPzf38ErJBcA/shA5sjYAzr/ZzTZxLV7QPxRwMf1eXsc/lFLaZJDZ2z+e9EIfvQ+TP1XImBaazLe/dyfDtCmVeL9ME/DBa+K3v55BvJ/rHZo/OqX0qRLYwL+Au1ljfe+5P5NkkmhN+7K/cThStsYFhL/YewzCHaDIvzrJq+7upMm/zzkUn1Flsj/NtgRKowq3vxmXgFmkzb8/+u39qSkauT92lO1f7ALRPxpCbTsBOrY/01QbwES3wr9YtePM1/aXv3QiteQP5JI/g1atPKESyL+HPDVb+TC/vwZNQ0azTsi/hKoEpcG4wr8QhBK3LYPCv9wJ+npg6dO/naIQnnOqsz+ZRtEuRhDBP9pFCRCRVNe/dHbxR5h2sz+Oti9xgVDXvwbV6QsA97C/gBWh6EILmj9pK9OyBfbaP3NVOGbEzaa/6JPSFnkU0r/XlQW/Z0+vvxgJcFen4bk/jSsW12QL1j+CE/e2cg+3Py8wGjragac/Hnt8F4qfyD/lCpUc15qiv1qrCwyYTb8/Rs1/OlZ/gj9IZ+VWKoVkv0ySBLB8d7M/e7N0ZBpanz9JkzVnnCC/P1q5CVW1Zc0/s5rTr8c9zz99V+lC+UCkv0PcoygDlKU/M7/AexCqwj8GhHZqu+2Fv+akPcOQdLY/nMcdg6A+sr92slehFq+2v16DZzvzp5K/00esoR9+0j82wvS3wYe1v0EYQUiKTMo/BPfNsB5Z2T+RkmKYKdLQvyx/ShqGZtq/nzeX3IN/vb8q5F4JPmWxP88h3LRobN0/7bwu1A1WsT8sX3DeXz2Ov3nbDT9vXMg/F0Hh2xWYvj+spp2LFqnIP6FBEKigBta/1qTeWc26tj/ZOHQaMTbDP3nuKj9Pf8m/lXjxLaJs0D/vjZjw/mHSv8J9L6bFoZk/k4n8Bpkgvb8msm4qD73DP+6264Jyy5O/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzY5Njc3NjAwcQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM2OTY3NzYwMHEBYS4CAAAAAAAAAOPLem7RncY/9cPljP6c0z8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    2,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.8383810713602391,
                        7.728915890397942
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2
                ],
                "values": [
                    -0.8383810713602391,
                    7.728915890397942
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 55
    }
}