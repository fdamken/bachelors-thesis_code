{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9992897668817831,
                            0.014056885420603526
                        ],
                        [
                            -0.006346944058190381,
                            0.9895252399747583
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2,
                    2
                ],
                "strides": [
                    8,
                    16
                ],
                "values": [
                    [
                        0.9992897668817831,
                        -0.006346944058190381
                    ],
                    [
                        0.014056885420603526,
                        0.9895252399747583
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.024267121917638364,
                    0.027631667087512243
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.019384963930526283,
                    0.02778834647031863
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.005133078697100502,
                        0.0009471382913912585
                    ],
                    [
                        0.0009471382913912585,
                        0.02847033320703929
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcxMTYxNTY4cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM3MTE2MTU2OHEBYS5kAAAAAAAAAIkwuB7DouO/xge66Jz+1b+zeQ7YmqXWv3X8LGza3Oe/JgeCipa2vL8zuERLtr/cv+o5gBPDG+g/BpjAy2SF2z+8wf/UooHgv0j9bGD5Wde/oCvxDLTx4r8FHabHlrnJP6cVVGdoHNc/PXw6R6i+4D/NeEkPgiXEv1ON8C1fFpe/6OiWderf8L/80CVpTmDhP09QU2sFbMU/FWEnlC0zXT8vmsw+R9nTv42UH1v8ObM/ZGjov0UY0L+Pn3zUwGbFvwRfj7VqV+K/vFCKlWZX5L/UrPqa3cjiPxjSyS+ZoeW/5FWXlKCX2r+Vjham6VHXv/hyS+zMQti/Zb1tF0GT0L8SlxPLV9nyv0n7RpNrHdI/lnqVJyRpoj9lumBEUI7rPwXCRscJQ80/sAA9tOQt8L+xDYbMSeK2v2NFhkHSxcC/Z8zoKA4p6j8S6/9DQKjuvxEJMU3/G86/lGdx+rB2t7+1yS0v/DjZP53szaWaMew/LJ8fvkgKyr95RrTZ4WPev1C3k38z2s0/jI2eMMuOqz8ktld9yQO+P/t80fBzsZQ/9fB7GOyP179LDtFBe961Pzv+RWi5sNI/vWWcVB0h1T+WdGR8IxrSvy2c8L0ghq6/T68UETn3uD+lY9MnmM7av3fdUzrmd9y/m2ULpYP84z9ecGnEbaG/v9opMKnu5ts/AzU7Oz3yxr/VRb8Qr8DIv54MPnew58K/Ri9SWbfv5z+FUFq+id/TP8QSjdIfB+e/QVeWMwndzj+1HAWBljb2P3Udnll4WKQ/Gmef88WT2r/dGxC+mvHSP2KolIQMEuu/fTYNBY6W0T96kYjxW2ziP2gbxPh83d6/lZQE3ibJtD9iwRJtSVHDP70Cx08236u//8d91BgJ2T+kZo6twYHkvwvUM6iyLd0/YFYpq/EF5D9UD8smFFvRvz203LIKZug/KqVhnTAh4L/2UvWJrInGv7cwD6XXjOk//WJaTVNMwr8bvIIuU3PWv5a44OF/Edo/OOhR0lsf8T8Fc7VdS4znv/rsywPGDbQ/2CFc0BHk4T/JYympGDbev8n4/SepAdE/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcyMDMxNjQ4cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM3MjAzMTY0OHEBYS4yAAAAAAAAAEbcBuvIke+/bfli3RDZwT8Ck3HSiCHuP7YVIgRVDbC/Ys3QceNT0T/xNWgs1+boP6cngnU+C+K/e8zIT+Tn0L896OEkvyf1P2/k7EC4qc8/euWi0Usb5r+7Kkh73SjZv1xN/WiUV8m/1TNzI+/o8L/LJPv76qTNv9MsxP2Ep90/lrlHFujP/D+qfh19Kxnwv2Sl+NWsUfA/Q0odX7rnyj/xnBqGniXevz3grEAbE9u/X2lZKoCS5L+gg9HNlD/WP2SI1wQJY+E/oLcvCqrL0D+RIvTC3R3rv7KdHOjuWdg/yJ3r/VXe6L+c/dFqmqjqv1DrHviUmOU/9vkzutBX6j9HuVeQDqy7P79R/uflIse/hqrw4XlI7b+a2IuaEPPGPz8L9dzcRsY/n5OAcNEj1D9mtgdcAMPVvwZxJPvTw+2/4DBxTrVd07+0h0rGbYK2P3Gy6xTnl+O/Z8unPHlusr88JPrnbL/vv2mOaK/BJ+O/Y6P2A3B5sD9IHnLAqjn0vyrjGCZRY+a/Irdku2p8qb8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzY5OTE2NTEycQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM2OTkxNjUxMnEBYS5kAAAAAAAAAE/hP6Q8PJg/5a6RKgiTsz/11ybnZKTKPwBSPM9B6rq/SQfGviNNxD+iPnxPwFHSP9OsGhyMfr+/iCiaVgbknD8qYuBPp2zSP+BMSUlY46S/NB+31waYmb8tUX9ZLFbTP7xB4o8j078/XtLVhc48y79kKmhJNMPIP/6LX1nEF9I/b9k3V32k1z+Z4OOFhNejP03hQTFwy7a/GJz6nUehrD8cs1eDUO6yv/lvmmmyS80/X6Fxnfyjsr8YLs/lWXy4P6toUmL/5J+/2d142hbPET87Yber63C2v/nYMRA1qMa/zWbWnh9ekz/Zsqrg07mwv1HAHMenZr0/0xrm+Ry/tD9pKhOgsCHRP8GeQ6AKmLU/AXMsOT7bwr/sCafaXUicvzOK2xKJsZg/D8KMc4pHx7+9N3hdKgC6v2dHvTAqwrO/p/Lb+Y4owb/E2Ss8tNy+v6SxP/Vn0sW/Ga5oo1kOsj85+G1CPaeFvxAJNqs1PtO/8Art2hAXsD9scw16hBjTv9JbWvyCzaW/TDBbyDJucr+Re3EzEKbHP0UVsyp3HKm/Cp9Mdbnwyr/0M5ExU6aMvwq0nlzww7g/WQdCfjfMyz+n+CLRlLutP1va2xRQdLQ/RaFJC98ysj+wkVBVs1HDv2kN3OImILw/GjeFEk3DmT9hm8EEEsSHv0rxKED2OLA/z1c/suuGmT91W3IXBJG6P4iJ3iHEXrc/zUrVA7WuzD/PBdrKK5mHv/Se1PsMQom/aOsGD/FewD+CfA5xDw+3P43Jm0RLlrc/zKCxuMjbtL9IB5rgBHLHv9CmGE3a71c/grWpBCn40T8XXNdxOJ6tv3YfChff7c4/AZIvcaLN0D9LywYmcz3Bv0lqMnlubdG/77WiyVFwwL/1ZUFmOdasP8M81zgPKtg/TdzcoyAZqT/ljE1BViGnv+KdOYj4Tco/gCk87GTFwT9aOXJzTBLGPwvq8l1eENG/CmR3VGEzuD/g2egpHtPDP4UK6sAk18q/6dIE+c51tz+aztZETdbDv8zrspbxS64/WWe25UiknL96mxorWPrDP0UyiND/PH8/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzY5OTkzODI0cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM2OTk5MzgyNHEBYS4CAAAAAAAAACfFf+rPTbw/jNfAQk9axT8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    2,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        0.35121304461640346,
                        9.128119169795157
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2
                ],
                "values": [
                    0.35121304461640346,
                    9.128119169795157
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 35
    }
}