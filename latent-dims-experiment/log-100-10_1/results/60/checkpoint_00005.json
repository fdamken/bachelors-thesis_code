{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9920768093240707,
                            0.007176589851466538
                        ],
                        [
                            -0.05145862442212059,
                            0.9924806598059702
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2,
                    2
                ],
                "strides": [
                    8,
                    16
                ],
                "values": [
                    [
                        0.9920768093240707,
                        -0.05145862442212059
                    ],
                    [
                        0.007176589851466538,
                        0.9924806598059702
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.9765577758794507,
                    0.8819779140551204
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.15664278529494913,
                    0.14203031886146508
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.09205625624001923,
                        -0.03012232074146981
                    ],
                    [
                        -0.03012232074146981,
                        0.5752673579995546
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzY4OTc0ODE2cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM2ODk3NDgxNnEBYS5kAAAAAAAAADhCaFVulOS/63hG040o5L/m6TmoGv/ev1PWSwiDneS/O5N+GN7riL92lCMBzSPAvx4NpAaYCuY/ShxvQw7u3z8xZ6O+W/7hv2dwQ3nA5Ni/aTBv2Bek2b+UKZSZjcGrPyXwx7vwzdk/4NlOCmi74D94Z9GIyWO4v5SIAQXCeqQ/hBx7OMR73r8yybbjul7YP6G18k/gxKs/pMzLIFK/l79cImjgnZzcvzK9Jqyx2LU/HByDTnAEwL8nsEtuHcfHv//cE7ZUt+S/chW2sGwa5L8qqbA4m97dP/CjTRKQOuC/MWZrBeNx1b+6cezHUbzev0NVOGCvx9S/iGyJBOhLyr+JIFflqGXgv5wLPpVIacA/YGU1rZh4uD+ipdipqaXTPwGvLGyoP8o/c/NC6uFH67+R7DyVpLLLv3tOZglJg9S/aFgZVacO4z/cbb0awoTlvyKUPPHoTMa/0x59EIRiyL+6BvwH4pblP+rAs5src+Q/16T/pKnvzL9V5Wh/CIbcv2MaIhLmKME/VFJKWCJctT9FV5Bkdb+xP3ZGyYf+WL+/IouBV/it17/y3iz9MDq8vypscR/0uaM/5b3ss43x5j/NQSUkxWzSvzAgRvs2Qs2/ahQQuZCUvz8x/6SP9QDTv06fvk6wt+G/tMsaHrIP1z/KqfCs5cDCv4EsrKUDJtg/4Cu1Hycnsb+ouN0RtUeJv3Ugz0lEGqg/c/ISs/Gy5T8j1o6OUATOPxgXQgLdReC/t2LGYt9Nqz/oq5uTi63nP11bv/yBbMG/HuWjS7J45b90BIYhgNDMP+AhfSzh4OG/flH/Bvgepj9xjGajYeTPP1MSomFgptu/wWAAgLo72L/PXsEdPQbFP49vvlzhQLI/qGzrIF6Uzz+foCd5j9HavwiEJWsuhuE/SNbv+1I44z/4wgKmriLRvyV2xwbZoeA/SqLpZ4pv5b85GRqaRQ7jv3010viVMOI//XRgumBNuz/3KSJyfjDdvwY1M+Mq8MY/cCG5PP/I4D+wzRl45IzZv4M0ffsVJo0/JGlidv2KxD+akNjBoA3kv4xLihH/89o/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzY5OTU0MjI0cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM2OTk1NDIyNHEBYS4yAAAAAAAAAM3oEi+8R9i/7oni5uhsr7+b+W/infjeP0vXbsmr1Js/igL6nrQ31D8zd3YDJ3fNPzZ8c8vgpc6/PzRs9pHA0L+MqWi4OhrXP07i651h8NQ/qiVuQLJY179PJ/RIfIfgv6qUJEOaSt+/B38dHASG57+QAJWQf/XWv5ti1Pxbhto/6jmp4ldx7z/V40HyVH7hv+DFNNJP3+o/UtmFANUAuz8pGccWxRDIP/rMtIQNJdu/HURXcB1r079QsMHPA+W1v8rN/Inpmd8/k9BmyJJA2D8QDor60Qbkv4RZQTacFdc/95pQbiMm4r+0hnBbOkLhvwOyAGR0quI/dB4wyJyw3T9A5+tdcwSmv2IoLplNEoA/7nPhU++s4L/OlHN7P1PmP/MZ7CdLOMG/zDHWD8b53z+AErppmPDXP/moVCGlIuS/tzWsL3F43L/q+TcjffPZP24+atHVhNa/qlryRaBg278Jd7X+zxPVv+kqZ9BSbqq/Gelr/6CirL9EMjD1GdbTv2fOcmQeo7q/8c4i32L2wT8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzY5OTQ2Nzg0cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM2OTk0Njc4NHEBYS5kAAAAAAAAAGj4/C06Xpi/awRtM57EtD+60wUyBKB/vxmWejwoUby/Cco45bVTvT8qqbrMvK7DP9C0U5vCvbG/CublunMYxj/pM+40q/3BP0qPtN+CGMG/tE6hSzKWhT+wvjnNFCzLP6f3lUMWw7E/XghkOIOFw7/r5QU9Kku+PzrWT6A2wsE/o2HgdFUJzD/S9M0tPWm2P3R3jcAph7K/y+pV2vSwjb/C25VJ+n2ovwnTt5TCJsQ/f5+hnVi2gr8e2fxvm8W6PyAoNiEVIcO/8SLVsKpFyb8i/7+mNl6lvzWFLH0FH8C/ah/KtmUnrz/xafN1hVKmv976JGxXq7c/t6FphdawqT9vMudYbvPFP5Bx4xAKh74/6BJCKTNKwr+1Dh3KJYaaP3vC+r/Da5s/EsUDqfnAyb87BucQdNt/P4ei2vTgO50/wcwwqEdApb+LaYKlF2Gzv/22RBDCl8m/UsY/D2CRuT9ZQX1LxpChPwGCC9ijnMa/qXIZx8DQxD9PgxsogHDDv0ViEpj1CbA/CO0dt86AYz9nIacvLuG3P3pTYC66f7a/DY5rVnusxr8XUwt5kvGuv8/U4OXrmL4/qfgK6EUDtj8+oOd11rq5P5kOwtxfsqg/KnRlFY8dqb9+tQOu6VyIvxxnnTsz0rM/NlH9K864vr/awHWHv8Wxv+Xc4/T5/KS/D0oaGlOPoL90whwBndm4Pwzz2pwTfqC/HoZsiMh9wT8BOWoDoT6FP/ht4GO+DLG/AHgD5Z6Rtz/iv9fHRE2uP55AinEMrLs/HxAAeJMJv7++1+w2fDa9v/F/EWGDmLc/Ji6Y0wZorD/zBSr7K52yv305t/c52cA/FRF8+BXfpz/F238d5V6xP5Pn9sjisqq/kNhX4wd/k78r7pT9/aGyP9vmVGdtjcM/7DOM2w3Yrj/GQZ6DNg/Avx/tHdsG2L0/zB2JQ9y+xD9Eo5VA5BqsP8yFaZUOor2/KiKvJyYotT/rcWahijq0Pxru0P8x/cK/GZtaN6Fcnj/I0Pa9j6Gzv02fVEKFI7w/32s5h5bBsT8T8YqO2XW1P6K3o1UbJ78/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzY4NTEwNzUycQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM2ODUxMDc1MnEBYS4CAAAAAAAAAPJB8+7L7KS/XQMx8sRBpT8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    2,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.6707186885108566,
                        1.7629487698975461
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2
                ],
                "values": [
                    -0.6707186885108566,
                    1.7629487698975461
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 5
    }
}