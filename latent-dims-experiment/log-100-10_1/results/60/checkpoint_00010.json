{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            1.0037072080658094,
                            0.008539249330446913
                        ],
                        [
                            -0.0212475142821594,
                            0.9928801083227894
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2,
                    2
                ],
                "strides": [
                    8,
                    16
                ],
                "values": [
                    [
                        1.0037072080658094,
                        -0.0212475142821594
                    ],
                    [
                        0.008539249330446913,
                        0.9928801083227894
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.7626939433417913,
                    0.5442671797515243
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.03182221906577979,
                    0.09084627393880208
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.026954638733505242,
                        0.003054219650356793
                    ],
                    [
                        0.003054219650356793,
                        0.2301083632773011
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcxMDI4MDAwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM3MTAyODAwMHEBYS5kAAAAAAAAAJtlCK3/kOK/JKmw4hbC5b8m9G03qibVvxBUCoW52ue/Oyb7T/OPoL89S8NX3HvIv3PuAwrBN+Y/3VJyw+BF3j9RWL9zyrTjv7Ks8m+2V9K/+l0Hs/U12L/y7WmtndzTPxa7J0LVfdI/QdChMJeq4j8ZnDZO/mWvv/XOtUHCvnK/dhqRl7TE5L9+he0EOPbiP0zysa2rXK0/4ZQUJIHEmD8R/aPljxPOv/ktP90HTsQ/K7GBANmutb869vULrnm+v5aOx6f2SuK/PuEqHe+L57+I53ibIQ3hP0jkdlySdOW/Ni6yffRf1L/kLJ8qcPLZv5h79Ctm1da/ap4WqKmEvr/PN3DjFAPmv0NlrLnQ9dU/us4BYlqmmz8gRpPClPbZP/u90jNBgrU/4u6yYjZ87r+9HqcZdOK5v0Mu61d2Fdq/Mzq3PlCU6D/8dG1gsajpv48hMyjf6La/Rhu5krMfsr9V8D1NUTvjP1MNNuyXZuY/+gL+gZI5wr9wewloguTfvyGXRtmN67U/+eSdVTQaez8cuZNypFi3PyNxYyw61L6/wnwII+tS0b8F86NR9Q+bP/vU40gLf7s/MbtXi/SJ4j9wEgCi83LEvzKxZVl1pLm/jVGaMRoqvz/rs453qY7Yv+EifVA/GN+//zYG6AJr4z+Y0y1xzr/Dv7asnaSd9tg/IGiyZtxmrL8jcragyHy1v5GSxaQM1KY/6PPRar+Z6D/zsIvqWqPWPzxauz1hKeO/WBjktTXXtD8+SH04HzHvP39S/UXuE8e/J8C3L/CP47/lpCTT+VrJP6ugbSMHFea/vILb6uuluj9pjAu9SNvSPyVJzaNMZdi/OwElwAC+1b8TA4C3O0G3P9bkK/UUyaK/1DZbUMSL1D9rMlwbF4Livy4J2SAxH+I/T+bF//4l4T8eiN9zGN7QvyhH97WUBOM/20oTPIEB5b+uuL9fkL3iv7S6YYDvI+Q/2YqfGoC6or+G8Ftbq5PXv67Sz7T6Cds/I+swwzCy5z+e9n43bK/kvwxr6uErGJw/ryECx+PozT9D7ymw5h7dv1/rWjeVZeI/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzY4NTc3NjMycQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM2ODU3NzYzMnEBYS4yAAAAAAAAAPFPqMcSduW/2F0GBWoQpD9B6LtD8qXjP6zEK3ZTzq2/boc71mXt2j+hmSEB4yLYP3VuuyZvo9m/cZxXf3WB0r8yvI16wNbjP76k56rq/dU/XBQvufbD478AKlcFKbbiv3SzR00fIdG/GfeRkdpz6r90q4tfXzzOv8Vq0WIjIuM/HnbfOtBW9T/K7A3zZlXjv44NQsmb8u8/OU0jnD7Etz8FcDk7HPC9v5SDl/1NveC//hsikyOk4r9E6q6AHuiyP24oHLYn0+I/ID3aPBWj1D+0JW9DFvPrv5bolTOgW9s/KJxpoRfp6L/qYSvhct/jv6GwpBeDMOI/UUyrBKGJ4T8lJ72VtNyjv0ZnI7F/cbW/iSG/0Zye578d5Ytr4tnjPzfMytwUJKk/BLn5yo+x3T8cFcXo6zfPPzVRTAmF+Ou/6chhuAk51b9f93Yjln7MP2DOvOxZOuO/4ue5+QRA1b8jAmmUaaHiv/EqwamVutS/XCC3NBlNob+FLkqWKh/kv/dL/xrACcy/tmsNEOn+rr8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcwMjU2OTI4cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM3MDI1NjkyOHEBYS5kAAAAAAAAADfxQ0sOILC/zGbEpSgfnD9TyGX/DkG1P7BrS3hjKLa/AhRyUEg+vD+oedOy1/PIP8zRh4cLoKK/P7GM0whfxz/MD/QO+YDIP5AIDVuo58e/uGELIeLMdz+mlme2X4zSP5Z/kWE5Gpw/IFhxYvDIyb/DwERjPCK0P3G83o36DcQ/4SJKANdG0T/byaTetu+4PwS9egiAdrm/93tDa28Clj+ghw4W2gK6v/Beh5mEyMs/F1DmyaBcZr/4o6u2TCmuP0C+s6SZxcu/k7Ajv2ylxL/lOZl9L5+2v8st+rk3QMK/MPChXie3oT9M1oR5/Vyov8fJ5Hl58ME/SNSoOmuymT/BCjAhisbQP4Pe6AkTurs/AZu3vp0Cxr9/+/wDabN1P7vvzESiLpK/ApiIPXPFyL/cTGzCnRalv1xpPKcwOZC/DTxbdLcjrr/lDCYmhUW4vynGRECg6se/WQARqIwtrz9DttaqwgFmv45gMuoFc8m/j5ULNbcAyj9JyBG8e/jJvzDt7Cwxloo/X7OikcxBqT86cTAa3MW4Pz0XT4dX26e/WSRcB59szL9Mlq2ZnIqrv8bPpxhI87o/Q8iI4nd7tz87XfUqdKy4P9DvtG6gSL0/1fCyJUO0p7+o5QH13+eyv95FYqzDEbg/gkvE3WJlt7/PZS6Ao2Cvv5ovdMBPFqS/HogDGedHkr/f8kLZD721PxR7pbHT+5+/qxZkpv+Wyj+QRSsmQMCTvzMediml7Iq/Oo5dnfPqtT+IgNunwDuqP84QGsx+AL8/Zzv66oKItb8SPUfxy3HIv9fRSLf3M7A/+G8dOjp9sj+GA8TdFqakvwt1ud1cvcM/fsgxVgN2uz+ePoLr6IOwP8eqx00U/r+/IdXwZYTdob90IM7DMsG5P1nS56sNBcU/+GevXvDrtj9m4aRXtBepv4825sw5csI/Zx8HM240xT9usggSl3myP6lLYgVuIMC/2/A5h8XRuz/bsAVPkH23P+sS/yPiJMW/E11kJtYVoD+xIEbtOwCyv4tiUMc17bw/GUPQ3KsrsT/L639boQ3FP2tO1LCac70/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzY4NTExMTM2cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM2ODUxMTEzNnEBYS4CAAAAAAAAAMsxcToL8IU/jhN2iYurpT8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    2,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        0.16419169342986015,
                        3.214179082449259
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2
                ],
                "values": [
                    0.16419169342986015,
                    3.214179082449259
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 10
    }
}