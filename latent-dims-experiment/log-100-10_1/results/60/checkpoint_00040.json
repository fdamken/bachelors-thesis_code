{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9971773806081597,
                            0.016548502917762782
                        ],
                        [
                            -0.007672109764686817,
                            0.9892703422018919
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2,
                    2
                ],
                "strides": [
                    8,
                    16
                ],
                "values": [
                    [
                        0.9971773806081597,
                        -0.007672109764686817
                    ],
                    [
                        0.016548502917762782,
                        0.9892703422018919
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.013675375854798054,
                    0.01576675437751212
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.020482520193500022,
                    0.01828718057537816
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.0035867584337685755,
                        0.0009136959883686568
                    ],
                    [
                        0.0009136959883686568,
                        0.018094568936561473
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcwMzI4MDMycQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM3MDMyODAzMnEBYS5kAAAAAAAAAH5yakoWNuS/LQrw1yFW1b951TVagv/YvxkrU1uS3ea/ceILVh3Wvr9m3vqeDqPbv4R2l+eSseY/Jh3XpomH4D9FUPnrNWDev0HjbpoNCtm/Ux+DE3MX479iT3eKBLnDP49jbCvcz9Q/NS9T6v9F4D8wfzFG48++v+HUa+IjeqC/uUqzIXdr8b9SRA6u+qvfP2HMwfbJfck/+yCjlpojBL8vys3mANLYv5FkqxAS3qs/UKK7fvFR0b/YL/pDNt3EvwxkNnFbzOK/V1pyL7eU5L+VmnpkFM7hP6IwXTiKiuS/aoI3VQug27/Vy36KLeDXvyUTl3Y+Dda/ItUS7G070r8nnhJbkmLzv0rjHIS48cw/VRUJ1K1isD/uJz4iOPLsP1soFoDlydA/TJgD95g98L+pHsoTaeO5v6bPI3L7+LK/+YjEV2vp6T+qnvG07VDuvwa15iZ2CdC/AcFQJSvBtb+Eai0IRrDbP59DLF4Keuo/KWVbeviGyL9D4hhVpqrdv1Gy3rsnUtE/4QTYzHjMuj9eUm+jAxLDPyE3q33Cz7k/sP/gF8Y92b8ltDrmDsO2P0E+m6ysB9Q/uV1H+JXn0j/ZgzHqllfVvz8IJ5c9Qbe/8FZEpEzcuD+JftN99sDcv+B9qQiSu92/n5U+ruhQ4z/QhbeT9U3AvyrtwvYJgd0/yBJQi6GOw7/0fysZUjTNvy2wBQA/F8i/Iy3DDkmi5z/Z2gcsOG3UPzD5rmW1h+e/du+QfLVi0z+UMXnND3b2PyLCnZy2F7k/LX9wX9JK1L/HCVi/UXXVP6O7nStmB+q/mQ+gLgwA0z+v3hBSr5LiP49EyeU4Zt6/tjC1a4bHtT98CzPFr8fFP/9OR1dK47O/f143yvmp1z8OZGhygcXiv1hrRHK2wN4/6yQu/j1w4z/T4J1Met7Sv9Gbx54Moug/7vHBGigY4b+5WBGRvwPJv77JOhGabuk/mv86Gp8zub9cfp3btjDYv6LCtNYvgtg/EiBRI9Vx8D/7Mp2/E67mvz/HmxGLZLQ/emnfdipU4T/d+gXZnsnbv/aQB6kpftE/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcyMDMwMTc2cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM3MjAzMDE3NnEBYS4yAAAAAAAAAH34LZYQOPC/F1eOc2h3yz+aENlCIgjwP4ACHjPYlKS//xCACvrAzz8kmLD1M1PqP5LUr5Ph2uK/rJnBSqdF07+ZVREyLMb1P6KajClcX88/nvGq7xHf5b9IMi4QrN3Xv5NovD6U5sO/9PKfgi8G8b8UUqwgUufKvxOC/z9E0Nw/tarEFAmL/T85uIFz8wXxv6EFwJkHnO8/7O7HVKY8zz+Nm/vWODLgv6qqj8qLF9q/Opvt1Axq6L9rn4hEAzjZP4RNf37N+OA/lbQHwwp/zT/cDVniuzvrvzNqMeMAEdc/9aK0XTz857+B0jW8HMLqv4coHsPxGeY/ppfl0zqH6j9X2Hg57dK+Px81dJ85JMO/L3pJf9qw7b83pbfnknm2P2wxEDFM/sA/yIV1giUg0j8j/8T7X6XZv7gN+0KzUe6/uaRPPu4w07+8hnjTysm3PwNW2LEL0OW/phgqWBXkl78jvDQAn3bvvw1VI8CqdeS/gcHnS8pmtD/Dpjbq2Ib0v5gpTgbIJ+i/90C/7DnMsr8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcwNDI0NTQ0cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM3MDQyNDU0NHEBYS5kAAAAAAAAAAI+m8W1sJE/eu1l+T/DsT9c886h6GrOP32kYysqErq/ayOfd42wwz/acwkIscbTP0SeYUtWIMS/H+KeRPudlr+X1v25s+jTP0W0O9CFQl2/q7Mh6bnror9EcHYF48DRP64r8TsrCr4/cNjKVT4dzL9ofnH5ax/IP/9NIRcajtE/5JubyiQj2T8iz+XnlEOcPxBJrpH9Urm/ULBwcUjnsD+waK8dfKm3v/sXVpn7Isc/ChzqAACEu7+QcHTnFBS3P/Pa0x6/d6y/+Ov1PuFfoL+BgOXXZvG5v6h9IroQlMW//DEdn3iFoT9+Jn1jHRuZv/Z3B1lWe7g/893QRRJZoz8LZkHyQkTQPx56lflMDrg/vUsRBcHiwr/2dWVA/PaRvxI1WfESN4s/ufL6uNKjyL9mV1aCEBW+v4O6giXjNLa/o8hgSr54wb82aN9H2lfDv1JWkrqFMMq/5ducv4DLtD8OFsSsE72mPw5yrTMKrdS/O4sg3lFUsj9WoszgArXUv01Rwrog+Ku/Fku/xy45jb9rh3HYAWvNP3zjL3G4JKu/0ufQ05yjxL+mS5anKHORv6yQLcQeJ7k/YQBBykn90D/Jp9qeUESuP/iuAS4l81+/BfpdDwDwvT8aHPrf+Yi3v/spaSodRrs/nyRyfsiXmT/EUe3rYw6Qv8nvpEZH2qw/vVt7GfwvlT9uDbSSOvO5P5HmJGU8WMI/PStNMULuzT/lsn5EcjCXv75C7kM/fJw/OuruSieYwT8awNCa2nW+P+DvF32tD7g/T603iYpStL+3x1abZXXBv71B1nAaC3g/mwi4eeTe0T+hFm2uL72uv92bH/oXaM4/RWMa3g9K1T+ZRemzenzIv8Wz1UiZAta/td121WO6wL8gkIa5YAGvPxfdhbI6eto/80Ye2TAKrj+vg+ZgDF6nv+LldLS1nMk/yJS0sCmYwT/PY/v8J/HFP98KC3NaEdO/zBVm+1PVtz8rPw2aRc/DP1JGxS5Cdcq/u/hTpOyEwz9FyUPdQUrKv4nmv06Emqc/och+7iler7/fSH5nJIbEP/mRWdxfCom/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzY5MDMyMzUycQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM2OTAzMjM1MnEBYS4CAAAAAAAAAH1mZFfgK8E/JSsNJEUMzD8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    2,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.15633795595011613,
                        9.08082327559807
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2
                ],
                "values": [
                    -0.15633795595011613,
                    9.08082327559807
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 40
    }
}