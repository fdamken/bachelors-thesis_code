{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9970491099339508,
                            0.022937196726489813
                        ],
                        [
                            -0.005428373855252534,
                            0.9934516638162167
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2,
                    2
                ],
                "strides": [
                    8,
                    16
                ],
                "values": [
                    [
                        0.9970491099339508,
                        -0.005428373855252534
                    ],
                    [
                        0.022937196726489813,
                        0.9934516638162167
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.002621697428876355,
                    0.0032913350732805685
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.01281683030615386,
                    0.04480004342917766
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.0003898230734748487,
                        -1.5444753331150807e-05
                    ],
                    [
                        -1.5444753331150807e-05,
                        0.0009667328788793839
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcxMTE4ODE2cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM3MTExODgxNnEBYS5kAAAAAAAAAGCzpxg4xuy/ldD+Zoiu1r8SCqDPcG7Sv5gfkzT/M+S/nOzVqVwlzj/DNFb5/izav7JA1KefJ+M/fkU7oG+w4z/3i3jC+UDNv5JQ9LiQuda/1kTmgBQN4L93T/K1ld+7P7P1UFw4oLU/qabDUX9i4j956uEi8HPLvwj/80BHwMC/Fz0vUKFN6r9AjVXg0JPJPxQhJq0z8Mo/05sQNB+AvD+ZarYViULfv/b4VNvQ+7W/nVUOLTV91L+6ok5FkUDBv9RLK94MdOK/6Q4H4/BK4r+MohkclSzNP2ZEGxgiHuG/ybe+oGSV1r+9ZuC9qVTYv18bgvXWBdW/449WzTrT27+zKAl7U1bxv/3zv866KbU/vSSXCuhnxL/Yw8FxNOrtP8caEFiAhrI/GmH5NOhY6b+za5dYk1KjP3eI2yi/aIq/NfoThb5Z9D+j1Gt3t7b1v8GOrfRDytO/PJjv7+aLtr911xDOy3rPP5DbLnG9Quw/rg1al9M0sj/DBQ2rNqvMvwHpKAz7stg/+6fal5P0wD/+XTFaGDXIP+9l8sEv7aw/C8mZDlAI37/o4LjyQsilv0GqoWpm6Nk/GNQ+DMal0T/lhJeUe//hv1ccT6X9iMq/pqUyYX08yT+YdErgFMrwv8gG5MfpJ+q/EzyYQuDg8j/6bDblLQLfv3X+7ORfjfI/Dtg9ZX6NxD9uOMDDn3zRv37QMTCPYKi/vbUTsbjV4T8GMi/FalHuP/Gd1WfVJvm/z+MVs6vJ0j/tmFxB6ZPkP+ILCSlMC74/48FAU0w3pz/ysMf+XcfYP/DMseNzaO6/KHndFH8lpL93NjpQaIPhP78SMiL5eOG/LB/jp0pkjr/q9vhxIsrQPy7EbNG0La8/jjPmf8DfuD+KITYK3fXbvwei/QHwl8Y/jUepGLB25z+0QZY9C3/nv6blTut0X/U/JrgGz6cR6b9om3m7noHWv2hV3XfKxug/cr1NDsFBpr+YhHbO48bEvyXykSuWOpS/ZIt50FJX5z93oXnktznWv537vmWw7Mu/FgxK80HUyD/bWWEiZVjNvxmCcCs1grG/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcwNDg4MDk2cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM3MDQ4ODA5NnEBYS4yAAAAAAAAAL03+2oPXO6/F1f3aULR1j9S0xfgoUrtPzpnBGratZk/I9ClUlDzvz8jUebTMuDiPypm+5uUQOS/NVmSTbctyr+mUogDUIPwPxGz5u2VrMI/t5Y6qizy5b+SVILiNbXLvyNrcmCHZsK/b0C+K9RG7L/f/AYzxCPCv3RI1r/KeNo/hXX/5B/6+T/ndqA7elb3v9egfRH8OPI/FALbYY5Gpj/eIyNgDDvxv5nihNj15sy//b/nhoJi6b+6W0oIUmzbPx0Os5rw1tk/XQWMvlCyxj+ds6/j/oDnv4VBTNJxx9U/yAB9joUl4b8GVsLTuuX0v/2ftH5R5PM/AI4TZuUw9z8oN7UDgyK1P57GPyjAzd6/GcBV5zww/L+Y6a1k4sPdvwwuaBuoWK8/xmp2qPwppD+otjzPMHjXv4zWh89/jeu/KuS9LibMxL8Z8BEWw2HFP++uugVwAeC/ZTmjouir4z/V8RYOcmfuvyBrMcgVjuK/Ars503kQ0L+KF6fYJHLtv/tzqhPG5+S/4y7lkVK2wr8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcwMTczOTg0cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM3MDE3Mzk4NHEBYS5kAAAAAAAAAMbRMRgwDdc/oRRnz4Uwsj8I5hfpSGDLPynmOsB6G9m/963JY4nskD+UsV8ch5vWP5EYdxfX99y/+4P2xREMlD8Cn7eN53jZPzvo64FNdZG/gG0uQc2rpj+Sm4a/2Jh3P27lf6LTZMA/ULJU/z9g0b/pHxelQFzSP9Y83wt3xMY/573vr6m93j85NJX93HaRPwOlWQmInK+/iRk9CrJ5kD+C8IwWk6a5v+LhizLmeVw/REGG4Uaetb+qUr/zRempP54LnadLuKY/p6IDmbclmD+GkFjzsuSlPzgQPjIA6sO/p8JBy223j78n3sLZ+e6+vxzm7aAvysU/X8rI9giqwj9W6C0JF3TPP3o+MxCYYaI/W9TH4orlx7+XxHnL7ySNv9rIGj6aInW/lG2QswQyxr+wG1z/1CzAv/sKKU9pWqs/DCZd05p3sr9HvOh98ci6vx0i2M6LQtm/dYr1DVbOtD+XHwECRrPRPy2ZSjtCtde/USd8IhtdmL9mUHJtcBzav8XNZRGaPXg/drOR+JiIg7+Gx+RqidvcP+X4S9FzJK2/vgI83Ile07/uOXImmWuTP0pAwiKfkYy/mAiXu/be2D/vGF7UYzHKP9nyKPVv6q4/1MNiDjmnzj+8wJM3d1e4v4qpjktfrZk/zlEUjIaVtj/zPMltLZCKvz2Yzt4R3qo/f4+3TSH+eT87i0OrLxnEP4q2mNLrydE/B/8pSZDs0T+AHwAZZg+7v04P2V+Wmq4/V4K4x0C+wT8SyNtvm159P6i3cWW5c8M/TeXUQemjm78oN6+a87uGvwIRbIZLNqG/68XQFfgfYz+WdvPjtJK0vzYYDXZQRbE/K8BwKFq91D/oKOC/JkHRv/9QEsGCzNu/IS9H+DAgw78nSVODBZm9P9VIxShNFN4/Op6blQhLXr9b0ayywd2evy4MzJ9UPsY/v0mYmUq8wj/oMVASrleYP0Pv7Kft19q/q0Vsz8DEmT+TJlcrBLDLPx0WNf9YK8i/W2yisPiZ0T8WZNV4ImTVvw18WwUJk4I/vk7xW0VcxL8RSrTwCHuEP4OXo6oSjXo/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzY4NDk4OTc2cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM2ODQ5ODk3NnEBYS4CAAAAAAAAAJ/Gg3P3YMw/UHYXmO221j8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    2,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.3998907467314119,
                        4.486764319138673
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2
                ],
                "values": [
                    -0.3998907467314119,
                    4.486764319138673
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 100
    }
}