{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9615852272115333,
                            0.02662823848835605
                        ],
                        [
                            -0.05804144651279936,
                            1.0135450987646801
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2,
                    2
                ],
                "strides": [
                    8,
                    16
                ],
                "values": [
                    [
                        0.9615852272115333,
                        -0.05804144651279936
                    ],
                    [
                        0.02662823848835605,
                        1.0135450987646801
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.3781737901031019,
                    0.2866708203778353
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.04762965052155232,
                    0.09621816129138443
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.01711272844468059,
                        0.003682324644388224
                    ],
                    [
                        0.003682324644388224,
                        0.1371911333765965
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcwMDk0NDMycQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM3MDA5NDQzMnEBYS5kAAAAAAAAAPSBR9S+UOO/c7UvUT4Q5b8IHfuXDTLUv3UcJFs/7Oe/e8gUmzlssr9u/o8W49vSv4jpZoB+l+M/Ys5retG84D912SbpTf/hv2vEWlsWRtK/zObAtbdB3b+NiJZk6oPRPxy5Y0ARitE/uQcpdHFn4j81YvJoYJizv8aOQeKoK5C/SWNt+9/87L8ET0EexGzhP9M2EA4obbM/vYnqEodaoz/RJMhJ60nIvzUOAfHqz8Q/whSV1m9jwL9Aa0oLIwm/v+6z0/+sZeG/oB2tYDFV6L8zJz7Oz/XiP9TMUoAzTuW/F1PAgGbO1L/wXnf5VWTZv4nH1XwUP9a/xOWoEgNywr9y6KMWuAPtvxgofsli9s8/7T1s4FrMar++zK5rFY7aP5WXAexFk8Y/oZNAf0SF7r99EXH/VL7Cvw24Nsq2iNa/ACAy/X2M7j9Ylmb7llbnvzevBMCsFMK/zKdm02LEt78DvQKrdnDiP0nyCj/iPeU/cjDz0bU6wb9qeWVDmmzgvxqw37NxJ7k/sVMM1ZDThT+xWL1LC5e2P6wsuhVxNcS/4oNY/MHeyb+/FU0JYIXAP/W/QeXwDcc/tUeLuaDs3j9cs6OTgrW8v4Qy9oe5+pO/9W2iMFakwT9pm8j1nKvYv7jOFn8Z4eC/JtsP4A1I4z8CdJCtbOzEv6N/GHtppNk/3pDvYxpct79I7S/t+Za6v0ti8pUon6q/O3K0VIFz6T89iPumzUvZP0cg18G4d+S/yClzsoebvD8+fCXwIbbzP31Zg5b0X7a/mzJ3XVoj5r/SZzgyU0rPP56X6Q4ICum/jQEhZoU+wz9Rx4MkzOzZPzV85s/8f92/qKqtKYEcx78BieHZkvW2P3EyLNgG4py/Wq2FqRz+0j9OZ+4wnY3lv8vfi3ZAVOE/96Fj1XKm4D84FRuVE0/Jv4lpEKgxDuc/NeMvjFbr5r8kNndLdWzgvzg1SB4Uius/7I1v91a9kb8cfZja4tfZv9Jzf1uH59k/XeIN1C4o8D8KEQSk4ankv1NmWoHYPqo/Gjguiv7Z0T+xzyRutyXbvz+zNzMNReI/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzY5MDYwODk2cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM2OTA2MDg5NnEBYS4yAAAAAAAAAAFlO/OeGua/twxEz7Z/sT+ZuOMtdFvnPzLsCsiAD5g/069VgAnK1j/LjaK3GwjhP4D8VyJXm92/X0mQhnON078bQewjXg3uP4pZW+8HDNQ/NdijUTFT57/IntovFJXgv0Lgnh53j8+/fsK5LW6U7r/BI7csG23Qv/NeF/WRrOE/GpiGkEKw9T/h3GFni8Hnv7MELZCMJfA/fhxtjsJcyD/CwSiT5Jvav0ZkLuUHUd+/sDCX4Opz5r+DVPiOoM3CPyUN6xKEd+M/phXdH9LP0T8wjqp4F+Puv4bI6MU3y9k/cL//ut6v67+OIHZojazmv7lCaSXMHuU/4h6wP7Et5j/BmTwm9e6QP8UtNGzX4sK/zRLo/2vD6r+7/yfy4GLgP3vgDksYSrg/ewH04Pkd2T/Ym2Qsxf6lP8ZyxFcW4uu/nSJ5O5vE0b+wwhkorPbHP3pIfBHN7OS/OJhZrgNG0L8udxFvZFDjv0QfJyUhZNa/oKZ4ADTRoj+4++RGENvuv5hilpjSRdm/i0mK/5hWw78="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzY5NDQyNTkycQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM2OTQ0MjU5MnEBYS5kAAAAAAAAAMsH5suE56m/m+HGgdRAmz/icR9jnyq/P+Hxwa2JFrO/qJeOgzcXwD8OVrMSxbbMP1jWlqtHc62/VtWVQjCawT9/gXTbHYnMPw0W+/0q1MO/lpsnLOVoqL+zv6Q/q7jRPwnz3bgRe6c/aSKwFefAzL82O8PNHzS4P8GNEghvUck/h3NuxfZU0z9lKl5YYvW1Pzq1zqsBF7+/JKUY2puhiT/v6svCqH/AvzQiLgNwHcs/WCZRoMp5cr92XsRXkEOqP5EJRfqoAMe/RDLL896Os7/SJDTU5dDAv2iPptYEkMC/ShRdADl6kj9wPg4XXBizvwBh6CpBo8Q/LjjkmyVjtD+GUBRWpbbRP/3/HT5szr4/H2rvAy00xL8HxCkq/EyCPx/2nhaB8oy/0YFEqXB/y7+Xu6uTkQakv/dwUk6oIZO/p16xmse3tL+kO9/gbh/Bv6utrfPDr8e/ioEF6XpLuj/0dTx+JUeLv55gn4jl+M2/RkKZWw82yz9vJ5bSDQrOv4s5btUYUHY/7B6G8ViipD/wxWFsiku8P76Pr4Yd8aG/up0abSWgzb/oUb0hzOOmvyUtwrxA9LY//vedUK1ruD9S+eeSrxGzP/dGCG/udrU/KUMlEj6fpr9nQeagkwWwv43qv7015sE/LYvmVkzLsb8Y/smAkPqev+fj/4wHhJ+/iKj8NkI0ib8vbUWM/byxP55RyqI+nJ6/AjcVWSgZzD/2+9li0CKTv6M2pfE8v4u/2sMiMoRNtT8VW7X6O0OoP7EOOhcSscA/ZU7mTC1itL/JrW/0FmjRv89UUH3irn2/mVavhm3ZwT+FSaMxAjynvzFobLPFz8w/iWNkLAhLvz+VW4BtLxysPzF8Vqtkf8G/y+uIrsevu7+RW/o+Iv6zPwBaZEu//8k/t2ABklxkpz9p0lzUiiOov16XbeMMocg/dm6pchEGxD+4WTQk2dWxP+VJzraaJsG/IynMtk9Utj8QOsfrofa6P6Ar+DRwY8i/F5h4SY0Bmz+DZu1ZlR2vv3EGuZR7XLw/nqvqAE+wsD93eqQM0G7FP2i0nknZ5rc/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcxMzQxMjgwcQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM3MTM0MTI4MHEBYS4CAAAAAAAAABopiP/f8KU/h4qRCF97pj8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    2,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        0.90389158288111,
                        5.306974371787834
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2
                ],
                "values": [
                    0.90389158288111,
                    5.306974371787834
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 15
    }
}