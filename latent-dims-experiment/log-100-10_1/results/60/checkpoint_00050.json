{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9941417717750723,
                            0.02243277949676775
                        ],
                        [
                            -0.006651035661492,
                            0.9891461286802654
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2,
                    2
                ],
                "strides": [
                    8,
                    16
                ],
                "values": [
                    [
                        0.9941417717750723,
                        -0.006651035661492
                    ],
                    [
                        0.02243277949676775,
                        0.9891461286802654
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.006188568495498136,
                    0.011085811626094665
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.017093102717852162,
                    0.05972236078676212
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.002104591389647581,
                        0.0006131808699292307
                    ],
                    [
                        0.0006131808699292307,
                        0.008627413974394926
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcxMDE0NDMycQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM3MTAxNDQzMnEBYS5kAAAAAAAAAHXOy8wxk+a/0jOqcQ9X1b/00VQ/Nibav/GWg1GHVOe/yYfKu/YCs7/xQ8cVQcvcv1je8pScy+U/v4YhoJp54j/NtH+jef7cv7boSXrZOtq/ebT3beP747+xI4CJGMjCP3A1vKy1sNI/aHOnJJ8u4D+6pkkS32XOv9K1ScxsDMO/0Ax/XaNd8b9DroBERmrbP4BAFpFNacg/87RawPB+oz+sPGQrJtbbv/bbCurihKI/rOeMwvCP078eI1q/slnEvzQAmnQik+K/K3ICP3iz5b9qkckScZfgPzJKqcjfmuK/X14BRRqz27/bWonulHXWv58KSQbcG9a/ydf44igf1L/HQjdNKz3zv4SjyhRxRsQ/OfWggjYcjr/aKeWBCQDvP0v2gWRui9M/7zVHNyag77+f8uXHJcCaP31qKxg4uaC/MuC6k/Fw6z+H5bS+5bfwv8XVdBHHbNK/IppLkTgUwL8lxJX81HHaP27raT3VOew/BWz/n2hJx7/GEKT0QEzdv8I388s8wNY/++VtP8/+wD9pASId0DbEP0/lbFN2Gq0/gaH62Q/D2r+X52O38sCyP9xY0KbuaNg/2D2opIMz0T++uOzQuobbvzVgFxUXAcC/d3uCkjQItz+4XWFMJ47iv72f84RUk+C/smzeL46F5z+dnYUA9OXDv8dbrXQFMuM/nk3s2zpXvr9u2H83aMXRv5vN67GZFM2/RYeCRp3m5j/LWeumGpbXP7uUl5hZuuu/AHQgEs/zxj+fOf9FraryP8BYqGu+7NE/WrKmxvabtr/eUPtZPMTbP6zyF3PIOeq/4nsaTgsx0j+ZlPmoI9nhP0vcy5PkL9+/1+w6EcqUtT9p4gpropDNP7f9BLVyJbi/yKE1Th702T/f+PGFRCnhvx499lxKWdw/H9Pm0y0M5T8kTChsQXvWv5zxeW3WVew/bm2S1Tfb479YBmwNIJHLvxlXYAdq4+k/Ritb+fKVsr/KIK7+YsXav1VX2kEO+dQ/kaGS7ktg8D8bl4Fb1rrkvxky9L0qb5e/JzUvFl3A3j/Fyt8xar7cv+C9H3+lzbk/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcyMDE5MTA0cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM3MjAxOTEwNHEBYS4yAAAAAAAAAAaTw/C8Xu+/GNdc+Omo0D8tTB2AsZHvP4wrpKfNWH6/BKkT3sTp0D9nGlzMd0XrP+6g8feLXuS/F45Jc6Otzb9bAr7sCSP2PyK7c/siNc4/uyGkAfqn5b+I+ewmB7/Vv+sTaWEd+cO/Ibs68cuy8L/snN3GK+HGvx1GUamdmt0/dDMc3RHw/T9D2OtY0Onxv2+toSGpd+4/YQmDm1y0wj/wjVWa+Sviv6T6xe+Bxda//zW3O6gX6r9ze7i2i8XZP7S4VDt7ht0/O4MxhOa4yT91zxd8jmLpv4fmLdOIoNM/Ja45vhn95b+FPG/tUV3rvzcZd0qGyec/uh/vJ1+J6z8G6gi47Ry6PyFpQL9ih8G/Twz7J/E677++tvUQrtu9P3tCJEbACIe/fR4oo460yD/buFLgIvPav9I8JPz5p+6/zZycKHHf1L/w3MonrresPwW/UnYJr+S/scIf4lYbrj+YsFSLnNPtv2Ib70LEr+W/dlWhRfwhuD/9OQJSSdT0v2CXyVBeCua/Rp/gZlt/rr8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcxMjgzODcycQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM3MTI4Mzg3MnEBYS5kAAAAAAAAAF+Bd+0ZnrU/Hn9PIsGotD9mkryKWjjRP8L5yyBU/Li/T52Q5VjKvD+xviKQhPDVP9foQgPcJcu/ugWgrjsVoj/HHke6LCbWP8poxj7yu6c/Vjpfyp/Tvr/h3cNKOh/SP37HuTQsFME/pKYstGhQzb8pJw91dXXOP/Da3dQExsw/E0dGSkNn2z8Z8mtGRPGWP1TqEi21obi/dhEOdk9rkj+p6qBhWWS4v0EPhZDe65w/wjnf1cjuwb9BFZiVEPS4P55uw5oQ6LO//rFU0iwAjz/B8zNHrq3Gv5/lkrVMlsi/zjXK/YEkpj+oAquWjuy0v+1RQoHa17s/x6sV19shtz9b44eL1BTRPx/Asot3BLc/BYEE2dZ0wL829P35AkCVv5rB+QDBUXg/G9L8NtNUyL+iMoFrwB3Bv5MADqg6/8O/f+hWktB7wr94F53WP9vCv6PYZWTpQ9C/6bXhVFYftD8ivK4Dr+e/P0/lcUAm49a/mpzHPWYbrz9OGlOkVOTWvwVu5yKtO7C/LwAiJ1FBlT+d6rnKztbbP3+aPpD6pqa/H1BUAgRnzb+UIHJe7oudv3PH++n7ZMA/Tj8KLp8i1T9z/2391eawP5tmDhLCW6M/f7Hmv1Huxj/voXffMECwv6nMGgLmP70/4wYw4HM1gb+ZqM0pce13v/7KmfAAdLU/JkH8IepScz8vz163CZjAP9ierFlnics/AWmtOjaUzj+TpNS9IOagv1hF7TSv4He/6R6mi0G7wj8YE1cf0IyHP1hMSNuNFrU//BWvJ1blsb967X/R7B+wv41kJJfAbp6/OlKaZhkM0j/vuf3E+P6uv7jBDgMUA84/o3Y6Awcq2T8VA9i704bQv9AjdqdRDtq/hprK944Yvb9kLdjRd1+wPwE4KA9YM90/TKDG7tOysD9+fpfEhLCkv8uvKnO1z8g/nuzz7U3Cvj9AzyBJaiPHP3WxLikNLdW/1fYXPzeKtz8lheISo0XDP7lIsBxW5Mm/4knGwStEzT8iN9NxOXPRvxng9yYhSpg/CWNZ3QJzur/Amse8m8vDP+JIPn375pq/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzY5OTcyNzIwcQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM2OTk3MjcyMHEBYS4CAAAAAAAAAPkEUanzuMU/NZTfG86s0j8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    2,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.7068789712136858,
                        8.180044263820305
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2
                ],
                "values": [
                    -0.7068789712136858,
                    8.180044263820305
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 50
    }
}