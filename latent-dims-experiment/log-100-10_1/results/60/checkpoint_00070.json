{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.939128054908406,
                            0.024513141508771614
                        ],
                        [
                            -0.05869752538679055,
                            1.0136088650425503
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2,
                    2
                ],
                "strides": [
                    8,
                    16
                ],
                "values": [
                    [
                        0.939128054908406,
                        -0.05869752538679055
                    ],
                    [
                        0.024513141508771614,
                        1.0136088650425503
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.0026683236599953208,
                    0.005070453500916037
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.005450673979648855,
                    0.042241477733739034
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.0010866205490038805,
                        0.00014008770222062594
                    ],
                    [
                        0.00014008770222062594,
                        0.002537129580971964
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcxOTczNzkycQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM3MTk3Mzc5MnEBYS5kAAAAAAAAAG2h2HLl8ee/EOVAoWc12L86DhlL2fTYvwVXZJVtLui/9zrkR96luD80yNHmXlrbv9VSNn0NZ+Q/lhoGVsgv4j8SrEh5yzrZv2Lq/9hguN2/FQWj4yKE4b93PnjD8CnHP+xzyctrhcU/ssiQcwn/3j8S0/V1X3jNv2kuqVqETLS/2Sy/43Td7L+b/tCdqYfQP3rM/cJl0cM/nQtgZYo5oT9/yyW1ps/av1BpQIiqD6C/kUhgbnqT0r8Bej6YKR7Dv7KnLTXjGd6/AmwcNF266b/ZM2CQl0XaPxEiM5Tn0uC/CwaMPhFv178oaO7p2+bVv3zlGqsm89C/tBqqlYO32r8wWwKydLfxvx3XHcCHHMA/VGcf7D1tpb9pcTXSvjntP1k9Qch0ccE/BKmIBl136b+FTQsNUYO9P2DHow9QtHs/9kjk5hWb7z8zA1Kkwzbzv8XvSdk/V9C/o0ocBbBgq78wZtt/IHLTP8KfUVwTve8/4COVmUyPsr8w4t7GVpTXvyFkn2aVlNQ/aIyVKz0tuz/MLSLWjADLPyBjmDLzvbA/CioahlSM2r/PF8vJsNWUP4s0g4U43dg/HNNBw3UU0D+PXyzIvVHev4mljpKUz8G/OBMdczbRsj+FPbidT93ov5pZmO/IXuO/xo2elY107T+kOh6TgDXRv9f0Ikp5c+o/JWnAuVoEqj8LZvjGx7/Rv5wu69ZBLqq/oKPTLGLR4T+uUI6pu0fiPwea8W5+f/K/yeFNpLaT2D834Cxj0YzrP3IGyEkO0r8/owtSNU1mcr9h/Kf4qgbaP2sBjBdvsuu/ORDHXnbYxT+mppV5QU7kP3/1xfAOCt6/x1gV7RDOpj+/TZk9E0jHPwiNdybH3aS/HLQ+/t6a0T+aErzXKpDfv3tIfPF5WdI/cnp//vHU5T8Daby+oEzdv+T0fZKRUfE/+FvHf9S3479IKKgpJvXRv0t0ABzUU+o/Z5hV/5e+tL82iP+cGyzQv87OI6L6NtI/oUY0KhgJ7D+yMgXf0FTcvzcnCVBworW/N7sOCzcA2T//0xCPsVLKv2TbJxmIbLO/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcwNDg3MzkycQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM3MDQ4NzM5MnEBYS4yAAAAAAAAACGdZciba+6/E/vbNDhnyz+6jECKwpjsPwCVViv3saA/m8DGxR/yzD+xGHKkFOjkP63O0WehMuS//2IOZIgryr+I//Ed1MvyP5Oqi2CXoM0/RF9kOryz6L8yiZFUrsHSv1zerQx2GtO/X4wgGchn77+ElM4TzR/Fv9zJnqwdGdo/FRB2WYJa+z/nKTpdjyf2v01vApgB9fE/V9tuim5cuD/ISHXFOa7nv6Y6b0b96dG/qq7nTdlV5r/bNQOFVT3WPwRf6DAVNt0/VYp6ZRuawj/bsDVIUHfrvxAqje25DtM/WXmYkm395L9BD7opAI7wvzmQn9+4Bu8/MeuyxxMY8j+3iHQyXTCbP9vAphQkWdW/ygwpWiP39L9pZJzbg2bPv3F/o3J4978/2epXVgLXxT8Qwx44P3fUvyJh0X5KNfC/xBIOxNHczr+12tphhH6+Py7XynvGUN+//oPgHU7n0T+6OW3UtmPuv9k2YILMduO/bOW4S3IDsb+vDtZK/Rfyv2KQYvJqOeW/qDDOXBURz78="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcxMjQ3NjQ4cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM3MTI0NzY0OHEBYS5kAAAAAAAAAE+wbXiSB9I/rCJhE4Q0qD8y1vGNXi3VP13zarxeKNu/R0KxcZeVzD8M8xSwM4bXP5V0u+nhIeG/sDm7ayWlcr848BoMesnXPzMyrU+I5WU/3gptPrOMO7+VXQJD2PzBP/NIZIScsrs/20nBFgUs0L/hzPgHO6fXP+vMYpqTBcA/59RoMZQM3T8T3yoFPzidP6wyFRpncr+/Uj1gRkSRlr/h+Cs9L6e8v7Bf1fxEgIW/Gtge3C/kur/CuN7ev6qyP2ozdMIFApO/ooT4DDram79zU3mKiZ6ovxYmbE/bb9G/1Ek5g6DfoT8828Sk9Ye7v3ao+wDkRMI/i4BDkje6vT8d5O4YKZrLP71/fYi8ZLs/cLTLm7wXxb8paYGJrH9sP/6IvAGa+Ic/mxewCzgdyr9xM0pEApi5v1IaMzZpk6O/i23gSKYxw7913wsiixrEv1aU2y7kSdq/JQs4Z6kpuD/Huv3nv1DAP+9sD+Oih9i/992fUE/qtT/scsjzuYLYv9Q2OabrgKS/xwA7dYRglT+Hc2LlTVHYP8oBC0izWqu/p2oIUDki1L832SVq/DbCv3tCPLEco8A/N9lYUG091j9rINxV1qXBP8flb+N/UqW/ts3KEZTzyD8wc4yCMLCJv9Rcgt5mzLk/hE3dfi66jT/SdDVnp6xxv3ybmzPOvrI/BdLyP/JEoT/rNzxStwTKPzwHZFe7ts0//+gv22xz0D8aAgo0hJauv94S71WV1o4/6GO+JopXwj+XovduOIarv4GCe/tNtMA/oDbPIh++tr8wgsDGSiuEv+H9E24RTJg/8N3dm2nvyT8UGFaM002kv17RiY9ba48/vOTYcnod2T/D6iSvXabQv19AT2l9M9q/ZpXU/XCBwL/8hkv5KNyzP9jDEWOtQt0/LAibhmv5sj9f2LcY1tWrP7wj9TTyusc/sfknEfQnwj9rl8cKvJ+9P/nVkHS/udW/iUoIOIX0tD/4M6tCtxzHPxMTP118Dcm/vdid0JdB1D9YJ6lZX5XSv0GC8vjefJ8/G83BTNTGvb+Q7te2rCnBP07Z3JFf86Y/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzY5Nzg4MTI4cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM2OTc4ODEyOHEBYS4CAAAAAAAAANw5B6M8A8k/iPi5/YbE0z8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    2,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.8287634906266358,
                        5.863078906467232
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2
                ],
                "values": [
                    -0.8287634906266358,
                    5.863078906467232
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 70
    }
}