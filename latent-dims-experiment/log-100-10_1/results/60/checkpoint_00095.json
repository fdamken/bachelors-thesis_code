{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9557101154864478,
                            0.020541550833092444
                        ],
                        [
                            -0.04905351309607633,
                            1.0116191310193443
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2,
                    2
                ],
                "strides": [
                    8,
                    16
                ],
                "values": [
                    [
                        0.9557101154864478,
                        -0.04905351309607633
                    ],
                    [
                        0.020541550833092444,
                        1.0116191310193443
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.0027492880142477054,
                    0.004553902774056198
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.01071737190605927,
                    0.032010775839398604
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.00045596554428189995,
                        3.7235919174705145e-06
                    ],
                    [
                        3.7235919174705145e-06,
                        0.00110074217771583
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzY5OTExMzkycQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM2OTkxMTM5MnEBYS5kAAAAAAAAAPCIbINFvuy/zCT9Bksg1b/IgfPTu/XVv3RasqCtG+e/j0KyWDttyT84Dd4lDl/bv44ZyR8Sb+M/lRu5RZZy4z9E60aNAhXUv/Zp6T8Sud6/TTbZk39L4L++1W5gG4DBP1PuRYV9pbw/vCGftFFW4T81kS2DrTLNv/HcSgWuKr2/a0ni43Va6r+svo14CgTMPzYlQ4NTIck/vdKJEn40qj92jdoksBHdvzXRVVhRN7C/NNMJXVdT0b8tIS11+bu/v+SEolipneK/JtfRZEKb4r/H1F011HzMP64yPJWPPOG/0jNm2KTx1r8TUqqgUOHWv8o6ka+0ste/EIAKYQxO2r85v6n1R2Pxv9837LHl7Lk/4B2wt8Zywr/6r4/W5IvtP/DRvqXrgbI/lQU/rBkk6b9/oFmxy3itP/ZsOMQUp7U/wOqCUMzr8j/nBzXyPp/1v0xi0BFOmdC/r4ws1zv8wb9Fz3drdojMP6vcitc7re0/y9MLNfgaSz8CuGdEe27UvwsFiTxTpto/42ZLZYBmxT8NfQ9sDQPGP33SEkoLd7Q/HTABbcb73b8gRj8roomHv0OQf+54Kdo/pzLCKDEbzz9DJfPILFbgv9u3GsP7FcW/ULeddxmTxD/iu7SrMinwv/pd/aqbcum/vzT/s97K8T/59W/mOzndv0A6GKE1dfE/XJczibvrwT9jWr6w3ALRvwPN9CeM3Km/HRl0RVVi4j/jto7NG17sP/InE/2Pwfe//o6CQNp62T9/nkOKkiDoP+KT/TUG57g/9P9ZPnm4Tz8AjbAt36PXP2anuV6T9e2/3ZpSfNlRkj8wuBnCjaXjP/GotrEh2+C/mAuJNhfUcj9w0KS0fn3PPzJea+g5S6w/OzDqeLH2vT+IRLoUzRbdv5F3hO2mzsk/nQYY0jOD5j9G5JZXY5nlvziW814AqvQ/b8TREe516b8dbQCQViLUvyUsIfL4POk/yqDxnZtyrb+dXc+AbQ/Ev+npe6k/oLg/qtdxdBWE5z/JKaZkQJHXv0qemZXugMa/zzVasqtQ0T+Rf7D/KjjEv0eQskKf1L2/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcwMTAwMzg0cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM3MDEwMDM4NHEBYS4yAAAAAAAAAD7w/Eop/O2/ySrjj6Kw1z/EWvWFXg/uP65D/h/8vqc/hQHMboC3xj9fNZuSoc/iPzAEcCsaq+O/xPfY1Chkyb81rFA2VLXwPyHDxkC/XcI/TyC2O8nb5r9z29gcYGrSv6s6YZlLfsW/fsJu/eVK7L8T6ZFIPpjCv/3cStVKOds/1aIsKJot+j+vUIaIwEf3v3Jzhw7rsfI/025WS8kqsj++DQohY3TvvzwRnWPa+NG/DWE0k7EA6r/CGbgUvPXcP3W55dp1Xtc/DOMrTGOSyT9z6Dzw7pLov5Zfeyhh+9M/Pi06V3u34r+ZzxD6Ejv0v5jwFTIvbfM/UwUkcLOn9j8NFGB9rLqyPwpgXU/bDN6/AI4QsS8i+79EnLt71J3gv+UoEcDZr7M/xaZyC/RGsD+U2TSJScbav2vQvetisuy/YBFs/4e8w7+KaRotdJfGP7ZhEu0wCd+/jNj9MFyV4T/ibPm/5Lvtv7NL5OWetOK/nTSSq7BGz7+wSHGft+3tv5+/zeMtVea/KgcaqApmyr8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcxNzg4OTYwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM3MTc4ODk2MHEBYS5kAAAAAAAAALaItBmJstU/Tp7bFVMorz8fmTA4skHOP46kLI4D/Nm/YM8Lg9UXlj+QlE1wGK3WPwBorpihFd6/WsSHsGl+mL/pdB1xmjHYP+l1udikVZW/IC1IIkNZoT8dTmqvfO6LP8XfGbpNQr0/AgxW43iK0L/SUZ9pQ5DSPxXIQiI8Lso/mUAQjdhu3T8vmt1x09KdP8zZUqcC8rS/JX/6kwZahj8jGZcNXHq4v5w5RvwO1Hc/aPRJoZ55ub9OIoJd1XepPxlisc5CH4Y/LiFkEETMoT9JPIcwS6OIP0/pFRGy4cO/9wV/3B1Mhb8M3paUFCy3v480N94W8sM/TtsasUL6vj+WzdR6OmbMP6/FE5HBS7U/qFj7OGkvxr/orbTxnmmjvybXuznqApc/A0Ts82VGyL9QEa35Wcm5v9bjcLWkmXw/ynnKpz9ZuL9OGN+Was7BvylbwAnir9m/okUkrf7Xsz81BBQGjWXRP/uQnxmGute/KxxrpOREjz/qsnc8KeLYvye490DeD5S/J6gvvOAejb8+nB7Cv1raP+NUF0zpmLC/0UwbZbwI1L8GAEvV9GyTvxBaI0nMuaS/cQZI/u/i1z903jvdiYTIPylvafwWirU/wT13n1KGzD+tkrfeolSsv9HQCBiIgpY/NmHBdhmUrD8EqWm1hbiDv+7cmS9poqY/WCfv2DEpgj+pYF8ED0jFP4X/Q2UbrdA/D0fCHbqg0T9IJViMTDu7v9jEAYLT0Ic/Ori/tAB3wT/xL1CV0Id9v03MK9EdQ8M/ZSloWWB1sL8SGddYE+y5vyiIEdYACaS/YQe0oUj4oz90eLaeBCuyvxafSqYXqLQ/Br0lExK/1z/2Rl4Yc8bQv9Pj4ivjAdu/OTJ3QXmqwr+4YUdQZ8e+Pw+CFnF9WN4/dPaqzbtwqT+dytf+vmejv5yFTLPCEsY/wfvC0dfwwj+E1z0MrdCmP9gHL49lZtq//69B1w2TmD+jmGj2A+/KPxo59uFL9Me/EE+AF2BXzD+RaZTIaFnUv9yVsuunWqU/lHixRy5cwr9MVtpok1O2P6JXWVugL46/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcxNzA0NDgwcQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM3MTcwNDQ4MHEBYS4CAAAAAAAAACCS6qGiwMk/xumWrhCX1T8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    2,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.43110327147848215,
                        4.590420691719806
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2
                ],
                "values": [
                    -0.43110327147848215,
                    4.590420691719806
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 95
    }
}