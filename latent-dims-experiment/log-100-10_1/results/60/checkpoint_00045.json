{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9457884295465749,
                            0.019353017334038113
                        ],
                        [
                            -0.051397347506515194,
                            1.0073217895718332
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2,
                    2
                ],
                "strides": [
                    8,
                    16
                ],
                "values": [
                    [
                        0.9457884295465749,
                        -0.051397347506515194
                    ],
                    [
                        0.019353017334038113,
                        1.0073217895718332
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.00793377252635921,
                    0.012944183533469397
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.012744746175072577,
                    0.06687530462202193
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.002497880964678123,
                        0.0007691113003032157
                    ],
                    [
                        0.0007691113003032157,
                        0.01175346129420518
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcxMjgyMzM2cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM3MTI4MjMzNnEBYS5kAAAAAAAAACNqkkqtOeW/UeC++NSx1L8ZsdNsiFzbv4IxKXAdz+a/RTfe1bXPur8lLWzMOmLdv+eiLaPfhOU/qJDCG1JA4j+XhF8G0e7cv5OshVWnvNm/g1PlHTZO478keOuc6fzEP7dbNY4RDNQ/XOi+OVIP4D//ou5oh97Iv22BTG6zsLa/xJL22lhS8b/o/T9HDnPdP+KOjS0Y+Mo/U+rAAdaBnj+YxxdtGn7av43/BPYfFKo/M3gktQPu0r/ZhN59ltfDv8pjYEausuK/oZUml3v25L+XX02lskrgP1HKzoJIH+O/kw/1+xo03L/cs2J2n4zWvwnGhq5tvdS/kWGDH6dH07+V6JaYmDLzv/sA0FgRTcg/ecdPlXQctT/EVlZiFPHsPxqnqu4LiNI/otxfMnNA8L8V0yvBPuOsv3l/J8peLbW/OO17TDBE6z9XAwkoHlbvv0prNSxKltC/xmvjteiquL9dQnAIZifcPx6NwsHcoeo/kAXbCfzWyb8jULkKGVTevxttNuTp4dM/HwWDUeaHvD8h7u4z/wHGP8bttohFXZk/GLKzHQcZ27+M3Xiecsy4PxBNoqtvLNY/aiftdBBv0T9OW8txtSrYv+Uksbq0ILq/4HYRTl3JuT+wHyRKtGrgv4rwkKfV79+/0w0QYmCz5D8qBgkv4U7Bvwu4aPTEs+A/pexx0WCYwL+hEAUIghvOvxQOFovmxMm/7CJPAN+z5z/V95feMnbWP8Gc5l5UBOm/7/LusmWb1T8aERuKy4/1P6cu26VV88I/dAbPn3OFz7/nKtSKI5PZP2GlrjFrgOq/pBaPnPUt0z80WDC1u+fiPxTyZRay0d6/8j30PPQ2tz8ITyeh0HbJP1aNrxZLBLi/lgQpeU1j2D95dNkVJufhv2440rj/ed4/lNnYG+ZI5D/kNfl4zUXVv23oL1Bd9+k/S7+V7e1l4r94oG7NDt/Jvz22jNWxZuk/OqpSRHVtt7+dihj5EB3Zv0US8BZcj9c/i5uHdEFc8D+iqx2kHrnlv9p4QzbNerQ/SyJjTOZU4T8TLQsNSLDdv7ujrLzmosI/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcxODM3MzQ0cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM3MTgzNzM0NHEBYS4yAAAAAAAAAMsFqfI8L/C/gU3qHPwW0j+fCtPE4SPwPxpW8fRYJY+/pJKeOThw0D/3FdaE2fnqP8JWxhBV8eO/ezaWObP50L9ykKp2dkH2P6I86Gdft88/uo0cCm2N5r/28vC/++DWv1RxtwEUdcG/mQjO+4S98L8EmSM5eFXJvyJlqNNmvtw/Z5Bx524D/j+Iaf2buwXyv+FEh0WTqO4/+lp3DyDHyz8PPiMvxUziv5m69nNOMti/bi2x5dW16r9Bal9oFCDbP9pY48k1xN8/MC/S1ef8xz8YxGUJRzzrv2LEEhxc9tQ/cGXKJ5do578R4OX1XA7rv2mgdF9GSuc/3Z/aaqDj6j+LtjqwLU2/Py8GZ9z2+8K/5QkFYiHK7r9C6UKDcyiZPy0oR3QXb74/SEy6QSNZzD+6DoP93aXbv/uNE7i7Ae+/FQ9BKU+c07/1BJ+iSwSyP4qvkh+NaeW/iTKF3zN1oz8XtxI2zv3uv4Wt0Trmj+W/0g+BUWndtD+phYnKmPz0v0E5ep6Gs+i/w3yBznLFo78="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzY5NjY4NDQ4cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM2OTY2ODQ0OHEBYS5kAAAAAAAAAElgPPTMWK8/50eAyCt2sj/7MuofbLfRP08Miq2/obW/Dr3KHFTTvj/YdGUY9N/UP01bC0sip8e/sRyHas8ncz+lf33myAvVPzmxycu8eaE/IzxpaugcuL+PpzQhH6nSP8GVem/Err4/ftjfHV0DzL+3t+erpYPKP7h2sOh5xM4/jREWv1dG2j+3kLH+TzWfPwDAp73Q5bq/mlF+nHVEoD8UuE+k1kW7v79NDsBZPbk/DwxkWr8Twb/a25RQ+5O3P5zipHI22bG/Z4SkVqs/mb8YpMCvOGDCv0noy7P9IMa/mE0IMnODnD/GVjskqW6av28MNEwSg7c/Q4AhUS3slz9/raaqR9PQPzmz/VW7sLk/idEkahrvwr+1UBBoeiKIv08HJI0l/YA/POd5vUCdyb9eKp8CLd6/v/KDFI23N8C/D4X6ZQN/wb//T1WdO1fEv7kCjJKWr8y/+deYNzC/tj+UimyZ06y5P+/rN7g9ytW/QQghQzH6sz+/42HDsNnVv0ILSobGKay/qWSrD2YUib9xNl1Bu5LUP0d20MdH8ay/BSKyjfj4xr/Vvh/1ehicvyBqSm8qWLo/BjBBnYSA0z+f7aNVRA2lP/n4A2VcCIA/oX0SsRX6wz/00TTIV963v354+DFKGbw/ufrB5vuIlr8o/obEZD2Xv2VXGmRg068/4Nix/YAOmb8hspR8wvG6P5mCYQmu5sc/uViDv8xfzz9bakzUv7+iv43rHrkPpYU/gupPYEsDwT/iwYt0/AuqP/vM15gwD7g/BQYBWgKItL/7vYUOIS7Av3bMtJRS7ai/tcbKBxIv0j9H4OraqHinv7cinGJsN84/BQFKRSCM1z+ejpg+B/XLv9PNOuf9mNi/c6BIHai+vr/mHtkZ+BCyP3iRk4HUQNs/X5D8VdEmsj+vGPYFaoeqvxUqPsLlFcg/iaqQz1BWwT+cybKYkKrGP4ZPr7N7I9S/M3QCSz0ytT8A1V1YzQzFP75kAu5RGcm/ztQCSD1LyT/sa335+YLPv7w0mJ5mLaY/CmFuIj9Ft79QfgRN6irFP6daMpvkRm+/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcxMzU2Mzg0cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM3MTM1NjM4NHEBYS4CAAAAAAAAAHM5KSxTdcM/RXhKvj/T0D8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    2,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.5807300792359555,
                        8.785244426448727
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2
                ],
                "values": [
                    -0.5807300792359555,
                    8.785244426448727
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 45
    }
}