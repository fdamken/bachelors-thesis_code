{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9999033132944065,
                            0.004617199017874939
                        ],
                        [
                            -0.003721531987402322,
                            0.9924930927352719
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2,
                    2
                ],
                "strides": [
                    8,
                    16
                ],
                "values": [
                    [
                        0.9999033132944065,
                        -0.003721531987402322
                    ],
                    [
                        0.004617199017874939,
                        0.9924930927352719
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.19699360699677068,
                    0.1560601573020652
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.019545545462151495,
                    0.04376232655296013
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.011189311266752267,
                        -0.0006680270471015604
                    ],
                    [
                        -0.0006680270471015604,
                        0.09336761895495727
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzY5OTA4MDY0cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM2OTkwODA2NHEBYS5kAAAAAAAAAIgvrcoJAeW/wlnfXPRQ4b+ZKx5sIEnTv1q5/5xG6ui/SxqGdWmGvr8xf5i7cxvZv5D9jfS7euc/hFGCKytC2z9vLdHzTSXiv34nbsY/09G/VYneV/Bc3r+zWTqVTvPLP3+nRl9zoNU/BulwreeA4D/nHUOKwuK3vwywfB4w95+/fMpFu6yR7r+4D94erOTeP+6JYafEibg/pKACvfaxqz+31/SOGf/Nv6LfOCLbVMI/8ihnhYKHw7/FitJZzxvCv8Gll9AG5uK/zUYEEp3o5r//4JFMy7fhP1erBpcf0eW/O+DsI0q72L/vDpcKwZrUv0ubAbwfldq/MKXKirrFw7941TxeTDTwv/Yzws1qP8k/W29pey9enT8hJLvUIoDjPzhd6iPwP8Y/f2IOAOox779mA7f+Ryi+v3syHfacqNK/MnUOos5J6z/oniGaj1Pqv2QBr47aC8S/Cu/Ks/Biu7+4viuxc3PgPxs1ct5udOc/d3fuXB5Vw79zBryrbN/iv4GJre8ScsA/OoVl3gjFgj/ez7+Me5O9P4rZts6KoLy/MoDj5sBy0L9w1UB0oZa3P48Sv5pkScg/50bVT0Ax2T8ksZ4ep0nBv52fF091rZm/02K5LwasuT9aZlqLH1bYv7I7BqrNI9+/BH2WW0/P4z+ZqOT9+tq/v/WzI2mGetk/KXMJ3tGCvr9gut1MnVjBv5+K4gWiabO/c/AWY+gT6j9fFIRaa/3TP24WzwOvGOa/bKZpwFnrzT8BebW2wpfyP+/TTcHos7y/JYEvGOyi5r/z6ZtGI33JPyyEiPuqTeq/RGD2Bgxeyz+xuETm2DvgP0+aQ1cRq9m/XUo697/XsT9giRHKlLK7P442gA1eHJy/ElmArg4+0T8PNgk3A6rmv8iPgZ3rBuI/CuG/OpD13z8G2yA8oqLDv7z5bbes8eg/dWqxtayo6b9/2bF7abzYv3gk31RT/+0/8PuoAYGahz9/pDQkWgTYv9/gjK65Pto/a8nlPlSf8D+vpHM4KHzjv8PtP9Bit7k/IvZ9XHHx2T9awuH2gjXXv/UeknyQP+I/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcwNjU3NzYwcQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM3MDY1Nzc2MHEBYS4yAAAAAAAAAAPkjqvdo+e/p6XKAbmOtD9P3kch/rjqP2815c+YdLe/jgMPc2je1j9gwrWd93fjP4nb1vTZ7OC/VhLe/qyr07/r9Z7MQOvxP0vXG5dMBNQ/qvnCP6GQ579p2YuUc//evy4VsVPOyMy/oQDlglLT7r/TIkKrYyjPv0pxRhZ5keA/c9tKapPU9T+X29+2vZzqv4lu/37r8PA/trOCJ8Q9yD8yf65Ba5Pav+ch2+u3W9+/Qzla2F5w5L+7eUBDb53MPwq1vEy7FOM/fXqLPwcbzz/jzvLAlcrtv4+Osif2z9s/YbDHw4y967+zyj0j8Q3ov5ksR0AdF+U/hRTrJb1+5z/htNW/rRShPxouzT94O8y/BYb3vVql6b9lKJgNKvPUP0ie5bh+Lck/2JppFcq02z+9FYpcocHCv9NsJad5MPC/yyxlcJIP0r8+Z/hd037MP+gHy2VyfOW/ISiJkM7Uz79qswAz3bbhv9LbBQgtfdS/nEBzAuVSpj9a15m+/z7yv46P2llTy+C/cgZ8tJgXyr8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcwMjYyNDMycQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM3MDI2MjQzMnEBYS5kAAAAAAAAAGJq4ILcJ5m/mxOecmmKpT/lRjhMiXjBPwD05DkCVLO/y+hPSzsWwD/vCrVH/0XOP7HyBeCxr7O/W/vob2W3wT9JR9YrMD7OPyw7sqXHkcO/qC7dv59+p7+4XowOYoXSP7B/o0hy+K8/L22Smzu5yL8f9uGqKoS+PzkoTaxkwcs/jB2WIxM11D8vPKFPA5GyPzUBDQa5Wby//+aCeGErmT8vKGgZCiO5v+uoq8a498w/eePYiT3ee788U6iMDLawPwLq9WUKEse/LACEUAEJib9M7yHLaCa+v2l805DwWsK/j3tP0FdcdT/K9u/6IRu0v+p5ZpmadcA/JIPbuXsGtj96oGGvfBrTP2mc8kQhubs/XfvAXsHewr+uO6iDWRh0v8M7Asl3Ehg/+gEe9dkWyr8rz1uAE5CrvyKeIQemlIe/bFVrmrKjtr/4gyudwQLAv3Ftl1Yk0se/liBlQVp5tz+oskxCrxt+v7ejSlPR/c+/rc75IE6bxj+QXV8G27nPv9ZdcEsLqYC/Iy2D9w1ilT/kn3anOuG0PzBJBzRDGKe/PwtK8mxaz79TQnKrSwmRv9wgBIC+GLU/VHl38uo4wz+IkOMrZn21PwWhH2GryL4/heYeUQh+hT/vMoyUEVLAv3qPJPfSwMs/QxfZkHPZm79Bwuk/XbSmvzawmAAxlZS/gf5zrS5tn7/FbSF/IMG2P2MT2ERkdZc/iDPooIQuzD91wMHGfMNzvy+IRYG1v5G/jXDp23BirD8mGUY4q1a7P4ucSR+GMME/4qMNtJWntb+bc5en4BnVvx49G3V5I58/kJ10x32izz9carGtrH+nv9Jno7fYutQ/24FDo2VryD/uMvmtDwiiP48GD1pDzMm/FIs8SCr5uL8jbM4vqMKvP1nGLa0Vf9M/8xmSs0t6pT9AbJ5CimGov+yskasQ9Mk/sNqV9KmrxD/QbnJ/I7m2P7fzHK+HeMe/dymVqLQztT9WDqnd+sPAP5BXmqluPcq/XLYYHcyJjz9x5bJivqy3v0+gboNLyLs/w1AsSSLkhT8/bsOAdHjFPwEs1Mzgy4g/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzY4NzcxMTY4cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM2ODc3MTE2OHEBYS4CAAAAAAAAACcJTeiP+Kw/ID849rUxuT8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    2,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        1.2991085241555205,
                        7.685599350543776
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2
                ],
                "values": [
                    1.2991085241555205,
                    7.685599350543776
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 20
    }
}