{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9634538730656939,
                            0.029882271021835688,
                            0.035159422715021586,
                            -0.012186291002404391
                        ],
                        [
                            0.010649478599660775,
                            1.035293976334574,
                            -0.1187586181028803,
                            -0.01327020954360761
                        ],
                        [
                            -0.0044614969782787355,
                            0.020801537107595258,
                            0.9682573355855091,
                            0.03581989186437045
                        ],
                        [
                            -0.006116853464985456,
                            0.04408345913009995,
                            -0.07703908073369982,
                            0.9352422511258622
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4,
                    4
                ],
                "strides": [
                    8,
                    32
                ],
                "values": [
                    [
                        0.9634538730656939,
                        0.010649478599660775,
                        -0.0044614969782787355,
                        -0.006116853464985456
                    ],
                    [
                        0.029882271021835688,
                        1.035293976334574,
                        0.020801537107595258,
                        0.04408345913009995
                    ],
                    [
                        0.035159422715021586,
                        -0.1187586181028803,
                        0.9682573355855091,
                        -0.07703908073369982
                    ],
                    [
                        -0.012186291002404391,
                        -0.01327020954360761,
                        0.03581989186437045,
                        0.9352422511258622
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    1.15351502945254,
                    3.2504541242431255,
                    16.98487895425294,
                    6.407138448655626
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.2455248614025022,
                    0.23833912596258927
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.011742243456447587,
                        7.750403222156477e-05,
                        0.03546837283900617,
                        -0.025877141295902156
                    ],
                    [
                        7.750403222156477e-05,
                        0.04064661896349442,
                        0.06586067105876126,
                        -0.008960409721160967
                    ],
                    [
                        0.03546837283900617,
                        0.06586067105876126,
                        0.418912378323288,
                        -0.06987731046563228
                    ],
                    [
                        -0.025877141295902156,
                        -0.008960409721160967,
                        -0.06987731046563228,
                        0.10017881509278473
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            4
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            4,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzU0ODMyMjI0cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM1NDgzMjIyNHEBYS4yAAAAAAAAAKfPjA8GXrw/vCSH7g0M2b9DrHL52/Dkv0suJHwGbd+/R93H38Vj2T992BzWmx3WP601DUGMZcI/VbL3xTa+0D8iGLoaUXi1vx6M5NDEF86/kH0jLtbV1j9YKHwVvkXfv6uwOyHlDdS/iddH5X9qqz9b+Gs5nFDVPzDHOvoNg9U/c8ZgDXOFvL8q+hBMZCnbP6f9AmZ2jKM/sjCOM97o2r+l3xfzBBmlPzUGbAgETtI/WyPZCm7H1j8Umm2sQx3av6U5k5yXB8m/n5rDwBzSzj//8+EX0VvQPzqV/qvvgei//ulmgdmQ1D95M6ns4uHVPzObciTsgbo/V1sAdrqC0r/Sgk713geqv0KFxR6ZKMA/SGV0pN2Tyj/hUo7shWqyP88LHmmdkNe/IcFK94Iu2j8v0y9+TjHhP3IeEpbdGcY/W+nKeUKg4b9GFr5xt1PZPwQBAiN/ZOA/HlkyKu//479zUDhzwsu1P9QnSz8Eoda/LI1qhPB55T/GA4ZYnJTQP20YuzAOjLo/U2rf42uhwz8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzU0NDc0MTQ0cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM1NDQ3NDE0NHEBYS5kAAAAAAAAAAGg2Q1i7cm/mqmhHo81rz8ITFfqQuXSv2hHrUZRFZk/bJlxC1U8yb+yb8vOZ02+v0t/hr3Hbsy/AC3OMS9nvr+64cvuo7vDv4Bc+Dyb3se/6hkzyITCvr8i+ohz6/ynP7En9FK78r4/MJZVNI5ik7/csom7m4K3PzswXs+qlrC/ph62EHMRsT+33ftqfF66P+H91zIrc8K/6g/n3GBVez/2cePX8fyxP3/1sw6vUKS/RGc0pQpQrL8Xnj64YijCv7N4Jl982ae/TNFwJ9+vxL+LKHqlcUbSPwKvO7PSiqy/Mq6oxw3imj84fG3mT+Gxv+8ClZFfRpm/AC0X5/3UnT84+KUueXvBv5kMB18I+6U/0ci8aax1Wb9rm+48H/Gjv8FvOvkFXK2/Eg5WK87WrL+E8tCAApXCPyqwKBfde7W/smO8/DB2pD8Qjg5P5V67P728/MRJYr8/nj0oPRxAxD+g5RhLyzrRv5tUpG/sNKc/4x+uPSfdrD+TG9pO55/Sv2aWc7/jDqS/4A9ICijeqj8h5ngz/Hq7P6SWAGgIjZ+/zBaQV2Gpsb9yp6Ub1xK1v6oRZU1A/Lm/VSloo3cTo7+wMDnMDhFpv3AQ7Ukq1Yy/3+xCdlNYpT+/XIlqOAyYv2b0dgqPVcC/ldbr23k0pL+L6TNEuP+cP7Bfaa53LKo/6yisOXdXxb92Th8VOoTAP32VE7VecKS/ZaymIuPFtT8Cl3iq7DNpv77mvZCr9IW/7K0sxVjokz8/ii/o53OgvzrQv5lPTrG/2yZpWoQsp792YdUEv82cP895Yh3VOrK/VvyMcfcKur9OhITPGfjDPyKrCRriso6/qNEm5wNJgT+nOWeeATS6v8AJW4wrire/zBCoqbWFs791ZzLWMgigP3XnZ0hlbry/OKq6vDYnjr83CaRnG1nSP/k821ohNpq/VVevHxsIwr8DSkDxUoCxv8rh9JC8FqY/sc/TUnuGoz+xTwnCTCCgP01QAv6RHrq/n7RuMkOst79EnAuFj0Cjv3b6g1fawaM/jHObgpedhL/XqlkGT66yv5os0U91v6y/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzU1MDIzOTIwcQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM1NTAyMzkyMHEBYS4CAAAAAAAAAEFAz200GMg/uqi5eqMUwL8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    4,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.2132326332293526,
                        2.1972760682084744,
                        5.5828816497925535,
                        -0.44800679823666245
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4
                ],
                "values": [
                    -0.2132326332293526,
                    2.1972760682084744,
                    5.5828816497925535,
                    -0.44800679823666245
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 75
    }
}