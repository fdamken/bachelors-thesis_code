{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9612941780960319,
                            0.0044754445365383436,
                            0.060608455331947676,
                            0.013475265485204635
                        ],
                        [
                            0.015418089337186539,
                            1.0451402410282207,
                            -0.10580803342146802,
                            -0.03108552725548768
                        ],
                        [
                            -0.011156986904649507,
                            0.026548852606825584,
                            0.9815640474667513,
                            0.03756858364805139
                        ],
                        [
                            0.0008314232095193751,
                            0.0436139995299234,
                            -0.07270571804084151,
                            0.9368112135782921
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4,
                    4
                ],
                "strides": [
                    8,
                    32
                ],
                "values": [
                    [
                        0.9612941780960319,
                        0.015418089337186539,
                        -0.011156986904649507,
                        0.0008314232095193751
                    ],
                    [
                        0.0044754445365383436,
                        1.0451402410282207,
                        0.026548852606825584,
                        0.0436139995299234
                    ],
                    [
                        0.060608455331947676,
                        -0.10580803342146802,
                        0.9815640474667513,
                        -0.07270571804084151
                    ],
                    [
                        0.013475265485204635,
                        -0.03108552725548768,
                        0.03756858364805139,
                        0.9368112135782921
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    1.1177263615412565,
                    2.5213043158123867,
                    12.6644869738418,
                    5.25661362440058
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.1402531053083203,
                    0.13057081933427292
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.011841207890950597,
                        -6.983579955432972e-05,
                        0.035462549783631614,
                        -0.02619368052933177
                    ],
                    [
                        -6.983579955432972e-05,
                        0.04429453445578879,
                        0.07106677280168405,
                        -0.006511692046927697
                    ],
                    [
                        0.035462549783631614,
                        0.07106677280168405,
                        0.43546266831453906,
                        -0.06759070328916783
                    ],
                    [
                        -0.02619368052933177,
                        -0.006511692046927697,
                        -0.06759070328916783,
                        0.10250039656516548
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            4
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            4,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzU0NzExNDU2cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM1NDcxMTQ1NnEBYS4yAAAAAAAAAKI8wYrxr7Q/3nfCzogg17/eVVZ+x0Llv4nlWl+Bgd2/VDJ/1e6/2D/vGd3LxHnVP5Qf2QYEHb0/PWCqu18a0D/CZGvzjiLBv1+wg+VyX8+/NdXiI/8x1j/XCIDpihLcv5cS/BYOatO/SH5+w68cmD8OY49sz4PYPz3l0cfaT9I/PvG04Bb2ub/j78V+l1zePxY/rLk1wYA/4gm6JFn92L8/dU1FvTeqPx6vJf0sqtE/3jtiAJcj1j+F1mjfdlDdv4YRmgH+bc+/WvtDrG6KzT+IhPFKBI/TP4Up4iYEMOi/wJy7sQzE1z9TkQLOXfbTP2V5eEtIEb0/NLwLhg6fzr+XIu3zA7K0v+5SPzNHcME/WcovBSJ90D+toEyN5HaWPzebyIcifNm/jDq97auK2T8VyE35Yt/gP+hY4PtDgMw/9Keq9FZO4b+Bs5d4jvfZP/g8JahqtuA/26bTkFVm4r8pJStP6/2hPwHa2CB/tdS/we+ECdzL5T9sF4+ciuHPP4fIvAey/Lc/ySu7SdIHyj8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzU1OTUzMjQ4cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM1NTk1MzI0OHEBYS5kAAAAAAAAAAxpVCIQNcu/v3i2zNYWqj8ysJT0GYnTv1qRQfVgqaE/ClnsHwOEyr84OtSlC767v6BNAdJ1ts2/kPFhrUV7wL83oEYDUgPFv5E8c1FJJsm/MVVdTXAUt7+G8HPFoxutP/269L0LwcA/P2gu2P6fnb/a437k9xG6P8+yVPgGJrO/aix9zy0ErT+JYvGT2O28P3ezUkfZusO/1SAp28gSkT/kONoAToy0P4dmknntY56/ZqyPe2G3sL9hW7nMEHDDvx1NSQ3EuqK/YXfrO433xb/fhbevSOrSP8lsk4LF1LC/RyrTI52kkD935mAPrHC0v8qztRrowaG/rQhzRTcJpD+hxyBDJ8PCvzG7EQ1Q3KA/bwF1uitMgT/Qm9mO1w+pv1QPWsnPeru/flhr2RW4p78vi0yVsNzDP3IUM+6A7LK/ImDUGyBohD8FIAR4Qe69P5Qf+fbS+MA/cQejUcqHxT89R1ZVot7Rv7MnuR00FqI/+ynNx+/9sD9pqCEwYrTQv9q9YBGcLam/Wf4FgCgdtT+ujIQKoOu4P8Tw6IU85aS/gleEgL04tL+OXLHyeoOyv7GtWXaci7y/VjDQ14cYij/gBbP6JL+Kv3PGyMgFqJi/22RaJJs5oD8noS6H1CShv/615keZLMS/50kGFIMrnr/CTAN0lJ6jP9HKf1y/DaU/8kk8/GyAwb8TDEwBGHm+Pz2c/AYXj6m/0wCbSz9VuD8VX0Fy3MeKv1+dXpKknEe/q6gAacklnj9rhY4sX6qWv88mtMKr3bO/h9FRrDxLrL/pV1LUl4WjPz9iV0YxyrS/1aKYSJt7t79gOgq7a7DCP1IW17Dhlpm/wsf1988Tlr940VvHXcO8v7j0Z2PP+rS/M42c0hEVtr/gLP/LW2SvP7VAcx8J37m/g94uAgxRmb/R7N5x8vzSP+dVEW5h8Y+/ggo1C23AwL+MUZeQ7eGtvwkjW8NyubI/CVq8pDOlqD/IgfITBT+lPxEBDtU1j7e/OP1iW587ur87H/TWR1+ov21LbKmS4Kg/rLYL1o6DpL8wxE0vqz21vxhW3NAW77C/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzU0NzE2OTYwcQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM1NDcxNjk2MHEBYS4CAAAAAAAAAEQFSoLiX8k/Uwp/zOqZvb8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    4,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.25249000018958556,
                        2.2796298669736146,
                        5.352711312020794,
                        -0.2739787359382604
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4
                ],
                "values": [
                    -0.25249000018958556,
                    2.2796298669736146,
                    5.352711312020794,
                    -0.2739787359382604
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 70
    }
}