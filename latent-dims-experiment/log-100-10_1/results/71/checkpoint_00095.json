{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9549378404428868,
                            0.14660403540767464,
                            0.06886127597263672,
                            -0.008194544633707742
                        ],
                        [
                            0.011952816449636604,
                            0.9986219816164207,
                            -0.133791100107919,
                            0.002116709919205601
                        ],
                        [
                            0.0037207997128266054,
                            0.006581189059085642,
                            0.9547880659979125,
                            0.03057159234113032
                        ],
                        [
                            -0.008828650619958496,
                            0.06433907187382852,
                            -0.0775796725195755,
                            0.9421634679891644
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4,
                    4
                ],
                "strides": [
                    8,
                    32
                ],
                "values": [
                    [
                        0.9549378404428868,
                        0.011952816449636604,
                        0.0037207997128266054,
                        -0.008828650619958496
                    ],
                    [
                        0.14660403540767464,
                        0.9986219816164207,
                        0.006581189059085642,
                        0.06433907187382852
                    ],
                    [
                        0.06886127597263672,
                        -0.133791100107919,
                        0.9547880659979125,
                        -0.0775796725195755
                    ],
                    [
                        -0.008194544633707742,
                        0.002116709919205601,
                        0.03057159234113032,
                        0.9421634679891644
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.6934512347873321,
                    4.495981832693951,
                    24.120905483101414,
                    5.777591766885032
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.29986920370530334,
                    0.24060128565322714
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.011002760110494161,
                        -0.001020782041820656,
                        0.03455007837084911,
                        -0.023639375903611606
                    ],
                    [
                        -0.001020782041820656,
                        0.03521403174392734,
                        0.059236575097385114,
                        -0.00806841451525897
                    ],
                    [
                        0.03455007837084911,
                        0.059236575097385114,
                        0.3872672325553097,
                        -0.07329695404209158
                    ],
                    [
                        -0.023639375903611606,
                        -0.00806841451525897,
                        -0.07329695404209158,
                        0.09121802032688175
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            4
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            4,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzU0NjQ1MjE2cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM1NDY0NTIxNnEBYS4yAAAAAAAAAPDWPbJNP7c/O1Rn9Q0M2b82/c/lLanjv3HQDkVaWuC/RxNc9HOr2j9z+E7Wmx3WP92jpY/vbrU/D80Gxja+0D/15FNkcX2zP/IfQNHEF86/FfVTLtbV1j+sX6c0OzLiv4dDRyHlDdS/edgfzWynwz+XzNt4D0XLPyZOeonQeN4/pClTenum0r/dAuOo8+vQP7Z0y2ULnpI/EVnzZieT4r9Y4VbxBBmlPzpVYbwNJdY/r1q7MspW2T/xHhodgSfRv4BpZ7WVdbi/gVDBwBzSzj/rOK4X0VvQP1Gd7avvgei/hQD8YkLkzj9ctqIBkSnXP1hdNiTsgbo/FVzH6M4w2r+lCuLNGtO2P6CvFxyZKMA/3oHZAm1WwD9V5nvuhWqyP2rFGGmdkNe/mtcg49Tm2D9ZN1h+TjHhPzaUxzaS17w/OWP+rHXT5L9UynVVCQzYP9Ll9SJ/ZOA/iE0XR3Tr5b89jsFovT/SP5q504S8v9u/Flt0hPB55T9UCaRYnJTQP9VlzTAOjLo/k+rBwQsVoT8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzU0OTczODU2cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM1NDk3Mzg1NnEBYS5kAAAAAAAAAJvk2Q1i7cm/gyOfHo81rz/pklfqQuXSv0ofskZRFZk/kB1zC1U8yb99zt3OZ02+v/uNhr3Hbsy/gzvKMS9nvr/Yoczuo7vDv+6Y9zyb3se/rItKdsyjub+TUIxz6/ynP7hkAFO78r4/rNFENI5ik79suH27m4K3PwXh2Prk76a/gH+gYiswtj+w/fxqfF66P9Gz1zIrc8K/Q6B+fjlQmz/yubUpqhu3PyBFsg6vUKS/QdI2pQpQrL/qFz+4YijCv3f/JV982ae/D/twJ9+vxL90iXqlcUbSP2Q/PbPSiqy/vkKcxw3imj8ax2zmT+Gxvzh/Tyb5LXO/mfwl5/3UnT9xiaYueXvBvzzVBl8I+6U/LvOKaax1Wb9vJPM8H/Gjv+AYPvkFXK2/UYZVK87WrL+1K9GAApXCP2cPKRfde7W/PinHr8knzD8BoA9P5V67P3gE/cRJYr8/MOcoPRxAxD/xLRlLyzrRv2cKoG/sNKc/vR/D8EuNsz++7eYlixDQv2oCMsHjDqS/2OlGCijeqj/efXUz/Hq7P74GDmgIjZ+/l0mTV2Gpsb+AdaIb1xK1v8/qaE1A/Lm/5Ul7/w2skb+wxofMDhFpv8LW+kkq1Yy/CIM6dlNYpT+KZJBqOAyYv49vAcNljLu/Oizk23k0pL8Y10BEuP+cP1Dh3ij0NLI/MP2wOXdXxb9IdRcVOoTAPzk1oljPra6/rjKqIuPFtT+ZOIqq7DNpvyfQtpCr9IW/tn2uxFjokz91Dyno53Ogv1EMw5lPTrG/aklwWoQsp78LhtUEv82cP+gmYh3VOrK/iPCJcfcKur+wpoLPGfjDP0rxPBriso6/A8kdckmFsT/kzGieATS6vwYRH97jqLy/FWqrqbWFs7/YgYTJCCuHPx0EZkhlbry/9DrXvDYnjr+ipMhSbRHRP1Ih1lohNpq/EsytHxsIwr9dKD7xUoCxv1OSTZu0vWk/7GTaUnuGoz/vIRPCTCCgPwyZ/v2RHrq/ISJyMkOst79q6BaFj0Cjv3IwjFfawaM/Uhmjq+YFtz9KOGAGT66yv0wOy091v6y/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzU0NDgwNzM2cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM1NDQ4MDczNnEBYS4CAAAAAAAAAKrGz200GMg/MPO3eqMUwL8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    4,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.08957674328718554,
                        2.2236109999098583,
                        6.3648817282034,
                        -0.7710427563197924
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4
                ],
                "values": [
                    -0.08957674328718554,
                    2.2236109999098583,
                    6.3648817282034,
                    -0.7710427563197924
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 95
    }
}