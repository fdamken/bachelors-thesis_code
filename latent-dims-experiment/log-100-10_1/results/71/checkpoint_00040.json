{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            1.0002470445547504,
                            -0.034503373301566595,
                            0.05569733771972036,
                            0.029638438497722006
                        ],
                        [
                            0.07532901066054352,
                            1.0144400658725943,
                            -0.010034487799448502,
                            -0.05128140716172676
                        ],
                        [
                            0.00040055613800124356,
                            0.01755713008504222,
                            0.9627918818078427,
                            -0.003169369881426521
                        ],
                        [
                            -0.013488650519148227,
                            0.023071100586319757,
                            -0.053448750614391985,
                            0.9882601933897096
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4,
                    4
                ],
                "strides": [
                    8,
                    32
                ],
                "values": [
                    [
                        1.0002470445547504,
                        0.07532901066054352,
                        0.00040055613800124356,
                        -0.013488650519148227
                    ],
                    [
                        -0.034503373301566595,
                        1.0144400658725943,
                        0.01755713008504222,
                        0.023071100586319757
                    ],
                    [
                        0.05569733771972036,
                        -0.010034487799448502,
                        0.9627918818078427,
                        -0.053448750614391985
                    ],
                    [
                        0.029638438497722006,
                        -0.05128140716172676,
                        -0.003169369881426521,
                        0.9882601933897096
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    1.246448597172975,
                    1.4816070305659776,
                    6.258128213025219,
                    3.1772804695160786
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.1558020145043647,
                    0.18587546978372904
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.026409154143578972,
                        -0.036517257759251964,
                        0.02671135634531252,
                        -0.0640216406888772
                    ],
                    [
                        -0.036517257759251964,
                        0.18036831308422308,
                        0.12317750099738767,
                        0.10868169115054914
                    ],
                    [
                        0.02671135634531252,
                        0.12317750099738767,
                        0.5683588587779447,
                        -0.06549889114396318
                    ],
                    [
                        -0.0640216406888772,
                        0.10868169115054914,
                        -0.06549889114396318,
                        0.2295013725811773
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            4
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            4,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzU1NDMxMjY0cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM1NTQzMTI2NHEBYS4yAAAAAAAAAPaW3gKqzrk/TNEbutrY1b9ZT2acTC7nv/AM3yV3qtm/43pF/kpP2z9iFLuiaOrSP2LvnWa6HcE/1ch0UGOlzT/vdcY/eZSrv56Yn7wW0My/tJRIOK151z8Iy9MN56Hev2SkjrcHJs+/067ZpG2Ss79zxjwHaR3SPwYXD9mIl9M/am11PNjHyb9NUzpVO83bPzVQFCgroLy/NekUBdF/zb/24+iX0AjLPxrd+uN+YtA/yzERUk9C2z+mBc2NvjHYv4OhXitbRtK/mI6X4aG9wD82Q1PJO1HKPyBhC/6noOW/g3Y412hT2j/A4ciPUx/QPymTDXhcp8M/N9nlV7IPzL9VxNFBvNC5v96phjRHcME/aVm9INDE0T+xvORJU7avP2NKJsUsU92/N7jKnfNr1D9bHkS1u+fdP2lB56iLYcc/4jpT4KgG4L8mboN2jvfZP5hjZP8cTtw/+rWru0Rm3r8bClk7XLm1v0XZ7YEt/dW/x0BJ9i2E5D8QRvjevRTDP6yfggSy/Lc/M1InyFlB1z8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzU1NDI3MTY4cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM1NTQyNzE2OHEBYS5kAAAAAAAAAOKlPEtsxM2/dnk7CtxItz+9l6vLvfnQv014CpMCjHa/LK6/cbuiz79And77YW7Av5HC+agZJ8u/2HdkrUV7wL8+xU/a9XPCv3UfWaMBRc6/57LP5cIevD/eS3/FoxutP+aG+70LwcA/NTpqqyjEtr90EXlzWlyWPztaBiB00MO/94E8EJkSkT85996bpJXDPz/8VEfZusO/MSKv2sgSkT8xyR26up2kPxXbPgJs1rG/OagSX8Pnmb+6VKz1bP/Fvx1Wzw3EuqK/6vPqO433xb+UVzubmqLRP9j522TTp8K/up2C2S/NrD8C/qEjh8K+P88UXKHT7Jk/lJnzj4BqTL/a/iMayzPAv8CxCw1Q3KA/tNzQ/EZlqr/OdFUZpKaxv59VljYg3MK/ifc+a0r1mr9SwTLnaPvIP8e98fFUJMG/ZZE2RN3tsb9OHjN4Qe69P2OY/PbS+MA/xpCdUcqHxT+JuYRYjJ7Ov4EQnMGkU6w/w+e4x+/9sD+zjniT95vEvyBJnlqGtbG/+njgI5lavz8rMOsKoOu4P0yjyOYOsLS/LQ8lXQo0rr/3x9SdFIygv6SfVHaci7y/IaPhmJLDoD9i/Xb6JL+Kv4x32gOStHC/CHdKJJs5oD+vIyeH1CShv2ukvsKt2su/z5Kg9X6UhT8Z6cAvcyu5P4JfTXGdoJU/ckmZVGnDuL+ZdfOe+X2TP/RTjGU2ocC/5Pes+YY2sz9ldgpy3MeKv/UUDdpT2aS/OH0g/uLGsT9JngAp73thv0rDhWYcG76/iY6wCcwNor9rS7RpLqlev6uIKOqhB7+/Z77i9uJcsr+sAQWSDyHAPy9EBRApo7C/DNlzn1hHpb+dwWiwey7LvxYohix8K8K/U9ya0hEVtr/MYjco6yalP8S1e3HB/b6/qJ4D6apYc79dXVP5GC3JP3Ml2G1h8Y+/9zw1C23AwL+cwxZsZy65v7RGh9zNCsE/demgpDOlqD8+bR/gKAOWP/Q0mWKKo6q/7b9lCecctb802h/hzIu7v1oXjPi5rbY/b18JXaSvrj/e4l3d8h6wvyOL19AW77C/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzU0NDc0NzY4cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM1NDQ3NDc2OHEBYS4CAAAAAAAAAF37VjAqQcQ/vIc8j1Fcwb8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    4,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.25508667356450154,
                        2.96391572861108,
                        4.5386009352874765,
                        -0.017732500018216982
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4
                ],
                "values": [
                    -0.25508667356450154,
                    2.96391572861108,
                    4.5386009352874765,
                    -0.017732500018216982
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 40
    }
}