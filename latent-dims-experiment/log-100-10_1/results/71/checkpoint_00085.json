{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9597920701640201,
                            0.10225925874312163,
                            0.030907619068421092,
                            0.0032895978379905468
                        ],
                        [
                            0.009629314296485765,
                            1.0119672730202456,
                            -0.10851582490453242,
                            -0.015925623661726722
                        ],
                        [
                            0.0017904881084512855,
                            0.012542367091537988,
                            0.9580213490159318,
                            0.025765259329854094
                        ],
                        [
                            -0.00651744995028434,
                            0.05795606710118114,
                            -0.06708961398885638,
                            0.9448070599442477
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4,
                    4
                ],
                "strides": [
                    8,
                    32
                ],
                "values": [
                    [
                        0.9597920701640201,
                        0.009629314296485765,
                        0.0017904881084512855,
                        -0.00651744995028434
                    ],
                    [
                        0.10225925874312163,
                        1.0119672730202456,
                        0.012542367091537988,
                        0.05795606710118114
                    ],
                    [
                        0.030907619068421092,
                        -0.10851582490453242,
                        0.9580213490159318,
                        -0.06708961398885638
                    ],
                    [
                        0.0032895978379905468,
                        -0.015925623661726722,
                        0.025765259329854094,
                        0.9448070599442477
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.9182174720325472,
                    3.8783385359022726,
                    20.622673522322536,
                    6.4435217152689095
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.2085972574991183,
                    0.23272969799301915
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.011511818242655503,
                        -0.0003469929546384143,
                        0.034977923950511025,
                        -0.025294688563967466
                    ],
                    [
                        -0.0003469929546384143,
                        0.037114645174420424,
                        0.061308104228400495,
                        -0.009616880268420225
                    ],
                    [
                        0.034977923950511025,
                        0.061308104228400495,
                        0.3989495494961588,
                        -0.07204519714967406
                    ],
                    [
                        -0.025294688563967466,
                        -0.009616880268420225,
                        -0.07204519714967406,
                        0.09736147601209055
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            4
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            4,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzU1MTI0NDAwcQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM1NTEyNDQwMHEBYS4yAAAAAAAAAGwVeGmVILI/m614yrF81r8uqb752/Dkv1C/63wGbd+/TGDg38Vj2T9sSRzWmx3WP02E543vbrU/8xH6xTa+0D/xcluToHCYv/taMtHEF86/4EQ0LtbV1j87y8gIEP7dvzWAPiHlDdS/+HnBvbDytz+tTF/n4zHQP3OLZWB06ds/cv3oKCqAyL8kN/n6qwrWP8s2ZJILnpI/P8OwS6Kn4L85lUDyBBmlP0+SDoUDTtI/3MC3Cm7H1j+/OwpvOUbWvzSeIPxNlL2/h8G1wBzSzj+hcsAX0VvQP1dL+qvvgei/iv/FRs+50D/lY2wBkSnXP/WmXSTsgbo/SpzgnxYS1b+PnsdC9jOGv157vh2ZKMA/uDZfK8nlwj9lPhjuhWqyPxDJGmmdkNe/PLDn4tTm2D+c5cWS/HjiP+2KBzeS17w/UwwUhBlE4r/T8O2VE+PbP6I9/iJ/ZOA/kuVtIBhc479i7TgFrrLHP3zxFlCy6Ne/KjxzhPB55T9fiI9YnJTQP5YfzjAOjLo/KyhdgvbHsj8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzU0NDk4OTEycQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM1NDQ5ODkxMnEBYS5kAAAAAAAAAF7h2Q1i7cm/iZmfHo81rz/ahlfqQuXSvwTwsEZRFZk/bglyC1U8yb9wos/OZ02+v4Kuhr3Hbsy/RwDOMS9nvr8jfMzuo7vDv3c0+Dyb3se/aTYNjZ7wwb9riItz6/ynP+YV/lK78r4/45BaNI5ik78r3n+7m4K3P+KEYM+qlrC/EsCRYiswtj9r3PxqfF66P53U1zIrc8K/q5tPfjlQmz8V/8Apqhu3P6G0sg6vUKS/Sj02pQpQrL/xEj+4YijCv8xSJl982ae/ZeNwJ9+vxL++dXqlcUbSP2hZPbPSiqy/q/2dxw3imj/01m3mT+Gxv5SDk5FfRpm/tVUd5/3UnT+3d6YueXvBv38fB18I+6U/zBOZaax1Wb8jU/E8H/Gjv4t4WvkFXK2/hspVK87WrL+bQ9GAApXCP7aXKBfde7W/JOn2C1nqwT93gA9P5V67PwuC/cRJYr8/MMMoPRxAxD8BJhlLyzrRvz1GoW/sNKc/MyfC8EuNsz/jR+clixDQvyvjdr/jDqS/3nlGCijeqj/k0HYz/Hq7P09nCGgIjZ+/2AmSV2Gpsb8LpaMb1xK1vyjRZ01A/Lm/2xJlo3cTo7+xAWjMDhFpvzPT9Ukq1Yy/BuQ9dlNYpT9PuoxqOAyYv0LVAsNljLu/xTLn23k0pL8mPDtEuP+cP0hu5ij0NLI/dr6vOXdXxb/1jBwVOoTAP5zePv6fdbS/h+OoIuPFtT+ZHYaq7DNpv7JTl5Cr9IW/FuarxFjokz90Civo53OgvxTbwZlPTrG/z7RtWoQsp78Mi9QEv82cP8ZDYR3VOrK/dy6LcfcKur8iV4PPGfjDP07tEhriso6//xGhckmFsT/EN2ieATS6vy41Jt7jqLy/WgqqqbWFs79/VnTJCCuHP937Zkhlbry/dp3NvDYnjr9eFqFnG1nSP0N02VohNpq/uGauHxsIwr9oHz/xUoCxv75pHZq0vWk/KcDXUnuGoz9niRDCTCCgPxAZAP6RHrq/xb9wMkOst79ypBGFj0Cjv/rOiFfawaM/sQz9CuyQqT8vLF4GT66yv8ryyk91v6y/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzU0ODQ3NjAwcQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM1NDg0NzYwMHEBYS4CAAAAAAAAAI66z200GMg/YaG4eqMUwL8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    4,
                    500
                ],
                "values": "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"
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.16081279568237974,
                        2.1755054710076784,
                        5.96043385434473,
                        -0.5944467845099735
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4
                ],
                "values": [
                    -0.16081279568237974,
                    2.1755054710076784,
                    5.96043385434473,
                    -0.5944467845099735
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 85
    }
}