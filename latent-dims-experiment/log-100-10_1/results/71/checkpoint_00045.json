{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9927943550587892,
                            -0.036576861683454996,
                            0.048115984894253595,
                            0.036222093130168824
                        ],
                        [
                            0.05547377461600654,
                            1.0257407000489558,
                            -0.05986455875454848,
                            -0.05794149339504357
                        ],
                        [
                            -0.0011483433687490463,
                            0.024337100882346464,
                            0.9532218334913277,
                            -0.004506653549321397
                        ],
                        [
                            -0.012008021321074206,
                            0.032178632385857775,
                            -0.05017012788874846,
                            0.9942592324423463
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4,
                    4
                ],
                "strides": [
                    8,
                    32
                ],
                "values": [
                    [
                        0.9927943550587892,
                        0.05547377461600654,
                        -0.0011483433687490463,
                        -0.012008021321074206
                    ],
                    [
                        -0.036576861683454996,
                        1.0257407000489558,
                        0.024337100882346464,
                        0.032178632385857775
                    ],
                    [
                        0.048115984894253595,
                        -0.05986455875454848,
                        0.9532218334913277,
                        -0.05017012788874846
                    ],
                    [
                        0.036222093130168824,
                        -0.05794149339504357,
                        -0.004506653549321397,
                        0.9942592324423463
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    1.254401709434958,
                    1.4818425554884977,
                    6.850059828586841,
                    3.273618448022445
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.16529935048438166,
                    0.25129438008333455
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.020145472360116524,
                        -0.019644521169504936,
                        0.033074042442747364,
                        -0.04982294157302685
                    ],
                    [
                        -0.019644521169504936,
                        0.11793454769776002,
                        0.09866177881765203,
                        0.06232306452051073
                    ],
                    [
                        0.033074042442747364,
                        0.09866177881765203,
                        0.5401562460173039,
                        -0.0787867872425454
                    ],
                    [
                        -0.04982294157302685,
                        0.06232306452051073,
                        -0.0787867872425454,
                        0.19123619272038084
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            4
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            4,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzU0OTk1Mzc2cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM1NDk5NTM3NnEBYS4yAAAAAAAAAC0MYThfvsA/bPTG2F/E179q3EwNijjmv/eOUET8ldu/hHqmCCLz2z9cpkXB7dXUP44JaaLE9MQ/cYHYxTa+0D+XEzfswHWmvyROWahoiMu/LEMQLtbV1j8WhCsYvkXfv8aDF6NZ3s2/Wt48VLLIp7+3gWoRQMHSP34ZS/cNg9U/Isn4JyqAyL89ja42tuHZP958Ga8W8rS/J+7LGH/Hzr+Hk0KDIsHJP42THO9VBtE/Zu4ISHie2j+aGEhvOUbWv/bnDUngMdS/kp/MHKyUxD9kwuC0jQnJP8Es7ni8TuW/5P7AzZGv2T+Vm2kL+fbOPzcx72OuX8I/Q1HYcWBXzb8SceXHpyKyvxaNhkj1t8I/eEXbNVWw0z9ppNUdPom3P3gGBbtVr9y/3vhGqMoP1T9dq52WNvzbP4fAEQ/yx80/ZfLXtnpp378x41JYCQzYP8Ay9fRFqts/b2sv7eQo4L9Fy+GOjxasvxXeUGhgMNm/tguPhfB55T8fbXAMyOvGPw3CJn7Gqr8/BQhi0jDl1z8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzU0NDg5MjgwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM1NDQ4OTI4MHEBYS5kAAAAAAAAAONuwja+fMy/sA62Ho81rz+W3OjVlJ3Rv6I8Tvy/aXI/zmxFXQ1bzr//q8jOZ02+v4FAgpRr38m/cxHUMS9nvr9Wisruo7vDv1xy345T/cy/Z9jtaq5wtD/wFrULLh2xPxapAFO78r4/dctIJj1yvr8S1KGL5UygP3oNMsXT8r+/5euAtnFLi7+km2SH9k3CP7jX2jIrc8K/CH+/fjlQmz8LiezX8fyxPySVkrIfjq6/Mj50AZoSor+LHTPhvrfEv/raPF982ae/fLVlUDs/x7/xqXilcUbSP+reYFAlYMG/mUygh3eupz/3scOochS3PxnhRCj5LXO/TE6gPzm0gj9lyp4ueXvBv5CRQnYve5c/dlTmqo5Gpb/DUMHgjy6uv28LEUvOI8S/nMWJh12Zor8OlrjSurPHPwdK7rpNub+/VeeDNgK9rr+PED5P5V67Pw1wBMVJYr8/0McZZnjPxj/+WP9sOubPv3ghr2/sNKc/OpWm8EuNsz880fGnpePFv0WtUmNUTK6/nF1ppvr0wD/RloYz/Hq7P5X6vg9rP7e/e4SDV2Gpsb8OvavvzKqlv7W3SZ/4Gr+/tevtjbRJlz+c3g4hA52Xv6UoM4swQXg/3Dr/pMU1lj8iORLZjEOmv222O9dbIs2/xaWZ5NqZQT/4B9+0Xn2xPyUtZK53LKo/lmaPfcVSu79WT1nFJRupP/mNO1BYlLm/oI6hIuPFtT8I7tvcXqGXv/g2QJGr9IW/+A0EJz9WtD+cZp595RuAP2vPkT3Ai7u/4SyaW4Qsp7/r4NoEv82cPzkfjgl/y8C/Ar7VHz/stL+yU4emvWjBP0xPSSop6qG/JtiNysBRsr8tIA1KFcjEvy3iQN7jqLy/9GmqqbWFs79PVB16o0WqP20Ph0hlbry/RbcqvDYnjr+r/sA2IwTNP0TIh0wA7Xa/xrB17X3xvr8oiSJDC5+2v0imG5A/hr8/6+W6UnuGoz9rQ/rBTCCgPxIIl7RCwq+/slZXMkOst79fJDe4cPy4v0UXgSEWPbk/VUiPzvamnj+rmVIGT66yvyxRtksrnbi/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzU0NDg5NTIwcQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM1NDQ4OTUyMHEBYS4CAAAAAAAAAGar0UTYiMU/TiPEeqMUwL8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    4,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.17071423461683227,
                        2.5749054965426845,
                        4.670719836905496,
                        -0.309776932442025
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4
                ],
                "values": [
                    -0.17071423461683227,
                    2.5749054965426845,
                    4.670719836905496,
                    -0.309776932442025
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 45
    }
}