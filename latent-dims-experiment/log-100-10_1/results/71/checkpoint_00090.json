{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9596434296758825,
                            0.11785074968717371,
                            0.07306129676307022,
                            0.0064720940059310545
                        ],
                        [
                            0.014329927300014155,
                            1.0039863285290946,
                            -0.11362413200582364,
                            -0.000891480125329058
                        ],
                        [
                            0.00418695725570162,
                            0.011799494471756216,
                            0.9637298133513059,
                            0.03270396091708079
                        ],
                        [
                            -0.00860589444488669,
                            0.0656509550192353,
                            -0.08517395108432724,
                            0.9498648994370585
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4,
                    4
                ],
                "strides": [
                    8,
                    32
                ],
                "values": [
                    [
                        0.9596434296758825,
                        0.014329927300014155,
                        0.00418695725570162,
                        -0.00860589444488669
                    ],
                    [
                        0.11785074968717371,
                        1.0039863285290946,
                        0.011799494471756216,
                        0.0656509550192353
                    ],
                    [
                        0.07306129676307022,
                        -0.11362413200582364,
                        0.9637298133513059,
                        -0.08517395108432724
                    ],
                    [
                        0.0064720940059310545,
                        -0.000891480125329058,
                        0.03270396091708079,
                        0.9498648994370585
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.7885482944191186,
                    4.464974254677221,
                    22.216991632732604,
                    6.069535170289252
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.28523011235883133,
                    0.3769332782962415
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.011219365984206576,
                        -0.0007467555444853335,
                        0.0347651211623744,
                        -0.02436455496451225
                    ],
                    [
                        -0.0007467555444853335,
                        0.035982763963745334,
                        0.06009338713726642,
                        -0.008760863196699997
                    ],
                    [
                        0.0347651211623744,
                        0.06009338713726642,
                        0.3930535954890715,
                        -0.07275422953418254
                    ],
                    [
                        -0.02436455496451225,
                        -0.008760863196699997,
                        -0.07275422953418254,
                        0.09396374614550074
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            4
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            4,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzU0NDc4MDQ4cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM1NDQ3ODA0OHEBYS4yAAAAAAAAABjcDdoB5aQ/F55p6DZo2L9pJR9rGfvjv1CorsNuCOC/M0Ye6pwH2j9/AAzMxHnVP8FPmrdL/rc/4o3Hu18a0D9RdduaksKaPwuso+VyX8+/3m0PJP8x1j+ocfmboZjgvwtMBhcOatO/JSeuwr5fwj+xgalpYf3JPwZyfpOnHN8/8BTRjpDmzr+agQnIeNfSP3V6yzF825w/bnd04TtB4r8UmGxDvTeqP2jW+6GIOdQ/1ypCFEVr1z8rbSU8BhPTv9GUf5I55rW/PehJrG6KzT9G8/AhqP/QP6h71SYEMOi/ZGZoUKZd0T+oloH3uYXWP5JPePuP8rc//x690klF2L81WwEGnAykP6Do6jBHcME/tP7f3H0dvj+KUOGKU7avP6Mj3V7G7Na/5Cwb2f1C2D9Z3U75Yt/gP55SKA42SLo/WMJrE9w5479ggctq4K/YPyMnFqhqtuA/Tz9grtpR5L9xdF9rFBnOPzlJAmk31Nm/wpyOCdzL5T+8k8GciuHPPxdV9Aey/Lc/CMPX7qbslz8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzU0Njg3NzYwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM1NDY4Nzc2MHEBYS5kAAAAAAAAAGGHVCIQNcu/Zb60zNYWqj8E4JT0GYnTv3F4Q/VgqaE/sP3sHwOEyr8ISOX7YW7AvyFIAdJ1ts2/sBRgrUV7wL/aN0cDUgPFvyVkclFJJsm/YGpAnygzvL+NlnbFoxutP/cP+r0LwcA/aIkj2P6fnb9h7IqSP/O0P2JoDaks0aG/A0mkOc+gsz9IS/KT2O28P4JiUkfZusO/wQ+p2sgSkT927K5SBqu5P2aVj3ntY56/Pp6Qe2G3sL+Lw7nMEHDDv4SGOw3EuqK/p5nrO433xb880LevSOrSP3Xpk4LF1LC/XvjGI52kkD+b12EPrHC0v5zs3drdEY6/jQB6RTcJpD94KiFDJ8PCv0Rr8bDAGas/Q8l1uitMgT9KGtyO1w+pvxfimiVfPbG/TPRq2RW4p7+Z40uVsNzDP06vM+6A7LK/eBVmSWPBxT+f4AR4Qe69PyMD+fbS+MA/Jn6jUcqHxT8Tf1ZVot7Rv0ZMth00FqI/kXu3Gagctj/qGCQwYrTQv0W9ct5W4J2/8TdcuG+/pT90woAKoOu4PzpN8IU85aS/gRCIgL04tL+Hpq3yeoOyv0uyXXaci7y/r/lN9S8yqL+WEsn6JL+Kv6Y10cgFqJi/7GpRJJs5oD8E7DGH1CShv1Hj9uvBG76/RbH1E4Mrnr+FkQl0lJ6jP/lc1v8vS68/ppcqTiWfxr/HW0ABGHm+P3nDTdVD5rG/X/WeSz9VuD9r5Uxy3MeKv4xNI2zGN5W/u0+BaMklnj9ibn4sX6qWv/DZt8Kr3bO//MZZrDxLrL/XQVXUl4WjP2L7VkYxyrS/piyVSJt7t784VQi7a7DCP7ny4bDhlpm/909VktrrrT+ZnF3HXcO8vxmML7WHGbq/jxyg0hEVtr+3MJMI9dKVP6M0cR8J37m/mjI+AgxRmb8FGPBIlm3QP+REBW5h8Y+/GWwzC23AwL/8nZKQ7eGtv2HJWW5O6oo/9dzDpDOlqD86EfwTBT+lP5vyCdU1j7e//NBmW587ur8grf7WR1+ov1IBdamS4Kg/ALW3YaSvrj/5cVMvqz21v0vY2tAW77C/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzU1MjE2MzUycQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM1NTIxNjM1MnEBYS4CAAAAAAAAAKxpSoLiX8k/FjF7zOqZvb8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    4,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.13089527484819727,
                        2.1903189668148904,
                        6.169077377369153,
                        -0.6623913031812415
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4
                ],
                "values": [
                    -0.13089527484819727,
                    2.1903189668148904,
                    6.169077377369153,
                    -0.6623913031812415
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 90
    }
}