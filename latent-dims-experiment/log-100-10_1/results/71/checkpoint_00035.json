{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            1.0143705303498252,
                            -0.01702637605863357,
                            0.05888771577859021,
                            0.02030968070231438
                        ],
                        [
                            0.06257633261669376,
                            0.987513913158991,
                            -0.005117213368452599,
                            -0.03451801818333697
                        ],
                        [
                            -0.006590335289042909,
                            0.01051953431091966,
                            0.9626843781383744,
                            0.00762596822296411
                        ],
                        [
                            -0.025958901841960324,
                            0.011747371142985031,
                            -0.05158047811878465,
                            0.9935162263069769
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4,
                    4
                ],
                "strides": [
                    8,
                    32
                ],
                "values": [
                    [
                        1.0143705303498252,
                        0.06257633261669376,
                        -0.006590335289042909,
                        -0.025958901841960324
                    ],
                    [
                        -0.01702637605863357,
                        0.987513913158991,
                        0.01051953431091966,
                        0.011747371142985031
                    ],
                    [
                        0.05888771577859021,
                        -0.005117213368452599,
                        0.9626843781383744,
                        -0.05158047811878465
                    ],
                    [
                        0.02030968070231438,
                        -0.03451801818333697,
                        0.00762596822296411,
                        0.9935162263069769
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    1.1774722015613948,
                    1.5207424028476215,
                    5.020785133441736,
                    3.025882071034352
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.24039764149034273,
                    0.1527808512955105
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.03752658277549586,
                        -0.056763754144262546,
                        0.024233514382432042,
                        -0.0843828067813255
                    ],
                    [
                        -0.056763754144262546,
                        0.24415302954852436,
                        0.1410732156100547,
                        0.15318037614912702
                    ],
                    [
                        0.024233514382432042,
                        0.1410732156100547,
                        0.5897540721318641,
                        -0.0579022767890609
                    ],
                    [
                        -0.0843828067813255,
                        0.15318037614912702,
                        -0.0579022767890609,
                        0.2704657866609718
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            4
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            4,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzU1MTM3ODI0cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM1NTEzNzgyNHEBYS4yAAAAAAAAAMSvYWe7TcM/OUhtm1Xt07/wrIIqDyTov6GlMQfyvte/9cr+HNA63T+tgHnB7dXUP+BlKntoZcI/nOP82uQF0j9xH3/ImFmwv0kuWiBpiMu/4lkPLtbV1j+fRKfvYbbcv4IJReXaNtC/jeigOJ0vwL8IQcfo4zHQP5qQ586x89I/wPXIKSqAyL9nU1w2tuHZP2LGtdAfJ8K/fAx6GX/Hzr88uaGsflDMPzY0Fu5VBtE/S45HXCbm2z/idmeD543XvwvBP0ngMdS/3qjgmufrvj+i+qfd6ZjLPzJM+G7lquS/TX7hpDUg1z8/6RAL+fbOPxLgdIwK78Q/u/aqHKg4yL+YjXfr3geqvwTSZRmZKMA/ZjNaP1Ww0z/2HL0fPom3P3pGzc4D992/oYJ+kxzI0z8muY2WNvzbP3AsWL05qcg/JFqDjR7a3L8nQk5rt1PZP9P1BfFFqts/ie5/iBEz27/0BQpiuEi4v4+AsHdWWdW/9gAicUIy5D/PPfHya1zEP+2A3CwOjLo/2O1k5t4s2T8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzU0Njg3OTA0cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM1NDY4NzkwNHEBYS5kAAAAAAAAAKCVzg1i7cm/8PFd4X+5tD/TOehZcRzOv5FRGEipLaK/Pw1JXQ1bzr8xTVgQELbBvyEcjWsPUMe/3Hzt33ZIub/yHdvFRyzBv4Sw1LevjM+/02pzsGvmwT+7lYWvnlq7P8dMd9K5CMI/wIZZ1IRTub8OOayL5UygP/n4gTQiGMW/e3ADtAlQmz8jgF2H9k3CP95y2TIrc8K/lgMI2GBVez9dZwEMc7ypP2eP0Q6vUKS/TPiCdqVUj78zjUK4YijCv4xn4HcXOJu/No1wJ9+vxL++JwGRw/7QPw4uTXmB78O/deKTh3eupz/kjkum8ajAP2Ut7Sf5LXO/JHGEUIlBhr8na5xX1QrEv3DfB3VxAmg//Djlqo5Gpb8xFqXgjy6uv/PmFyJylMG/qeaJh12Zor9CJ7XSurPHP/Bl7LpNub+/LOMrbTl9tL9vmVr9LEC2P1mbBcVJYr8/nygZZnjPxj+IwRUbgsfKv9A6vYkuubA/Prq4mbafoj+aS/1+SVTDv5xcnb/jDqS//Blqpvr0wD8JIa8z/Hq7P0zHpmEjXry/7MZoV2Gpsb/Xv9uXuNqWv6cvSZ/4Gr+/t3TyjbRJlz/FzgAhA52Xv4h0X0kq1Yy/5qvKpMU1lj9Uk+lpOAyYvyfXS4WjA8i/u9Jr4NqZQT/KwrdYz7q7P/RG9JpZxoY/S26MfcVSu7+nX+2ZsHSGv2j0Bnrk6MG/xWWeIuPFtT/OQLDcXqGXv/nsOxA3dZ+/i8DfJj9WtD97aZER3dmIv5+pvkc8VcC/Lm2aW4Qsp79PkGF6u6WAP8HRjgl/y8C/bnXLHz/stL+Bb3SmvWjBPx4oCDmFMrO/JtlE8RBmqr8xfe+bzebJv/ABDBjO48C/lc2oqbWFs78YgCJ6o0WqP70QOM2OxsC/fMkevDYnjr8ImPKSssbCP32oTUwA7Xa/Osx17X3xvr+a0QWVw727vwLDGZA/hr8/T37RUnuGoz9dUfbBTCCgP+XItNnCjpa/IxdHMkOst784dvat8JzBv+ekl89dHrQ/5/J9Vy7nsT+8JEwGT66yv2PWy091v6y/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzU0NTM5MDQwcQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM1NDUzOTA0MHEBYS4CAAAAAAAAAN0D6PIfasA/x9jMeqMUwL8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    4,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.14055294427383924,
                        3.0105005488539436,
                        4.234093323289605,
                        -0.10924073761395339
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4
                ],
                "values": [
                    -0.14055294427383924,
                    3.0105005488539436,
                    4.234093323289605,
                    -0.10924073761395339
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 35
    }
}