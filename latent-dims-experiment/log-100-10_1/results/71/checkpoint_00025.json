{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            1.019642235065379,
                            -0.008307169901445983,
                            0.04746887847912744,
                            0.0051458294613328645
                        ],
                        [
                            0.03434107983170618,
                            0.9709127417360736,
                            -0.01183990360419591,
                            -0.018460310709386963
                        ],
                        [
                            -0.009095637289728209,
                            0.010493915689257453,
                            0.9830249975484286,
                            0.023474289173539196
                        ],
                        [
                            -0.022982803112539127,
                            0.007195750125930562,
                            -0.04869165422774715,
                            0.9988268972602625
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4,
                    4
                ],
                "strides": [
                    8,
                    32
                ],
                "values": [
                    [
                        1.019642235065379,
                        0.03434107983170618,
                        -0.009095637289728209,
                        -0.022982803112539127
                    ],
                    [
                        -0.008307169901445983,
                        0.9709127417360736,
                        0.010493915689257453,
                        0.007195750125930562
                    ],
                    [
                        0.04746887847912744,
                        -0.01183990360419591,
                        0.9830249975484286,
                        -0.04869165422774715
                    ],
                    [
                        0.0051458294613328645,
                        -0.018460310709386963,
                        0.023474289173539196,
                        0.9988268972602625
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    1.2525831970745718,
                    1.4580706807584816,
                    3.6570186499039172,
                    2.3042864824996565
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.263080287650545,
                    0.19846893648568392
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.06970493379351934,
                        -0.10058724921598383,
                        0.0109266368243085,
                        -0.12931869524921485
                    ],
                    [
                        -0.10058724921598383,
                        0.33748680019740007,
                        0.1556270087779339,
                        0.21643737140026434
                    ],
                    [
                        0.0109266368243085,
                        0.1556270087779339,
                        0.6213758639455893,
                        -0.03826460619855073
                    ],
                    [
                        -0.12931869524921485,
                        0.21643737140026434,
                        -0.03826460619855073,
                        0.34001514368189023
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            4
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            4,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzU1MTc2NjU2cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM1NTE3NjY1NnEBYS4yAAAAAAAAANfk6xlEDdA/Pnk2cvld0b/Bod732/Dkv6J85/FDd9a/V/ONNX6C3j8bK1ETpvTZP6V0y0Y1Ms8/LDv6P0ts2D+4slftwHWmv6WsrEnFF86/amtHGyiO1T8oKBcEEP7dvyMvPOXaNtC/Hh7bilVOxb/TpEYF+5bDPynVcONfO9Q/y7MmUoYPy79LXSj5qwrWP++yyKoW8rS/0ynnoW2r0L9Y7EnV2t/OP1b99vZVBtE/D6r3HhwP2D91keeiQx3av/9EvpqYUNm/ktTsmufrvj8r8aC0jQnJP2wvBkaJG+K/scWqpDUg1z8SzxI/LCrCP5rIdYwK78Q/zsLtGag4yL+H1Yzr3geqvwCiJhmZKMA/j9bKUwP41D+KvgyKs3LDP19fgc4D992/Lowzp8oP1T9mZ91Eft3WP16qF+aVOMs/2afXQhQD2b+ZpmUFUe3SP00ANIvfQ9U/cCEAdGPr2b9bgubUEg51P/mQvXdWWdW/Wr2fXJTq4j+Ct+FsgArMP3EgsYLGqr8/umvbI+kD3T8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzU1MTQ4NDQ4cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM1NTE0ODQ0OHEBYS5kAAAAAAAAAGdH0A1i7cm/3rziMjjYuT9xVB7fXG7GvzOVHUipLaK/0s1kC1U8yb+fRGsQELbBv9PVlEKzwMS/Zc4j4HZIub/ric051zm9vwDs07evjM+/qI1Q2cd1xD+XHrGAqzzAP4L0m9K5CMI/QIFW1IRTub93mmKg0z2IP6gdkDQiGMW/FejRfXXlpz+Lh1yH9k3CP0UvyluHAsW/AaCLLDUQob96QuELc7ypP2/c9NV8JpS/unZOLjpCcz/jKzC4YijCvwp22HcXOJu/z/VkUDs/x79GFw35Km7PPxeLQKLdfsa/o1yWh3eupz9wYUqm8ajAPzCJwfvFXo8/HtHcPjm0gj90TJVX1QrEv34B+3RxAmg/6jTnqo5Gpb89wZzgjy6uv46iZk67zLO/kYWPh12Zor8pK7bSurPHP4OW7bpNub+/yE0Qv/Gbub9sL3yrdCGxP14XZ8VJYr8/8y4ZZnjPxj8KfjegbRnDv7H0v4kuubA/VMi0mbafoj/vHdh+SVTDv458j7/jDqS/EVlppvr0wD/2wa4z/Hq7P7uOqGEjXry/vFFpV2Gpsb9jJNqXuNqWvxV/SZ/4Gr+/me/wjbRJlz+rNQIhA52Xv2W/YUkq1Yy/9ZrGpMU1lj+iKaVpOAyYv4Z3SYWjA8i/Wy5v4NqZQT9xKbhYz7q7PwyIkPNoL4K/ApKMfcVSu7+DdPeZsHSGv3pjB3rk6MG/d+GeIuPFtT/HQrDcXqGXv/tKORA3dZ+/kmbgJj9WtD9+85sR3dmIv2lHs3CY5MK//yebW4Qsp78zv1R6u6WAP/u/jgl/y8C/QBHKHz/stL+nDnSmvWjBP5uZCDmFMrO/s41E8RBmqr8EHAFzcVfHv4BODBjO48C/4fi3r/rNrL92QfoOikGyP8wnh0hlbry/jiUivDYnjr/dmfCSssbCP2q0ulohNpq/vUd17X3xvr+d2CdDC5+2v+1cGZA/hr8/r7PSUnuGoz+jRffBTCCgP+vVsZAMn2C/uKxHMkOst7+Lsvat8JzBv9bwos9dHrQ/fnOFVy7nsT9wkUwGT66yv3zBzk91v6y/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzU1MjMwODgwcQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM1NTIzMDg4MHEBYS4CAAAAAAAAACtWEvAWeLE/eo/MeqMUwL8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    4,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.19931039671352377,
                        3.0320973455753597,
                        3.7310551923151842,
                        0.011595319295228258
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4
                ],
                "values": [
                    -0.19931039671352377,
                    3.0320973455753597,
                    3.7310551923151842,
                    0.011595319295228258
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 25
    }
}