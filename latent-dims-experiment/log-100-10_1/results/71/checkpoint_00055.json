{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9844502335600868,
                            -0.031178213738011617,
                            0.041193156003679884,
                            0.042123398168410764
                        ],
                        [
                            0.041027698817108375,
                            1.0395653600364376,
                            -0.08162907904337159,
                            -0.06432084737902467
                        ],
                        [
                            -0.01267739085391156,
                            0.023299355664882178,
                            0.9503265582678155,
                            0.00881829128381103
                        ],
                        [
                            -0.017988317504807765,
                            0.0343667107308015,
                            -0.06264262195759857,
                            0.9979149733529722
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4,
                    4
                ],
                "strides": [
                    8,
                    32
                ],
                "values": [
                    [
                        0.9844502335600868,
                        0.041027698817108375,
                        -0.01267739085391156,
                        -0.017988317504807765
                    ],
                    [
                        -0.031178213738011617,
                        1.0395653600364376,
                        0.023299355664882178,
                        0.0343667107308015
                    ],
                    [
                        0.041193156003679884,
                        -0.08162907904337159,
                        0.9503265582678155,
                        -0.06264262195759857
                    ],
                    [
                        0.042123398168410764,
                        -0.06432084737902467,
                        0.00881829128381103,
                        0.9979149733529722
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    1.2820005374509755,
                    1.869810342553766,
                    8.363887745078433,
                    3.9726654581146086
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.19181382540177036,
                    0.12747544304168196
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.01637462751050574,
                        -0.007477449678609693,
                        0.040231752009841915,
                        -0.04004382409728016
                    ],
                    [
                        -0.007477449678609693,
                        0.06619142520082022,
                        0.07085900959244817,
                        0.020997747736625216
                    ],
                    [
                        0.040231752009841915,
                        0.07085900959244817,
                        0.4849166674517882,
                        -0.08707691178564092
                    ],
                    [
                        -0.04004382409728016,
                        0.020997747736625216,
                        -0.08707691178564092,
                        0.15161739477592384
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            4
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            4,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzU0NjcwNTYwcQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM1NDY3MDU2MHEBYS4yAAAAAAAAAMLQMDdfvsA/SBy4FWqb278Ng0sDs5TlvzT8+GxYJd6/wSAb9HOr2j+EizatP47TPxyQ3GHo9MQ/ksHNxTa+0D/Az6lrCZe6v23oWqhoiMu/PpybGSiO1T+pHDAXvkXfvww9EKNZ3s2/hSBjOhAtoT8hiet2pifZP46M9dGx89I/mfYaJyqAyL/YfH5LZCnbP70mIua2V5a/IcdCyck6079yboW/Ywe/P0//m0AOJdY/G+sbHxwP2D9f9maD543Xv7Z3yV2OedW/Owyfl8BCzD90fUwsf6PRP126g5dBOue/b8Mh0JGv2T+d+XyaKsPQP6+lsWOuX8I/8ru/cWBXzb+nmmfIpyKyv6ilUkj1t8I/CmD/NVWw0z+QaZLKhWqyP0jQh6anZ9u/ghKNvHhX1j+JyO3TQNPfP2qdX+eVOMs/Y2LNgxlE4r/ERfGBZZvaPw4+LR2iOd4/8yHkC2oU4r9lKIyLjxasv1i1k3wOeNq/KSIMmZ7B5j8rMTENyOvGP88SfTEOjLo/vf88lSYO1D8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzU1MTA0OTI4cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM1NTEwNDkyOHEBYS5kAAAAAAAAAI6Ut18aDM+/a47feh74pD8laGPqQuXSv/mtYvy/aXI/WT0dwzR10L+GkFkQELbBv2ywdr3Hbsy/P1zZMS9nvr9YQMvuo7vDv6Rm7GX3bcq/+9GYybllJL8lnJBz6/ynP32aKK9KtbQ/GUlw1IRTub+dNymf0z2IPxAyNnMb1Lq/Iu2OswlQmz8DtVmwUt3EP2GU2zIrc8K/VN81Y43lpz9XJebX8fyxP3rthrIfjq6/N2t4AZoSor8pkzLhvrfEvwQLOV982ae/L/BmUDs/x78i2XilcUbSP/ibe1AlYMG//Qa+FfT1sD/rMXiFNymEv2HE5if5LXO/YcYb5/3UnT+fGp8ueXvBvyh7SHYve5c/joHsqo5Gpb/O1kpCADa0vxFsBHQqs8a/oV+Fh12Zor8kna37FkPKP786/LpNub+/+pl7NgK9rr+H+JPQzj7APzNFdwuBQMI/8bIXZnjPxj8sN/pKyzrRvzZ/2pf37pk/2JCk8EuNsz+a6+jQAXPIv3rkkoPiRLS/vNFnpvr0wD+7ZoMz/Hq7P8fI6tf0A6q/kLaGV2Gpsb95BKnvzKqlv82YTJ/4Gr+/DHDijbRJlz8vPhkhA52Xv8Re7YowQXg/6xD1pMU1lj+rNxfZjEOmvw9bR67/ksq/fAp/cBLuk79CYQT5rQmBP8HiHCn0NLI/ftCSfcVSu79STHSGA8u2P2wYS/6fdbS/rtmlIuPFtT+/ZuXcXqGXv/zsCJGr9IW/9f0AJz9WtD8hZa195RuAP8LSkj3Ai7u/aryeW4Qsp7/VROIEv82cP/Dtjgl/y8C/dfHRHz/stL/sV4amvWjBPynLourAhXQ/5QiLysBRsr/ViGqeATS6v84fPt7jqLy/8Y2qqbWFs78FGSB6o0WqPzcGJs2OxsC/Lr1XvDYnjr+F06pff5PPP7LwO0wA7Xa/rHFz7X3xvr9J+yZDC5+2vyzrGZA/hr8/ttzBUnuGoz9q/wHCTCCgPymNFv6RHrq/o3VaMkOst7/BUs0oAH6tv6+zfyEWPbk/5ZZXgZedhL8dhVkGT66yv5P4t0srnbi/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzU0OTg3Nzc2cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM1NDk4Nzc3NnEBYS4CAAAAAAAAAJC6xm00GMg/6ZfCeqMUwL8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    4,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.06533827702221087,
                        2.186974685027112,
                        4.904898455867791,
                        -0.6881919714707596
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4
                ],
                "values": [
                    -0.06533827702221087,
                    2.186974685027112,
                    4.904898455867791,
                    -0.6881919714707596
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 55
    }
}