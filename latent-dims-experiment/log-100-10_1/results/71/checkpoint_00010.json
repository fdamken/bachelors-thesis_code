{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9966526808543817,
                            -0.0038688225752518493,
                            0.023324968339595433,
                            0.016679488608695878
                        ],
                        [
                            0.04360135447101102,
                            0.9944250241510659,
                            0.021668026579971456,
                            -0.0033646986494457838
                        ],
                        [
                            -0.006454926828897795,
                            0.003541597302777133,
                            0.9983056791364824,
                            0.02402653876611363
                        ],
                        [
                            -0.015195101050926774,
                            -0.00047571486745793395,
                            -0.035217871002280805,
                            0.9797915851067908
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4,
                    4
                ],
                "strides": [
                    8,
                    32
                ],
                "values": [
                    [
                        0.9966526808543817,
                        0.04360135447101102,
                        -0.006454926828897795,
                        -0.015195101050926774
                    ],
                    [
                        -0.0038688225752518493,
                        0.9944250241510659,
                        0.003541597302777133,
                        -0.00047571486745793395
                    ],
                    [
                        0.023324968339595433,
                        0.021668026579971456,
                        0.9983056791364824,
                        -0.035217871002280805
                    ],
                    [
                        0.016679488608695878,
                        -0.0033646986494457838,
                        0.02402653876611363,
                        0.9797915851067908
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    1.650657343060522,
                    1.314366979136447,
                    1.5725557612971321,
                    1.564527611097485
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.2921822586653125,
                    0.18975268674780366
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.1527730063140672,
                        -0.06894141430175194,
                        -0.08572886733459517,
                        -0.11419357412429176
                    ],
                    [
                        -0.06894141430175194,
                        0.6334060398411747,
                        0.10162275687583922,
                        0.24741542044058518
                    ],
                    [
                        -0.08572886733459517,
                        0.10162275687583922,
                        0.8045667480035998,
                        -0.05634169899895225
                    ],
                    [
                        -0.11419357412429176,
                        0.24741542044058518,
                        -0.05634169899895225,
                        0.4548863664188974
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            4
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            4,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzU0OTU1MTA0cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM1NDk1NTEwNHEBYS4yAAAAAAAAAFABI7Pdptk/CXtCK9Q2x79rmDIrDyTgv5HcmZe0tNC/85Fo7pwH2j+kiDjgcsHWP0ynFuv7E9Q/+gisDBg51T+I/D2WZSa9v0h36DcX0My/PX+3/KKi0z909uX5OFrdv0c2FLYHJs+/YHCRdQOWxr9d33SFAAqmPzoO0+0239Q/munB5Bb2ub/+yJYo3z3ZPxCb876TSqC/cLldvPKW0r+56UCJclvRPx1uKGqTENg/TN/X1jqU0z9N3gLWdlDdv6HmhKdv9Nm/AaDNINM9tz/uP9fxl+DMP8zSQUQxvN+/P2JYmV581j+u7Rqxi4e3Pwp2oKAUOtA/o+eF3J1hxL++J6Q9lyavv7w0zi5HcME/5XRocojj1j+kEW344fm0P5700oIbleC/M8hTdJfc0T9sHERjA8nYP71Swn8v0sQ/BlJVZ5nu2r/B4W3+yjbFP4hMzzVEc8w/KHG/aYxH2b+yv2egR0zBP1zbiG1/tdS/7o32rkwJ4D9aG7szdjPIP7qDCPqGDow/TAI4LsCn3T8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzU0NzI3MjY0cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM1NDcyNzI2NHEBYS5kAAAAAAAAABd7SyIQNcu/4jLrW5RnvD+zUJjzCrbHv+j9buzhHZq/927cHwOEyr/LZeEkvv3CvxfDDVdhCMa/NHExtxq5tr+xyqoQe6q6v2Nkh/+QB8S/7uH0kwoAtz/J4WnY+um9P55WCxDE38U/AT9zcYerhj/9AvHGkhdeP1RNC0nQX8a/2kHLzy0ErT8+hNSbpJXDPyIkRHA1Ssa/LZDZBliSv7+j2um5up2kP3iwT2QY0oO/FkG2YIizdb/7cKjMEHDDv4IAeZ3TAWw/MgPeZOmGyL8h3ZC7IJfLP1iku7aLxse/CG6QbCVRmL+E48O6n/DBPwmOdYyluLA/6aFDQ42Xkz+wyvdrg1LFv1ZAFQ1Q3KA//eVp0FtRsr/EQj4ZpKaxv/nOUHcXXLa/hVSG2RW4p79ckC7naPvIP4sE5xqxs8O/WRwB6E0rvL/2RnHU0LCzP9WGLffS+MA/9vukrWuzuz+CerC0G2HEv+MNtrKKSLM/NbGPj/wBmz8CryDfDb20v5excBGcLam/O2m10eA7uj/LVL4KoOu4P0hZU+cOsLS/xTddgL04tL8FQRDojzqJv0nDHmQq1cC/JgQ+1IcYij/jrGniOe2gv1IrMcgFqJi/UAwFAqrwhz8Bc3/J+iabP5bZ10eZLMS/NyeJwiBFnz9ADKmBK0q+P4b6ZKDCW1I/1a+ApiHivb9Q07fwyHeVv7iA7QYXj6m/y7uTSz9VuD9HADvAZ++gvzbmWmzGN5W/sZm0oVMEvD/opOAn73thvyrGk2YcG76/WtqDrTxLrL9/uthpLqlev/5oPpjp6Lm/F43L9uJcsr+/OAbSZiO7P4x7THzhCKe/kNNdn1hHpb80PYg1Z4DDv3baIwdAOL+/zC/GXUKvp78puTIo6yalPxfFqM1QwLS/+BLiAQxRmb/CZ3Z+BH/BP59hbSNVWrO/0ch/xCFivL/RA5uQ7eGtv007I2fj9rw/JKa8pDOlqD8gfeMTBT+lPwY7jtCoj6g/MvA7W587ur8P4T09XE6xv1rzrKYBj7E/Tb1ygIp2tD8vz0Avqz21vxEHZZEFVaE/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzU0NzIwNjcycQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM1NDcyMDY3MnEBYS4CAAAAAAAAAJjhABlzB7Q/VtikzOqZvb8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    4,
                    500
                ],
                "values": "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"
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        0.08682874779079738,
                        3.337922210888128,
                        3.829720932646792,
                        -0.640976469340307
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4
                ],
                "values": [
                    0.08682874779079738,
                    3.337922210888128,
                    3.829720932646792,
                    -0.640976469340307
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 10
    }
}