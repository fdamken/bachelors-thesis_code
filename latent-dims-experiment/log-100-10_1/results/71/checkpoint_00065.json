{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9561319735373556,
                            -0.011363138234374646,
                            0.0465586215392832,
                            0.04960151595905429
                        ],
                        [
                            0.021989979598739048,
                            1.052810308550727,
                            -0.10985616389233656,
                            -0.0450859299572098
                        ],
                        [
                            -0.009790237540606208,
                            0.018563711623785627,
                            0.9636596779416253,
                            0.035448642339636065
                        ],
                        [
                            -0.007170521059950669,
                            0.05647447200983988,
                            -0.07772527877789838,
                            0.9639379085288383
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4,
                    4
                ],
                "strides": [
                    8,
                    32
                ],
                "values": [
                    [
                        0.9561319735373556,
                        0.021989979598739048,
                        -0.009790237540606208,
                        -0.007170521059950669
                    ],
                    [
                        -0.011363138234374646,
                        1.052810308550727,
                        0.018563711623785627,
                        0.05647447200983988
                    ],
                    [
                        0.0465586215392832,
                        -0.10985616389233656,
                        0.9636596779416253,
                        -0.07772527877789838
                    ],
                    [
                        0.04960151595905429,
                        -0.0450859299572098,
                        0.035448642339636065,
                        0.9639379085288383
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    1.159768576561682,
                    2.050921151625181,
                    10.909887935273243,
                    4.526625479233648
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.18400969512717893,
                    0.08140703023862012
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.012444593897144793,
                        -0.0011506411743646972,
                        0.03475401732861072,
                        -0.02815279853696029
                    ],
                    [
                        -0.0011506411743646972,
                        0.04941705179739575,
                        0.07481991677882327,
                        -0.0008908794272453613
                    ],
                    [
                        0.03475401732861072,
                        0.07481991677882327,
                        0.4456011739087451,
                        -0.06447019247787933
                    ],
                    [
                        -0.02815279853696029,
                        -0.0008908794272453613,
                        -0.06447019247787933,
                        0.11059216986868756
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            4
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            4,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzU1MjIwOTYwcQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM1NTIyMDk2MHEBYS4yAAAAAAAAAE35OwUGXrw/Yony2F/E17/FASn52/Dkv0FxS4AGbd+/3Da738Vj2T9xVi6tP47TPw7BijeMZcI/XU/cxTa+0D+azbQHPWrCv/4wRKhoiMu/MK4QLtbV1j+uQ9fzYbbcv9xHe/qIftG/68se1oBqqz9xh0eLVG/aP9I/CNKx89I/L5O9CnOFvL8xDBZgEnHcP0L2pBtczV2/q6dzGYJZ2L/eLcqWdVavP6OMcQYETtI/qLwK9r9/1T9ebNDA8WTbv5PQkB+EotG/cWqtwBzSzj8wuihV2zLUP/XP/qvvgei/SsTppjUg1z9UMAnYNJrUPxi2YXSkoL8/ts44cWBXzb99MvgZYEG3vzni8Uf1t8I/7YG6NVWw0z+ZVnDtmpeqP66XBJL5H9q/0Bar49Tm2D/Apy90d43gP5W/hRynK9A/6WCjeUKg4b/QfQFut1PZP9qSCSN/ZOA/KIPtFUG44r+P0h7XEg51P9DWTz8Eoda/pwuZhPB55T9i7SVfgArMP5Nw+N5VbbU/X1MAh9zezT8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzU0NDA5MjQ4cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM1NDQwOTI0OHEBYS5kAAAAAAAAABzh2Q1i7cm/i6Dgeh74pD9mf1fqQuXSv8x5evy/aXI/ljRFXQ1bzr/HUd58ry65v6ZEh73Hbsy/+Q7VMS9nvr/7ycvuo7vDv6NB7GX3bcq/cJhlJBSFtL9JJpNz6/ynP7O/9FK78r4/tTvMYSgsrr8ypqVp42OyP/dBSCFjtbW/J7GbfXXlpz+h2eO8NH2/P34wzBOex7+/8EjDfjlQmz9PHdEpqhu3PxnfhLIfjq6/ONh7AZoSor95wT64YijCv5kVhYF2C7G/yUJxJ9+vxL8+4HmlcUbSP6QMIf3Zgri/prenxw3imj+TbRcpL4Wpv2psm2yg4Ka/Hm7bPjm0gj+q+qgueXvBv7QCDnVxAmg/qWKvaKx1Wb82LvU8H/Gjv9BnGyJylMG/kBBbK87WrL8mRrjSurPHP/qIJxfde7W/dTyT3UGElL/LkR9P5V67P6BsAcVJYr8/0+QXZnjPxj/b2RhLyzrRvwbwypf37pk/9LK98EuNsz/CKd/5XQLLv1a0eb/jDqS/Ztdnpvr0wD9HOnoz/Hq7P0k+AWgIjZ+/zLSOV2Gpsb9s36Ub1xK1v6OqZk1A/Lm/AgmkjbRJlz8V8jfMDhFpvweG5Ukq1Yy/cHtFdlNYpT9JrolqOAyYv14XYlxHdMW/pqXs23k0pL85NzFEuP+cP1AWYK53LKo/WXeUfcVSu79bCiEVOoTAP+qMHbVecKS/IZilIuPFtT/QsOrcXqGXvwn7J/4WAYM/CTA1xVjokz/puSzo53Ogv2kiwJlPTrG/lmRnWoQsp7/ygzomUKSoP9B/NsFFeLy/BD6OcfcKur9rKommvWjBP6z3ARriso6/komuysBRsr+MfmeeATS6vy0aVYwrire/3COoqbWFs7/KdvQOikGyPxDgaEhlbry//WezvDYnjr+KEcTYG1nSP8yO4mhCf40/MbJ47X3xvr8gCUHxUoCxvwb0MD6HZ7o/3hXRUnuGoz+3VAnCTCCgPwloAv6RHrq/5lxtMkOst78eoQqFj0Cjvw9IglfawaM/bg33J0eiqb9gTVgGT66yv+zi0flyfrO/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzU1MTIxMTg0cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM1NTEyMTE4NHEBYS4CAAAAAAAAAORHz200GMg/+lO6eqMUwL8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    4,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.27437202347974726,
                        2.406323017736195,
                        5.046232296470117,
                        -0.11066409931500791
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4
                ],
                "values": [
                    -0.27437202347974726,
                    2.406323017736195,
                    5.046232296470117,
                    -0.11066409931500791
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 65
    }
}