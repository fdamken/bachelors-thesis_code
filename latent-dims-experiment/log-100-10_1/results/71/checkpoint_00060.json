{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9795242177587441,
                            -0.014672039274456837,
                            0.04612553461625293,
                            0.040209780781813115
                        ],
                        [
                            0.019106082709255307,
                            1.0139593992957594,
                            -0.07060586592891065,
                            -0.04076360385260549
                        ],
                        [
                            -0.012408019692122896,
                            0.007545876496862683,
                            0.9784879735348465,
                            0.02227978843894157
                        ],
                        [
                            -0.01087768756855858,
                            0.03729903761363326,
                            -0.06122650453219761,
                            0.9794409458648957
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4,
                    4
                ],
                "strides": [
                    8,
                    32
                ],
                "values": [
                    [
                        0.9795242177587441,
                        0.019106082709255307,
                        -0.012408019692122896,
                        -0.01087768756855858
                    ],
                    [
                        -0.014672039274456837,
                        1.0139593992957594,
                        0.007545876496862683,
                        0.03729903761363326
                    ],
                    [
                        0.04612553461625293,
                        -0.07060586592891065,
                        0.9784879735348465,
                        -0.06122650453219761
                    ],
                    [
                        0.040209780781813115,
                        -0.04076360385260549,
                        0.02227978843894157,
                        0.9794409458648957
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    1.4130776054194076,
                    2.0627956743559634,
                    9.78582058151678,
                    4.738277995884852
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.1617971755488179,
                    0.1457369244193621
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.014876279669721028,
                        -0.003435905672916212,
                        0.04017530885676995,
                        -0.03503541317092731
                    ],
                    [
                        -0.003435905672916212,
                        0.05422818856969869,
                        0.06957794664100092,
                        0.006932386261668144
                    ],
                    [
                        0.04017530885676995,
                        0.06957794664100092,
                        0.46666981133418517,
                        -0.08131036028870797
                    ],
                    [
                        -0.03503541317092731,
                        0.006932386261668144,
                        -0.08131036028870797,
                        0.13132973366877093
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            4
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            4,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzU0NzY1OTIwcQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM1NDc2NTkyMHEBYS4yAAAAAAAAAMDRvkVi7b4/1B0N4zZo2L/ySwJ08J7kv5x9DmKBgd2/4ov76ZwH2j9JfB6jaOrSPyI/wCXeHcE/HCwI0A1i0T8eNCPzjiLBv0NF7pO6QMq/ygfZI/8x1j9MTNb9OFrdv/gziLcHJs+/EJ3OishLpj+Ay0qBfcvZP6/WJdyIl9M/TswdwsMZwr8XGldBjYXaP0KCvMQ1wYA/bFfE5k4m1b+/0YuWB3i8P+ag1zY3gdU/daXZKPOy2D/M1rCNvjHYv6npNj8JjtO/KyxYrG6KzT/hc+hKBI/TP5zOoxwtjOe/bK0JxroL2T9IVS65r67SPyfbPndcp8M/bwEuNFaAyb/ylFNAlyavv4CGejNHcME/CvABQCxU1D+xn6Xx4fm0P48jxLB+C9y/SEVf2f1C2D/jSbXJaS/fP/GX1PtDgMw/Piy7/i3y4b9seJVj4K/YP3ekYCd53d4/SYjMhn7C4b+26wkxzXSZv7FFoF2JjNi/WJ3xE7Nv5j+fKashdjPIP/ZsxVlqG70/DhyedqEi0j8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzU0NDM0ODY0cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM1NDQzNDg2NHEBYS5kAAAAAAAAAPLHRyIQNcu/4OTJzNYWqj8ii6vLvfnQv0OO7pICjHa/8yjAcbuiz7/3YN/7YW7Av7uG/KgZJ8u/5tjfCNPXu7997FDa9XPCv3Hyfijtlsa/L/uhXh3hnr9XoKYhM96iPzNjFNimRLc/3MJ/qyjEtr9hIYndnWulP1kaW/gGJrO/MXOwK73Goj++kexySAbBP3Q7YR59K8G/Xj5NEdXGoj9OFMVSBqu5Pxc3OAJs1rG/AaccX8Pnmb9EUbjMEHDDvzonH7E0+Ky/WG/sO433xb8MqjubmqLRPybzADx3GMC/7eOS2S/NrD/ZcyTXdmakv3+ib9vdEY6/o5pJQ42Xkz/hiiQayzPAv6/A76R9e4o/GFQEWdYnoL9Iz+CO1w+pv0E+il98a8W/gWJu2RW4p78YPjPnaPvIP8W6B5LxKb2/sjmP5Emeqb+yNkgmic+4P9hy/PbS+MA/oyqdUcqHxT+VHr1A9JbQv1lk1x00FqI/GOfEx+/9sD8CamTlr7rJv+evZRGcLam/zaHaI5lavz+kDXZcWAq+P79yA4Y85aS/EKIoXQo0rr8MZpFBhcmqv6NIWXaci7y/XyW+mJLDoD/ylJv6JL+Kv3qWjca8TZA/02VgJJs5oD948mWNj52Lv+bF3HD1u8a/IdohFIMrnr+xDgZ1molbv3LqSgAwS68/TnSeVGnDuL/yG1QBGHm+P1aXPyf8BLe/i4+0+YY2sz9yXTly3MeKv6uQ7yL8vZM/muhOWFVQqT/9dcUn73thv79anhRk/Li/ZSS5CcwNor9GHit4CMOtP8s0LuqhB7+//VPCSJt7t79vogC7a7DCP4EIAb3BvY4/EBOERdX/ub/gFYwj7YWyv6z7X2PP+rS/ceq0gFn2sL9Vle435tC0P4OvXnHB/b6/95Uq6qpYc7/SIw26lm3QP3E2Z9gR/Zg/ALwzC23AwL+B+xpsZy65vxEQh9zNCsE/C4+7AYbPnD9sJULgKAOWP4J/IdU1j7e/FPZnCecctb/zC9fWR1+ovylubKmS4Kg/sEDmef/Arr9VTmXd8h6wv9gSrXSHLLu/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAkAAAAxNzM0OTg3NTJxAlgDAAAAY3B1cQNLAk50cQRRLoACXXEAWAkAAAAxNzM0OTg3NTJxAWEuAgAAAAAAAABflUxZhtDGP0nYO49RXMG/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    4,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.10559303429785181,
                        2.266950091784249,
                        5.014154974399965,
                        -0.5448964283591557
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4
                ],
                "values": [
                    -0.10559303429785181,
                    2.266950091784249,
                    5.014154974399965,
                    -0.5448964283591557
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 60
    }
}