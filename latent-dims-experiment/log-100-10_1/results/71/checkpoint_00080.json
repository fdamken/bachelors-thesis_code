{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9635632746328475,
                            0.07649903459355752,
                            0.04525715177341231,
                            0.02785756252650343
                        ],
                        [
                            0.011934501817270095,
                            1.0171605932371028,
                            -0.09117122014031158,
                            -0.014036404517003382
                        ],
                        [
                            0.0011151053888553567,
                            0.0160047707404057,
                            0.9749481676907054,
                            0.03118344883563318
                        ],
                        [
                            -0.008834044255377623,
                            0.06306527075103528,
                            -0.07038376838832659,
                            0.9529936873276605
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4,
                    4
                ],
                "strides": [
                    8,
                    32
                ],
                "values": [
                    [
                        0.9635632746328475,
                        0.011934501817270095,
                        0.0011151053888553567,
                        -0.008834044255377623
                    ],
                    [
                        0.07649903459355752,
                        1.0171605932371028,
                        0.0160047707404057,
                        0.06306527075103528
                    ],
                    [
                        0.04525715177341231,
                        -0.09117122014031158,
                        0.9749481676907054,
                        -0.07038376838832659
                    ],
                    [
                        0.02785756252650343,
                        -0.014036404517003382,
                        0.03118344883563318,
                        0.9529936873276605
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    1.0838939049732026,
                    3.9534807342530613,
                    20.0186714615007,
                    6.863829159876798
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.2890533412515124,
                    0.29507770056232735
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.011684242507530009,
                        2.261361678068674e-05,
                        0.03528980375571056,
                        -0.02573259398621211
                    ],
                    [
                        2.261361678068674e-05,
                        0.03869212888615259,
                        0.06320916411824484,
                        -0.010018286937472087
                    ],
                    [
                        0.03528980375571056,
                        0.06320916411824484,
                        0.40643044999601585,
                        -0.0712449839951308
                    ],
                    [
                        -0.02573259398621211,
                        -0.010018286937472087,
                        -0.0712449839951308,
                        0.09899262671486969
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            4
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            4,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzU1MTkxMzkycQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM1NTE5MTM5MnEBYS4yAAAAAAAAACOFujRi7b4/WxkY6DZo2L++DsJ+x0Llv/iZWcNuCOC/IISe1e6/2D8MWeHLxHnVP4YmmCzeHcE/6YzBu18a0D/lMww+eZSrv6ZGY+VyX8+/ogTuI/8x1j+pjSGcoZjgv/V4AhcOatO/O2qiHZxEsD9MBkkGaR3SPykXTi1Bttg/Ykcww8MZwr/hYJYt3z3ZP3hiJSp825w/1PknZREc3r/5JFNEvTeqP5BJCP0sqtE/UzzbAJcj1j+2CLSNvjHYv/OQujkxocK/MkZDrG6KzT8jP/4hqP/QP7Ch4CYEMOi/xxiBUaZd0T+3Dwj3uYXWP16Jg/uP8rc/q+3PlT9u1L/X1zPHa1eVv8dntjJHcME/nR0haNO8xj+rsVWKU7avP1VB317G7Na/2pf42P1C2D8XnocDOoPhP3upLmDuZr8/wLjt/i3y4b+HuFd9jvfZPwQ5HKhqtuA/mzxbr9pR5L9/jWyfR0zBP2GxPkrbRNe/c9GKCdzL5T/icpuciuHPP1sG6Qey/Lc/qxsI/Qp2uj8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzU1MTIxMTg0cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM1NTEyMTE4NHEBYS5kAAAAAAAAAC51VCIQNcu/3BK2zNYWqj/Fu5T0GYnTv5U6QvVgqaE/eG7sHwOEyr87n+D7YW7Avz1LAdJ1ts2/PNBhrUV7wL8ezkYDUgPFv3gGc1FJJsm/CSSIoUw4w7/txXTFoxutPxt+9b0LwcA/8mEq2P6fnb8ZXZGSP/O0Px39UvgGJrO/ysGKzy0ErT9sqvGT2O28P62gUkfZusO/JHr/2sgSkT/5u9gAToy0P2jhkHntY56/8/6Pe2G3sL9DhbnMEHDDv8d5Ow3EuqK/8YnrO433xb8kn7evSOrSP3pyk4LF1LC/KHzQI52kkD+ComIPrHC0vyVhtRrowaG/r+p2RTcJpD8t3CBDJ8PCv3tN8bDAGas/Crh2uitMgT/TINqO1w+pv1zQiyVfPbG/ygBr2RW4p7+Qt0uVsNzDP8YkM+6A7LK/GqgmS+UHtz+uVgR4Qe69P10u+fbS+MA//iOjUcqHxT+SWVZVot7Rv2mIuB00FqI/ZXTPx+/9sD8FfSYwYrTQv0PBXRGcLam/telbuG+/pT+SeoIKoOu4P9LZ7IU85aS/PW+GgL04tL8yTK/yeoOyv5mpW3aci7y/udRO9S8yqL+eM7/6JL+KvyTXzsgFqJi/Nc1VJJs5oD8cETCH1CShv6kD+evBG76/0tj9E4Mrnr++qAZ0lJ6jP39AfVy/DaU/QagoTiWfxr+OjkcBGHm+PxBrWdVD5rG/ySOdSz9VuD8etEly3MeKv/HyCmzGN5W/on4Backlnj/JKIUsX6qWvyo0tsKr3bO/gzpWrDxLrL+eJFTUl4WjP3VdVkYxyrS/vKqWSJt7t791Ugm7a7DCP6s33bDhlpm/FZNFk9rrrT+BN13HXcO8v/uUMrWHGbq/GWee0hEVtr8nTooI9dKVP3r5cR8J37m/k6U2AgxRmb96nNtx8vzSP91xC25h8Y+/KC40C23AwL+NtZSQ7eGtv+Z2/WxO6oo/x4nApDOlqD88UPcTBT+lP1r2C9U1j7e/KxxlW587ur87lfjWR1+ov1VncamS4Kg/i0nUuDNypD85T1Evqz21vy5y2tAW77C/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAgAAAA5NDEzNjE0NHECWAMAAABjcHVxA0sCTnRxBFEugAJdcQBYCAAAADk0MTM2MTQ0cQFhLgIAAAAAAAAAmiZKguJfyT/y6HzM6pm9vw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    4,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.18212507419200058,
                        2.184254191712733,
                        5.7821691623301055,
                        -0.5451961069655926
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4
                ],
                "values": [
                    -0.18212507419200058,
                    2.184254191712733,
                    5.7821691623301055,
                    -0.5451961069655926
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 80
    }
}