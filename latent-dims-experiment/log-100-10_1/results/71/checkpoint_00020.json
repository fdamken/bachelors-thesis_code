{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            1.0152856736510556,
                            -0.001379984750130498,
                            0.039236840869658576,
                            0.010812461266376154
                        ],
                        [
                            0.03823774346852896,
                            0.9812894587565107,
                            0.01577273466513362,
                            -0.01956207958750217
                        ],
                        [
                            -0.010417437916108961,
                            0.009905419235061007,
                            0.9864285643942492,
                            0.029680188716429395
                        ],
                        [
                            -0.025143276876100473,
                            0.003210961666738358,
                            -0.04654442162580321,
                            0.9953251002349088
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4,
                    4
                ],
                "strides": [
                    8,
                    32
                ],
                "values": [
                    [
                        1.0152856736510556,
                        0.03823774346852896,
                        -0.010417437916108961,
                        -0.025143276876100473
                    ],
                    [
                        -0.001379984750130498,
                        0.9812894587565107,
                        0.009905419235061007,
                        0.003210961666738358
                    ],
                    [
                        0.039236840869658576,
                        0.01577273466513362,
                        0.9864285643942492,
                        -0.04654442162580321
                    ],
                    [
                        0.010812461266376154,
                        -0.01956207958750217,
                        0.029680188716429395,
                        0.9953251002349088
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    1.3630605190859375,
                    1.5018036254646476,
                    2.8065653866840963,
                    1.997694344076427
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.2639984940297454,
                    0.13700107608381387
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.08648507452489491,
                        -0.11369569482921638,
                        -0.010037372668375788,
                        -0.14372353095649953
                    ],
                    [
                        -0.11369569482921638,
                        0.37581102891103946,
                        0.15829984102891537,
                        0.2250139066870813
                    ],
                    [
                        -0.010037372668375788,
                        0.15829984102891537,
                        0.6729550627887644,
                        -0.020743975272113246
                    ],
                    [
                        -0.14372353095649953,
                        0.2250139066870813,
                        -0.020743975272113246,
                        0.3603645473517251
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            4
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            4,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzU1NDQ5NzQ0cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM1NTQ0OTc0NHEBYS4yAAAAAAAAACgoFU13QNM/EpZ6aCK60L/saFBeQlfjv4grH9O+i9S/C115K6fe3T+3GJcdfZjaP+CUY9ZNzNI/CxbzSSIQ2T8ytOc+eZSrv2lGEl5zX8+/vUdR6PRa0j8kE+L5OFrdv9sdDbYHJs+/k66HnwOWxr81U1U+KWG6P7YGWdmIl9M/wKYoPtjHyb/juSEVMfbXP0BzqL+TSqC/1TUgrERP0b8vn9F0xBPQP6ykWiiJOdQ/r+Dw6+jb1D+MQE+tGsHav6VS3I/BrNi/n/4Q4qG9wD9rbw3JO1HKP2jVcKzvgeC/1x99ml581j/4cYwBRKa8P4YR36C4NsY/FF7Wfw6fzr+Qtlg9lyavvwX+Elej/8M/9nWjSSxU1D99rmKdYbrEP0kFOcQsU92/QQ7QiEUk0z9UEi8m+fHUPzUPtKiLYcc/I0u5OD1f2L/ROIulO3TPPyv5MFisENI/XQvGaYxH2b+FVirzWzusP3N926qJjNi/ze58w/pQ4T8ksYpZ0sLKP0zuqAuy/Lc/hL8aLsCn3T8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzU1MTAwMzIwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM1NTEwMDMyMHEBYS5kAAAAAAAAAPshSyIQNcu/wsnrW5RnvD+2XJjzCrbHv1vbaezhHZq/gUXdHwOEyr9qSOIkvv3Cv71mDldhCMa/M6UZCdPXu79tlaNiM8m/v4wMaHqltcu/QSLXxBkuwz99uiqVWYTBP7xPF+dnUMM/57ghD3ANqb+6G4/GkhdeP1msCknQX8a/feDJOc+gsz8cONWbpJXDP4GMRHA1Ssa/OnsJY+dUtb/z6/C5up2kP/LnRmQY0oO/kMT3YIizdb/5J6nMEHDDv2KaANSm+pC/vNfeZOmGyL/WtZTkfCbOP6cgu7aLxse/ViA3Nb+Poj+sqsO6n/DBP3KjlKHT7Jk/NvtEQ42Xkz9OuQ1sg1LFvzXD66R9e4o/7/XR/EZlqr88pD8ZpKaxv8KjUncXXLa/McZaa0r1mr+MKi/naPvIP0AM8fFUJMG/TAQC6E0rvL9IHnHU0LCzPwSaLffS+MA/3sueUcqHxT/Gt7C0G2HEv3sXtrKKSLM/jY2Tj/wBmz925V1qmwzCv15HcxGcLam/mazRI5lavz8xaLsKoOu4PyVENDnHzrm/P9legL04tL/caQbojzqJv0p0H2Qq1cC/iNM01IcYij9IIGziOe2gv2luTwOStHC/a2jfAarwhz8RV5mLj52LvzJyznD1u8a/b3W19X6UhT8UOayBK0q+P7w12qDCW1I/gg+CpiHivb+iT8XwyHeVv52CjGU2ocC/fo6USz9VuD8Acz/AZ++gv/vy/tlT2aS/HSiyoVMEvD+LV7sn73thv4giLoVGLMS/jm+GrTxLrL/47v5gTpCSP/x8CR4tE8K/+FLU9uJcsr8/vgfSZiO7P/GfGBApo7C/s5Ban1hHpb/UCodeww/Gv2UqIwdAOL+/BK3QgFn2sL8Oy+835tC0PxsMfXHB/b6/BVrnAQxRmb91vXV+BH/BP8Pr2W1h8Y+/Ij5/xCFivL/MdB1sZy65vxJgI2fj9rw/F5y+pDOlqD8/hOMTBT+lP8SijCMeU4A/ilU9W587ur87jxDhzIu7vxEIraYBj7E/RpR4gIp2tD+XJUIvqz21v7Yf5v28oKe/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzU0NDgwNzM2cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM1NDQ4MDczNnEBYS4CAAAAAAAAAPWbAhlzB7Q/KoOjzOqZvb8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    4,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.2884692425115662,
                        3.1048624531809494,
                        3.8508855722211095,
                        0.003606551254683902
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4
                ],
                "values": [
                    -0.2884692425115662,
                    3.1048624531809494,
                    3.8508855722211095,
                    0.003606551254683902
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 20
    }
}