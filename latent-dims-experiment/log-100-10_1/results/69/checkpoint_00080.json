{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            1.0073366194281455,
                            0.039994047928565354
                        ],
                        [
                            -0.05516759756089586,
                            0.9764781519880645
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2,
                    2
                ],
                "strides": [
                    8,
                    16
                ],
                "values": [
                    [
                        1.0073366194281455,
                        -0.05516759756089586
                    ],
                    [
                        0.039994047928565354,
                        0.9764781519880645
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.0007035612197417245,
                    0.010129808479309112
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.012638394632873315,
                    0.06572468604879106
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        6.52022013006015e-05,
                        2.3408978672579545e-05
                    ],
                    [
                        2.3408978672579545e-05,
                        0.0009350495176823579
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5OTIwNjcycQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM4OTkyMDY3MnEBYS5kAAAAAAAAACc5h5MLW+O/SVy89G044b9FDDJ/4t/kvwMsRfrI9+K/YXeKEXACpr8mitWjas3Nvzc3KsENceg/E0TjqI8q1j/BRpvIlnzjv5Xjsx8Xc9S/G4E/sd963L8Ab68w60+YPyS45UdYAN8/xaJVyAUM4j+PU848PSvGvxS0SI9ld74/VCMGZaVw779d57ZrPUzPPwGxxH0SUb0/ZhRhBxq1tr/3EGA2eobkv9dysCafkb4/7FTIYlHezL8qfnvThADQv33uIyo3fea/EEnDvc1w5b9rqC3AZ/zgPwfBPjlepdu/07OZrQKi6r/yA/6/qX/Mv5b/QiasTNq/bRQX4CfWuL+yoXQcZcbrv9S6PfLLHLo/M/2SWE10XT8/7fD795veP32kyI+Fv9s/G0vzLyYo5b+oOZRz6UPRv38m/GKMfsa/BSgrktA25j+VEvMamBfhvyErV0J348m/tPYKZOHcwb8JVEZzBkTqPyO6aIjuwuQ/+3c0bE5jwr8in7uWfk7bv2n2ROeKUsg/1VOs8tWXpr9SK3yVEsnWP473THRubMS/56SpidJc3r+XJnBceSq3P+yUWb0CS7k/udilniZ53D8YG8XUhKPVv3lt7bSSNpS/OKKtBLsnxD+PHUc9IVnZv+JRy4cYEPO/X7ZVnFJLwT+9fbMmQRHav9AH7NdAPco/euOgKrYCzb/lksgXIs+RP2DnUVAYfK4/49ETxJVG5T+XvDg832LVP84aDCcuFc+/e1+8cRoBpT+BfK5BwrbdP4fsd7x0QtG/pVnsTdBn4r+TAoPLjgnKP1HmgPjUZ+S/Imm0rdDamz+26VOdQcjZP2oQuQTdON6/hY1xMnlFtb+aL/tcUufAP9ohjs3Ucrm/1h6sRAESwT++mvzfT0vRv4Url8m4EPQ/YRqN2aK+zT9XoLNf6j7dv7nLShQ6tNM/uFstow8Z5r94U7bjkUbiv5Tr/DzdX+w/JTnomlsYkz9aK3KwUJPkv3ywczfoC7g/ec7b6P7T7j8sVYBUZrPSvz2627XOSqS/XRmZxiLG2D/El3Art7Tiv/5ASDChc+c/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5MzcwOTc2cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM4OTM3MDk3NnEBYS4yAAAAAAAAAMLftDMX19i/D/aYjC5h1T89Dy7QghbfP3gQ9Bi6C8C/hULg9p3f1j83673f9u3TP2mnrs4ghM2/hc4f0l9Syr8cldSpHOviPxbuaaORk9A/NLTM37yswr/9Lznh3APZv1uM7e4odNm/6Uawb88F8b/9KMIf7hLQPzw7vDcjtN8/XrBDW0XV8T+ABKyj8WLgv52yA/vHA+E/ztV/7EmEvz8l1yZBG1LGP8TS8rreC9m/rA8DWlke4L+le6ZTBum+v9cz2o5aut4/E6Fqr4sJsT8VJ/1/91ngv0UKilQwH94/DXifU4uO278ryH7PyTvkv0MvNlQKoe0/QIFA70qS7D/rMcTXnTHEP8s0vHwhbZ+/gJQ3WGde679YjnO6I6HjP+drBACIhLM/F/bzn5Ao3D9pJAhTsODVP6Tw57I2Hd6/xKgepn+K4L94prTZzH/DP9sbeoBWCOi/ubKlSevc1L99g7PcZhzNv47K1Mvisdq/DKWtCXYKvz9MGZ1FVqbevxxQmk8ZTK+/UEjtcoBIyT8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5MDU2NTQ0cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM4OTA1NjU0NHEBYS5kAAAAAAAAAGWm68Mzw3S/eabVKTJdxj9Xg/RiFObPPzrwAaZjxru/kJ+ngxrcwD8do3DKcqjHPwYrJrgYtMC/SkYZI29q3D8sJJZwfV7RP1Wp2myAFdm/UTY4hLAWpL/cSg9u8pvSP7bF0IrNdrw/vhlmlV4l1r/PYo0o9qXGP7Fy8WOGdsE/2vstcql72z+bx0AuZ3Svv9jPFO58T5K/n4TQs6RdRT8hrfvMSvmiv+52XJR/V9U/XQQI5RDWpr8X+0v1Z/TJPxcQ5LRwqMi/VLUPAHIxy79xxOG84YmEP63qVc9ebsO/Pxj5EBHQxj+oQa4BN52+v27xCdzmjNQ/dDNSJTZvzT82l38qbAPTP69jReqm15Y/bW0ZVGXn1L8QwzkwS8SSv78oyQZUrMo/6dMtl8ALzb8zlckxckGmP3pxXvVLMKg/qLegC2FnyL8I5i42YKK0v9zxQ+bejdO/1Z2Ma/jisD8LcwctfASrPy8fp03d5sq/sX07ARf+wD/oiwqDjfDOv9xLzGWr9cU/OcO+Ogaunz/2tGIRHXS2P82hEuh9QLK/GDT9KIeJwb/f8Pnto4+rv9bdPvN6rLw/7l/uiEstsz+BT6Ct8tW7PyWeX9XZVrQ/o7KWkEOgrb+PzTlEnzfAv/HPMSdFGLE/YQoxOyIsx79psqTB96K5vwkCSYWdNaK/Ewq9e5AGgL8wnjCEnta2P+YKnamUB6a/9cny3gIQwz8hBqXXIlq9v/P/gr7aJrq/gq6RbKI0uj+aHtbDe2OgP0+7P7PdKr4/WgrEED3vy7/vZm8xp1rCv6KJN/k477I/Mf0z4eFVsD9Hgf+8CIDBP/F3Fc8/2aw/UFpJU84hlL9v1O1goF+tP87zZkoinKi/GwOfLkK5lL/PuMFLjNTTPzYBQtK6T68/8nmr7O/ixD/u3oyByG7GvxllRclO5MO/RlH9CSBB0z9cDJOWVwGmP9mqHfhczLq/KwMn2fbao7+PsXDDsdeuP49uf+9yDL6/zIQAfxV0mD8+7wgsg9ywvy5jNTKaX7k/+J4ePSFCtD/tt98GC+3WPwOqoeuKxsA/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5MDgwODY0cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM4OTA4MDg2NHEBYS4CAAAAAAAAAMRaYe53ZdI/J/74UMyynz8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    2,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        0.39802789999229066,
                        -0.021936399241712153
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2
                ],
                "values": [
                    0.39802789999229066,
                    -0.021936399241712153
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 80
    }
}