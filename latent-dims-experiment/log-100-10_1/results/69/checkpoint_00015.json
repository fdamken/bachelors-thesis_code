{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9881153311855668,
                            0.014525681555337453
                        ],
                        [
                            -0.07460265433267124,
                            0.9821365477126077
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2,
                    2
                ],
                "strides": [
                    8,
                    16
                ],
                "values": [
                    [
                        0.9881153311855668,
                        -0.07460265433267124
                    ],
                    [
                        0.014525681555337453,
                        0.9821365477126077
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.3418615760712859,
                    0.5621818340192979
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.19873526827330715,
                    0.17152379735468157
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.027110715100653937,
                        -0.03709968497688737
                    ],
                    [
                        -0.03709968497688737,
                        0.12662337546964653
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5Njk1MTM2cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM4OTY5NTEzNnEBYS5kAAAAAAAAAJS+phj3rOO/DDcVrYy95L8FQy6yFRPgv1PpMXXdpeK/v4sGaRyZir9Y4ViF33G/v533rjFLe+c/nYugRCnE3z8zLY5Ngs7jv6aozopUfdu/N647u7Ye3b8QN0tIszO7v0YHsz2BXN4/lvJ4Lmxy4D+f7X1Z9Wq6v9u4Ki4ZosU/M4YRUvco5r+MFZBPjwTOPzwEWVS2wbo/rPaagS5jvr8EGyiTCUniv5MfdUruzco/z61iJUcHyb/q+ucXRwvHvxHa56RLK+a/jXtOLgt75L/4V/M5fKrgP+QdQuMfEOC/wR5Q+J7d3r8WXc94btnXv6LKTzCD8Nq/EeLPo9EW0b/QGCz0CDfhv3owHF/Dpbu/bYCV8mopiD904x8iVCvRP4WIYK0Kq90/o3BFvhF65b/XUFppEqDQv84dk1DVaqe//YdWDeXk5T8vzsYE/fvevwA0VbK07cC/ft2VeI8kw78s0xXkQ07pPw07LiSLzdo/sL2vV6Abwb8CyIzeX8nfv2rVtCSVKcw/MI62G8P7tT8uQWmLOyXWP6SiJctX7ba/t8m8k6kA379jvoJy1bm5P6kXeULunLE/xrAgJjet4z+N0v/eW0fWv/2elNq92Mq/0ll9SKmCuz+1P/YJ7iXWvw1j7JYccua/V1SLzJT30D/V2u0cam3ZvyTC3Zw2ZsY/FDrLP2RKzr99wNyZxUZ+P1/rnv5fXak/ePuWICUJ4z/iObUxCL/UP3i1wKwwJNm/GtWdP8TEnz8XLTf3BEzkP0kUObKdntC/aeX6yOQV4r+TJevfPFHLP20gZ5JuAea/qYjcCWCdkT++rBkDqC7QP3C88A603N6/iNZRPLAJ1L8QKnJxAC/CP9vQO1Uj56k/gJZ0Juza0D8jDI9rO53Zv5+geu8A5OU/usq70y1b4T9wPXxVE5vcvwBklvW0yNE/cMwzKPtq5r9EHzdfpvThv2bco11iS+Y/phMq+/a0yj8r/JYWt/niv13E1rmLd6K/Q5U16f7T5j8f/Yw/ZgDPvzJINsgsWJ6/zdBUCFo6yT8blqKwogbjv56qRJYH2uU/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5MDMzMzc2cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM4OTAzMzM3NnEBYS4yAAAAAAAAAM2KxteHFNO/JSKM3niuvb9WZOPFq3LeP5Pr3j6dA3M/AHmG/3SD1z8LL6iNuqjEPyFPBdxL376/iXK74A2ay7/W7j0DgbfQPzskV61oN9E/5+pdJseDxr8H1W3rs6fZv6X0mGJmcuO/pxCbt0J8578NZgr7ltjRv9miFBWeyN0/927jeYDT5z9DuoweBhHgvzxJ97y9LOU/O3jow+30vD+l263Bade/P8OSLbAHaNi/iE50WCN62r9f004+MbzAv/xMInDVztw/sizCsUCZxj/WoLmjX/Hav4D4bwxPpNk//ABoSbTq2r+F4RlzOnnmvxtEHw8pJuE/hVRj9EqS5D8csDyQtne2P0rVJdiwL5W/Wduqh5qR5r9BCow/D/PjPz9+fhLnrKc/n+1ZgQs92j80QUVdh4TWPwngsqhfed2/9kA5K2vc4L83zw3desfEP6J6qS3gQ9O/ymDsU8KA1b9hOC3JuNTLvyBaPBEEwpu/X3E9Sxm4tr+Lr3sQmJ7FvygbrP1gLaq/++NbNXZxxT8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5NDI5MzQ0cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM4OTQyOTM0NHEBYS5kAAAAAAAAANb4GnqP9KG/D5p6NN/Ouj9aFHFfwmW5Pw57nnwHN7m/KzVhjCAKuj+DcmtjDELBP1zsoqJY+a6/fgdlRt7UyD9LqIVkjxO/PwOu6tkAK8K/MJ7NNR7qgr9nSAwkxrLJPxcdF3wBVK8/oS2ffXVpwb9Qaic3pO3HP09vS0vYLsA/I9IkNQsWzD/xJbVWhN2oP0TRGWzng6i/UFbCyGQNnr94pZj2JLWbv8zXUB4oC8o/gSFjtkUcdj/oGB98pf7AP2kILk1cZb+/bxR6wmdax79x567NkbSuv7nn1LqwJsK/pFfRG+iwqD+Z03H4CaKDvzIV/MJTUrc/NJbcJJuyrj9h4oEhpdPCPyEL5mr8x6o/hZn3It98wb/2gqkStQ2BvyGmPfn5ELQ/qPleWrY0yb+BaACEKmCrP9HVh/dFqJE/OI/GX7fQpL9j7391l+ipvyENy+tCB8m/HURi5gyRuD8Iw0luplCXP0eo+OZ2gMS/pJjpE8VFwj/KMR2hEtzAv7lPpxHChK8/RHS1+CyFk7/rG186eQO5PxF9NH5DYq+/ab5+FNlBwL9Ou/MfLlewv2DLNRzXO78/Ue7ksae8tT8/D6iElka5P3sNDf415rY/rm6pPouBqL83zyAyAsqiv1Q7KFChp7M/Mk1x/RdVw7+GA6uYmxO3v6o1NtdVVKe/RWnfL0PRYT+SXyet+mW5PwHZr1fc6KC/JbgW8ThTuT8kwdRxO92mv0+IjJV+l7e/Em6cQ0altz+BXaitiv60P34ESYqBm7s/uOlGgXr5wr+z2/aVgei3v4KHQtDcX7A/ZIB+cQuNqz9azevgfcKyv4mdMbRsObs/lI4b9z5fnr+4kW1ZLD+xPxS6efhpfaO/HJKJFaP3hL+xLUSB6XC0P2z0VIACMao/3BVgDRP5vD+Qgw5tGifFv9L5GisJ5I0/RVE9hH2MzT8CJrroDyCrP2vhFCG5W72/g+Gykzf7gb9Pf4Nx+bipPyszJ4znTcC/mVpxEcNYoT/BZ/9U32uzvzDPK1v27rs/GwIoFMWysT9kihTKc5W2P+GJHAA5DsI/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5MTQ5NjAwcQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM4OTE0OTYwMHEBYS4CAAAAAAAAAFS5hxgDyqW/7Mppeh74pD8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    2,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.43589726591409433,
                        0.576955693225704
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2
                ],
                "values": [
                    -0.43589726591409433,
                    0.576955693225704
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 15
    }
}