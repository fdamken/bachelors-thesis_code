{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            1.0034217132679046,
                            0.014323809809797094
                        ],
                        [
                            -0.10363740080123028,
                            0.9717469438336657
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2,
                    2
                ],
                "strides": [
                    8,
                    16
                ],
                "values": [
                    [
                        1.0034217132679046,
                        -0.10363740080123028
                    ],
                    [
                        0.014323809809797094,
                        0.9717469438336657
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.20741557615362174,
                    0.3606718128984027
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.17418505438833745,
                    0.184340627554401
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.010018706144686237,
                        -0.012457756459289787
                    ],
                    [
                        -0.012457756459289787,
                        0.06137857299957049
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5ODA3Nzc2cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM4OTgwNzc3NnEBYS5kAAAAAAAAAEM5iZMLW+O/oLIwMngP5b+zy083AWXgvwbdrdtDDOG/ZMlb2P6Jl78q64Ncg+K8v1uGrsANceg/xc2jEfaQ3D9vmoLIlnzjv+PCyHfPkdm/pNQgsd963L8HENBwD8O9v4C360dYAN8/TAddqYAg4D+rdI4wmdu3vyO6ovAOy8E/5V9p65DC57/8JjZjPUzPP5qRSX0SUb0/2oNuBxq1tr8vAIEso+Ljv43EReSHZ8Q/uYjTOfVOyr/rAGoDmcPFv6B8Cio3fea/KvQxqR8p5L/pzgFBxSHePxKuVGgLYuC/CnCpFWkI4b9vw6lFO6bUv/OLKyasTNq/17pmCplWzr+oVaWNotDiv84tsCXtsa2/drBtWU10XT/Re+UXfYfQP8ex9Y6Fv9s/8A46L0+E5L81L5Zz6UPRv/IwA0QidnE/vNM0ktA25j+2ZXwRwXPgv5t+tTsNTL+/Q6kVZOHcwb8GSqRzBkTqP5/AevFXmtc/7QwqbE5jwr+5mF+rLJbcvwhLR+eKUsg/skKjRB+LuD+tdH+VEsnWPymT2EsS3cG/ejufidJc3r/ff/dLEdqpP7T6SL0CS7k/jwqWjJ0T4j/RdsPUhKPVvxzMCu9rIMy/79peH03zuD+Bu0AUxcnWvxoUWjC2C+i/wPUMM8OIyz9jx5omQRHav6oxj99APco/d1l+2f3jx79B9iYYIs+RP/YCUlAYfK4/BxIJh4tv4T80ivs732LVP257nHn98NW/f9q2cRoBpT8Z46Jda7LiPzQedrx0QtG/PSalOSIg4b+Rz2X06pjMP3SWQQ2Dr+W/UeqxrdDamz+ktOnIRYbMP8hQtwTdON6/LImHRoet1L9ocvlcUufAP/znC6fbBa8/wsuuMMN+0T/q9504CGrWv+SuDYmafec/p/xLdCiD3z/TIrRf6j7dv/m/OBQ6tNM/9Ichow8Z5r8FhETkkUbiv9BGEvf75Oc/a65alZBOxD9FgzSvUJPkv8xEf1ba6bC/ubKHgpht6D/4whUqCiTQvzS5bCS8GpS/bJnv86vyxz+kT38rt7TivzkfoRvzK+Y/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5MjMzMzEycQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM4OTIzMzMxMnEBYS4yAAAAAAAAAPD71Qq7R9a/cmgjEqzhsL/XcCDQghbfPw02Ju0lOae/X0Bh9p3f1j849qPzIA/LP3yBMlQM1sW/hiKDIzoA0b8DLDs2tOrTPz6RJ+CbatQ/x9TP3ryswr/3QTfh3APZvz5jDcnM2OG/swMVUdwV6b8tKtyPx0rNv/oapzYjtN8/BklqExpt6T8vn6uj8WLgv0xWzCMkk+M/uoe+7EmEvz+lPRwfv8LDPwf/VeM6m9u/rbNfi1at3b9SALRTBum+v1P21I5aut4/dWx5eDbCwj9wHnLWkiTev8RWkz+C19w/txCjU4uO279rSfDtTifmv2oXlqjCv+I/YDOkjeQr5j8wDwe5Ege5P9PgTXwhbZ+/X6ctF12H57+/53K6I6HjP4DWnv+HhLM/rWlJdzSZ2T8V0whTsODVP5ho7LI2Hd6/C4Ycpn+K4L+bjLXIzH/DP3Myy2ATd9a/7rq4Sevc1L/agBvdZhzNv8riidBNvbO/ZP4k/pjWo7+u5YB2/gTMv4/Fok8ZTK+/C1hYcYBIyT8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5MzczOTIwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM4OTM3MzkyMHEBYS5kAAAAAAAAAAvtXlCuq5m/kY5wXTtevT8UN2uIHvW7P/SblaVjxru/3e1YtXyZvD+uwed3uonCPy3BR3oIDLK/PKbIrEQ7zz9Cvb/GddHAPwRjTkBnkci//3FRHzEMST861Yk4dPrKP/tMAedcObI/mCUckiOxwr8MmqJLUjXJP9mzx1+GdsE/iX6iSbldzT9aNssEzL6jP2YbDb6foq2/3DraJPTPk79O6zzNSvmiv/EfV0LHONA/DW0r2XzZcr8cWZqQU0bCP0QwIDtc+sC/1qL21hWiyL9nf7972ZWpv4lDUc9ebsO/ofu+baDPrT/d0yOgdQ6Uvwf79uuv4bk/P31pu6nosT9BmgA2UxvEPxCN+hhEqaU/vPZ0N43Ewr8atxcvS8SSvw6LMyJWoLY/fbXNl8ALzb8FVfcxckGmP++PYJu25Zs/24TIsW/vqb9jfHzHTwevvyS0RgDxTsq/TrJaD2kguz+rPhGJC8egP0jndPskyMW/esNlKHONwz9j8pm1wCPCv5tykdUtj7w/9PuhqXiPgr+UZ2kRHXS2Pzz6D+h9QLK/kXP6KIeJwb98Nvzto4+rvwchQPN6rLw/MEDviEstsz/EzZ2t8tW7PxTAGNXZVrQ/Z/mUkEOgrb/6ZWzAk1abv+9xMidFGLE/vz/sEcacxL8inKDB96K5vwa1SoWdNaK/+t20e5AGgL+hsTGEnta2P4BMm6mUB6a/aRnl3gIQwz/v++gfg76hv2RAgr7aJrq/CEKSbKI0uj9lCLCELm+yP+qwPrPdKr4/c6LClShBxL9o6QBtJVm1v9pVOPk477I/ZfmSH1Nupj/EkLdQxNaXv6b+O4sQqrg/cSBIU84hlL+CnO9goF+tP8VGZUoinKi/+eCbLkK5lL/yWUuqRQC3P7FrQNK6T68/In+i7O/ixD/8iYmByG7GvzewWTl1L5k/LjFQ9XH50T8XAs+WVwGmP4UZH/hczLq//BnXn039Uz8V1m7DsdeuP2AioqCVlcG/CSIMfxV0mD+JvAksg9ywvxQeNjKaX7k/PcgdPSFCtD8jZGdLILHBP1iooeuKxsA/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5NzgyMTc2cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM4OTc4MjE3NnEBYS4CAAAAAAAAAKKKicZKq6C/gZn8UMyynz8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    2,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.3232537576010122,
                        0.30408053254193945
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2
                ],
                "values": [
                    -0.3232537576010122,
                    0.30408053254193945
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 20
    }
}