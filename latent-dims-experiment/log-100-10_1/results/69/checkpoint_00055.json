{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9941869239898028,
                            0.016730646476865573
                        ],
                        [
                            -0.08671261808153943,
                            0.9858700988732986
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2,
                    2
                ],
                "strides": [
                    8,
                    16
                ],
                "values": [
                    [
                        0.9941869239898028,
                        -0.08671261808153943
                    ],
                    [
                        0.016730646476865573,
                        0.9858700988732986
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.007944108517046165,
                    0.03556672442760611
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.01592175127583323,
                    0.10926232824416854
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.0004648251413968303,
                        -9.547529612360245e-05
                    ],
                    [
                        -9.547529612360245e-05,
                        0.004023085571541225
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5MTc0NzUycQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM4OTE3NDc1MnEBYS5kAAAAAAAAADrOpRj3rOO//8+7rIy95L/dwFDlSEbjv69kNXXdpeK/u9WRv7fjoL/BZVWPvIXMv+wmRkb5wug/hETsnriG1T+GlrhNgs7jv7/xnhdAz9O/njJ/u7Ye3b/ZLm/tmqF5v4qlqj2BXN4/WqPGOEMW4T9tOEsoj+PEv4m3G9xgg8A/VEHY37ke77+EPwnA9UnQP6/AsaZu4L8/VKtMMHZEub8gHH+7Zdjkv5jdQ1rSxLE/8XtMTqOWy7+PD3uSW7nOv9CpBqVLK+a/wwVnLgt75L/SZahFU07hP6zMF0M1Sdy/0MshALvA5782UKur+zfLv0ECgDCD8Nq/nCiwLR5CwL/UMpuWeXTrv/q7bhoorLw/m0WNnFfMgL/qQYJfXgLVP8qFBppcY9w/ZtIhggej4b9CtFdpEqDQvw2s996gf3e/YYUMDeXk5T93FRagg2nhv3MeGgRtDMa/GwmUTzOVwL8YzSvuGvLpPyOcuM/PPeE/0UG5V6Abwb8603yMp6rav/7uvfs4msk/FJifnh15ob/kZT+LOyXWP9hpxogctMW/cO3mk6kA37/u/rjr9R1APws6YZSmu7Y/kpxmlE/V2z8mKwHfW0fWv+iNDsop+ba/+dcezrBQwD/JVhYzSrXYv48K/RbbBfC/utgtiqQDwD9gY3ocam3Zv8TSV+zuhMs/ckBDc5d9wb91+nu7kgycP4x/Z/5fXak/Ya6gAaAd4T+n4PsxCL/UP1R0wB1uLtC/jBOfP8TEnz87l2U36xLdPzfrOrKdntC/AdaCtDbO4L9jO/vfPFHLP1v5nH3AueS/iu7dCWCdkT9M4uhUYE3VP+Fs9g603N6/ra7C1O/Vzb+3IHVxAC/CP+bFZgAQTKm/XQd20sMHyj98TzTqJu/RvwXz7cm4EPA/7mA54lAGzz9dfXZVE5vcv2iklx4RWNQ/m6NNKPtq5r+fP7lepvThv4TNCsLIsew/gbrpulboqD+mE5I1POXkv+1ht9Q2fqY/4+G3YxOC7j/qbbVePVfTv2qbxQeHaam/GBXyfkFL1D/R0I+wogbjv9ZUIKu1Iec/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5Njk1MTM2cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM4OTY5NTEzNnEBYS4yAAAAAAAAAB23dilAM9i/8wBZQ+KtzD9nAfDFq3LeP8OzUi1oU8G/GSwYAXWD1z/hQfnpzZHUP+jYMLpyPMy/eY+svbEKyb8GVJckMZniP9G/XDJ1388/ZdhMyw5lwb8SvXbrs6fZv1AKLPn/F9q/cQ0+rdnc8L/UhTtzCgS/P9NE+yD9K+A/PCqgE2Ra8T+Cq40eBhHgv1805HXcseA/zk2Pw+30vD8tKKJVyZnHP0DGD+4RP9y/nbjSqduY379aB04+MbzAv9m4nYSDFt4/enhd2OeYsz/Zzd36CwjgvyzYx14Hw94/095iSbTq2r89nSaH6MDnv+6a08RHq+w/ETQial9A7D9aThTD7+nCP+H+59iwL5W/mg4Z03sM679+YZI/D/PjP0idDtcr9bA/RhW4lbmE2z8UkkVdh4TWP1Ojqahfed2/cFU9K2vc4L+mTcXmzDK6PynxtNIOJ+W/pdziU8KA1b8z2DrIuNTLv4+jndW5Vdu/tfxLGenMwD+66Eo7fwLev1WqsP1gLaq/PjNqhy6Qyj8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg4OTgyODgwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM4ODk4Mjg4MHEBYS5kAAAAAAAAALFyrXmP9KG/P0Mj7CeGwj8Y5JD8rX/JP8KXKitPGLS/pzpzjCAKuj/Pg5BjDELBP6i9laNkm7S/xLlLLUYO3T+sjMUEgKjEP1PDD3dXudm/Y/piNB7qgr/Ji1pPbbDQPz+/Q3wBVK8/1tR0SUI2zr8uUlIOSF7FP5Zcx0X4Prs/DV4gFhq51T8+IXc4Phigv+Ku0ZHtjJy/Tqghx2QNnr8LBHvCDul8v1JqJ4qos9Q/ZHX3vJ/njb8pYNHguazIP5uR0k8KQsK/f4edwmdax78BcIXNkbSuv1aj3rqwJsK/sbfxXyx3sT8FO9mGIu+2v27yWtdSBcs/xAb4iHa1vj+FKqRzXfLHP43XCMeLiqA/2bQ0nvMqyb+9eCQZtQ2Bv6yyWMlJ1cY/ifemq25Tzr+ak6GDKmCrP32RFj7alGa/e1TmBigOr7+l0hhfvDG3v14DBbOrWtC/iKldlFRysz9+AHg7Ka5mP+rYf74a8cG/0FwHFMVFwj9uyMjKbmvDv+drRHpZPcc/krYVA4q2Tj+5RVw6eQO5P8ZxOX5DYq+/9EuCFNlBwL+ixvIfLlewv/CeNBzXO78/KPTjsae8tT/pQKqElka5P5eTE/415rY/7omrPouBqL++8pNg4t+9v/9FJ1Chp7M/2qh2/RdVw793FK2YmxO3v84RNNdVVKe/q6XBL0PRYT/mQiat+mW5P4DXsVfc6KC/zqJ3ylTIwT9YoOBxO92mv2WMjZV+l7e/VUOdQ0altz9J5SzkhomWP8z2SYqBm7s/8AFXgXr5wr8kefAc+RLBv/FXQ9DcX7A/9M18cQuNqz9ce3jRtsfCP2cRL7RsObs/BR8e9z5fnr+whmxZLD+xP3vle/hpfaO/UbeVFaP3hL+Z9I8YWaHQP2sHV4ACMao/6LslAZ4qxj/PQRFtGifFv8c3HyJgvrC/C/85FPfk0z+CcrboDyCrP/EoEyG5W72/6ZG4kzf7gb8XbIVx+bipP9tUJ4znTcC/U5RtEcNYoT9fjv5U32uzv6rvKlv27rs/GBApFMWysT+d4NQDPzbNP+8rHAA5DsI/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5NDQ0Mzg0cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM4OTQ0NDM4NHEBYS4CAAAAAAAAAMicyyTRRck/3bNneh74pD8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    2,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        0.14018475460038454,
                        -0.06628662923950672
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2
                ],
                "values": [
                    0.14018475460038454,
                    -0.06628662923950672
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 55
    }
}