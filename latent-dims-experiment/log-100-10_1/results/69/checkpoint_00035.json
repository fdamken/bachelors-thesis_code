{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9925942554570272,
                            0.012694996629264434
                        ],
                        [
                            -0.07869786217345037,
                            0.979192399185343
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2,
                    2
                ],
                "strides": [
                    8,
                    16
                ],
                "values": [
                    [
                        0.9925942554570272,
                        -0.07869786217345037
                    ],
                    [
                        0.012694996629264434,
                        0.979192399185343
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.04742818499844015,
                    0.11561698598524288
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.10624626301489115,
                    0.15577631566256822
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.001987380770760789,
                        -0.0011549270382091477
                    ],
                    [
                        -0.0011549270382091477,
                        0.016042429951230758
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5MjEyNzA0cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM4OTIxMjcwNHEBYS5kAAAAAAAAADvKpxj3rOO//0IOrYy95L9X2xRQfd7evzNI3moGAuK/t8UgaRyZir/ggnY9BGfHv1EHMUb5wug/VXDJobiG1T+GRbNNgs7jv1cOzFhKpte/1rd9u7Ye3b+vXixHszO7v3AXpj2BXN4/Pq+FLmxy4D/wglb/MlTCvxxzAQW9EsM//KlQt12P7L9Ux2tgjwTOP7X6uFS2wbo/xmFIMHZEub9/hHy7Zdjkv90YelrSxLE/Kk1SJUcHyb/IP5Fp/ynMv5Vm7aRLK+a/fvxaLgt75L/nTKFQKvLhP/rbikE1Sdy/B0NEw7Dp479+6+Or+zfLvzRcfDCD8Nq/lAOdzI5/yr9lSY5Zb53nv+hQFny3brI/Em2BnFfMgL9flSUiVCvRPxHCDJpcY9w/qS4kdzD/4L9a+ldpEqDQv6x3jm/yNY0/Qa4LDeXk5T8m/xugg2nhv/EXUdsQfcO/10+ZTzOVwL+hVljuGvLpP1VFGv0uPtg/smmvV6Abwb/sA9CMp6rav/lCvfs4msk/RMmoG8P7tT+X5jyLOyXWP00Zz4gctMW/w/fmk6kA37810kqS8fmTv+PmW5Smu7Y/e7O2qP0c3T8MJgHfW0fWv2j9idq92Mq/LR7XR6mCuz+0wVYK7iXWv3lpo/uC2Oy/HUthiwCTwj8lRmIcam3ZvyIsmOzuhMs/2pgoc5d9wb8gmIO7kgycP4tGaP5fXak/fEulAaAd4T9eAOAxCL/UP8jB2R1uLtC/jJ2dP8TEnz8hYnU36xLdP47xOLKdntC/wPLAvg1y4b/S0OrfPFHLPw4dL5JuAea/nGDeCWCdkT8URrNAsgXUP1I79w603N6/Z1I9PLAJ1L8HTnRxAC/CP0DD31Qj56k/YPwHJHwmzz/+SMT+1DbTv6AI51RnSuw/oI322o7p1T83xXVVE5vcv/q/nR4RWNQ/iT1OKPtq5r9+AA1fpvThv8Hw/q0aaus/UGoXBZyxtj94tIc1POXkvzmeBVv8tKy/vSV5TmU67T9mQs5Gjw/SvxnqvgeHaam/2q9kCFo6yT9VC5KwogbjvyIqE6u1Iec/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5ODkwMjcycQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM4OTg5MDI3MnEBYS4yAAAAAAAAAF4QVilAM9i/gM5KTLqEtT8UwOTFq3LeP4B/PyxoU8G/7qgDAXWD1z+nvcPpzZHUPyEx65AWrcm/Di58D2opzr+tIArPTYTdP781JMIWf9I/Tjovyw5lwb/VyXvrs6fZvy5GojYK792/DHF/Hani7b/Xksy6KC+0vy/a7iD9K+A/yqHY3+Y57j8JlY0eBhHgvxM+43XcseA/8XKVw+30vD+Di6hVyZnHP680se0RP9y/wvgAqduY37+LVFc+MbzAvzNsnoSDFt4/VZBX2eeYsz8SH9D6Cwjgv0d3yV4Hw94/k85iSbTq2r/rmfdyOnnmv9kbnHSPjOc/hxIsWLH46j8JV6U+/lixP7Mx4NiwL5W/YkiOyKRo6r88h5I/D/PjP5PN4NYr9bA/TnAAlrmE2z9Au0Vdh4TWPxVup6hfed2/hPk8K2vc4L/JLzU5hVG/PyxN/nxWCOC/C37mU8KA1b+I7xDIuNTLvweiBxraEc2/hxmx3hl7vD93zSvUGJzXvzzhuf1gLaq/Wr5lhy6Qyj8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5ODg3NDU2cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM4OTg4NzQ1NnEBYS5kAAAAAAAAAG4wE3qP9KG/FHyBNN/Ouj/PYp5fwmW5P6ustHwHN7m/1V54jCAKuj9Vun1jDELBP7bmtaJY+a6/EFnu7zs32T/84zzbIxnCP1nNsTlN4tW/lQ3hNB7qgr/vLRokxrLJP+eoH3wBVK8/0ffSptH4w7+wLS43pO3HP5jLXEvYLsA/lEW0Xmelzj97o59WhN2oP8JSNJHtjJy/Hv37x2QNnr9zyvL2JLWbv9zKG2FMJNI/kZ8Qs0Ucdj/PwCR8pf7AP2+TlE1cZb+/eWOLwmdax7/zC5bNkbSuvy7g37qwJsK/xdzlG+iwqD8iNvbFY2OpvzfqihUMcbw/qQy/5AV4tD+MSJRKAWPFP0Vu02r8x6o/A34uTDsMxL8dxlMZtQ2Bv8UZRPn5ELQ/Q2Snq25Tzr8uEJSDKmCrP1gvoPdFqJE/uIZOBCgOr7+IvLMMBBOyv+353OtCB8m/NtAU5gyRuD9WImZuplCXPxWWFed2gMS/Hxn7E8VFwj+y3nTJbmvDv4LXPXpZPcc/kJ+79yyFk78rHV06eQO5PzUFOH5DYq+/bpOBFNlBwL/yAvMfLlewv57rNBzXO78/Oynksae8tT9JqqmElka5P+8/Df415rY/dhmrPouBqL9fWh0yAsqiv29cJ1Chp7M/CBp0/RdVw79PfKyYmxO3v8iFNNdVVKe/bmPIL0PRYT/fhyat+mW5P1FgsVfc6KC/LFV2ylTIwT82ndFxO92mv2yMjZV+l7e/bXOdQ0altz+gkVMTNIKlPzS7SYqBm7s/QZpPgXr5wr9n6++Vgei3vx2qQ9DcX7A/h1R8cQuNqz+wGbyoWjjAP6msL7RsObs/F5Md9z5fnr80wWxZLD+xP0Z7e/hpfaO/d2yVFaP3hL8c+S7f+SPMP8apVoACMao/+pckAZ4qxj9DgBBtGifFv7K0CysJ5I0/2fk3FPfk0z8yb7foDyCrP1OSEyG5W72/HH6pkzf7gb8J/YRx+bipPz/SJ4znTcC/Ia5uEcNYoT/rvf5U32uzv/AXK1v27rs/q9koFMWysT/PRvNfzvjCP6gZHAA5DsI/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5NzY5MTIwcQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM4OTc2OTEyMHEBYS4CAAAAAAAAABXc9xcwaa0/NjNoeh74pD8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    2,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.16094430464682594,
                        0.017823876723705688
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2
                ],
                "values": [
                    -0.16094430464682594,
                    0.017823876723705688
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 35
    }
}