{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.994721666572136,
                            0.02645474491886161
                        ],
                        [
                            -0.0608099507424884,
                            0.9877809929799488
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2,
                    2
                ],
                "strides": [
                    8,
                    16
                ],
                "values": [
                    [
                        0.994721666572136,
                        -0.0608099507424884
                    ],
                    [
                        0.02645474491886161,
                        0.9877809929799488
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.0011804447051077206,
                    0.013142262923091397
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.024957367756162058,
                    0.06812237204180059
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        9.69591079255927e-05,
                        1.7389303789179175e-05
                    ],
                    [
                        1.7389303789179175e-05,
                        0.001228485822428063
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5MTUxMzI4cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM4OTE1MTMyOHEBYS5kAAAAAAAAAHi7pRj3rOO/kyIijgfS4r/y9hP69o3kv6EiJ3XdpeK/e8Wgv7fjoL8hTVuPvIXMvxZlSEb5wug/57aqnriG1T+gk7lNgs7jvzVgexVAz9O/qUV8u7Ye3b+3XSbqrUahP/gtqT2BXN4/KY42Qxq64T903UVR63LHv8s9Htxgg8A/qojn37ke779P1xbA9UnQPzybt6Zu4L8/TDRUMHZEub/Nfn67Zdjkv+3ssf1CArw/lZlNTqOWy7+rp3ySW7nOv6a4BaVLK+a//hemOOIe5b+GsRY7fKrgP7cjeEM1Sdy/DjW3Mu7z6r9ljoer+zfLv3KTfzCD8Nq/DZc+t8tGtr+VHyuXeXTrv1ZXJBsorLw/KHOOnFfMgL/h0U3acrDcP2xyBZpcY9w/EXK4loyO47/waldpEqDQv8Nk0PwlGMC/EM0MDeXk5T9SwhGgg2nhvw9Js1YlK8u/gXuRTzOVwL8leyjuGvLpP4aREO9UKeM/sOm5V6Abwb9kgH6Mp6rav0rWvvs4msk/gMyGRI62q79ZUz+LOyXWP9HOxogctMW/2vLlk6kA37/ubhghWbukP3lgZJSmu7Y/Q9VolE/V2z8j2QDfW0fWv8GmbyJE8oO/NV4ZGWlvxT83gX9H+PzZvzqwGLtLQ/K/ch68sACTwj8qTXgcam3Zv9DSYuzuhMs/MYT77asryb8mWJW7kgycP62+Z/5fXak/NjqKKvys4z8Ta/wxCL/UP3pEwh1uLtC/4bOlP8TEnz8qRXA36xLdPw3EOrKdntC/yBHOyOQV4r+z1PzfPFHLPw/Inn3AueS/157fCWCdkT/ZpAGTaiTZP2zz9A603N6/a5yhqY3zvL/mtXRxAC/CP9bwcfYwAry/FTMgWa9Zwj+N8jbqJu/Rv1NZ1fzrQ/M/TmsVxfR2zD9alHZVE5vcvzmbiR4RWNQ/l/9LKPtq5r+bVJxepvThv+dwGsLIsew/YfXj7tW1gT8bspA1POXkv+rLO2BEm7o/DKG9YxOC7j9EObxePVfTv68JxgeHaam/6cFivEsi2D+rGo+wogbjv1NIKKu1Iec/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5MDQxNjk2cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM4OTA0MTY5NnEBYS4yAAAAAAAAAJ/RdylAM9i/n19egle91D9ZKfHFq3LeP5ZLbC1oU8G/6NscAXWD1z9zxfrpzZHUP9auNbpyPMy/AuemvbEKyb/yx7YkMZniP9zzWTJ1388/cuBSyw5lwb+OcXbrs6fZv1NJKvn/F9q/d+Qkrdnc8L8fDPQrxbbQP55u/CD9K+A/1Y63mE+s8T8gjY0eBhHgvwBI5XXcseA/wq6Mw+30vD/hdKBVyZnHP/e8vbAHaNi/+sPKqduY37+vrE0+MbzAv+YsnYSDFt4/Dxpd2OeYsz9++t76Cwjgv806x14Hw94/IVRjSbTq2r8ileZejDHlv8aegePMlu4/vUIjal9A7D+cOFXD7+nCP3f159iwL5W/vK4Z03sM67+pJZI/D/PjP0YaENcr9bA/dvm2lbmE2z/jcUVdh4TWP3Xkq6hfed2/Hyc9K2vc4L/UGz/FHjjCPyPgngVCWui/brniU8KA1b+6rjnIuNTLv/zbD9a5Vdu/zp5QGenMwD/RzmA7fwLev0vwr/1gLaq/5mFnhy6Qyj8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg4OTgyODE2cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM4ODk4MjgxNnEBYS5kAAAAAAAAAP+amCl73I6/3npbFYQVxT+LD3tOZp7OP/VFDn0HN7m/Vv9a3tgovz+uD8u1xGDGP6EAWEfV2L6/wsdULUYO3T/7ildmprrQP1z6FXdXudm/W5zgZPDvnb+KbtJjG/jRPxl43GFx57k/dIori4eB1b+vLBIUSF7FP24C7kvYLsA/nLGZUySQ2T/MoVjcrlWqv5I/5ZHtjJy/6RFy/AYlg79ZN+IeAxiov89bH4qos9Q/uTsek1i3ob/S+NHguazIPzgLVcke8Mm/IISGFCB5zL+c9LOBYYKUP3Ir3LqwJsK/yhTXqqppwD8bHk+VSZbAv/ZnRqmzWdE/ee3aEIgnzD+2oTcglV/SP6ePC8eLiqA/TazgSY5D1L/XxtwYtQ2Bv8zxTvKlZMk/dACoq25Tzr9UCbCDKmCrP/dEdv9FqJE/Jw9H97Ifx784nCFfvDG3vxuIkcdZotG/MuV+lFRysz8oSB/bw+WlP6mniOd2gMS/uMYkFMVFwj+SkJlu36jNv3YiRnpZPcc/ZktFb7v1pD8hslk6eQO5P6QPOn5DYq+/FnqCFNlBwL9AkPIfLlewv0hzNBzXO78/GOLjsae8tT8guaqElka5P46Hb6x9x7E/zJGrPouBqL9/HH9f4t+9v7YwJ1Chp7M/AhmrT9BzyL9ona6YmxO3v9keNNdVVKe/GFa+L0PRYT+QKiat+mW5P3LgsVfc6KC/jgh4ylTIwT+kE6+uxsq6v/eijZV+l7e/ncmcQ0altz8lItzjhomWP3kfSoqBm7s/BPhO0zIYyL+13fQc+RLBv5HXQtDcX7A/qmEccQuNqz+0/3nRtsfCPxm6MX2Huqc/0x4f9z5fnr+PgGxZLD+xPyjbe/hpfaO/LFyUFaP3hL86k4NBtTDTPxrwVoACMao/NCAmAZ4qxj8EDhJtGifFv1mZyrSgnMK/FYc6FPfk0z/SkqHoDyCrP8MgEyG5W72/r5NLDn14nb+SgIVx+bipPxdSJoznTcC/M8NrEcNYoT/jgf5U32uzv33hKlv27rs/9hEpFMWysT+q9WjohQHVP9pRHAA5DsI/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5MjQ5NTY4cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM4OTI0OTU2OHEBYS4CAAAAAAAAAFdV2M/yedA/Za1neh74pD8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    2,
                    500
                ],
                "values": "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"
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        0.35679161667081805,
                        -0.01999266098676899
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2
                ],
                "values": [
                    0.35679161667081805,
                    -0.01999266098676899
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 75
    }
}