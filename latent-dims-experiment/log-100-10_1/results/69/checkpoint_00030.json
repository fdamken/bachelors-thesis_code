{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            1.0071684995286228,
                            0.01619601732304445
                        ],
                        [
                            -0.10055508739286836,
                            0.9688472725599141
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2,
                    2
                ],
                "strides": [
                    8,
                    16
                ],
                "values": [
                    [
                        1.0071684995286228,
                        -0.10055508739286836
                    ],
                    [
                        0.01619601732304445,
                        0.9688472725599141
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.07715770579847585,
                    0.1673315910982971
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.1173824780490304,
                    0.16835917143242404
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.0029599724710294775,
                        -0.00239284426356437
                    ],
                    [
                        -0.00239284426356437,
                        0.023938183285533925
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5NDIwOTYwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM4OTQyMDk2MHEBYS5kAAAAAAAAAHi1iZMLW+O/DuosMngP5b97v1RaVILfv7hhtOUasOG/SqBh2P6Jl7/SBhMA+o/Dv7kkCMENceg/dg1arI8q1j/TvJHIlnzjv4wwG2MhSti/RKw9sd963L/D7jxwD8O9v+iJ5EdYAN8/mSpkqYAg4D+l5MzqhAzBv9YwifAOy8E/gD0aHsT16r9l4kMlhS3KPya/k30SUb0/v9FXBxq1tr9BOlo2eobkv4MkdGbsaq4/2RbNOfVOyr/X5Fos9VLIv3ONCyo3fea/3PQ5qR8p5L+eS0LJPqDhP+dcQDhepdu/Mb4FPsWX47/N8YPAqX/Mv9AdPSasTNq/0Rkt4TzHy78fSlzA1QPmv1vrycuqh5Y/FN42WU10XT8YuucXfYfQP9xj1o+Fv9s/vK9A/BtR4b/MzZRz6UPRv3BffNtp2Jg/qTYpktA25j9QbgYbmBfhvy7fxTsNTL+/WSgTZOHcwb+hQ4dzBkTqP+wBvfJXmtc/psgpbE5jwr8u/aKC0AbavxfmQ+eKUsg/7p2dRB+LuD9h9nmVEsnWP1x9XHRubMS/B9ioidJc3r/5TkxBYjeev+zeT70CS7k/FSJmx4II3z/FKMTUhKPVvxi4BO9rIMy/vGohH03zuD9ZchkAF4LVvwV8vWLpPuu/OknYeVJLwT/8EZUmQRHavwNhfNhAPco/f4ehh0XFwr+KmekXIs+RP7RrUVAYfK4/sdaWfLTL4D/lFhc832LVP14geCcuFc+/PsS3cRoBpT8u9iJWcP7eP/v/dbx0QtG/rj2jOSIg4b9nOWT06pjMP8ogFw2Dr+W/9A+zrdDamz+ZzBgiLRrSP6nqugTdON6/Rcp7Roet1L+4gfpcUufAP34F2abbBa8/bvI+HBU30D8RX5r0/ZLSv+55FrzNsOo//XkGDsIc2T9VjLJf6j7dv6g9ZBQ6tNM/E1suow8Z5r99VDDkkUbiv8AIWCUvGOs/2R3VL/hAuT8lhF2wUJPkvzkuilba6bC/l/hEtcug6z/ow1EpCiTQv9rKz7XOSqS/4urr86vyxz/Mz3Urt7TivzMzIzChc+c/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5MTkyMjI0cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM4OTE5MjIyNHEBYS4yAAAAAAAAAGWShDMX19i/OhDeC9tvoT9rGyHQghbfP0iC1ha6C8C/dr219p3f1j/zliDf9u3TPwwwVaXE9Mq//YIsIzoA0b92dRycGlHaP4rnxeCbatQ/ayaa37yswr9waT7h3APZv5a8sCwzS92/FXAMhA9J7L+X/4TD+n3Av43CijcjtN8/AwthRk2g7D/b6Kuj8WLgv1AtB/vHA+E/jQ+N7EmEvz827UBBG1LGP1gr7/fo4ty/UcyfWVke4L8M/rtTBum+v5vf2Y5aut4/kdSqsIsJsT9DJOh/91ngv43UjFQwH94/Dq+fU4uO278sDuTtTifmvxqjRdv18uU//nYKwBdf6T8kgnRnWuizP/2voXwhbZ+/6tb6SZC66r9gH3S6I6HjP9IdzP+HhLM/HODEi+Lg2j+MvAhTsODVP8dR47I2Hd6/sHgepn+K4L+dhUsRKcK8P9fT88Z53dy/dqmsSevc1L+7gpvcZhzNvwOULLRzq8a/iKyjMJpcrz+eTjWh5WjUv5EWok8ZTK+/YBzocoBIyT8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5NTUzNzYwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM4OTU1Mzc2MHEBYS5kAAAAAAAAABmqV1Cuq5m/NhN0XTtevT9inImIHvW7P93KoqVjxru/n3hmtXyZvD9bVvN3uonCP0y1THoIDLK/6vfDvAgE1j9Plqfv0WDDP63phgYar9K/DAG5KDEMST9/tpE4dPrKP+xPA+dcObI/8toYu39Axb/sR6ZLUjXJP5pe0l+GdsE/QU8IcxXtzz/Tvr8EzL6jP0oqWhovZaO/qLhaJPTPk7/I/UnNSvmiv81FVWsjyNI/tQ1523zZcr/jkp2QU0bCP2SXPjtc+sC/XS4A1xWiyL9awLJ72ZWpvwfIV89ebsO/dqfJbaDPrT/C66OgdQ6UvwaeRT5oAL8/COJ6DWIHtz+bGvxer6rGP0pj7xhEqaU/7kd7YOlTxb9isU0wS8SSv23vNiJWoLY/zd86l8ALzb+j37kxckGmP3drbJu25Zs/fVgEK3AWsr8ngLHHTwevv+UhUQDxTsq/AJYAD2kguz/jehiJC8egPzUFifskyMW/UPZwKHONwz+1xOHdHLPEvwS5n2Wr9cU/ShiFqXiPgr8tdmgRHXS2P0HMEOh9QLK/rJj7KIeJwb+yifvto4+rv1i5P/N6rLw/nOruiEstsz8VlJ6t8tW7Pw2dGNXZVrQ/0LGVkEOgrb+vA2vAk1abv+YXMidFGLE/Sz3tEcacxL/qUKHB96K5vzXySYWdNaK/LKG3e5AGgL/FTzGEnta2P8r6m6mUB6a/a1/v3gIQwz/hoOcfg76hv0Cvgr7aJrq/W7KSbKI0uj9lc3WELm+yPz8CP7PdKr4/xcvGlShBxL/PgP5sJVm1v1PSOPk477I/ri2SH1Nupj9/Kk+F6KOzPzEzO4sQqrg/VmFIU84hlL/b5+5goF+tP9oKZkoinKi/NimeLkK5lL9zO+V4k73FPwE2QdK6T68/yW6p7O/ixD+4goqByG7Gv4FPWTl1L5k/EQX6CSBB0z/i182WVwGmP6+EHvhczLq/pon5n039Uz/wi2/DsdeuP6BkoqCVlcG/XJsJfxV0mD9BcAksg9ywv+nPNTKaX7k/MCUePSFCtD8+cnhLILHBPyV3oeuKxsA/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5NTM1NzYwcQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM4OTUzNTc2MHEBYS4CAAAAAAAAAAGvWEkOGpw/WjD7UMyynz8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    2,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.21734902633745848,
                        0.08916687782877458
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2
                ],
                "values": [
                    -0.21734902633745848,
                    0.08916687782877458
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 30
    }
}