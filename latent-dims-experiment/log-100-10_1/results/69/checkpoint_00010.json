{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9977413713120322,
                            0.018006503234188013
                        ],
                        [
                            -0.046475374306682075,
                            0.9690525182386895
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2,
                    2
                ],
                "strides": [
                    8,
                    16
                ],
                "values": [
                    [
                        0.9977413713120322,
                        -0.046475374306682075
                    ],
                    [
                        0.018006503234188013,
                        0.9690525182386895
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.7965397444481468,
                    1.0110668036121093
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.413092633357046,
                    0.22240460630397121
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.1166430384649293,
                        -0.15152351170469602
                    ],
                    [
                        -0.15152351170469602,
                        0.35595505790917104
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5Mjg3MzkycQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM4OTI4NzM5MnEBYS5kAAAAAAAAAGuRxJ3i/uO/I8f8J6Fr5L96pP9ZVILfv9Uawg53P+S//ZxV2P6Jl7/eLnIKy8O3vwTWqJix4eU/FknhO6574T+bljjIlnzjvxLJ8b2HsN6/SGvu9vQo4L8ZLewJQADEv1gKgDOquN0/nJWVs1fE4D8yhyMT4ZvDvxTWPRlrWsQ/l7gHul2P5L/J88vaejXSP3yAj5BBx8M/+Oa/WNLTu7/PHgEER1Phv0gUZID4pM4/ExPFi61tz79QAwB9rXHNv63ShAuykeS/+Y4GvM1w5b9xn3bTFUTiP2/ffmgLYuC/oZw1xmuq27/kL/yroQzbv65+zCWsTNq/w6751gRK1L8Fgk+13jrfv/mg4BVIOcS/akkqVvSjrz8wLsYGnn/OPzIWQ/Aeb+A/yHTpLk+E5L/AOCq+dvjPv1Dn9HQ3gri/4HJpktA25j+AAf0QwXPgv3qvthgbVMe/1bv23vWKyb+jM49KqrTnPyRfTFe+AN4/6TwrbE5jwr+ZcN2ISX7hv1NKi8X9R9E/hN3L8mZssz+xX2e+bljZPy7R8fwVQaS/MQ0gidJc3r88OnsfUUPDP+HvbGtKLLQ/9/YdqyL/4z9NtZT94DLYv2ndGcYPkcm/pBbE4V6YwT8tHcT/FoLVvx/mgv2C2OS/s8+p/8cq1D+SW1cnQRHav/BnVomIHsU/g2gRU2VY0r+qCgzmwNClv45Q13vEXLQ/yHgnur6i5D+6n+A732LVP3dB699jV9y/YfXvcRoBpT/UNsiQnuXlP0+zdbx0QtG/saaRYn6v47+vbGb06pjMP8EvSw2Dr+W/J66xrdDamz9r7lkNf9LQPxtIQhmLgN+/I1gbMtll07857eOFrnbDP6dQZQNryKQ/QSopRXHG0j9ETbt1EkHav0C15FVnSuQ/bQVTbcf04j/eJ7lf6j7dv6wxX+vdJNE/ZbISow8Z5r/gi2bkkUbiv0FKU8TIseQ/Ixe6sK6N0D/hf22H9APiv/MgPBwW23i/kYhWVzze5T9/QUBOZrPSv28lhtRICTg/h2jcQWQRzT/6GYwrt7Tiv1WMyBAciOU/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5MTU4MzA0cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM4OTE1ODMwNHEBYS4yAAAAAAAAABy2VUmpws+/zwiF1aI9xb+CkR7QghbfP9gKyD4N+qs/40Bw10FQ1D/bXOhOqIS8P4A/fg9/ErK/mKNieqczxb/oFFOgmwjLPyHTXvRqCMw/ByBdYNFayr+x3Sfh3APZv5PIKPz/C+W/B/AXHqni5b/rVCYuygvVv68LCuJqldo/r4lS4OY55j870oUehzbev+V5xy77NuQ/L7pfSdlGtT+oP9bZYjPBP30RAn3UNNW/OeRqJfBG178J75BTBum+v0TqAz2im9k/e6YS70pwyj9WUHGF2gXZv+/SRtkbcdY/rwyTKi//2L9vwlvuTifmv+TALuseGd8/7yD8WrH44j/Lnq1mWuizP6oEymWA5IW/b0eGAq8/5r8w2Fy6I6HjP4SzBlooy26/AiEzTtgJ1z9/rQhTsODVP78QkYnajdu/+LpVsFYu4b/k/oigcPDAP7VKgvqsENC/aQsAXZkk1r8gi1/dZhzNv0OzxiAvcZc/7/3dC3PCwb9HopxUY3C+vyXWjQ9wopW/3QXEIMgpxD8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5MTQ2NDAwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM4OTE0NjQwMHEBYS5kAAAAAAAAAHmgXVCuq5m/a6lwXTtevT8gDmSIHvW7P4oAlKVjxru/vlJWtXyZvD95t+V3uonCPzU4R3oIDLK/vmMICdT9xD8V8bzGddHAPwF7/zjtp7y/PM18HTEMST+cDYY4dPrKP4DEAedcObI/LkgZkiOxwr/yTqJLUjXJP0zKxV+GdsE/6aOeSbldzT+AH8oEzL6jPx/sAr6foq2/VGvyJPTPk7/9yjXNSvmivwl4vzLWUss/oLzp2HzZcr9I+JmQU0bCP01tEDtc+sC/A0b01hWiyL9cRsV72ZWpvw6hTs9ebsO/Mrq7baDPrT/M3wigdQ6Uv0gG8Ouv4bk/Dtxhu6nosT++u/s1UxvEP75Q9xhEqaU/NKVxN43Ewr/n9r9hdzGWP+jIMyJWoLY/5gXTbmR8yr8IG04yckGmP5V+Xpu25Zs/8veqsW/vqb/mp2bHTwevv2PHRQDxTsq/qd5WD2kguz82dRCJC8egPzoTc/skyMW/Ye1jKHONwz95XJe1wCPCv2Its78JZqo/8enFqXiPgr85W2oRHXS2PzHuDuh9QLK/Z0byKIeJwb9l/f3to4+rvyM3QfN6rLw/EYfwiEstsz/GqZyt8tW7PyYJGdXZVrQ/SDiRkEOgrb/sxHLAk1abvz9qNCdFGLE/X3zrEcacxL/GAqDB96K5vwG0TYWdNaK/c22ve5AGgL9e2zKEnta2P+4dmKmUB6a/Iu7LGZXiuz+BlO4fg76hvz3ngL7aJrq/sXKQbKI0uj86KrWELm+yP0SGPbPdKr4/IJ/AlShBxL/qdgJtJVm1vxyHNvk477I/H9OWH1Nupj/+1wK4ITOwv//LPIsQqrg/guY9U84hlL8uV/NgoF+tP/hiYUoinKi/WICVLkK5lL9duzWqRQC3P6DhPdK6T68/g518kv5KtT/buYiByG7Gv5o5t0Ar1aY/wePZHRcmxz/qTtCWVwGmPw3qIPhczLq/p5Rkn039Uz9drWzDsdeuP0oEoaCVlcG/gYcPfxV0mD/S4gosg9ywvxGTNzKaX7k/MegbPSFCtD8NsZz6TZGjP4tnouuKxsA/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5MDMwMzA0cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM4OTAzMDMwNHEBYS4CAAAAAAAAAHPNo8ZKq6C/RVIEUcyynz8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    2,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -1.0572641570235275,
                        1.5820855190407253
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2
                ],
                "values": [
                    -1.0572641570235275,
                    1.5820855190407253
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 10
    }
}