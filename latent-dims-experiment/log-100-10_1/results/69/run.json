{
  "artifacts": [
    "checkpoint_00001.json",
    "checkpoint_00005.json",
    "checkpoint_00010.json",
    "checkpoint_00015.json",
    "checkpoint_00020.json",
    "checkpoint_00025.json",
    "checkpoint_00030.json",
    "checkpoint_00035.json",
    "checkpoint_00040.json",
    "checkpoint_00045.json",
    "checkpoint_00050.json",
    "checkpoint_00055.json",
    "checkpoint_00060.json",
    "checkpoint_00065.json",
    "checkpoint_00070.json",
    "checkpoint_00075.json",
    "checkpoint_00080.json",
    "checkpoint_00085.json",
    "checkpoint_00090.json",
    "checkpoint_00095.json",
    "checkpoint_00100.json"
  ],
  "command": "main",
  "experiment": {
    "base_dir": "/home/fabian/bachelor-thesis/code/src",
    "dependencies": [
      "jsonpickle==1.4.1",
      "neptune-contrib==0+unknown",
      "numpy==1.19.1",
      "sacred==0.8.1",
      "scipy==1.5.2",
      "torch==1.6.0"
    ],
    "mainfile": "experiment_pendulum_damped.py",
    "name": "pendulum_damped",
    "repositories": [
      {
        "commit": "6d1357af2f69e9009f4339964087d83d93f3f4e9",
        "dirty": false,
        "url": "ssh://github-fdamken/fdamken/bachelors-thesis_code.git"
      },
      {
        "commit": "6d1357af2f69e9009f4339964087d83d93f3f4e9",
        "dirty": false,
        "url": "ssh://github-fdamken/fdamken/bachelors-thesis_code.git"
      },
      {
        "commit": "6d1357af2f69e9009f4339964087d83d93f3f4e9",
        "dirty": false,
        "url": "ssh://github-fdamken/fdamken/bachelors-thesis_code.git"
      },
      {
        "commit": "6d1357af2f69e9009f4339964087d83d93f3f4e9",
        "dirty": false,
        "url": "ssh://github-fdamken/fdamken/bachelors-thesis_code.git"
      }
    ],
    "sources": [
      [
        "__init__.py",
        "_sources/__init___d41d8cd98f00b204e9800998ecf8427e.py"
      ],
      [
        "em.py",
        "_sources/em_42219c3660e0d4213b9d85f7c4f7b37e.py"
      ],
      [
        "experiment_pendulum_damped.py",
        "_sources/experiment_pendulum_damped_70e127f1d9ac784a69ad73a74e3306ea.py"
      ],
      [
        "util.py",
        "_sources/util_584d431d1c7c3cb4f42650f6fda305c5.py"
      ]
    ]
  },
  "heartbeat": "2020-08-12T07:16:01.941080",
  "host": {
    "ENV": {},
    "cpu": "Intel(R) Core(TM) i5-4690 CPU @ 3.50GHz",
    "gpus": {
      "driver_version": "450.51.06",
      "gpus": [
        {
          "model": "GeForce GTX 970",
          "persistence_mode": true,
          "total_memory": 4041
        }
      ]
    },
    "hostname": "H97-D3H",
    "os": [
      "Linux",
      "Linux-4.15.0-112-generic-x86_64-with-Ubuntu-18.04-bionic"
    ],
    "python_version": "3.7.8"
  },
  "meta": {
    "command": "main",
    "options": {
      "--beat-interval": null,
      "--capture": null,
      "--comment": null,
      "--debug": false,
      "--enforce_clean": false,
      "--file_storage": null,
      "--force": false,
      "--help": false,
      "--loglevel": null,
      "--mongo_db": null,
      "--name": null,
      "--pdb": false,
      "--print-config": false,
      "--priority": null,
      "--queue": false,
      "--s3": null,
      "--sql": null,
      "--tiny_db": null,
      "--unobserved": false,
      "COMMAND": null,
      "UPDATE": [
        "max_iterations=100",
        "g_optimization_max_iterations=1",
        "latent_dim=2"
      ],
      "help": false,
      "with": true
    }
  },
  "resources": [],
  "result": {
    "estimations": {
      "A": {
        "base": {
          "dtype": "float64",
          "py/object": "numpy.ndarray",
          "values": [
            [
              1.0049774040867308,
              0.17110548055822414
            ],
            [
              -0.033891003339350044,
              0.9757591556240073
            ]
          ]
        },
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "shape": [
          2,
          2
        ],
        "strides": [
          8,
          16
        ],
        "values": [
          [
            1.0049774040867308,
            -0.033891003339350044
          ],
          [
            0.17110548055822414,
            0.9757591556240073
          ]
        ]
      },
      "Q": {
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "values": [
          0.00017305622403534203,
          0.0027868613368207877
        ]
      },
      "R": {
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "values": [
          0.01779302157180973,
          0.05049699952864296
        ]
      },
      "V0": {
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "values": [
          [
            1.8203093756385957e-05,
            1.447034328398017e-05
          ],
          [
            1.447034328398017e-05,
            0.00034568006735714776
          ]
        ]
      },
      "g_params": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          {
            "_metadata": {
              "py/reduce": [
                {
                  "py/type": "collections.OrderedDict"
                },
                {
                  "py/tuple": []
                },
                null,
                null,
                {
                  "py/tuple": [
                    {
                      "py/tuple": [
                        "",
                        {
                          "version": 1
                        }
                      ]
                    },
                    {
                      "py/tuple": [
                        "_pipe",
                        {
                          "version": 1
                        }
                      ]
                    },
                    {
                      "py/tuple": [
                        "_pipe._pipe",
                        {
                          "version": 1
                        }
                      ]
                    },
                    {
                      "py/tuple": [
                        "_pipe._pipe.0",
                        {
                          "version": 1
                        }
                      ]
                    },
                    {
                      "py/tuple": [
                        "_pipe._pipe.1",
                        {
                          "version": 1
                        }
                      ]
                    },
                    {
                      "py/tuple": [
                        "_pipe._pipe.2",
                        {
                          "version": 1
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          },
          null,
          {
            "py/tuple": [
              {
                "py/tuple": [
                  "_pipe._pipe.0.weight",
                  {
                    "py/reduce": [
                      {
                        "py/function": "torch._utils._rebuild_tensor_v2"
                      },
                      {
                        "py/tuple": [
                          {
                            "py/reduce": [
                              {
                                "py/function": "torch.storage._load_from_bytes"
                              },
                              {
                                "py/tuple": [
                                  {
                                    "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5MjcyMDMycQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM4OTI3MjAzMnEBYS5kAAAAAAAAAIPqjpMLW+O/YDuOrNGZ3r+oZuGdZ8vmv6uDRfrI9+K/VBrfEXACpr+C/9ajas3Nv+bLL8ENceg/XsfZqI8q1j873Z7Ilnzjv5tDqh8Xc9S/AKxisd963L/b7OIw60+YP34m70dYAN8/L25YyAUM4j8CD7E9PSvGvycSTY9ld74/i13WQRWu8L83B7hrPUzPP7Eh/n0SUb0/jmlnBxq1tr89U2A2eobkv8cR/Safkb4/YmvMYlHezL/MCnvThADQv7/dIyo3fea/1jjCvc1w5b8yJeAGSXflPx2MRDlepdu/6u4F114x7b+JDvy/qX/Mvw1UWSasTNq/4qEB4CfWuL+gSRwyoyDwv1iTQPLLHLo/xBs2V010XT8/8B4xL4HiP0oAz4+Fv9s/mww3Ov3L5b97L49z6UPRv4c4l9S2fNW/jFUoktA25j9gOe4amBfhvwi17y9+59W/3S0HZOHcwb8lEkhzBkTqP4ApC7sh9uc/8ys1bE5jwr92FbyWfk7bv+PcUeeKUsg/k/QM89WXpr8LwUerwBDYP9cATnRubMS/SGq2idJc3r/29HdPrdLFP6wEW70CS7k/liqlniZ53D/lwejUhKPVv5RnpLSSNpS/W/2NKhe3xj/hdVM9IVnZv3RExLpLQ/a/jl5dnFJLwT//9/xjS+jdv95m79dAPco/feMfucu+2L9ntNQXIs+RPyatRVAYfK4/238z9sh56D8Px3556TnZP0sTDycuFc+/1aulcRoBpT/jHrhBwrbdP+Hserx0QtG/TQ7sTdBn4r8jjZLLjgnKP1SDgvjUZ+S/0IqardDamz/6Sgnv+ebeP1n82QTdON6/SX4NMnlFtb9dSBhdUufAPxw2p83Ucrm/J1siRQESwT8tzgLgT0vRvwBHqPzrQ/c/oleV2aK+zT/JVrRf6j7dvy7vQRQ6tNM/kKhkrea85r8UgqbjkUbivwtyBUe0A+0/sAS/mlsYkz9kCnawUJPkv93JnjfoC7g/SJjv6P7T7j+ctoBUZrPSvy0E6rXOSqS/Ln8o29AN2j8g03Irt7Tiv+c3eTChc+c/"
                                  }
                                ]
                              }
                            ]
                          },
                          0,
                          {
                            "py/tuple": [
                              50,
                              2
                            ]
                          },
                          {
                            "py/tuple": [
                              2,
                              1
                            ]
                          },
                          false,
                          {
                            "py/reduce": [
                              {
                                "py/type": "collections.OrderedDict"
                              },
                              {
                                "py/tuple": []
                              },
                              null,
                              null,
                              {
                                "py/tuple": []
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "py/tuple": [
                  "_pipe._pipe.0.bias",
                  {
                    "py/reduce": [
                      {
                        "py/function": "torch._utils._rebuild_tensor_v2"
                      },
                      {
                        "py/tuple": [
                          {
                            "py/reduce": [
                              {
                                "py/function": "torch.storage._load_from_bytes"
                              },
                              {
                                "py/tuple": [
                                  {
                                    "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5Nzc0ODE2cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM4OTc3NDgxNnEBYS4yAAAAAAAAAJNqsjMX19i/xEsQjS5h1T8Uoy7QghbfP6xi9hi6C8C/0/zg9p3f1j90K7/f9u3TP2Zgr84ghM2/DBgY0l9Syr+AQdepHOviPyxXaKORk9A/xC7O37yswr+gzjjh3APZv/4Z7e4odNm/yoNDcM8F8b+Bv1g0nFrRP9o5vTcjtN8/mfw04DAn8j+nxKuj8WLgv9oRA/vHA+E/uOZ77EmEvz/AzCdBG1LGP0eALaYwxNe/YIcCWlke4L/L96VTBum+vykt2Y5aut4/r+I+u6bVpz9qx/t/91ngv3K6iVQwH94/ROeZU4uO279grmjF8pfjv2nSF0BcWew/le9B70qS7D/A2LBSst/LP5UGuXwhbZ+/aKo4WGde67/Ei3O6I6HjP3JMBQCIhLM/QsLyn5Ao3D98OwhTsODVP9wZ4bI2Hd6/VBwfpn+K4L9T6KPZzH/DP8rHLnZ/ZOe/IzalSevc1L8k49izCo3Kv1Wx18visdq/k6mvCXYKvz+6op5FVqbev4NjmE8ZTK+/iVrtcoBIyT8="
                                  }
                                ]
                              }
                            ]
                          },
                          0,
                          {
                            "py/tuple": [
                              50
                            ]
                          },
                          {
                            "py/tuple": [
                              1
                            ]
                          },
                          false,
                          {
                            "py/reduce": [
                              {
                                "py/type": "collections.OrderedDict"
                              },
                              {
                                "py/tuple": []
                              },
                              null,
                              null,
                              {
                                "py/tuple": []
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "py/tuple": [
                  "_pipe._pipe.2.weight",
                  {
                    "py/reduce": [
                      {
                        "py/function": "torch._utils._rebuild_tensor_v2"
                      },
                      {
                        "py/tuple": [
                          {
                            "py/reduce": [
                              {
                                "py/function": "torch.storage._load_from_bytes"
                              },
                              {
                                "py/tuple": [
                                  {
                                    "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5MTU3NDcycQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM4OTE1NzQ3MnEBYS5kAAAAAAAAAJ9wEcQzw3S/0JrZKTJdxj9SCPdFuDrRP1RPFKZjxru/1ImmrHZrwz8uE+oIqhHWP1bFJ7gYtMC/bFkZI29q3D+zFILCNX3WPze4YljSzde/cxU4g7AWpL+TRgxu8pvSP41MzorNdrw/yp735hZE27+0K6ujClTOP+ZCR+phQNQ/3YD1Co3c4j/5OUYuZ3Svv/EAHe58T5K/jCavuKRdRT9HkAjNSvmiv9eeV5R/V9U/Ss8j5RDWpr+W4kn1Z/TJPySiLyoA1ry/pOUcAHIxy7/GNkDR4GuEv/UZUc9ebsO/5iHiEBHQxj8388MBN52+vycO4H9Xyt4/jlOTZFPW0z+9g9jN3EDdP+nxTuqm15Y/8om3fx0G2r8iEwMwS8SSv+yuyAZUrMo/c3sul8ALzb/TVtkxckGmP+GJsUzeNrE/dVD5xLoK0L/BNzQ2YKK0v+uofdlVLeC/NHyUa/jisD8j7QUtfASrP3x6El+N+Ni/NJ3edSusyD/YFWrqogfSvzItzmWr9cU/PY7cOgaunz9aPCnbWG2oP22nEuh9QLK//xb9KIeJwb9pAPrto4+rv97wPvN6rLw/ZdHuiEstsz/lZaCt8tW7P0+4X9XZVrQ/6eaVkEOgrb9WeTlEnzfAv5NMysq1Vbs/AoAxOyIsx79vUYsyNPDBv+GYSYWdNaK/MIO7e5AGgL902TCEnta2P5SenKmUB6a/gtPy3gIQwz+LO6bXIlq9vxq4gr7aJrq/QVnS7fKwpT+WQdPDe2OgP0nAP7PdKr4/fXzVOZl+zr8ILG8xp1rCvzH2Vx6AmIw/wOcz4eFVsD//8v+8CIDBPx2tE88/2aw/Y2tLU84hlL/+RO5goF+tP55ZZkoinKi/0aCbLkK5lL9grBhgOhzVP2dXQdK6T68/4sOr7O/ixD+UmY2ByG7Gv2bBRclO5MO/C6z9CSBB0z+BD4+WVwGmP9oIHvhczLq/JKE02fbao7+RZXDDsdeuP7EhMEwCz7O/LNK6tKHJbz/BPAksg9ywv99hNjKaX7k/BxgePSFCtD99YfsGC+3WP2G0ouuKxsA/"
                                  }
                                ]
                              }
                            ]
                          },
                          0,
                          {
                            "py/tuple": [
                              2,
                              50
                            ]
                          },
                          {
                            "py/tuple": [
                              50,
                              1
                            ]
                          },
                          false,
                          {
                            "py/reduce": [
                              {
                                "py/type": "collections.OrderedDict"
                              },
                              {
                                "py/tuple": []
                              },
                              null,
                              null,
                              {
                                "py/tuple": []
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "py/tuple": [
                  "_pipe._pipe.2.bias",
                  {
                    "py/reduce": [
                      {
                        "py/function": "torch._utils._rebuild_tensor_v2"
                      },
                      {
                        "py/tuple": [
                          {
                            "py/reduce": [
                              {
                                "py/function": "torch.storage._load_from_bytes"
                              },
                              {
                                "py/tuple": [
                                  {
                                    "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5MDcxMDcycQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM4OTA3MTA3MnEBYS4CAAAAAAAAAIwsCJLootw/xar5UMyynz8="
                                  }
                                ]
                              }
                            ]
                          },
                          0,
                          {
                            "py/tuple": [
                              2
                            ]
                          },
                          {
                            "py/tuple": [
                              1
                            ]
                          },
                          false,
                          {
                            "py/reduce": [
                              {
                                "py/type": "collections.OrderedDict"
                              },
                              {
                                "py/tuple": []
                              },
                              null,
                              null,
                              {
                                "py/tuple": []
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "latents": {
        "byteorder": "<",
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "shape": [
          1,
          2,
          500
        ],
        "values": ""
      },
      "m0": {
        "base": {
          "dtype": "float64",
          "py/object": "numpy.ndarray",
          "values": [
            0.5052541142536635,
            -0.0652523512018077
          ]
        },
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "shape": [
          2
        ],
        "values": [
          0.5052541142536635,
          -0.0652523512018077
        ]
      }
    },
    "input": {
      "observations": {
        "byteorder": "<",
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "shape": [
          1,
          500,
          2
        ],
        "values": ""
      },
      "observations_noisy": {
        "byteorder": "<",
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "shape": [
          1,
          500,
          2
        ],
        "values": ""
      }
    },
    "iterations": 100,
    "log_likelihood": {
      "dtype": "float64",
      "py/object": "numpy.float64",
      "value": 3128.739044419284
    }
  },
  "start_time": "2020-08-12T07:13:58.559740",
  "status": "COMPLETED",
  "stop_time": "2020-08-12T07:16:01.939481"
}