{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9930635697364796,
                            0.05285086736818854
                        ],
                        [
                            -0.04822169233832479,
                            0.9899534736603194
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2,
                    2
                ],
                "strides": [
                    8,
                    16
                ],
                "values": [
                    [
                        0.9930635697364796,
                        -0.04822169233832479
                    ],
                    [
                        0.05285086736818854,
                        0.9899534736603194
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.0005201574777899139,
                    0.007923840490176014
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.023136314016168398,
                    0.0589518873126911
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        4.683963162482874e-05,
                        2.2431217577379564e-05
                    ],
                    [
                        2.2431217577379564e-05,
                        0.0007196917342818766
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5NDIwOTYwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM4OTQyMDk2MHEBYS5kAAAAAAAAAIdPpRj3rOO/jtfLt6g9378dWhf69o3kv3E/KHXdpeK/bI6pv7fjoL+iHl6PvIXMvxb1R0b5wug/koClnriG1T9Bf7lNgs7jv3tEdRVAz9O/jMB7u7Ye3b9PY0XqrUahP8jqqT2BXN4/TVE7Qxq64T8hG0xR63LHv6bLHtxgg8A/MTzq37ke778dnhfA9UnQP/bpuqZu4L8/YzFWMHZEub8F/X27Zdjkv/n97/1CArw/b85OTqOWy7+6o32SW7nOvzC3BaVLK+a/kbelOOIe5b8MRRY7fKrgPxxAfEM1Sdy/IPm0Mu7z6r9DLIar+zfLv089fzCD8Nq/dqMdt8tGtr9u3ZKXeXTrv7McLBsorLw/+ySEnFfMgL9vaaaNvkPgPwOMBZpcY9w/7K1Hv+gd5r8BfldpEqDQv6jAKcny5My/Y9QMDeXk5T9Qeg6gg2nhv84SzX+Bus2/Na+QTzOVwL+mnSjuGvLpP7LQ3SGIXOY/OH66V6Abwb8xsX+Mp6ravw5cv/s4msk/E82aRI62q7/KVECLOyXWP+7ixYgctMW/+Fnmk6kA37+LZ3QTo/vBP4tFZ5Smu7Y/qMtplE/V2z9ZIQPfW0fWv+kwNyJE8oO/7LozGWlvxT8TlIRH+PzZv6RfcFTl3PO/GfXPsACTwj9zr3scam3Zv48DZOzuhMs/W5OKP2RKzr+kK5i7kgycP25raP5fXak//mudXS/g5j95+P4xCL/UPw2ewh1uLtC/zZqsP8TEnz8oIXY36xLdP8pHO7KdntC/XarOyOQV4r/wlP3fPFHLP4mPn33AueS/RtrhCWCdkT8F9927xrPbPzhL9g603N6/SoR1CR22sr+ZznRxAC/CPxbHh/YwAry/xj8pWa9Zwj+qIznqJu/Rv4LfUJaF3fQ/EnYaxfR2zD+BNXdVE5vcv1lrgR4RWNQ/Ef9JKPtq5r/xyZZepvThv0tIGsLIsew/x3ol7tW1gT8wQJA1POXkv7iYe2BEm7o/6YS+YxOC7j8pg7xePVfTv5nsxQeHaam/QDNQ5aex2j/T0o6wogbjvy0kMKu1Iec/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5OTIxNjk2cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM4OTkyMTY5NnEBYS4yAAAAAAAAAFQmeClAM9i/DJpdgle91D/3HPHFq3LeP+ObbS1oU8G/+VsdAXWD1z/BxPrpzZHUPzT6NLpyPMy/SPmjvbEKyb9R6LYkMZniPwUBWTJ1388/wYVTyw5lwb9ZTXbrs6fZvxdyKvn/F9q/G8chrdnc8L+koFI+c/7RP9OQ/CD9K+A/N1y1mE+s8T8Ec40eBhHgv7ob5XXcseA/TEmLw+30vD/u66BVyZnHP7BpOJxZINe/4QHJqduY37/Lr00+MbzAv/DsnISDFt4/R8Vd2OeYsz8Znd76CwjgvzYIx14Hw94/vNRhSbTq2r/le7lK3unjv+wvVNn18u0/g8Yial9A7D85CFnD7+nCP1g359iwL5W/S4wZ03sM67/xEZI/D/PjP8gEENcr9bA/b5i2lbmE2z8Ea0Vdh4TWP/uWqqhfed2/jSc9K2vc4L+LiTjFHjjCP5DwO/GTEue/m6LiU8KA1b8jXz3IuNTLv98LEta5Vdu/catQGenMwD8++GA7fwLevz2Ar/1gLaq/diZnhy6Qyj8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5NDQyODQ4cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM4OTQ0Mjg0OHEBYS5kAAAAAAAAAJJ1lyl73I6/BMlcFYQVxT9FNH5OZp7OP18RFH0HN7m/6wNn3tgovz/xD8gw2Q7OPyNkWUfV2L6/TahVLUYO3T+Fl8KjsJHUP2M1FXdXudm/CL44ZPDvnb+hHtJjG/jRP4wl3GFx57k/QkyOyJFY2b+ZCTwUSF7FPwOiOMrs3Mc/iwdcpdyu3j8601rcrlWqv48W6JHtjJy/mc4i/AYlg7/fy+YeAxiov84nH4qos9Q/khQpk1i3ob/yutHguazIPwLRa6TCYMe/DzSLFCB5zL/YCUCCYYKUP+cI27qwJsK/bKSM/GKIxT9rFVSVSZbAv9eNOA8awNc/JEXVRc7q0T/dO6VdnzbWP2R8DMeLiqA/ZBQ+h5ga2L+2eLwYtQ2Bv1oQT/KlZMk/ixaoq25Tzr9iybSDKmCrP46lLEcET60/py68ccfNzr9IySJfvDG3v08ScBkSwda/k2iBlFRysz/1VR/bw+WlPwdNANqhptC/JI3gYH1kxz9q4ZT0eavSv7OFRnpZPcc/XOxLb7v1pD+DYxQtEYytP3iHOn5DYq+/NoOCFNlBwL9lRvIfLlewv2dJNBzXO78/hs/jsae8tT8yFquElka5Pynga6x9x7E/gY+rPouBqL9arX5f4t+9v5fHJlChp7M/tsCrT9BzyL9MY6rqUzK8v84zNNdVVKe/cfC5L0PRYT/YGSat+mW5P1TcsVfc6KC/eCR4ylTIwT/PpbCuxsq6v3X6jZV+l7e/lAycQ0altz+4Q9bjhomWP5hHSoqBm7s/Hhc8TkfGz789ufQc+RLBvxJfQtDcX7A/hAd+cAuNqz88RnrRtsfCP429Kn2Huqc/I5Mf9z5fnr+uf2xZLD+xP4vKe/hpfaO/JPeTFaP3hL8TEYhBtTDTP8HYVoACMao/2z8mAZ4qxj9JsRJtGifFv6UAy7SgnMK/D7M6FPfk0z/BoqZEn+KgP3YlEyG5W72/aYaQDn14nb8/k4Vx+bipPxTJJ3VeXra/hOlmEcNYoT++c/5U32uzv4HHKlv27rs/Jw8pFMWysT9Ua7b8M0nWP0NyHAA5DsI/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5MDk3NTA0cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM4OTA5NzUwNHEBYS4CAAAAAAAAACZqjiGrmNU/hrZneh74pD8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    2,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        0.4263938537114876,
                        -0.015157453291319276
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2
                ],
                "values": [
                    0.4263938537114876,
                    -0.015157453291319276
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 85
    }
}