{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            1.009411533526415,
                            0.021947094593555067
                        ],
                        [
                            -0.08126120143267783,
                            0.9713330914884669
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2,
                    2
                ],
                "strides": [
                    8,
                    16
                ],
                "values": [
                    [
                        1.009411533526415,
                        -0.08126120143267783
                    ],
                    [
                        0.021947094593555067,
                        0.9713330914884669
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.005228398041598446,
                    0.027581098315056216
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.06891837300109364,
                    0.09784187860292178
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.0003028282743107111,
                        -4.084156924215321e-05
                    ],
                    [
                        -4.084156924215321e-05,
                        0.002930589838101591
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5MDQ4Mjg4cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM4OTA0ODI4OHEBYS5kAAAAAAAAAKRRh5MLW+O/NrK3J6Fr5L/Hwqp0Czzkv+UGSPrI9+K/+qaDEXACpr/aoc6jas3Nv5WMKcENceg/xusHqY8q1j84vZrIlnzjv4VgmiEXc9S/hOhBsd963L8L8HNBT6huPyY+50dYAN8/aMbwxwUM4j9Y3uIT4ZvDv0yBRI9ld74/X7D7ZKVw778DR6prPUzPPz70vX0SUb0/BdlaBxq1tr8piWA2eobkv2WZPIMuVLQ/Jn3HYlHezL99fnrThADQv2kRJSo3fea/uAyrs/bM5L9LEZ7AZ/zgPzYDLjlepdu/5ghPmVRa6b+sQxPAqX/Mv3h8QyasTNq/qTqbMuD0vb+2g/wbZcbrv3tm4vHLHLo/2crMWE10XT8ogTh+4+3WP4c8yY+Fv9s/FgsV/PL04b+0uZRz6UPRv2W5whEdTKK/3B8rktA25j8mDvcamBfhvxmvkxgbVMe/kWwNZOHcwb9mb0hzBkTqPwrZbVW7j+E/Lxg0bE5jwr8lM7mWfk7bv4CRQ+eKUsg/aAWH8NWXpr8WcXyVEsnWPwNKTXRubMS/G/2pidJc3r9bixSmwHyFP5kbV70CS7k/p8GjniZ53D8F7cPUhKPVv0WHt6Eqlq6/cJCfcwUSvj8jrjg9IVnZv9wbuF68gPC/JOhrm1JLwT90W7UmQRHav98A59dAPco/B4ulsKFUxb8vHrgXIs+RP/4oUlAYfK4/naLykGIT4j8cazg832LVP7RNCicuFc+/cDK6cRoBpT8xR6NBwrbdP9kjeLx0QtG/1i2GOSIg4b9RsIHLjgnKPwiMfvjUZ+S/m9qzrdDamz/W9jFfN/HVP7lquQTdON6/+Oc4l+X+yb/97PpcUufAP0YAuFPIaq6/EGscvhXAyD/EaPnfT0vRv/LYrZaF3fA/mOrW2aK+zT9bvrNf6j7dv01wWhQ6tNM/VMwvow8Z5r82t8XjkUbiv2ID+jzdX+w/40RGa57Joz/7cXOwUJPkv1OJwybvnKs/KfnX6P7T7j/xl31UZrPSv9gN27XOSqS/0tcwiRjv1D82KHErt7Tiv2gwPzChc+c/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg4OTY3NDU2cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM4ODk2NzQ1NnEBYS4yAAAAAAAAAHcTtDMX19i/6q2/VCSK0T/Jxi3QghbfP/4m6Bi6C8C/7sfd9p3f1j9NEb7f9u3TP2tQrc4ghM2/0YEk0l9Syr/9GL6pHOviP1waa6ORk9A/oJjI37yswr9eZTnh3APZvzbG7e4odNm/OwrKb88F8b8jKJ+fa+jFP3FcuzcjtN8/sN4hW0XV8T8zMqyj8WLgv4/3AvvHA+E/7ViC7EmEvz/MvCdBG1LGPzmShc+MU9q/D6cFWlke4L+Kw6ZTBum+v6282o5aut4/L55or4sJsT9ljPx/91ngv4J5ilQwH94/8QGgU4uO279BnQIC/W7nv9BV8kkz/ew/LLJA70qS7D9WLWMA+sDGPzc4vHwhbZ+/8o03WGde678awnO6I6HjP5FeBACIhLM/K3z0n5Ao3D/pPghTsODVP/665rI2Hd6/Kdsepn+K4L8amRa+cKO3P1Nj/mHRHOa/DKKlSevc1L9tj7DcZhzNv7F8uMvisdq/cfOsCXYKvz9f+45FVqbev/uOmk8ZTK+/jqzvcoBIyT8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5ODIzNTIwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM4OTgyMzUyMHEBYS5kAAAAAAAAANfW7h80w3S/IUiJKTJdxj/JmP45uFbNP5xCJlSrp7a/WENvtXyZvD/nEA54uonCP3Lfax55Sby/ONsTI29q3D+cNUgZLvDFP0DN1WyAFdm/edqnvX+yk7/Qqg9u8pvSPxyE9zgVWLc/y5xrQ6YG0b9uJs4i9qXGP00fw25Uzr0/uNhgIPFc1j+NhyYuZ3Svvw8zBu58T5K/LepHI/TPk79Am2JTtHeRv9WvbJR/V9U/jZR4gkAxmb/mzkz1Z/TJP++i44sUGca/iRcX1xWiyL+3Zct72ZWpv0IHWM9ebsO/zvfziIgGtD95ZLuvfn65v+lN3OsATcw/Ws6CgcUxwz80AP2wZ8nLP9JRP+qm15Y/fe2b2/0Bzb8R31YwS8SSv8x9xgZUrMo/ddgsl8ALzb/3hr4xckGmP7CRKHBVq30/xndAfig1t78znyg2YKK0v76TRL2C/tC/btN+a/jisD85+leJC8egP7oV/tLIOMO/yfeAKHONwz88Ck/fHLPEvyLXymWr9cU/3f5k5klmhj+HpGYRHXS2PxZYEuh9QLK/HBL9KIeJwb/wVvrto4+rv3MDP/N6rLw/XmDuiEstsz/d3p+t8tW7P8eEINXZVrQ/qcGWkEOgrb8t0zZEnzfAvyy6MSdFGLE/ATzyEcacxL+PraLB96K5vxbfSIWdNaK/Q128e5AGgL+gqjCEnta2PyYSnamUB6a/FnLy3gIQwz9devsfg76hvzECg77aJrq/hrOSbKI0uj8IaPHDe2OgP+2UP7PdKr4/PBjSlShBxL81W28xp1rCv3GuOPk477I/0iSSH1Nupj/Xl/68CIDBPw/FOYsQqrg/SDNIU84hlL930u1goF+tP/AUZ0oinKi/sDagLkK5lL97tc0iMEXRP2AwQtK6T68/aCmr7O/ixD9cEYyByG7Gv8N51O4si72/qeD8CSBB0z8zcsuWVwGmP+ueHfhczLq/VyxPn039Uz9qpnDDsdeuP33hoaCVlcG/I7EEfxV0mD/A8ggsg9ywv2dbNTKaX7k/2aoePSFCtD+2kKGgpIbQP8puoeuKxsA/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5MTcwMjcycQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM4OTE3MDI3MnEBYS4CAAAAAAAAAEbYTDl/jco/1+74UMyynz8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    2,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        0.21229195067717943,
                        -0.05531835668539073
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2
                ],
                "values": [
                    0.21229195067717943,
                    -0.05531835668539073
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 60
    }
}