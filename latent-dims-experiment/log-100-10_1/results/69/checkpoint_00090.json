{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            1.007336252865275,
                            0.07891598850926654
                        ],
                        [
                            -0.04478303049542475,
                            0.9757497734043651
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2,
                    2
                ],
                "strides": [
                    8,
                    16
                ],
                "values": [
                    [
                        1.007336252865275,
                        -0.04478303049542475
                    ],
                    [
                        0.07891598850926654,
                        0.9757497734043651
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.0003257273388314816,
                    0.0058787583935120255
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.023127554090779087,
                    0.05478738445939757
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        3.285455491397471e-05,
                        2.0785418998617647e-05
                    ],
                    [
                        2.0785418998617647e-05,
                        0.0005586064351275322
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5MDU4OTEycQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM4OTA1ODkxMnEBYS5kAAAAAAAAADcgiJMLW+O/tKF7rdGZ3r9nMz5/4t/kv/EYRvrI9+K/u9CUEXACpr9Ha9ejas3Nv+qRKsENceg/X+feqI8q1j8+pJvIlnzjv0/Frh8Xc9S/O5dBsd963L9rOdAw60+YP5L+5kdYAN8/4+5YyAUM4j/m7Ns8PSvGv75fSo9ld74/IkoLZaVw779y77ZrPUzPP9yIzX0SUb0/w6pjBxq1tr/uyV82eobkv4gi5Cafkb4/8VTJYlHezL/Um3vThADQv7gVJCo3fea/WhPDvc1w5b8T/E3UFUTiP6UHQjlepdu/jT0frgKi6r+tmv2/qX/Mv7aYRCasTNq/1UQI4CfWuL+fyx0xEw7tvwYYPvLLHLo/kQNxWE10XT+VdLUcgTnhP9uryY+Fv9s/aKAxOv3L5b8sgZNz6UPRv84gkZespdG/ucUqktA25j96RPAamBfhv7MIWd7FyNC/mpMJZOHcwb/gp0ZzBkTqPwCpQbFKUuc/WuE0bE5jwr8da7yWfk7bv0c/R+eKUsg/MH/F8tWXpr8/en2VEsnWP5ayTHRubMS/rL6ridJc3r8wymImUUPDPz0lW70CS7k/bB6mniZ53D8idcvUhKPVvwbC0rSSNpS/Xpf3BLsnxD+F/0w9IVnZvxSDNSGyqfS/QClbnFJLwT/6trwmQRHavwP37NdAPco/zN/mUmVY0r/PZMwXIs+RP2BOUFAYfK4/kzs79sh56D8sHT4832LVP5gPDScuFc+/alW7cRoBpT8Km7NBwrbdP2F2eLx0QtG/yarsTdBn4r+8kYXLjgnKPxepgfjUZ+S/hTOyrdDamz+XSyXGnVfcP9vsvgTdON6/7I9FMnlFtb+Akf5cUufAP4e4nM3Ucrm/Y0HARAESwT9SS//fT0vRvwGTGGNSqvU/ry6U2aK+zT++8rNf6j7dvzOqRBQ6tNM/GNQsow8Z5r9cLa/jkUbiv2kV/zzdX+w/wCnNmlsYkz8pUnKwUJPkv9BDkzfoC7g/dR3d6P7T7j/1MoBUZrPSvxet3bXOSqS/xUEe29AN2j+wsXArt7Tiv0n+UDChc+c/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5MzI0MDAwcQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM4OTMyNDAwMHEBYS4yAAAAAAAAAGREtDMX19i/Wb6ZjC5h1T/xBi7QghbfP8q79Bi6C8C/t4/g9p3f1j9DHr7f9u3TPzd+rs4ghM2/LTEc0l9Syr8q0NSpHOviP9dJaaORk9A/J2TN37yswr9nEDnh3APZvzJd7e4odNm/F3Ctb88F8b8kGDc0nFrRP3h5vDcjtN8/RPJAW0XV8T/q46uj8WLgv1dzA/vHA+E/zDZ+7EmEvz+wdCdBG1LGPxJuXaYwxNe/pKICWlke4L+kS6ZTBum+v3TQ2Y5aut4/NTJrr4sJsT+1pfx/91ngv73liVQwH94/RzydU4uO27+I6mvF8pfjv8qLLkBcWew/IC9A70qS7D8AldHXnTHEP4PpunwhbZ+/xIA3WGde678HhnO6I6HjP3SMBACIhLM/ZXjzn5Ao3D/aJwhTsODVP+Bq5bI2Hd6/+sIepn+K4L++Ia3ZzH/DPxcKCmyowOa/YKilSevc1L8aX7bcZhzNvzsE1svisdq/5MqtCXYKvz+Ubp1FVqbev4qdmU8ZTK+/riXtcoBIyT8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5NDgyNDAwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM4OTQ4MjQwMHEBYS5kAAAAAAAAAIxH7sMzw3S/knnXKTJdxj/a+/diFObPP2TJCqZjxru/oLavgxrcwD/DhIPLnzrSP7UYJ7gYtMC/N5kaI29q3D9jWQGuhzXVPx0Z2myAFdm/LbPIg7AWpL8SNQ5u8pvSP6tU0IrNdrw/H8XH0mj82b+He9Uo9qXGP8j2Awj3s8s/d/9A7Afx4D806UIuZ3SvvxuFGO58T5K/CKnst6RdRT+JNgHNSvmiv1d+WpR/V9U/uW0V5RDWpr84VEv1Z/TJP1MV9I8UGca/o5AVAHIxy78pFTe94YmEP+7iU89ebsO/1B5ZERHQxj/oKroBN52+vwG1Y0JN89o/dfcVUKWO0j9Q/YmQ0mnZP0NsSOqm15Y/4KN1kW++2L+2+B8wS8SSvzUsyQZUrMo/9hUul8ALzb+HktAxckGmPxnRwUzeNrE/qWMQw7oK0L8E/zA2YKK0v/lSnUxF9Nm/lhKQa/jisD8ALAgtfASrP+XSKw3V2dO/k7aXTM8cxj/ik1/qogfSv1DxzGWr9cU/0S3NOgaunz/a8SzbWG2oP3+9Euh9QLK/Uy/9KIeJwb8grfnto4+rv+TQPvN6rLw/nHXuiEstsz+kfqCt8tW7P4fiX9XZVrQ/bICWkEOgrb/vrDlEnzfAv/xlMidFGLE/hlAxOyIsx78RsooyNPDBv2c0SYWdNaK/7Te9e5AGgL/apzCEnta2P7nrnKmUB6a/otfy3gIQwz+Y+aXXIlq9v+ANg77aJrq/0IyLbKI0uj+1ZdTDe2OgP6POP7PdKr4/aEXROZl+zr/ITW8xp1rCvyh6M/k477I//foz4eFVsD9puv+8CIDBP4JOFM8/2aw/yyVKU84hlL/s7+1goF+tP43BZkoinKi/RKSdLkK5lL+m6MVLjNTTP4XHQdK6T68/2pqr7O/ixD/wU42ByG7Gv/yqRclO5MO/G3z9CSBB0z9qro+WVwGmPx/IHfhczLq/DZsx2fbao7/ApnDDsdeuP8vAMUwCz7O/NSD2fhV0mD8d+wgsg9ywvzOJNTKaX7k/qn4ePSFCtD9wjPQGC+3WP8HzoeuKxsA/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5MTg2MjA4cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM4OTE4NjIwOHEBYS4CAAAAAAAAAM6FqlTey9g/ezb5UMyynz8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    2,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        0.45810301046937596,
                        -0.028027417258511354
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2
                ],
                "values": [
                    0.45810301046937596,
                    -0.028027417258511354
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 90
    }
}