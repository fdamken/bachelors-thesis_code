{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9934097386161136,
                            0.021137854891991683
                        ],
                        [
                            -0.06974027094195953,
                            0.9871697301179863
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2,
                    2
                ],
                "strides": [
                    8,
                    16
                ],
                "values": [
                    [
                        0.9934097386161136,
                        -0.06974027094195953
                    ],
                    [
                        0.021137854891991683,
                        0.9871697301179863
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.0034209075635791616,
                    0.021516200100377744
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.024086681673974455,
                    0.08926112788555025
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.00021580865710067731,
                        -1.3398507533375972e-05
                    ],
                    [
                        -1.3398507533375972e-05,
                        0.0021702469306365164
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5NDIwOTYwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM4OTQyMDk2MHEBYS5kAAAAAAAAAL/FpRj3rOO/0lxjmN51478r7cH59o3kvxrPKXXdpeK/n5edv7fjoL9wDliPvIXMvwvVR0b5wug//0O3nriG1T8wN7lNgs7jv4ZThxVAz9O/eyp9u7Ye3b93/m3prUahP7Mqqj2BXN4/WJ7hQhq64T9zO10oj+PEv6BoHdxgg8A/0Ejk37ke77++2RDA9UnQP3+Is6Zu4L8/6NdRMHZEub/GnX67Zdjkvwpr76uK47Y/9RhNTqOWy7/ndXuSW7nOv/FqBqVLK+a/3nObLgt75L9rxSA7fKrgPyfacUM1Sdy/EVeBKBdQ6r84xZSr+zfLv26wfzCD8Nq/Rj/6t8tGtr80mAyXeXTrv1zG6xoorLw/qXqOnFfMgL8vicWIupHXPz96BZpcY9w/oWoqeAej4b/OmVdpEqDQv4195gMj1LC/49QMDeXk5T+ZVROgg2nhv51YDS3Jm8i/KW+STzOVwL+GvSnuGvLpPwqjxeR9heI/SLS5V6Abwb8EUn2Mp6rav8NEvvs4msk/vglvRI62q7+KSz+LOyXWPxzrxogctMW/f6jmk6kA37+bT5309R1AP73SYpSmu7Y/261nlE/V2z9d/QDfW0fWv3PK+FcDdJ6/2dgRR6mCuz8ixXxH+PzZv7I/cqad+/C/lM9usACTwj9TNXkcam3Zv6ewXuzuhMs/ys4IxU+cxr9Xtou7kgycP6eRZ/5fXak/isgaFk5l4j9eFfwxCL/UP82awR1uLtC/4uKhP8TEnz9P52k36xLdP4XhOrKdntC/S+ucvg1y4b+vK/zfPFHLP8/LnX3AueS/SZveCWCdkT/MHXVpDpXWP6PI9Q603N6/l4YKWNsnxr/5w3RxAC/CPwNdsaR447a/KF7jgAvpxD8ESDbqJu/Rv7SYaWNSqvE/Tco9xfR2zD/dk3ZVE5vcv1hMlB4RWNQ/ZDZNKPtq5r8QEKNepvThv7oIGMLIsew/52Sl8tW1gT/tGZE1POXkvw0fLQ6MfLU/8qG8YxOC7j+/17hePVfTv4vWxQeHaam/qavmp53a1j/wXY+wogbjv98II6u1Iec/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5MDE1NTIwcQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM4OTAxNTUyMHEBYS4yAAAAAAAAAPnCdylAM9i/sn78bal10z8hKPHFq3LeP65BZC1oU8G/AQ8bAXWD1z8B9fnpzZHUP+yONrpyPMy/RcuqvbEKyb+9YLEkMZniP3+xWzJ1388/dj9Syw5lwb/FhXbrs6fZv4HBKfn/F9q/lpczrdnc8L85Ahjddb/JP43i+yD9K+A/SfyzmE+s8T9yq40eBhHgv+tS5XXcseA/hbqOw+30vD8NBaBVyZnHP6lqR8W1r9m/BFPOqduY37+KhE0+MbzAv8iKnYSDFt4/I6pb2OeYsz+Jp976Cwjgvy5kx14Hw94/2TxjSbTq2r9NhM9yOnnmv33EItn18u0/9SAkal9A7D+7CvzrS3nFP4TM6NiwL5W/mvAZ03sM678VN5I/D/PjP9fNENcr9bA/k2y3lbmE2z9kdkVdh4TWP0Qkq6hfed2/2Bk9K2vc4L+b7d7ozDK6PzQcR/GTEue/eZLiU8KA1b/zdDrIuNTLv6RuAta5Vdu/iwhPGenMwD/8fV07fwLev0uasP1gLaq/lsJnhy6Qyj8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5NDAxMTIwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM4OTQwMTEyMHEBYS5kAAAAAAAAAERahil73I6/cWFUFYQVxT8OR3ZOZp7OP0QCNCtPGLS/oBuAjCAKuj8Vk5ZjDELBP8npV0fV2L6/zoNRLUYO3T9/dr4t3DfHP7DbE3dXudm/RLJ5ZfDvnb8or9JjG/jRP3M232Fx57k/Fr/ATX2q0b8jWVMOSF7FPzna2EX4Prs/QUCcKsgA1z9GOlfcrlWqv7ME3ZHtjJy/1iP7xWQNnr/p/DX3JLWbv49RIIqos9Q/5pKEvZ/njb/IS9LguazIP3nNPcke8Mm/ctOQ68Ppyb8gyzUqIXekv2MO3bqwJsK/Hz7EseSVtj9Am7XY2g28v2J4UgCvlM0/ChsElnN5xD+SqF7FFRHNP+1aCseLiqA/LAB3DIRs0L/RC/oYtQ2Bvzw7T/KlZMk/U5ynq25Tzr/mm6qDKmCrP/IjFj3alGa/O7X4+Dzjvr/hWB5fvDG3v1dtDrOrWtC/RftzlFRysz/ybCXbw+WlP95Zi74a8cG/W0RL1tFsvz93dMfzyvrFvz2KRXpZPcc/gAEMl5VwlT/rlls6eQO5PzjMOX5DYq+/jnCCFNlBwL9BqvIfLlewvzaENBzXO78/8OPjsae8tT9Gf6qElka5P2SMIf415rY/RqGrPouBqL98v4Ff4t+9v8Y7J1Chp7M/EK1ZT9BzyL/gg62YmxO3vy4DNNdVVKe/h12/L0PRYT9eLiat+mW5P7fwsVfc6KC/Ieh3ylTIwT+EwdkKVo2wvyKXjZV+l7e/dBCdQ0altz+7mv3jhomWP8MQSoqBm7s/1LRjgXr5wr8EZvUc+RLBv+4eQ9DcX7A/Bl98cQuNqz8cg3nRtsfCP2+6LbRsObs/UHEe9z5fnr+aeWxZLD+xPyj1e/hpfaO/3TCVFaP3hL+dYggtB+nRP3oQV4ACMao/PPElAZ4qxj+xmhFtGifFv0hF5YtEDcC/5U06FPfk0z+O9rToDyCrP4cWEyG5W72/etXPkzf7gb9piIVx+bipP9/uJoznTcC/x+xsEcNYoT8kgP5U32uzv9jiKlv27rs/khopFMWysT+QmPmqeyrRPxk8HAA5DsI/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5ODk2NjcycQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM4OTg5NjY3MnEBYS4CAAAAAAAAACa3xU0t1cs/q5pneh74pD8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    2,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        0.2645403937527354,
                        -0.03797186435448272
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2
                ],
                "values": [
                    0.2645403937527354,
                    -0.03797186435448272
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 65
    }
}