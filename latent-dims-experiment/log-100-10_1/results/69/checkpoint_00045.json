{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9945695901525713,
                            0.011549318959243523
                        ],
                        [
                            -0.0908207849444928,
                            0.9839562145942377
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2,
                    2
                ],
                "strides": [
                    8,
                    16
                ],
                "values": [
                    [
                        0.9945695901525713,
                        -0.0908207849444928
                    ],
                    [
                        0.011549318959243523,
                        0.9839562145942377
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.01971762298572486,
                    0.06464004131878764
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.14689736157838523,
                    0.13772567956423654
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.000925452971393908,
                        -0.00017779626962987922
                    ],
                    [
                        -0.00017779626962987922,
                        0.007810839702821648
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5Mjg3OTA0cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM4OTI4NzkwNHEBYS5kAAAAAAAAAO6Apxj3rOO/kPcIrYy95L9wuTGyFRPgv/i4PnXdpeK/TWyKaRyZir9L61iPvIXMv6ITQkb5wug/YHOFn7iG1T/jfbhNgs7jvwGyLjHuFtW/F4WDu7Ye3b8tnuz1+hS2vwEcoj2BXN4/twTVOEMW4T9wOEooj+PEv6yAFNxgg8A/uQR937ke77+GlhbA9UnQP4EVrqZu4L8/33FDMHZEub/GdoK7Zdjkv3kvLVrSxLE/9x5GTqOWy7+hknySW7nOv8uy96RLK+a/TMxwLgt75L8OoF9ur93jP9sm9SyHAdu/7cJ4zYeN5L9Zjcar+zfLvzIZgTCD8Nq/JbVupjLwx7/wMmCLotDqv0oZ4hkorLw/uGWGnFfMgL+BE582AnPSP2gYCZpcY9w/S+Ydggej4b9GYldpEqDQvzWSv3LyNY0/djgLDeXk5T/5rxigg2nhv0+dFwRtDMa/X1GZTzOVwL/H6ifuGvLpP6N+YTo5Fdw/LRq1V6Abwb9eU3+Mp6rav3I4vfs4msk/konKyQrdsD/x8D6LOyXWPwtVxYgctMW/iPDok6kA37/hyInt9R1AP1P8XpSmu7Y/FblmlE/V2z9BZQHfW0fWvyE7n7FhSci/v3UmzrBQwD8Lfcf1P97Uv8Z5LyPfZ++/45mUYaQDwD/9cXQcam3ZvwlRW+zuhMs/UWJCc5d9wb/ZqVC7kgycP2JSaP5fXak/iI+gAaAd4T+clvkxCL/UP/02wR1uLtC/B8afP8TEnz/JOmQ36xLdP7dCObKdntC/Yc+dtDbO4L9wJ/ffPFHLP3GGtn3AueS/V+TeCWCdkT8JN+dUYE3VPwwG+A603N6/X0YLPLAJ1L8oBnVxAC/CP0GVKWJlU58/8u01JHwmzz/DnynqJu/Rv9uu7WA+7uw/hD5FiNbK0D9bAHZVE5vcv8mAmB4RWNQ/5gNRKPtq5r99mvdepvThv6EJ9cHIsew/ilkUs+OSsT+TppQ1POXkv0YJIln8tKy/Ew2eYxOC7j/J6r9ePVfTvwD2wweHaam/NGk/MbbJyz8oqpCwogbjvwRdHqu1Iec/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAkAAAA5ODI1OTQxNDRxAlgDAAAAY3B1cQNLMk50cQRRLoACXXEAWAkAAAA5ODI1OTQxNDRxAWEuMgAAAAAAAAAYwmIpQDPYv1/HCO4qwr8/1IDnxaty3j/pEiEtaFPBvwEoHgF1g9c/5iP/6c2R1D+PiQORFq3Jv81xq72xCsm/lGNhGlr14T8UNGUydd/PP6nUIMsOZcG/xDl567On2b9Dox4iXKfcvwILMCjuivC/8bBNasOplT/ksPwg/SvgP5h0XgmNtvA/1kqNHgYR4L/zbt913LHgP5cbhcPt9Lw/r+CwVcmZxz8SbqDZY/fav0e2CKnbmN+/WNdTPjG8wL9crp2EgxbeP9pOctjnmLM/swvY+gsI4L9/AsleB8PeP2IhYUm06tq/9T2Lm5YI6b9ZmCOnwr/qPyqmD2pfQOw/PY20kLZ3tj/NzuHYsC+Vv40PEtN7DOu/tquSPw/z4z8luO3WK/WwP11C/JW5hNs/P9JFXYeE1j/wOqOoX3ndvytHPitr3OC/pCXnNIVRvz8D2/eviTvjv7Ev5VPCgNW/r6H7x7jUy7/6pEByU+/Uv2jPVxnpzMA/uze0OX8C3r910rD9YC2qvw1Ic4cukMo/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5NTgzNjQ4cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM4OTU4MzY0OHEBYS5kAAAAAAAAAOYQwlh73I6/5r6Shpftvz+FkLuBmdHBPxlzxXwHN7m/A5WMjCAKuj/JAIljDELBP2XwOKNY+a6/bSNJLUYO3T/VCREEgKjEP/PJDHdXudm/cKaONB7qgr9VcP91ftHOPx0P9Q+5yLQ/9QbI+IkXyb/wQTQ3pO3HP1PQakvYLsA/uFpN2A/i0T9lEs87jIqBPyAuxJHtjJy/QYdyx2QNnr8lhiLCDul8vy+epXX6a9M/5MEmsUUcdj+uaQ7OXR3GP6nSyE8KQsK/J0OZwmdax79X5I/NkbSuvymi4rqwJsK/oFrhXyx3sT+LjMOGIu+2vyKWhFw+V8M/mYNIiHa1vj/EbZRzXfLHP5pDAMeLiqA/EFwQnvMqyb/L4WgZtQ2Bv4t2FJ1qTr4/FU6lq25Tzr/Myo6DKmCrP3tYk5+TEaM/gtE/BSgOr78z8xFfvDG3v87s8etCB8m/69VYlFRysz97LLluplCXP2ozJ+d2gMS/S1sEFMVFwj+I9aDKbmvDv89pQHpZPcc/At8v/4m2Tj9wX1w6eQO5P1EPOX5DYq+/lAWCFNlBwL8o8fIfLlewv+/NNBzXO78/Zxzksae8tT80DqqElka5P0bgDf415rY/BBqrPouBqL+3vScyAsqiv7NYJ1Chp7M/0F53/RdVw78ZAq2YmxO3v6x/NNdVVKe/nNPFL0PRYT/yciat+mW5P2JgsVfc6KC/ZjV3ylTIwT//s9JxO92mvxubjZV+l7e/xm6dQ0altz/QX/PjhomWP2XDSYqBm7s/f9VWgXr5wr+y2eaVgei3vyWpQ9DcX7A/BPl7cQuNqz8DGG/6ElfFP06oLrRsObs/Hrke9z5fnr+swWxZLD+xP3R/e/hpfaO/RZKWFaP3hL89pY8YWaHQPyGrVoACMao/v9wlAZ4qxj97JBFtGifFv5YiqMhyI3a/aMA5FPfk0z8TPbboDyCrP+ZkEyG5W72/BZ+skzf7gb/pAIVx+bipP1XJJ4znTcC/yNttEcNYoT+EwP5U32uzv0gVK1v27rs/YtooFMWysT9eMOmIKojFP4MhHAA5DsI/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5ODkxNTUycQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM4OTg5MTU1MnEBYS4CAAAAAAAAADFtIgLBEL4/XDFoeh74pD8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    2,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.01826789569474425,
                        -0.10497128193008994
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2
                ],
                "values": [
                    -0.01826789569474425,
                    -0.10497128193008994
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 45
    }
}