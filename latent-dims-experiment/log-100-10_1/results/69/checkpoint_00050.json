{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            1.0079475465845844,
                            0.02042293511908305
                        ],
                        [
                            -0.07665355747831834,
                            0.9688055591000078
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2,
                    2
                ],
                "strides": [
                    8,
                    16
                ],
                "values": [
                    [
                        1.0079475465845844,
                        -0.07665355747831834
                    ],
                    [
                        0.02042293511908305,
                        0.9688055591000078
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.014534679914410657,
                    0.04769281067021387
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.05297053082920502,
                    0.11760278502146508
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.0007035100683857477,
                        -0.00010015495362170751
                    ],
                    [
                        -0.00010015495362170751,
                        0.005613318726609822
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5ODg2NDk2cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM4OTg4NjQ5NnEBYS5kAAAAAAAAAD4riJMLW+O/sIITMngP5b++H8RLr6zhv9LhVfrI9+K/onsBEHACpr/VJdCjas3NvwNVKMENceg/UcM7qY8q1j8jAZvIlnzjv9gWJCIXc9S/7gBHsd963L9IXcdVXJCiv+9X40dYAN8/ZdLkvS5o4T82TdAT4ZvDvzJYP49ld74/R6XbZKVw77/ChqtrPUzPP4yBu30SUb0/4Y1UBxq1tr+HiWI2eobkvxNYIIMuVLQ//QPGYlHezL8P1HrThADQvww8Iio3fea/8miFs/bM5L828Q7VFUTiP22Nsjhepdu/0mr7ZiEn5r+zyynAqX/Mv39nRSasTNq/lFByaSgZxL+mfMIaZcbrv2nWcvHLHLo//07VWE10XT/D2JxpNabVP0qny4+Fv9s/vc87B/P04b+BcJRz6UPRv5y6XVMidnE/XDcqktA25j+JbvkamBfhvyDHnu++xMS/U+APZOHcwb/0j0VzBkTqPzlezWxsSN8/bm0ybE5jwr/dULqWfk7bv3QrQ+eKUsg/tbqT9PdAkD/NZHyVEsnWP3BdTHRubMS/F9CqidJc3r8abUemwHyFPw3iVL0CS7k/NFSjniZ53D8VRcTUhKPVvzESVUv74sG/QRFkcwUSvj/M1XIUxcnWv51Tfp7zFe+/BVzy6ex3vT+DWLMmQRHav3HP5NdAPco/2Y4GX+k1wL9ZiKAXIs+RP8VNUlAYfK4/Nee8hotv4T/cjjc832LVP39sCScuFc+/hY25cRoBpT/eiaFBwrbdP7JWd7x0QtG/jWmiOSIg4b9Dl4DLjgnKPyA0gvjUZ+S/EOGzrdDamz+J1SRfN/HVPzoLuwTdON6/vkteHSse0r/hPftcUufAP75fLOplYkM/pxjGD87ezT/W0PXfT0vRv2Q2X/rXh+4/x9Sse/8m0D/6a7Nf6j7dvwxFWxQ6tNM/7MMyow8Z5r/sa/HjkUbiv1no6TzdX+w/2KdPDw8Hrj+2QnawUJPkv09j1BkW23i/mC7L6P7T7j9Fin9UZrPSv9dV2rXOSqS/XyvJSw4Y0T8yy3Ert7Tiv8iUPTChc+c/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzUzNTc4MjA4cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM1MzU3ODIwOHEBYS4yAAAAAAAAAIJHrDMX19i/hyhI3XtHxj/bkynQghbfP9Ue3Bi6C8C/H5zh9p3f1j+508Xf9u3TP2mhbs4ghM2/4rci0l9Syr8pr6KpHOviP+R3a6ORk9A/UXay37yswr8zVzrh3APZv6JOLu8odNm/I/XKb88F8b83rv+mPTeyPyymvzcjtN8/E5EC1lmD8T+f1Kuj8WLgvw0K//rHA+E/qV177EmEvz8IxjBBG1LGP8jK1uM6m9u/LXTsWVke4L8l2KtTBum+vyJa2o5aut4/Yclwr4sJsT8lCvp/91ngv85oi1QwH94/B3OeU4uO278OmW8Wq7bov83VP0BcWew/E8c570qS7D8svKKuQaLBPxiBtnwhbZ+/Mto0WGde67+VDnS6I6HjP8aF9v+HhLM/PoXyn5Ao3D+PgwhTsODVP4lf4bI2Hd6/lr0fpn+K4L+ewMi+cKO3Py+jdkkj1eS/hfumSevc1L+HcIncZhzNv63PkKSGIti/XzHHCXYKvz8SGnBFVqbev5H6mE8ZTK+/Pa/1coBIyT8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5NDE5NjE2cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM4OTQxOTYxNnEBYS5kAAAAAAAAAFMhqk+uq5m/uYbJ13k+wT9Cehjo/zfIP/1h8FOrp7a/1zPTY8R6tz/vjDWevPS/P2gzwXoIDLK/v6oNI29q3D9lZhLw0WDDP4ul0WyAFdm/Hdz6vX+yk79b3z5FlgzQP8n8FedcObI/BhozDThfyr+dwMIi9qXGP4diKm5Uzr0/dtFs95TN0z9r8FiK9jalvyrS+O18T5K/EdmHtWolpL9nvM6ZZxloPx1sdWsjyNI/2gJEFwSJjz/sp0v1Z/TJP0sSVTtc+sC/BOUhrrkSxr/sWrgPpemxv5bvWc9ebsO/DN7tbaDPrT+wON5dxl+0v8m28ZlILsc/5Zi5XxomvD90aSNfr6rGP88mOeqm15Y/GFGtiUXjx79qW24wS8SSvwyD4rSbjcU/tN0rl8ALzb++CrMxckGmP/cAepu25Zs/YhmBtG/vqb9inyE2YKK0v+NFtShN3sy/t1hna/jisD8AVJaWayaKPy0vydLIOMO/yG2S/xb+wD/BHUW2wCPCv/7+yGWr9cU/s+GHp3iPgr+26WYRHXS2P5AWEuh9QLK/OdP8KIeJwb86v/rto4+rv0s6P/N6rLw/q5HuiEstsz+LnJ+t8tW7P6+JHNXZVrQ/t1CWkEOgrb/Be+OTFROxvw3dMSdFGLE/LG7xEcacxL89eqLB96K5v4tMSYWdNaK/Mtu6e5AGgL934TCEnta2P0KdnKmUB6a/3w3y3gIQwz8qcvAfg76hvyrugr7aJrq/w7qSbKI0uj84T2+ALJiIP/NbP7PdKr4/5WLRlShBxL/ZNyxtJVm1v+7QOPk477I/+M6RH1Nupj/6FAu9CIDBP6urOYsQqrg/mOpIU84hlL9kR+5goF+tPwiqZkoinKi/prCfLkK5lL9eAc0iMEXRP3TKQdK6T68/rnKr7O/ixD8Z34uByG7Gvzzhg/IHXqy/LRH9CSBB0z9irMuWVwGmP1/iHfhczLq/+Xuln039Uz+xNnDDsdeuP24soqCVlcG/NJ8FfxV0mD/CKAksg9ywv1OJNTKaX7k/znMePSFCtD+DMUHvkO7LP613oeuKxsA/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5MTQwMjU2cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM4OTE0MDI1NnEBYS4CAAAAAAAAANpCYefGbsU/3975UMyynz8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    2,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        0.03863087125667886,
                        -0.10690240015475293
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2
                ],
                "values": [
                    0.03863087125667886,
                    -0.10690240015475293
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 50
    }
}