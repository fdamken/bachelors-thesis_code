{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            1.0040596564857815,
                            0.0028962384314017253
                        ],
                        [
                            -0.003913669873600088,
                            0.9911481125478491
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2,
                    2
                ],
                "strides": [
                    8,
                    16
                ],
                "values": [
                    [
                        1.0040596564857815,
                        -0.003913669873600088
                    ],
                    [
                        0.0028962384314017253,
                        0.9911481125478491
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    1.1057199491701184,
                    1.1302971241953466
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.46750116836880806,
                    0.4465005422556524
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.351067462176359,
                        -0.1607735600980318
                    ],
                    [
                        -0.1607735600980318,
                        0.6718939707589877
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5MDIxOTg0cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM4OTAyMTk4NHEBYS5kAAAAAAAAAJl7vxj3rOO/Lqz4orUZ5L9U1xeyFRPgv+Zsv5NikeS/fwGjTEy5fD87zJWPthWwv5fpGv8XSOQ/4x1y1UcV4z/Fgqcu/eLhv0OtjHjd8eC/DY/NurYe3b95QHZHStfHv/m9uT2BXN4//b6wOEMW4T8Pe5BQ63LHvwKKxdtgg8A/1TyVJpuZ47//ZHT6/yDUP2IM1s1Lnsc/CYOH3b0ltL8FanSSCUniv7C9gGpKXc0/BHIb0K1a0L/qFfbcW6TQv6W+mpCd4+S/72HtNuIe5b/gkRdTAZbiP1WePgf3s+C/5RZLkzh32L+poCXf1D/ev3zgoPJ4Gde/LFUnCjh9178wkTaCqwfcv8fqLXyun8q/FJbY98aevD8RQWSgNxnIPzUkK2szHeA/vxj+szrW5L9Tzvl8wOfRv6iuX0zb8rW/X1Qg/Tad5D/1sB6ig2nhv+PARtsQfcO/4RJaRVzxz7+HKBi9577mP+q9z2GVpN4/3TmSqVg6xr8uRTQONdDhvwC7t03xuM4/uyhjbXsauz9dgkWLOyXWP1dddnmfzrG/AVrO3QLI4L+k64zDjdi+P+23JOFr/Kg/MLOjRLyY5T8uhQPfW0fWvyPsp9q92Mq/Ypc29gzgwj+/TAIK7iXWv4lIBn9uKuW/RXpf/fCG0z82hNv3Dd7WvzNE7cmS9cg/tp5iNOBs0L8Gj+A3ee+qv3ZkSKTIlMA/7AeeICUJ4z+Qaa8IrC/SP9DQGxOXit+/9z+isqEusj8s0N0Ls5PlP6rQOrKdntC/jqaz52kB5L+TcuiY+jfQPwqq9X3AueS/DBlbTJFJrT+1NJTd883NP06X9A603N6/JoYlPLAJ1L/jZRmaXL7EP/HRW2RlU58/5Hx+Juza0D86hd6oRXTdv3NGU7zNsOI/qc7nBmGO5D+Ofxkttwvav5OITQpjENM/17VlE00j5b+y8+xzVDzjv5nUwiovGOM/oaLi4+HA0z94SzQGCbLhv+5nGSg2dJC/atR1wXno5D+Bnbtt657Uvx0Svw53GJ8/dZdSBFo6yT+jPKPJearjv7CHMn5ZkuQ/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5MTY3NTg0cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM4OTE2NzU4NHEBYS4yAAAAAAAAABdteQ2f68u/uqyu6lCFxr8diWex/SrdP8uVlTVkjLA/Bo1UpQ4d0T/TAUEHt2+vP//AjXxFBq+/WZ7NjlV7xr82U5JDNaLEP0tgJAkZUM0/G7Y7KMeDxr8j3AgAYu/av4/rkoHrXeW/CEn9j72Q5b9jvvRMT/fWv7EQBa83Ytc/i8XSRk2g5D/gFNUo3bTgvwZn0L29LOU/wJVvve30vD9dKXMxyZnHPynqKrAHaNi/wMT3CGtb1b+XAEhnjUvDv0RdLG/Vztw/PkGFqlhr0D9h3wVTp9LVvyVmzvegXNg/vaLCNQaj2b+1jx1fjDHlv4yNRbRHdd4/lUt6xBdf4T+omYVqNm6cPzsQkLG5Eq+/i7f4aBWm5L8k3wY1OE/jP3GBg3vbSKG/c1IeRAFm1j+/LcNI2TzVP7OuiJSxMdy/JhlENUKA4b+6tCsG11bHPwSo+LZPSsy/1hhUj8xX2b9BrY/0FGTOv4wgL5QYqbI/2j4ySX2Zxb+h/IaVlqOxv+Oq6/1gLaq/oL+0J9IAyD8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5MTM2ODY0cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM4OTEzNjg2NHEBYS5kAAAAAAAAANAk7R0AMqy/iTqT4iawtT8v1jd3o1CuP7IbtCpPGLS/rJ51OmjrtD8/nel0YGW9P5GAz/7nu6S/EeCYy8kmwT+UiZgS1/S5PwKSIL7Y+bS/EkuPYvDvnb+b/Rj7aSPHP7H2UdiQFqU/wpFSqTK0vb/yrjMOSF7FP0jZqUT4Prs/pIk541L3xj/1rwDPMqy2P8c5GGzng6i/aws+CCNEqb+im+W7Dul8v+3iW/XLe8c/rbJKtfIBmj/9VxOlAY7DP1/PQ/ujRrq//oCEmQvLxL9mZr84AXm0v6L2vQxpRce/XBv+7+7mnD8ngD74CaKDv0bYij7GKao/ejliunNvlD8qlYr4SETAP3izD8eLiqA/9P0D9AXbvb9M73QTtQ2Bv/L0IEuyL7k/6IVmMVqlxr9QdaryJJWLP7oP4oDalGa//DCaBYZ1Rb+xxW91l+ipv/qp1cLmd8a/ow6llFRysz9QNBk1Ka5mP1a5Ar4a8cG/ujXn1dFsvz9Y/U3wbJm8v4WCFpTBE5Y/UlMsIAcApL8dIF86eQO5P1pyM35DYq+/PRB2FNlBwL+tyfMfLlewvxLVNRzXO78/QLzlsae8tT/XxqeElka5PxUABf415rY/evulPouBqL/OsyIyAsqivwE4KlChp7M/qr1w/RdVw78mKquYmxO3v0ztMtdVVKe/PFjgL0PRYT8MTCet+mW5P2xGr1fc6KC/w6rV8DhTuT/cOahb0RJzv82ui5V+l7e/V6WbQ0altz80L6utiv60P1/LSIqBm7s/OXtFgXr5wr8wL/iVgei3v07FQNDcX7A/ko6CcQuNqz+TaeIyNuG3v94gMrRsObs/kprq32QRnz+CI29ZLD+xP535dvhpfaO/XFx/FaP3hL+VLj6B6XC0P9Jy5TWqdLw/+qc3L9Q5qz+v6w1tGifFvwcEJm1iN7g/VsRp4AxPwz80qrroDyCrP2DmFSG5W72/U4mNBoQ5qj+AXoNx+bipPwdgJoznTcC/4WVxEcNYoT9qFgBV32uzv0k6LVv27rs/1zomFMWysT80znETlNSAP3YRSq65/b4/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5MjUyODMycQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM4OTI1MjgzMnEBYS4CAAAAAAAAAOgpHTByIrW/ugBneh74pD8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    2,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -1.3472398970301387,
                        1.6778756080496036
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2
                ],
                "values": [
                    -1.3472398970301387,
                    1.6778756080496036
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 5
    }
}