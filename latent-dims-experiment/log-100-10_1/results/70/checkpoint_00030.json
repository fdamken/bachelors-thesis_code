{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9720645354865272,
                            0.004289359748632648,
                            -0.04015815319070027
                        ],
                        [
                            -0.10905845880609695,
                            1.0368358830530162,
                            0.0030565093803049657
                        ],
                        [
                            0.1411311172975158,
                            -0.06147326098305217,
                            0.9493205978053478
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.9720645354865272,
                        -0.10905845880609695,
                        0.1411311172975158
                    ],
                    [
                        0.004289359748632648,
                        1.0368358830530162,
                        -0.06147326098305217
                    ],
                    [
                        -0.04015815319070027,
                        0.0030565093803049657,
                        0.9493205978053478
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    2.016244090801627,
                    0.5023444433416495,
                    0.4764150261759344
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.21487126997239192,
                    0.19634502299545817
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.19563899453996753,
                        0.10155813181925286,
                        0.025970842522187343
                    ],
                    [
                        0.10155813181925286,
                        0.06801479528798554,
                        0.005880694118490917
                    ],
                    [
                        0.025970842522187343,
                        0.005880694118490917,
                        0.02612130971419152
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0NDI5MDI0cQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM5NDQyOTAyNHEBYS6WAAAAAAAAACQDmHJiiNu/Q66iRO214r8WXxeO+Xfgv/2TZrcpqtq/DI7oFYPoyj+7qJq+egzBP8uT+j8HPts/spzJ7A9n4j/egN42yMbevzomcfObbdy/0AIjXrbI1r9s48c3X3u1v4OrGpr/T9k/BG9Zoa8Z2j8Y6fpjLKnEv5HrxSBlg6k/ImhwR7cj4b97ynSLAsC8P5W5UNa4waU/kpReTNHHvL++H7/NBgfZv0V+gR6i3py/3S9rVmrIuL+I1N9nEf2TP/bpO2WECeC/lN/LidD74L9z5NrSZZngP43anwxMtdm/mDxwRwZd0b/zuxOHAQjavzSh3ccH/8y/9VgsOzr71L85VOqhRb/Lv0pnhDsP0oW/5Xvl4J91sj8kfV8Q/MCbv9RkdQpXbMc/it5DfURG4b8x0WIJ4u/Rv9c/4NDdmpK/DD8epeIq5T+7UQvtBznOv4bI30xZRKa/LW1XnqA20r9xlMdOCoLgPyGIPI19+9Y/knvPRJkawb9Z9cv6PeTev8l0S3feKM0/OjH2/J8Zsz9Mf6WoWdHJP7NMTiQ+grK/ARI6tNSd17+zwmSOZL6zvzWuw6G+ClC/2hOtWrzl5j9cbghz9HnAv50l7W8XZpu/7INv5te7tT8Op8jgJazBv1K3FfXdAt+/2gP2TM/nuD+iTyYgKavdv3mNmPzWyp8/zowAOCUoyL+C7lynHdC8P9TtDhCArMA/KAegoZpR4T8MZwall1LAP+GgdA1XZMi/ApGJzLzf1D8HglEsq5fdPxmUwsxfNtO/4yMlMmtO3L9R23AKIGHKPzZw3Y+mYNa/E+NPZKkT0D+nlE5F0qPCPyiyEpfcNNi/h1zJiboS0L9HrlbWG63aP+Br0h+dHKa/8/l+dbB6yj8Zj69EqXPTvyg33+8vHdk/N2bNgQ7Z4j/we2Gq17LTv4+0AQPhp4G/94pwuFSa5L/qy+dhtzPgv2HHSM3AIeE/WiQomcaRpD/IvlwvKS/dv/c6zMDjLqw/2fb36X7E5D/udBR5HO+VP65+dktrzLA/3gSNs/K+vj83YeUQXPXgv1+iMybtJ9k/QtQ5iR4S1L/ExP+NYaC8vxRyIM4gh9c/x6+lhiCDk78Z2cc6yf3MP3H2idkS5lu/cXrnnRRkr78EEil01hudP57JfxmYH7I/rXZpIClUxD9v93RoVleXv8TSPi+pcNK/YtvkAr384r+2Y/oHzLvZv8TEuSjluOG/caGO92E4wz9hwceh0hHfP28b+5D3oM+/vGt7EEpj4D8iqjr77CLKPzCjmrXNPNg/cH20EDgpy7/+oyBuCDLSv8lnlb2QuLY/sVRRO7Yo0z9wz898bHrNP+DrCKcju8a/FSd+WlzQ2j9FSNDEXF3Tv/BmrF9oYNe/l2UZ2vfl5D+0cUh//hbOP6mIBxtZl5K/cMvmRymsq78LS3YO093Uv1ejSQ94At8/ZfxUeWAYlT+R3UBN/Z7TPwwax+/ev4u/3SOXZahp3r8Tu2TieXfWv9jFlghIY4s/EaEH+C+RuL/F+4+Pq/Ddv4Vq8+Vc/7u/XM0t1CHQwD9370SXzA+8v7yScui7m4+/IAx/MMNgv78K9kEooO2yPw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMjA4NjQzNDg4cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTIwODY0MzQ4OHEBYS4yAAAAAAAAANmgpBzAnNe/GXf//I0nub/ZZH7LScPZP0WQT0TU16y/TxxSKXDotj/MjUJC2m3hP4g2HUkuxME/uVeNSQIR2z8U0ilTkhvVP+qSWuJpsMC/Yd5bRzlD17/1N2YAauzkPwZBDiHdkbi/gtGlrxxV37+vxSKZy43eP6agP2Xe+9g/BX/NCg4w4j/Hqz/4AZXmP25yQwIZ0MC/BV4IoSD12b8127jwGtzbP+9MRnjw/uM/tHyzGy6z0z86cOzDYLvVP6M8YSP1gcu/kbNKRe6o3r9qf4aFFYrjv9P4d2HAf+K/H9B7HN7bz78PNPxBM/+/P5IxMy9jncc/5a34jwTu1b+ovyhSV4raP5H68FRAWuQ/hHYZFPCv0r8Ew3PE1b6EP+guZtZcUtQ/2wINjVR72b8qaIXQ5NzRPzrY2uxp48O/Kfdqa3R2rz8BiVE+o9mzP/IjwgGc9dy/e3r2Oc5Fxr+YCbu/SgDBvzdDN64CM82/U5Nd5Ki60T9u8OJcViHLv94m/CZzJ8s/9Qk5wZKr3b8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk1MTI2MzA0cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5NTEyNjMwNHEBYS5kAAAAAAAAAD1doNrGWMA/WeL9OTZft78yfBuundW4v/8t0ppCBbi/1diQopnlwD+UAU9oFtTDP2wWx39VesA/P1lfjt1oxD8mwxUa2u6zv/mN94S66Ke/3LKDDjc6wD842V9vybTQv4o13OdZoJS/cyxpuPd2uL+LoQxXs3u2v37i/LxjGcM/PZbDg3phkT/vc9HeAhDDP1ZKDcXz+6u/lrossSUywr9Yb6Lt8rClP5a8JQ9kBMY/ybwh1/hfoz/kpsWVKEHEvxMN7bnQAZE/wp5AG4CYjD83W4L3xGGYP3Mmyahd5sS/qGJt3cjIvT/A2MgEJpG0P1hXPCb5C74/tzAed8lssb8EYyPUsFukP4X/SKpFALc/tKphWF8Rwj9ux0jDk1PCP8nS+bt45dK/qkP4nBeCwj9cQBuilLK0Py14t/JkZ2g/PyktpqSttb9RPcRtDDuTvwUVzZchPJS/VSuJ8k20xr+RCpBVLnm1P4lbR7SVe6e/xcXyvD3txj+iBwyP2WC5P1OG05R0ZKW/3J8TV8B31j+8vl+n+4bDv/cqPszWFqo/sZzATXzStb/hhsfCWQK7v6zIA3ySRsC/KLZLYMXDqL8gNoEUKXeyvxdlxXvL8YG/mVZ8cBcOcb/PAKLWNHjBvx6j4ix4zIS/RCVX/oRBkT+72F8qX2O8PxJ9VHGHq4Y/FM3YEIH0zj+brzycd2O9v2J1HsstBK0/1t9GPF8jqz+g9vhG0fqyvzCzIxEvNrC/0N0HLJTAlD/a0ham3BO8vz813N/gAaw/ZvuTUUBlsr+PUISSNzywP7TeGILxkry/8gnDi+91uD8BLv1k06fCv3WA12wlUZi/qmnnfxaFtD/EcXiMpbiwP3rnzUi2s7S/hm38GcszwL8WCZDSifR8v84z4/xGZaq/0tGkAdbLnz/kWb8PEeyJP2nboj7D+rC/HcLk5H8+sz9/xQHyVCTBv8Ut13KijYS/6/++bA5Cab9JM2BNie2qP37vqG+Frqg/Wq+4IVZHtL/eEAHoDWOPP8Cw114MLcA/sFoNg376vr/mspwhlwWqP7TJjbqoPMI/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0NjEzNjY0cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5NDYxMzY2NHEBYS4CAAAAAAAAAHBdQoDkI8Q/fDFN5w6wtL8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.6737632621359835,
                        -0.2837138119415999,
                        -0.4230335183866599
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    -0.6737632621359835,
                    -0.2837138119415999,
                    -0.4230335183866599
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 30
    }
}