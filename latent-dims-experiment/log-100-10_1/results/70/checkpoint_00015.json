{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9752833960765498,
                            -0.02886585248152515,
                            -0.03154259168120505
                        ],
                        [
                            -0.05309065147708086,
                            0.9850292631955889,
                            -0.0027763244165365615
                        ],
                        [
                            0.0940072200145539,
                            -0.05903260851979534,
                            0.956303470636536
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.9752833960765498,
                        -0.05309065147708086,
                        0.0940072200145539
                    ],
                    [
                        -0.02886585248152515,
                        0.9850292631955889,
                        -0.05903260851979534
                    ],
                    [
                        -0.03154259168120505,
                        -0.0027763244165365615,
                        0.956303470636536
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    1.2406854434966097,
                    0.8841359354988227,
                    0.5799585227451609
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.21838584592101687,
                    0.18630587053147332
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.4379478342052261,
                        0.29120935730151176,
                        0.11841614598229688
                    ],
                    [
                        0.29120935730151176,
                        0.24411798623238878,
                        0.05372345866746142
                    ],
                    [
                        0.11841614598229688,
                        0.05372345866746142,
                        0.13975556664324168
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0NDAzMjk2cQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM5NDQwMzI5NnEBYS6WAAAAAAAAABAPvKWVu96/urIhq1Mc4b/+VJP9bQTfv+7KXP8KJd+/EcGthcDywT9ZTy4bcB2mP4RzMUre4ds/SEbocfu44j82O6Ys8SLev8s6s/1yEd2/edLkU98k1r8HH8sOA+yyv+gBzriEO9s/500cl9h12T+7WmyhNoDIvyzA7VCwBMc/RjK6zKJ14b8WInu2Xk+/P0uhqYUAo6A/BC+KBAn2r78Gwzceogjgv47PpDpN8bQ/cUktDLB4yr8oraJnsSm3vwRQjf4do+G/7S9z+g0G4L8dl5ZYUevgPzdH3RYjWdq/hz4zPS+50L+UG9Z8KmTZv9tSXNy1Rs6/fw3nWb/m1r+J84hB4OnUvw8XJgbHpbS/3XHLf5Iwwj8tZxI1jPalP/62VB7FT9U/5KxBYu/y2L+gCJ5Qw2rWv0mafcIy98K/nR2zDZtJ4j91s/l5b27Xv+XXv54RY6u/AAcblMmS0b+UyebT9dPgP+btY8CwLto//rpUJzjf0L9TEztxUpLWv5bXzouMcM4/UHsA1EOKsD/r+ySUq4nIP3LO22NvTaM/AVRw+7UY3L/R4gC8+C19v+aMtyQ5fIa/58ksnp1g4z8peqvRk9bRvw5LfEzD472/vg2ZWVJEwT/TgUb10/PCv72aBqi2YuK/Ebpmh2KIyj8BStSv66DWv2l8ki/z/L4/6M1W5POO0L/h1K/egBeXPyqq351Cosk/4ESX/lMo3j8kk0hVN3vQP+n6CSDFy9W/YLfiZkaMxj9+4xNEHa3hP9JBANc22tO/z2jpJ5Sq27+oudwezqjLPxuYKgDkat2/ReWxffcGvz9AWk398CjOPz8x8IwFkde/B24WlJG20L9grGFRMFvSPznYwnFVO6u/s176iV7Cyz+4hnI60s/Sv0nUijcRmN0/O4H33Z2b4D8kyYEGZ3XZv0o3OyK1GMI/0nzGBTYV4b8P4Iv6UM3hv9yOVT7+K+A/MYdNh+w4wz9K0k87ANPdv43Z2ic8MLO/jXmqTw6H4j/deTifT3XAv/SkOqGtPKI/8lY3l4M2wz/9rBoDM//fvx5ga4J86t4/hZ08gnouz7/elegEOyfCv+6Tuuylctk/ggDpxV+Lgr+iA1QmG7bLP4eKkKKj94e/2hPwS1xFqr8xxngDH0mlv87pdEL0rrQ/lruENNebxT/nFiiGY8qgv46XnhAkhdC/6WNckX/y479DirPF2wbhv+E7QuGMZ9y/zZ1EbG6m0D89He1GQ0/ZP2k/e2EVatm//H7vsFa82T/Mj3JA9/nNPzcJyFk+etI/7h8yO8/H0L9US4RjMY7RvznmcEKrW6+/h0qPEgbrzz+eDtq9IQ/XPyIvv+Mtksq/AWL2eOG73D+z9ymm13HRv2vHavwAfeC/eOGsFwK94D/bJXyLsj7SPzDD9O3Qs4C/oDAu9nCNpr8RV4dWtFjZv96o+wShXt4/+/TXHdFVnz+Mc3xX1ELUPwV73EM1d8E/FeUW9Wpf179F4/ZlZcnevw2UwW2mdro/XLgetLbNx786vhEfbubWv2zfYSvNhMm/ORmJf+cQvz9ObB3AKJ++vwtWQEG1QXa/iZm6rA/4wL90tklR/Hy1Pw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0Njc0OTEycQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5NDY3NDkxMnEBYS4yAAAAAAAAAHQhwCaXQNi/NmU2cITqgL9ByViEaEjVP/1ziu62OLu/V1Lgo/ppxD/J5DwCG0LZP6C2+HbXnLE/+iHMcIf83D9xFO4JsaDQPy3DvvYX+MG/vZKj/1fI0r/djSFIS2fhPwz0VRqxPsW/J8b3QN9K2L9ByNCO9OndP9H4JlsHWNg/E1CDhSLe4T/MXYZIurPjP66DS2LRGJM/G84u0FMo3b/uMmqB3dHUP3pZrhCKmOU/Sdcl8ajH0T8avQH3k+7YP6I/EL2OG8W/8RqGwgJX1r92bdffpEzhvxiiEdL9ieG/ZgBtO2PHwb/F1mKv6+mhP8A/OjJBT70/uhCN9NWoyL/h7ggfJFfXP/wGeRLnGt8/ZruB1nn5zr/YjHnXX4O0P/xjjPSaH80/oAXbvoeu3L/drLbnqjTIPzwDuGiWvLC/dH0hqF/TwD+DC8qJ/2i2P2avxK0VXOG/82VNw9yHpr/K8UcksWbHv7wLcca+o9W/uHBi59ZgxT8E+S9HqNnJv4YWKTkhb8w/3CB8ebEw2b8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0NzYxMjQ4cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5NDc2MTI0OHEBYS5kAAAAAAAAAO3sGu90oME/xp3wYpLuub/X4BeFQUa2v6ny3nHmdbW/+bYQt0ctwj97HtVTaIzCP6S7QJQDwsE/chDleS8hwz/yYChDNn62vxzDqUnxDWs/Cpr2IuWBwT/D8F1P0HPIv6GXmYvK3Z6/WaN1j5vntb9R1fe3PZutv1ecddERYcQ/jQueJ+uemz8BOVfKVMjBPwVQJnM73aa/Vw+ynHfqwL9APbKbOpKgP+purPq1vMQ/NWsIKbF+qD+S0zyq1ojFv3G/6lVBP5s/anTWpz07cD9GqlSnqEiMP0HWT5SvnsO/UZcOgxIswD9fb9XbyQGyP+2CmKeqTcA/TDlUnNq6rb/bSCsmaXqpPy1tLdOhj7k/ftXdbA1Zwz852BQME/m8P9naregu1cy/pMd+iGk6wT+Upyd5OCOyP/a3HoS6lIo/VRg8fUges7/UcvaTN/uBv5WdFuhh/YO/49YS3p9sxb9od4J+igi4P7R2U2LdXKK/Owl5qI+lxT9Ksf+3NfC7P+yhtOYsg6q/VarkzAXbzj/CpOWSTT/Cv+wUVHoe+KQ/nMSMdthhuL+SBcZHk+fDv4arK30Q37i/e65iDg2lo787LBXXmc+vv6sf+16uSFQ/OXG9AO0Bjb9aQhjr4r/Cv0Vu7k+5ZSS/Yt0CnfV+mz+Mc1RTu/K+P8VAf00xhVE/KsCT03Ydyz8mZUdzG9S6v8JWdg5zEbE/UOUXxwshsD9Kj+1vLYq1vy0aFzqLxbK/cdFxEEcGhT9BOiJ9gIS5vwmS840o46Y/0TyJepz0tL+ddrPB2PR6v6TwDatNIr+/RgnHYpPmtT/CgXZ5ge/Dv4y3ScYN4po/UsjbqHIUtz/F6G+1AUizP6JkwnESQ7e/aHU+uYG5uL9cjn95cQJoP5Dg+6qORqW/XA28UqMEpT9mz20gv8RlP1FOXSvO1qy/IznvuyOvsD+5GXwGA2zCv0iLoy4rwQK/qTrT4mTLir9OxXb70M6lP+KLvx3Nj6M/f3i++Pm3sb8nlM6X9+6ZP1TlUXO6dME/biYWWiJrvL+0M7PP3uakP94KCM9WhMM/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0NzU1ODcycQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5NDc1NTg3MnEBYS4CAAAAAAAAACzEx2s23MI/9b9YvrIgsr8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        1.7428482983021922,
                        1.5620920394093796,
                        0.11908916446595072
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    1.7428482983021922,
                    1.5620920394093796,
                    0.11908916446595072
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 15
    }
}