{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9906481644256497,
                            0.01390793296898196,
                            -0.015781147018311594
                        ],
                        [
                            -0.16297852351437203,
                            1.0324348271304504,
                            0.06709123810407727
                        ],
                        [
                            0.13831423846875515,
                            -0.035679179420411405,
                            0.9460876805985692
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.9906481644256497,
                        -0.16297852351437203,
                        0.13831423846875515
                    ],
                    [
                        0.01390793296898196,
                        1.0324348271304504,
                        -0.035679179420411405
                    ],
                    [
                        -0.015781147018311594,
                        0.06709123810407727,
                        0.9460876805985692
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    4.191351497827253,
                    0.20981114374028298,
                    0.5005304158338274
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.21279472838288346,
                    0.10186285677319949
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.025096568993294655,
                        -0.00017038947303466825,
                        0.004808511652109096
                    ],
                    [
                        -0.00017038947303466825,
                        0.002971339103020061,
                        -0.0021236834491773077
                    ],
                    [
                        0.004808511652109096,
                        -0.0021236834491773077,
                        0.009106405533073125
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0NzYxODI0cQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM5NDc2MTgyNHEBYS6WAAAAAAAAACX+Z6WVu96/4FBjq1Mc4b9yUCtc/cbUvxrK/29IL9a/sajA59A20z+Khkja8ChqP+bWDF+MKd0/lqhmXU1x4T8SsTaeLi3Vv1RKWcBoOtm/i+XgfTu02L9uQBh6lZqrvz6yYHt6ZNc/jK0RwDQF3D8+gnwLxlKqv4hL7K0mn8m/5GGHMt+E3L9cNCprEteWP/59VQ3CUqi/x5fqsL8Hz7961acXIrzJv5MIB2EJjqO/a/CDaD87wL+yM0upsVqpP0/aqjVveda/Q1M6TMYk5b+mdU2HRkffP/YQkwF1Edm/o7JtUd0A0r8hhx58KmTZvyiprl2hmMa/UsDylfnhy79g40k+l3fKv56YoEF4JpW/eRjwb4fMrz/RARFaNv+iv6ilX+lRJ7G/HDnl+lj04L999gVjcbLXv23RZ/Drjcg/2hGNGCA15D8Vb/Im6bPCvxXa9fqgJaG/pjGYqHfa0r8U+nYYKbLYP4Sh/llKyNM/Wa59JRQvz7/xiFaM4WfgvwJ1BYyMcM4/0b6RBBfXpj/uzyprT/rFP9fZH7LD5a+/7oWPVdKXzr9L0m5hRzfWv/EDBIXBg8A/bVo5ekHR4D8dK86O0o/UP3vo/sumKJG/gVVwvXsssz8pCFLMd2TAv5J/quoGX96/wRgwIHNYtj/TxW4qAE/evzxPaVlRKFE/ZxNddy//y78Ljjh+wUC6P3tKuCMu9ME/BADT56Xg3D9332sLYB21v6nmDtp6k74/ulBlrjf00j+csWmTEf7TP8CaIK7aStG/4gH+UPA53r+vKPajAri9P2+gc599BNe/xq6jYezAyT/Y36ZagOvDP7gttbVhINq/YORCETwDv7/MRFd6jOrUP1Uy7c3k/aC/tmH1iV7Cyz8BB30RdkDQv8qIJtGqMdc/+7IoEdHO4z8svKiLUsfRv4ArkEKxTcS/6a/7pAXE2785M0MrhADlv/Z6ol2DF+I/kW23x/f2sT8IUDs3BdXgv+ITnaTXkMI/23dC2qvQ2j/Q/iVmYpzbP2pOyzud8XG/5Bb/CtXSnj+HNw8CM//fv/Rur/JKjcw/sCOKIrir3b8uBFlxuGmlvwH6Zq+bm9U/MLejKpHAnb92Ah28aWrQP7z3goxZO6C/zi7WyR5gt7+Y3O2Lo6yjP8TQB+F3IK8/kZPIXTMryD8QNAqGY8qgv7P8b3aK69a/kebrhI6n3b8bWqWNrCXLv9R4ZGZ4udS/853jqXh91D/+/6RawCzoP9f/UwQD96U/4vL25LJL3D8d5z/2sxvUP3kEIdNSKNo/Oi7lYitX079jiCJ539XSvzFZaTSlZr4/Q8qGw03Myj8+/BxKxn/UP0HqQy/Ciru/NWbzT4Us2j/eNgGUKSrQv2NUw+gsUMG/zDhYxUme6z+RC55dBPfQP6ehX4PVp6i/es2bHymEtb9jYKhhhzbOv/ks+Jb+duA/wouMMFnoqT/2TZIueLPRP1klPKDxoL+/+aGhzg7Q1L8RsHm+iQjgv+/7yW7UnbO/21id4xJdyr9yaiFbeL3av6gTwmpIUbS/x2SMESynxD+ZC2oduGG0v8LgEJhOC5q/DIGTB2fRvL8WyUz/Q16wPw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk1MjE4ODQ4cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5NTIxODg0OHEBYS4yAAAAAAAAALkXDmfzz9q/H6bAm4mJxb/pnUjFch/ZP8LMBPW2OLu/IRvYW7d0rj8HxUYpLCboPxNQ+tBew9M/m/1DaIf83D+ge3FxFwfXPxGjUCB0h8S/HSSydkAS4b8FPRdxp/bjP25oLOSAAra/NRcIHVt35L8obX2jibfkP8sLjQmT7uE/Z0/+o6fJ4z8o1LjQ973qP8eIaAf4udC/dAS+v6Xg27+3CfwOoMfdPw6t/OgtCeM/21IZimu92j8ONWqW6tLKP5uO7JUyjMK/7yfI+wwu2r84nNq3SL3uvwPufi6NTOe/KURNLXTZ0b+8Mpq5ZzKzPzQe/8X8NsE/Vrj65Dch2b96OmSJplnjP7sUbSUNJ+k/tiGT9WrE0L8j0cEIT8muP7UKs7fXZtI/aLIdzoeu3L/P8qckTc6dP+POEzN0use/7w60fyygzT+D+qcjuYe7PxqoIaU+uOC/zWbayS4E1r8K9x8LgVK6vyBVacKwes6//DxeBi6m0z+JQ4Wn/vq0vzwogRDF38k/f36rog3A278="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0MzU5NzI4cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5NDM1OTcyOHEBYS5kAAAAAAAAAB4gExjRL8Q/Eh4zEdrPtL8eCg/X+WS7v0jXJpvrcKa/+M0xyh4duj/cxMOlIKvHP49WOr1fUcQ/zG3hy+c/yD9ytCTxfV+xvzznsx0jGZG/Nr7+S0ERxD8RCO+PTqDSv99tgwfwL4Q/tISpGYYSwL/2UAu5PZutv7E3eai10cE/sBJweCeQfD8hqUYcDefGP1q/b10OrLW/cnDAnHfqwL9vrrpfNUV/v0L/mExu28k/0OmgCoPmiL/fcDnTMhjIv/rPC5+xSrs/Hrtqpz07cD/4EHJxC42rP3BRVoXu/7y/IqyOfYe6pz8iGbJ/Oj+8P+PnZKvkXbY/IvEH8t0aub/y4X0E8XmeP6nPJiVarr4/Cg/hQ7HJwD+4ACLXQZvDP1kFnSy279m/Xrdu2iFZxj/hUO4cqWC8P5VmQU1lq5u/ZdlSzwA9uL8jbrosr/mov+wuo8E5eqm/3Gf5L1iLyr/rtn9+igi4PxjbKAZOmqy/ba1n+kfEyj8d/vUEd4fAP2RINkO8RaC/0i8VoaHy2j+tKfqBKkG6v+wqOh6PNa8/tC3Fpc9IrL8Y8ejrGWusvzxsfpBAjsG/mxEz1TjPkr+wYSPXmc+vvyxMUV6uSFQ/s1nW4+t9ob+p/DHgnCO2v28HRY57ZqQ/fmgngas8wD85qS1Zu/K+Py2uxTKOYpO/T+46V2Jvwz/LYlHF0/K/vwBnVnh15ac/3Y4AGcQ/tT/4adXB5ai6v62jxEA2oMO/ih8WDHO8qT8KVyJ9gIS5v8J1IphMkLA/N5V+epz0tL/OSJQuVnuLPzb6+1iVA7q/NXdBAwISwD9TQE/LOQ7Jv+TjUwhLR6G/LoLG+iozvD+mex7HklKsP8INq8PKYby/OG+4MHl7wb+n8QQwuvqiv0AA9qqORqW/yuIgXmWOlT+KOe8reTOXPzLodsfZt5C/wa/6uyOvsD9c9nsGA2zCv0h84sErwQK/EUyI3EnwoL9lToMh2SS1P/pWlsE9za0/fzDhTYMyqb+cvEhEWdB1Py/nRpwWBMQ/FO4NWiJrvL+hp7pzTySvP/WBX6iErLc/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0NTU1NDg4cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5NDU1NTQ4OHEBYS4CAAAAAAAAAN6Kt73u+sc/8Zbf2PQDqr8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.010705388908332466,
                        0.22279789371632322,
                        -0.4442636069116449
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    -0.010705388908332466,
                    0.22279789371632322,
                    -0.4442636069116449
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 75
    }
}