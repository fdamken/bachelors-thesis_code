{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9731294558899406,
                            0.012905010181324558,
                            -0.022152032256151526
                        ],
                        [
                            -0.1963884844601073,
                            1.0510662350943656,
                            0.04671604250406288
                        ],
                        [
                            0.16111100252904728,
                            -0.042241983780933426,
                            0.9535975927928119
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.9731294558899406,
                        -0.1963884844601073,
                        0.16111100252904728
                    ],
                    [
                        0.012905010181324558,
                        1.0510662350943656,
                        -0.042241983780933426
                    ],
                    [
                        -0.022152032256151526,
                        0.04671604250406288,
                        0.9535975927928119
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    3.9179739832490488,
                    0.2059840476011629,
                    0.4688347620337622
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.28044559709772693,
                    0.14484493075602164
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.03635101679894921,
                        0.003391790717069014,
                        0.007402785252507718
                    ],
                    [
                        0.003391790717069014,
                        0.004338211715222629,
                        -0.0012401147896970444
                    ],
                    [
                        0.007402785252507718,
                        -0.0012401147896970444,
                        0.010422603075577325
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0NzM3NzYwcQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM5NDczNzc2MHEBYS6WAAAAAAAAAFKvkEkG+di/Vwg0WZv9478BuTDLOtHbv0A8Vrcpqtq/hc263PmS0j+6MQKIzLyyP/xj8Whjzd0/WPCQ4jjD4T9ofWDlD6jZv4OTcfObbdy/qX0hXrbI1r9a6xQo3Xumv1eKnYVRCNg/0//UtV1h2z8p9GJdfnGvv1oXxO0PNLy/o2JCUY7H4b+04mG5SaG3P9obebsJNKO/5PiAnBHAzb9K8P8+RBHQv8l6Qh6i3py/TFb8fO2Cwb8GLmhX+TukPy6sjqOsg92/QKkFlKef4b8NBIXnE+HhP0CYqePvJde/D8HsW7Sk0r/zBLmbr0/bv+OmN3ZP4Me/SCKUT+hC1r9nbCpcRb/LvwV+c+XoY5+/iXHr4J91sj+9wFAQ/MCbv9yBlYDrL62/pAnQdm2i4L/GwsIvPn/UvwsYF7PhtsQ/rHCznQuH5D9iRXoSO2zBv5rA3kxZRKa/RsRbnqA20r/avrMiAFbZP7RtO2QhbNQ/U8z+EGbnzb/YyjoH9hXgv1Q2mnfeKM0/E+koVs/1qz9Ue4t//UHHP138aLWPfsO/ze5ArtSd178aAfv3E1rOvwtbSZlvy8E/6Nn4RQ6e5T9Z1+LrcezFP0Em/aDYrHu/ExOIlB+dsD/kecfgJazBvxkg5PTdAt+/kgIVSc/nuD8LVDYgKavdv24TwXLrn4Y/xK7Ti91Gzb+a90tVZbG3PzenQQ+ArMA/To4O8nyE3T/wAYHiA46yv5abk19m5bY/tyF5R9GN3D8CnNFf3srQP2OLyKMDp9C/W1YcW8fd3r/7NW1mryPAP8ORN5WmYNa/yk5Jn/aXzT+nPPfnMwq7P6Vw9L84xNq/dn2dbwToxb+9rnGtvx3YP4UsFPhYvpe/4GmDdbB6yj9XBLkbTeTQv7RzY9uB1dc/StgKjOV84z9SBOSVKWvSv2aS7n+7JMi/Rt6LkPgK4r/PWT50ZXvhv5LyS9iXxeE/BFnBmMaRpD9FBlG88Cbhv6BaNLmF2MM/lS6/tUuR4T+k+rjNyALSPyySDJtcmqG/J1LJZmSVlD9o/g68UYTbvxXVKAf51M0/YD1QGOEH3b9hdawfAEugvwx3o7lyP9Y/odQt5wD/o7/yXsFjJY3PPzJ0NXVCOZa/PnXI8nrvub8mvA501hudPzUkHo+/Aao/srdCcuFyyT+gSENoVleXv76OY0NXuNO/Ykl++uVY4r+w8mmiZVXTvzzZ/ta1w9u/jbWYSRpXyD+qeraseEvlP5iHnqu0FH2/sk9tJPiq4T+3r9fEgOjQPzzQ5vHXE9w/C5esNpS4zb+Z7PZZWurQv9jFNa8Ae8A/Z1jCT2Rw1D8+xGoa5QTQP5FeOVgeGr6/f+gjg7hf3T+YGEnrSH3Mv06nO/3al8K/NsI6QF5M6z/EDZhTLVPQP684aTEdiaO/UtyuSSmsq7+hewTkdk7Sv+/A5BETJeA/8FkE36DJpD+gbsE4T1fSP0HH+wyDp8O/QW8vUfoh3b++cjwN1gbZv8W/3UV4DrG/ezLTyGQVyb8BTHJlT2HbvxsrupOk4La/X88CJtruxT/Yf3n0W9Kxv0E9cei7m4+/WK0p6hnPxL/8KK6sz52rPw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk1MDg2ODE2cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5NTA4NjgxNnEBYS4yAAAAAAAAAHinIDVu5Ni/fIYTozfRxr/hCxDOScPZP8f7M3miirO/nvzx1rfJsT9y4XukQNTnP3jmyceHH9M/YON7cl6g3T8CyqZA5NPTP0mdDAnGP8O/iODkb5XS2b9Vc/nru6TjP7itmr4kc7O/VS/3oUbJ5L8lZF0enmXkP4pMYYSnnOE/Hb4BH7x34z8kM3sSsNznP15uUdHlnM2/nQKTtc4827/rIKgEySPdP5nNJ6FMjuY/NRGjf5QZ2j8s+eFb4PvGP628nM88Y8a/5yChBuTR2r8x5ID1UpTqv2g3Zqmh+ua/THsEI5010b+q9d42fOC6P7BzGy5jncc/aKnotATu1b/PsB8kQPPkP4yNSqAh1eg//U9V65Mg0L9Y0lKtA/SxP/X1da0Aw9E/y7stklR72b+zPD/U/OzGPz3T+RvGcsa/uUXiyQ0bwj//3IOFW/i4PwxwUiBTZuC/AQGNv1dg1b/1tBnxHEKKv4M7KdZews+/zaKm6ai60T/1b5zOWoq3v7kdAvwWmMg/N3DXg4jU2b8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0NTUwODgwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5NDU1MDg4MHEBYS5kAAAAAAAAALm1iix/d8U/yRMnOjZft7+TbByundW4v/G7Suz6I72/BTmPopnlwD+4RDu6zvLIP4YIstENmcU/+SFM4JWHyT8OMBca2u6zvzeFLOjJbnu/ziBxYO9YxT8iHl5xybTQv+o7gKdoVZQ/y+sgLjRawb+YQXYF+1yxv5LS87xjGcM/PtfjgXphkT+l9r0wuy7IP4dXX4ZqO7i/q6B4EJNFv7+VNOBfGmFjPyhWEWEcI8s/6nUMCYeuYb/G1bDn4F/Jv9JLaKTJ+6w/oQnV54S6eL8+sokfU26mP+lo9X8BV8K/p5J3zz/ZrD8KkKGols6+P3knWdRA7bg/tCD3Gjqqu79XZSzUsFukP31oDSfbnsA/9YJZWF8Rwj9OzETs7+LEP2K4a/mCvNa/DOnk7s+gxz9fS/nzTNG5P/TUgPhq9KK/+spepqSttb8uXpV+Zxiuv9W/ihPymK6/bD1zRAbTy79HRXKn5pe6P2LDSLSVe6e/zjjfDvYLzD8gk24ZJc/BP1yjGZV0ZKW/jjtGWcB31j8OF+yqhtC8v4R6EbgjKrI/3hzX+8OzsL/uDQeaYUynv4QN+qTu1cK/3xD/eKkMnb9AFIUUKXeyv2VqzHvL8YG/+hjbI2e+mL/aXx0J+bK4v7t5x3iGj54/e7Y42frpvT+PPDowX2O8PzBT8h07SoK/Ps+bvcjVyT+uzyL3F0HBv0Fdbya9xqI/xD4N8Gewsj/PFOKYiRm4v59z2wZYkr+/cw//XSvbrj9u4RSm3BO8v6asEMGoH7M/YjmLUUBlsr9XCnPk71q1P4ejBzA5dLe/Ebm7F7BZwT86/ti2i8bHv1obPVoDZqa/Cg/T0c6juT8vMjV12jOnP5yyt5pu0rm/ezkxRSfDwr+uHuyBchmov2+H3fxGZaq/4yI0dOmhhj9BsMvndLigP0dxPWtK9Zq/MELv5H8+sz8yTgLyVCTBv4LCZXOijYS/zDlEFSOjl7/tpXZKNbS3P49Fvgn7dbE/+ifGnztRrr/CBPBKaSVzvyI0zYdovMI/0UUBg376vr/KLNDigyGyP213e38oHbU/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0NDMwNTYwcQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5NDQzMDU2MHEBYS4CAAAAAAAAAMXSLtKcQsk/KD/GKq0ir78="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.11149059172041968,
                        0.15526287587392748,
                        -0.3924360038701403
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    -0.11149059172041968,
                    0.15526287587392748,
                    -0.3924360038701403
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 60
    }
}