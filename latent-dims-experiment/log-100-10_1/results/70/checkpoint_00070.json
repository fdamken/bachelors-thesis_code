{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9890637989216253,
                            0.014295416684838977,
                            -0.01568702289585156
                        ],
                        [
                            -0.19258110379093657,
                            1.0454807844451175,
                            0.07011913711973289
                        ],
                        [
                            0.1602791640456321,
                            -0.04266165195885503,
                            0.9467083930761999
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.9890637989216253,
                        -0.19258110379093657,
                        0.1602791640456321
                    ],
                    [
                        0.014295416684838977,
                        1.0454807844451175,
                        -0.04266165195885503
                    ],
                    [
                        -0.01568702289585156,
                        0.07011913711973289,
                        0.9467083930761999
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    4.3220138122004625,
                    0.20060182426654163,
                    0.49655026158726545
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.23082361078146277,
                    0.09053196406078234
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.02774162872577492,
                        0.00048158013490386294,
                        0.005527195970165993
                    ],
                    [
                        0.00048158013490386294,
                        0.003205302705513176,
                        -0.0019241984098877785
                    ],
                    [
                        0.005527195970165993,
                        -0.0019241984098877785,
                        0.009494860432200602
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0Mzk4MTc2cQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM5NDM5ODE3NnEBYS6WAAAAAAAAAA4MCpu+F96/RT2hMD9u4b9bBZB5grLWvwXupY7NGti/pH2R3fmS0j9SQxUDuP6gP2DlRWljzd0/xZpR2GEf4T/c22CoBdHVvwVfHbaRlti/X4QciBJY2b8fvPnlplywvyjYnYVRCNg/7o/UtV1h2z8i1WVdfnGvvwYcs0jAOMO/RS19ZRK437+kwHSPQzOJP1e9ersJNKO/pOqn4rYn0L/W6Bos0APLv5ViOx6i3py/OAD+fO2Cwb/jZ2JX+TukP4QAGEBGHde/lnQUx9rS5L+0W+TSZZngP1XzruPvJde/iCXmW7Sk0r8BO66br0/bv4ev60jzUMW/ODsH/i8k0b/P9vlSRb/Lv/w9duXoY5+/7wLt4J91sj/9ykwQ/MCbv8foQRKutrO/PUZRdm2i4L8aKXJE7MbVvw+LLrPhtsQ/TNSwnQuH5D874ncSO2zBv9cV4ExZRKa/myNbnqA20r/8ILQiAFbZP9W7O2QhbNQ/Sq0CEWbnzb/mATkH9hXgv5Pjj3feKM0/cJdnVs/1qz8zCJx//UHHP2kxlZ+uv7y/nkf1XBx/0r8nnNZXcJPVv+dJb5lvy8E/xiuHE9tq4j9qy+Jbn1zRP6aJtKDYrHu/Bpl9lB+dsD9QXMvgJazBv/4K5vTdAt+/er4fSc/nuD/pcTMgKavdv20Z0XLrn4Y/FqDWi91Gzb/mL0VVZbG3P0YUPw+ArMA/VdoP8nyE3T+udnriA46yvw6YlIFrkcA/Ardo4Won1j9SNTOIOlrTPwb246MDp9C/WzU6W8fd3r9BsAZ7pii7PzcZOJWmYNa/LBQidpoIyz/aJkNG0qPCPw9j8r84xNq/NoXk6d9zvL9qYouEY47VP+IfB/hYvpe/yut8dbB6yj8W97kbTeTQv0ZkY9uB1dc/UmYKjOV84z8xSOWVKWvSv9CqFVdflcW/lYJC1zj33r8DNkaS6mbjv0nLd9iXxeE/8l3x71OGtD8VWHO88Cbhv/9yH7mF2MM/omuCDN8D3j+WGmEzL2nYP0BiLOWvc42/JOgqZ2SVlD+WvUPjrRPev4SYKQf51M0/2iNOGOEH3b/vMYgfAEugvwTBo7lyP9Y/lVs15wD/o7+AWcBjJY3PP3GgMXVCOZa/jdPK8nrvub/7Lwh01hudP6/5HI+/Aao/LTtDcuFyyT9NNj9oVleXv/c28GuzR9a/2XPH22Bt4L90sYGiWm3Mv32JrXBPXdW/6IcQi/OR0j+cOYXV1NrnP1S1Dla7Fas/UUxbAjg33j9hlmPXLjDSP8pSlvHXE9w/XFlrWFSz0r+JbX1aWurQv8c1Ca8Ae8A/OuxjE1qZ0D9x7OUvQZTSPyStOFgeGr6/ChJ8bgoY3D/rVIUTpQzPv2PjPP3al8K/GE08QF5M6z8OJ2pTLVPQP4XRdTEdiaO/C1LB9sz0sr+r2C52NX7Pv6bb4BETJeA/wUdg36DJpD/Sm8c4T1fSP/9+o+QmGMG/kqUzAUID2L/D5TNK4N3cv7HQ20V4DrG/pOME+MCky7/lgFZlT2Hbv328t5Ok4La/w5MFJtruxT8dTXb0W9Kxv+i/dOi7m4+/MOk1wb0/wr9CNK6sz52rPw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk1MzE5NTg0cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5NTMxOTU4NHEBYS4yAAAAAAAAACloZlwcLNq/UWqmh9tBxL8iyT/OScPZPznp+Mtaqbi/aorl1rfJsT++BlyuF3joP0TF+caHH9M/zH5/cl6g3T9FQktlQGPWP/NfGArGP8O/eVGK6X0c4L+D5/jru6TjP0Lun7skc7O/tKwVokbJ5L/1gF4enmXkP4+Ka4SnnOE/1zbpHrx34z9o1NpB4w/rP+OzPRHPXdG/DKiItc4827+AnrkEySPdPxyOh4LHouQ/pNTBf5QZ2j/1g16BPIvJP9sCgYGERMG/n1w9BuTR2r9hnl8eryPtv6K9Y6mh+ua/8KUNI5010b9lFiPuw8G1P58Ko9uqfsI/53nw7g7F2b+VJFUOkqvjP06jTqAh1eg/zABX65Mg0L82AFetA/SxPyKZda0Aw9E/jUcbw7AK3L+pEnIRYEC0P8lZW0ciAsm/WMwCQyLJyT9md6LxXPi4P8Y7PCoqCuG/L/abv1dg1b+Y+eOQbKSyvzTSbtZews+/K3bzEAVK1D+8WgLQWoq3v7zZBfwWmMg/hlX4g4jU2b8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0MzM3ODg4cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5NDMzNzg4OHEBYS5kAAAAAAAAALebjCx/d8U/VhwoOjZft7/T1RqundW4v0/oQO2jj6u/DAcu83qsvD8yWz26zvLIPyH4s9ENmcU/PJ9U4JWHyT9z5Rga2u6zv1zEqOfJbnu/I012YO9YxT9I+BiaJUTTv5tnj6doVZQ/FEgjLjRawb8Z8XkF+1yxv1z587xjGcM/dpvogXphkT/PScAwuy7IP6tHY4ZqO7i/5OCFEJNFv78SLIheGmFjP4HrEmEcI8s/43v0KLKwlr/4DbPn4F/Jv1O2G3ZVu7g/Xi3m54S6eL8vwIcfU26mP7ZyT1yScLq/7J52zz/ZrD8Vn6Wols6+P/UWWtRA7bg/O137Gjqqu7+hcSrUsFukP6XyDSfbnsA/QetZWF8Rwj/LXH/r7+LEP4YVYCLfS9m/GMvn7s+gxz+h2vjzTNG5P+1kh/hq9KK/y8FdpqSttb8ae6B+ZxiuvwPjjBPymK6/2MZzRAbTy79nq3On5pe6P02bRbSVe6e/8F/hDvYLzD8Uw28ZJc/BP2EdHpV0ZKW/0QLMlspO2j9ege6qhtC8v9dIErgjKrI/xrPX+8OzsL+RsQWaYUynv+Om+aTu1cK/e4sFeakMnb+BeIYUKXeyv11p2XvL8YG/9pnYI2e+mL/1JSYJ+bK4v/31uXiGj54/IhWelVmEwT+Q3jgwX2O8P3np5R07SoK/PMyolGxGxz/hRyP3F0HBv6vUbCa9xqI/2NEL8Gewsj8trOCYiRm4v22tVCyIWMK/fI//XSvbrj8k0Bam3BO8vzBGFsGoH7M/etGJUUBlsr9FsPW6G/uXPxjOBjA5dLe/7A+8F7BZwT/tRNa2i8bHv93UPVoDZqa/sLnR0c6juT+SBDR12jOnP7dPtppu0rm/8HwyRSfDwr81xe6Bchmov++L3/xGZaq/cAeZdOmhhj+DK93ndLigP56kR2tK9Zq/gePv5H8+sz+9lAHyVCTBvzGFa3OijYS/1sI9FSOjl7/fI3hKNbS3Pw3dvwn7dbE/JWzKnztRrr+FtgFLaSVzvzqFzIdovMI/1bwCg376vr/ZD9LigyGyP7nwb38oHbU/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0MzkyODAwcQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5NDM5MjgwMHEBYS4CAAAAAAAAAHAgMdKcQsk/kQPJKq0ir78="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": "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"
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.03436087891379612,
                        0.20976755279497145,
                        -0.4241960854417219
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    -0.03436087891379612,
                    0.20976755279497145,
                    -0.4241960854417219
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 70
    }
}