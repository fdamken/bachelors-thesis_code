{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9663566957169831,
                            0.009248829037618827,
                            -0.032026678244692984
                        ],
                        [
                            -0.12126059737232528,
                            1.0364821333392298,
                            0.01080023076541976
                        ],
                        [
                            0.14035601365649394,
                            -0.0515168738554533,
                            0.951805598111571
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.9663566957169831,
                        -0.12126059737232528,
                        0.14035601365649394
                    ],
                    [
                        0.009248829037618827,
                        1.0364821333392298,
                        -0.0515168738554533
                    ],
                    [
                        -0.032026678244692984,
                        0.01080023076541976,
                        0.951805598111571
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    3.132867195924112,
                    0.3787389623099728,
                    0.5928018740319413
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.36418391201773104,
                    0.12756749795648376
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.10272648571948034,
                        0.03779754170545063,
                        0.01835730544883396
                    ],
                    [
                        0.03779754170545063,
                        0.023049296722503367,
                        0.0031248940977731954
                    ],
                    [
                        0.01835730544883396,
                        0.0031248940977731954,
                        0.017723708440140373
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0NDc1MDQwcQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM5NDQ3NTA0MHEBYS6WAAAAAAAAAP/YrEkG+di/a8sUWZv947/khj3f6Bjdv2TQ6qJ7Ytm/RZOz3PmS0j+xo7G+egzBPy7E+T8HPts/AwvK7A9n4j/s0dg2yMbev27TcfObbdy/+3IiXrbI1r/nz783X3u1vynnGJr/T9k/AY5aoa8Z2j93tlTSL/a5v26e3Ni65J6/Qm0IZTwP479YM9ASAsC8P9Ag6NW4waU/1p7DcrUwy7+NUyd8TujTv3cBeB6i3py/ANJvVmrIuL9xmrBnEf2TP4wkPGWECeC/2RTLidD74L8JbvrSZZngP7oqoAxMtdm/iG5vRwZd0b+soReHAQjav1gx3Z6rb8q/1wmgT+hC1r/T5QCiRb/Lv959iDsP0oW/3mXm4J91sj/qIlgQ/MCbv5s/snsUP7U/Xqa+nskx478UCcII4u/RvxMgGqJTqK8/b4g+xWcW5z/p/I9Ml/vDvwQ4KVLRDZi/ll5cnqA20r9pmqdLXOXbP3xSNI19+9Y/TKnTv63IyL8GRqj6PeTev57JUHfeKM0/5lTr/J8Zsz8Sg5uoWdHJP9pPeseuv7y/MbvQs9Sd17/zhNdboxzEvyldXJ1uWbk/5HTJZJOJ5z9LRwJKPWmdv5eq8G8XZpu/o2Zx5te7tT/qIsfgJazBv1kxFvXdAt+/W77nTM/nuD9ioiggKavdv5ZsifzWyp8/vZTZtDnWz78aUZ1VZbG3P/aoJw+ArMA/PDZbl8Ot4D/HyfPQVi6cP5EgcoEUL7e/5eHQMiNG2z/WWCLGRDHXP7hovsxfNtO/I7QoMmtO3L8dB0bhw9HHP9R+1Y+mYNa/cftSZKkT0D9e01LnMwq7P05vH5fcNNi/lIvBiboS0L+O+VbWG63aPwPC0x+dHKa/vYeAdbB6yj+E/61EqXPTv7SV3+8vHdk/2EPNgQ7Z4j8lemCq17LTvxNjN7mVzru/il2Kms+u4r8oWX5qjtfgv6+4U83AIeE/FtLAmMaRpD+5jGFD13bevzsIf7uF2MM/Ri693qcg5D/seRKvYBW/P9D+VGIlBHc/jVS7D4KBtD8ZhN74W1vfv+wP9r+GwdI/rQFa74R42r+OxRLD8GKyvy0HHs4gh9c/1C2phiCDk79kpM46yf3MP/9jQ9kS5lu/hI7rnRRkr79djBd01hudP9QlfhmYH7I/CVVqIClUxD/pxWBoVleXvxx8oUNXuNO/+5Yv+uVY4r/T52rzHXTYvxs3qxQ3ceC/2SNp92E4wz9reZdvbnThP0IfWsQq1MK/PaIsL89O4j+gForjkJPHP+0uhAaGW90/efZb5duZyL/K7j5uCDLSv31Ibw9J17s/6d5GO7Yo0z87599rbHrNP1hKCKcju8a/YQqRWlzQ2j/0+eCxrhXSv+qRUvkB+tC/Fuc7DSsZ6D9SKA9//hbOP0aW+hpZl5K/PzF/SSmsq7/S1M74JJbTv6XiUg94At8/NIU3eWAYlT+xNjVN/Z7TPwIYI3eVEb2/AsPwPEza279Kt+bkeXfWv8xxGglIY4s/QUvJnwiGxr9NZ6N6/ajcv5pF3eVc/7u/k1DVTjZ+yD/5cDT0W9Kxv05FcOi7m4+/OYJ/MMNgv79WHUEooO2yPw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0NDUxODA4cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5NDQ1MTgwOHEBYS4yAAAAAAAAAB74xTBu5Ni//M0iojfRxr/8YH3LScPZPzCCXUTU16y/ojYNKXDotj/drEh0DaHkP6ndUhT7kM4/3s6USQIR2z8Z7SZTkhvVP/gbcuJpsMC/H0ZYRzlD17+4iWUAauzkPz6jz9/YqKy/dl6NicHd4r/IElz1QdbhP6qfCstEYt8/L/0BCw4w4j+XkX8VsNznP6IuE8nlnM2/YC4RoSD12b/9QczwGtzbP2TW65Z16uU/ud7KQopC1j+UrOh+qJzQP64YUyL1gcu/wTbOQ+6o3r/FLDqkmnXlvzL+M4BFa+S/bTyfHN7bz79cJsZD9o7CPy8ATS9jncc/+w/cwGB92L8TeeikD6nfPzAFc4dzjec/N58aFPCv0r/cCwrF1b6EP9ZZZNZcUtQ/kAmZjVR72b+8dmnQ5NzRP2B4h0EiAsm/86/Et3R2rz8F1fQ7o9mzP+df6AGc9dy/kLEvgk2J0b+Vhc91aAurv1oWAK4CM82/rzfe+VYC0z8lYi+55ePAv33qsPsWmMg/ZPI3wZKr3b8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0NDQzMDQwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5NDQ0MzA0MHEBYS5kAAAAAAAAAGsUotrGWMA/GEz/OTZft78BzBqundW4v8IS0ZpCBbi/w8uOopnlwD9wclBoFtTDP8IhyH9VesA/rG5hjt1oxD9S5hUa2u6zv8YEjYS66Ke/3SKGDjc6wD/04MhvybTQv2H60udZoJS/BBFsuPd2uL9hEQJXs3u2v+qU/bxjGcM/FBbHg3phkT/999LeAhDDPxEmE8Xz+6u/DDMusSUywr8UR6Dt8rClP1YOJw9kBMY/9Zcb1/hfoz9zlsaVKEHEvzhSJiSdnLM/D8w0G4CYjD8WRn33xGGYPwwiyqhd5sS/UDZ1zz/ZrD9sx8sEJpG0P12iPSb5C74/fjMhd8lssb+22SbUsFukP3ySSqpFALc/F/1hWF8Rwj/R40vDk1PCP3li/bt45dK/BOr5nBeCwj87yxmilLK0P+DQc/JkZ2g/8LcrpqSttb/S9NBtDDuTv+jN05chPJS/zxSK8k20xr+PgJJVLnm1P1qnRbSVe6e/ZkP0vD3txj97/w2P2WC5P8mf1pR0ZKW/4bEXV8B31j/+XV6n+4bDv/EkVMzWFqo/NYDY+8OzsL8q7PYe6cSwv9VPBHySRsC/PStHYMXDqL90v4AUKXeyv8CKt3vL8YG/b7/RI2e+mL97aBwJ+bK4v9aK0Sx4zIS/ApG3/oRBkT86wWEqX2O8P6GOQnGHq4Y/lojUEIH0zj+4JV2cd2O9vyiuw8otBK0/98xLPF8jqz/UQPtG0fqyv8CNJxEvNrC/MvHwK5TAlD+17xSm3BO8vzyp19/gAaw/M1KUUUBlsr+t04eSNzywP++oDoLxkry/sSCS3aeUvT9o7/9k06fCv12F4mwlUZi/aRjqfxaFtD8ui3+MpbiwPzZS0Ei2s7S/q8AwRSfDwr8dNqvSifR8v2bhCdWWqYe/MOaoAdbLnz85UbYPEeyJP80BoD7D+rC/ga/u5H8+sz98ggLyVCTBv4AfRHOijYS/9UEYbQ5Cab9S7V1Nie2qPwX7pm+Frqg/Qu+6IVZHtL8H7S0eNBaiP9QB2V4MLcA/NKMNg376vr+ixpkhlwWqP9oljrqoPMI/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0NTM2MjI0cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5NDUzNjIyNHEBYS4CAAAAAAAAAK3fQ4DkI8Q/Pb5K5w6wtL8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.6741005566980552,
                        -0.20042958409696554,
                        -0.44670269630686665
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    -0.6741005566980552,
                    -0.20042958409696554,
                    -0.44670269630686665
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 40
    }
}