{
  "artifacts": [
    "checkpoint_00001.json",
    "checkpoint_00005.json",
    "checkpoint_00010.json",
    "checkpoint_00015.json",
    "checkpoint_00020.json",
    "checkpoint_00025.json",
    "checkpoint_00030.json",
    "checkpoint_00035.json",
    "checkpoint_00040.json",
    "checkpoint_00045.json",
    "checkpoint_00050.json",
    "checkpoint_00055.json",
    "checkpoint_00060.json",
    "checkpoint_00065.json",
    "checkpoint_00070.json",
    "checkpoint_00075.json",
    "checkpoint_00080.json",
    "checkpoint_00085.json",
    "checkpoint_00090.json",
    "checkpoint_00095.json",
    "checkpoint_00100.json"
  ],
  "command": "main",
  "experiment": {
    "base_dir": "/home/fabian/bachelor-thesis/code/src",
    "dependencies": [
      "jsonpickle==1.4.1",
      "neptune-contrib==0+unknown",
      "numpy==1.19.1",
      "sacred==0.8.1",
      "scipy==1.5.2",
      "torch==1.6.0"
    ],
    "mainfile": "experiment_pendulum_damped.py",
    "name": "pendulum_damped",
    "repositories": [
      {
        "commit": "6d1357af2f69e9009f4339964087d83d93f3f4e9",
        "dirty": false,
        "url": "ssh://github-fdamken/fdamken/bachelors-thesis_code.git"
      },
      {
        "commit": "6d1357af2f69e9009f4339964087d83d93f3f4e9",
        "dirty": false,
        "url": "ssh://github-fdamken/fdamken/bachelors-thesis_code.git"
      },
      {
        "commit": "6d1357af2f69e9009f4339964087d83d93f3f4e9",
        "dirty": false,
        "url": "ssh://github-fdamken/fdamken/bachelors-thesis_code.git"
      },
      {
        "commit": "6d1357af2f69e9009f4339964087d83d93f3f4e9",
        "dirty": false,
        "url": "ssh://github-fdamken/fdamken/bachelors-thesis_code.git"
      }
    ],
    "sources": [
      [
        "__init__.py",
        "_sources/__init___d41d8cd98f00b204e9800998ecf8427e.py"
      ],
      [
        "em.py",
        "_sources/em_42219c3660e0d4213b9d85f7c4f7b37e.py"
      ],
      [
        "experiment_pendulum_damped.py",
        "_sources/experiment_pendulum_damped_70e127f1d9ac784a69ad73a74e3306ea.py"
      ],
      [
        "util.py",
        "_sources/util_584d431d1c7c3cb4f42650f6fda305c5.py"
      ]
    ]
  },
  "heartbeat": "2020-08-12T07:18:09.946417",
  "host": {
    "ENV": {},
    "cpu": "Intel(R) Core(TM) i5-4690 CPU @ 3.50GHz",
    "gpus": {
      "driver_version": "450.51.06",
      "gpus": [
        {
          "model": "GeForce GTX 970",
          "persistence_mode": true,
          "total_memory": 4041
        }
      ]
    },
    "hostname": "H97-D3H",
    "os": [
      "Linux",
      "Linux-4.15.0-112-generic-x86_64-with-Ubuntu-18.04-bionic"
    ],
    "python_version": "3.7.8"
  },
  "meta": {
    "command": "main",
    "options": {
      "--beat-interval": null,
      "--capture": null,
      "--comment": null,
      "--debug": false,
      "--enforce_clean": false,
      "--file_storage": null,
      "--force": false,
      "--help": false,
      "--loglevel": null,
      "--mongo_db": null,
      "--name": null,
      "--pdb": false,
      "--print-config": false,
      "--priority": null,
      "--queue": false,
      "--s3": null,
      "--sql": null,
      "--tiny_db": null,
      "--unobserved": false,
      "COMMAND": null,
      "UPDATE": [
        "max_iterations=100",
        "g_optimization_max_iterations=1",
        "latent_dim=3"
      ],
      "help": false,
      "with": true
    }
  },
  "resources": [],
  "result": {
    "estimations": {
      "A": {
        "base": {
          "dtype": "float64",
          "py/object": "numpy.ndarray",
          "values": [
            [
              1.011426289020319,
              0.01523600475045008,
              -0.01794231445773256
            ],
            [
              -0.17020192307190232,
              1.029929727933148,
              0.06770857222075458
            ],
            [
              0.1672957045788612,
              -0.04057539870963781,
              0.9414728256358459
            ]
          ]
        },
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "shape": [
          3,
          3
        ],
        "strides": [
          8,
          24
        ],
        "values": [
          [
            1.011426289020319,
            -0.17020192307190232,
            0.1672957045788612
          ],
          [
            0.01523600475045008,
            1.029929727933148,
            -0.04057539870963781
          ],
          [
            -0.01794231445773256,
            0.06770857222075458,
            0.9414728256358459
          ]
        ]
      },
      "Q": {
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "values": [
          6.133068973275055,
          0.37091465304054616,
          0.7530505582775392
        ]
      },
      "R": {
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "values": [
          0.3370489185607985,
          0.059454743830954955
        ]
      },
      "V0": {
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "values": [
          [
            0.018945525049071953,
            -0.0010322790024238837,
            0.0026405048977374175
          ],
          [
            -0.0010322790024238837,
            0.002546870200131779,
            -0.0024281512573616354
          ],
          [
            0.0026405048977374175,
            -0.0024281512573616354,
            0.00796365868019494
          ]
        ]
      },
      "g_params": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          {
            "_metadata": {
              "py/reduce": [
                {
                  "py/type": "collections.OrderedDict"
                },
                {
                  "py/tuple": []
                },
                null,
                null,
                {
                  "py/tuple": [
                    {
                      "py/tuple": [
                        "",
                        {
                          "version": 1
                        }
                      ]
                    },
                    {
                      "py/tuple": [
                        "_pipe",
                        {
                          "version": 1
                        }
                      ]
                    },
                    {
                      "py/tuple": [
                        "_pipe._pipe",
                        {
                          "version": 1
                        }
                      ]
                    },
                    {
                      "py/tuple": [
                        "_pipe._pipe.0",
                        {
                          "version": 1
                        }
                      ]
                    },
                    {
                      "py/tuple": [
                        "_pipe._pipe.1",
                        {
                          "version": 1
                        }
                      ]
                    },
                    {
                      "py/tuple": [
                        "_pipe._pipe.2",
                        {
                          "version": 1
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          },
          null,
          {
            "py/tuple": [
              {
                "py/tuple": [
                  "_pipe._pipe.0.weight",
                  {
                    "py/reduce": [
                      {
                        "py/function": "torch._utils._rebuild_tensor_v2"
                      },
                      {
                        "py/tuple": [
                          {
                            "py/reduce": [
                              {
                                "py/function": "torch.storage._load_from_bytes"
                              },
                              {
                                "py/tuple": [
                                  {
                                    "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0OTU2Mzg0cQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM5NDk1NjM4NHEBYS6WAAAAAAAAAEprEIgQ0Ny/Vlzsww2f2L8CB7l4grLWv71XQa5dK8m/XZNitJ0D0D/8CQHTM3Obv4BdtPK7veI/tLHDNa+Q2j9X3FGoBdHVvw7pGLaRlti/dq8hiBJY2b9V5w/mplywv2kEoIVRCNg/GYDStV1h2z9z03NdfnGvv++qCqx4V8i/GMtvwqF61b9kKYDHIFycvxgzDi8y7ZG/urDic7Uwy79A/VEs0APLv1y7rByi3py/Nsf+fO2Cwb8FmllX+TukP+uNLr6WEcK//CSmsiyL478j8UTdPD3hP0X00g1Mtdm/NSwNWrSk0r8E9bZxU8DYv7iyLErzUMW/vG1d6qh9qL/SpSwAjaDGv7vWfOXoY5+/AIXv4J91sj9JLUYQ/MCbvxEctxKutrO/jAZNwGkH179fSipZmg7XvwZW5FSFCdI/CJuodK/34T/UDnI7l/vDvxMx6ExZRKa/lalZnqA20r/T3bQiAFbZP+cJPWQhbNQ/Q2ECEWbnzb/giDIH9hXgv0I0b3feKM0/nGTRVs/1qz+DAsR//UHHPzy3w/w9grK/cvvMnvbnu7/twvQAuHTQv+OV3o5uWbk/bacw+YKi0T9axGA+GnHfP2UqSKDYrHu/Py5YlB+dsD/v09LgJazBv4S66/TdAt+/exA1Sc/nuD93hy0gKavdv+SCPXPrn4Y/eyvXi91Gzb8vTkFVZbG3P9/sPg+ArMA/aV4H8nyE3T+hWn7iA46yvwmI5hGuxrE/esUBKzy1wj+Z1qZyjBLSPyMbrsxfNtO/uptmMmtO3L90GVSApii7P5hKrGxK0dO/Ha1An/aXzT9XPnUDn3DPP6X4AW6ApdW/oswp6N9zvL+EVSZHWbfRP5mR8vdYvpe/GApsdbB6yj8hlLwbTeTQv/L0ZduB1dc/1+gIjOV84z+uSeiVKWvSv3EcgAWndsC/sSIxHmwq0r+sDNummK7kv3tQTNiXxeE/b3QWFa8uzD9dULBMhb7fv6RK2NiZc70/ehQnOxDAyj8yeJvgeK/gPx8NmVYlBHc/nZ2ZZWSVlD8fqW0QXPXgv4I0QbVAtsg/uJw5QT2X37/3y4EfAEugv2sfp7lyP9Y/aiNO5wD/o7+JKbtjJY3PPw5kTnVCOZa/QajuoMLQtL8vhAx01hudP8CYE4+/Aao/M0FCcuFyyT/xZDxoVleXv3A9DmezR9a/lESYE1Gd1r9fLj3KtvzOv1mLjnBPXdW/ANNi8Fn42D+Lco3V1NrnP47fS1e7Fas/AIUZHx62zT8b6Ozr3HfTP4sn2p8f9dY/cgHgrwzS17/f0h7VbpjYv1XlRKmQuLY/6nk5dO1QtD8v0QZa79vTP6ydNlgeGr6/oFcNHVL51j+omZQTpQzPv9jjQP3al8K/HjQ0QF5M6z9QyaFUoofLP0UxZzEdiaO/d2fVSCmsq7/LOfR1NX7Pv4QebBETJeA/vod8gxEHrz/XbC05T1fSP0vvf3aVEb2/EE2lc+psxr/JgFJDdVrgvxU5r0V4DrG/w8QxtXdys7/cW3xlT2Hbv4idqpOk4La/J/cS/X1fwz/gh3j0W9KxvyuuQZ1fJKK/yzmb3gpCur8CBbCsz52rPw=="
                                  }
                                ]
                              }
                            ]
                          },
                          0,
                          {
                            "py/tuple": [
                              50,
                              3
                            ]
                          },
                          {
                            "py/tuple": [
                              3,
                              1
                            ]
                          },
                          false,
                          {
                            "py/reduce": [
                              {
                                "py/type": "collections.OrderedDict"
                              },
                              {
                                "py/tuple": []
                              },
                              null,
                              null,
                              {
                                "py/tuple": []
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "py/tuple": [
                  "_pipe._pipe.0.bias",
                  {
                    "py/reduce": [
                      {
                        "py/function": "torch._utils._rebuild_tensor_v2"
                      },
                      {
                        "py/tuple": [
                          {
                            "py/reduce": [
                              {
                                "py/function": "torch.storage._load_from_bytes"
                              },
                              {
                                "py/tuple": [
                                  {
                                    "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0ODA3NjY0cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5NDgwNzY2NHEBYS4yAAAAAAAAAF45Al4cLNq/QTZpqzfRxr/DUwnDm3vYP3ae28xaqbi/Ws2t1rfJsT+yqnq47hvpP0+OEsaHH9M/E0F3cl6g3T/uMzw+5NPTP3b9LhHGP8O/VGJy/Stk4b+aT/jru6TjP/FIUBfdkbi/0r3Ey/QQ5r9H+2kenmXkP1wmiISnnOE/1/fGHrx34z9AbqX5ubPrP/QOE9x5gby/yCf/oCD12b82H8gEySPdP3jPJfu3odg/QAKrgJQZ2j95sh6tmBrMP8Vw4IKERMG/4vw+GpIZ3L/OH5BHC7Pvv3QCT6mh+ua/0OAvI5010b9l2kUnuFK4v63xwwPlv7o/LQkiLShhx79yuiMFuwfjP03i6rTPHOo/f/pY65Mg0L8WX/6sA/SxP+5Ng60Aw9E/6++VxbAK3L+Z21+53gWkP+HdJkgiAsm/83QhwAEi1z+dK0rZh3vQP6q1NrLj1te/bAaFIr7G27/LHyNBoJTWv8aBHH3dKNG/A60oBoWoxj9DPrVm1Jmqv8JI8iNzJ8s/GpSX1kDz3r8="
                                  }
                                ]
                              }
                            ]
                          },
                          0,
                          {
                            "py/tuple": [
                              50
                            ]
                          },
                          {
                            "py/tuple": [
                              1
                            ]
                          },
                          false,
                          {
                            "py/reduce": [
                              {
                                "py/type": "collections.OrderedDict"
                              },
                              {
                                "py/tuple": []
                              },
                              null,
                              null,
                              {
                                "py/tuple": []
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "py/tuple": [
                  "_pipe._pipe.2.weight",
                  {
                    "py/reduce": [
                      {
                        "py/function": "torch._utils._rebuild_tensor_v2"
                      },
                      {
                        "py/tuple": [
                          {
                            "py/reduce": [
                              {
                                "py/function": "torch.storage._load_from_bytes"
                              },
                              {
                                "py/tuple": [
                                  {
                                    "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk1MzUwNTYwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5NTM1MDU2MHEBYS5kAAAAAAAAAKdbjSx/d8U/Q4AnOjZft78h2lsUWjCtv8lwC0kzUqG/ZVA7wrdegL85GT66zvLIPzbftNENmcU/QTNb4JWHyT/fBR8a2u6zv7AKgOfJbnu/s4V6YO9YxT/fHLnXLxvXv+rGladoVZQ/4S4jLjRawb/IBVpXs3u2v1on8rxjGcM/QnN9JzbLaL8COsEwuy7IPzNSZIZqO7i/L9s4EZNFv79cq/J02N+zv7XmEmEcI8s/7Q4gKbKwlr/k7bPn4F/JvzsB+scN2r0/4BjU54S6eL8wI4sfU26mP+A0a1yScLq/eZFhzz/ZrD9gr6aols6+P3xKWNRA7bg/BbH8Gjqqu7+TmyDUsFukP4U9DSfbnsA/W/JLXwYEvz9r0pfr7+LEP0Wz2jaNk9q/yyjp7s+gxz8MHvvzTNG5P5Oii/hq9KK/7p9epqSttb8f16R+Zxiuv6I1ihPymK6/eZdzRAbTy791GXWn5pe6P7sI4SBKfJq/GxLiDvYLzD9Ua3AZJc/BP3xNKZV0ZKW/mNTcvybe3D/vbvOqhtC8v329FLgjKrI/9JPb+8OzsL+T6/rs4R2av2I1mgH8MLG/rtIVeakMnb9Q7IkUKXeyv8UkAnzL8YG/tMnTI2e+mL+saisJ+bK4v6IMM3iGj54/pavglVmEwT9lgDUwX2O8P1vIxB07SoK/Ace/QrQnwj/jRiT3F0HBv6wSWya9xqI/8T0I8Gewsj8GOd2YiRm4v3UToyyIWMK/FZQeXivbrj9hBh2m3BO8v2UAHcGoH7M/ZHuGUUBlsr+mLgO7G/uXPxRoBDA5dLe/WCi9F7BZwT+5ifg7dxjAv0aBV1oDZqa/SGrO0c6juT81SC912jOnP5fasppu0rm/lXw1RSfDwr9G0fWBchmov4RD9vxGZaq/izxPdOmhhj/4m/XndLigPwSrXmtK9Zq/MOvx5H8+sz9V0//xVCTBv1j0fHOijYS/CnQuFSOjl7+CmnxKNbS3P8XFxAn7dbE/WwvSnztRrr+UWwtMaSVzv2bPyodovMI/PgwGg376vr8yN9figyGyP2iRK9HgO7o/"
                                  }
                                ]
                              }
                            ]
                          },
                          0,
                          {
                            "py/tuple": [
                              2,
                              50
                            ]
                          },
                          {
                            "py/tuple": [
                              50,
                              1
                            ]
                          },
                          false,
                          {
                            "py/reduce": [
                              {
                                "py/type": "collections.OrderedDict"
                              },
                              {
                                "py/tuple": []
                              },
                              null,
                              null,
                              {
                                "py/tuple": []
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "py/tuple": [
                  "_pipe._pipe.2.bias",
                  {
                    "py/reduce": [
                      {
                        "py/function": "torch._utils._rebuild_tensor_v2"
                      },
                      {
                        "py/tuple": [
                          {
                            "py/reduce": [
                              {
                                "py/function": "torch.storage._load_from_bytes"
                              },
                              {
                                "py/tuple": [
                                  {
                                    "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk1MDMyNDE2cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5NTAzMjQxNnEBYS4CAAAAAAAAAHEiMtKcQsk/HVvQKq0ir78="
                                  }
                                ]
                              }
                            ]
                          },
                          0,
                          {
                            "py/tuple": [
                              2
                            ]
                          },
                          {
                            "py/tuple": [
                              1
                            ]
                          },
                          false,
                          {
                            "py/reduce": [
                              {
                                "py/type": "collections.OrderedDict"
                              },
                              {
                                "py/tuple": []
                              },
                              null,
                              null,
                              {
                                "py/tuple": []
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "latents": {
        "byteorder": "<",
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "shape": [
          1,
          3,
          500
        ],
        "values": ""
      },
      "m0": {
        "base": {
          "dtype": "float64",
          "py/object": "numpy.ndarray",
          "values": [
            0.034245863052912134,
            0.22457597697589793,
            -0.5381073535727923
          ]
        },
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "shape": [
          3
        ],
        "values": [
          0.034245863052912134,
          0.22457597697589793,
          -0.5381073535727923
        ]
      }
    },
    "input": {
      "observations": {
        "byteorder": "<",
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "shape": [
          1,
          500,
          2
        ],
        "values": ""
      },
      "observations_noisy": {
        "byteorder": "<",
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "shape": [
          1,
          500,
          2
        ],
        "values": ""
      }
    },
    "iterations": 100,
    "log_likelihood": {
      "dtype": "float64",
      "py/object": "numpy.float64",
      "value": -1920.3008943706986
    }
  },
  "start_time": "2020-08-12T07:16:03.503802",
  "status": "COMPLETED",
  "stop_time": "2020-08-12T07:18:09.944808"
}