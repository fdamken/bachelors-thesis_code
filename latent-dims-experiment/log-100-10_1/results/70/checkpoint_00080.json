{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9972254629804291,
                            0.014461851558246796,
                            -0.015889544790210333
                        ],
                        [
                            -0.18471826276726874,
                            1.040510049924081,
                            0.07279578100434889
                        ],
                        [
                            0.15932441166923333,
                            -0.0418796710645124,
                            0.9437385178488149
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.9972254629804291,
                        -0.18471826276726874,
                        0.15932441166923333
                    ],
                    [
                        0.014461851558246796,
                        1.040510049924081,
                        -0.0418796710645124
                    ],
                    [
                        -0.015889544790210333,
                        0.07279578100434889,
                        0.9437385178488149
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    4.712556646179297,
                    0.23834469997755534,
                    0.5441425356165672
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.24669696414627287,
                    0.10796868211283209
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.023292361496266397,
                        -0.0005429757892273619,
                        0.004237461249427834
                    ],
                    [
                        -0.0005429757892273619,
                        0.0028310822178530953,
                        -0.0022486241169398374
                    ],
                    [
                        0.004237461249427834,
                        -0.0022486241169398374,
                        0.008823568228920886
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0OTg2MTQ0cQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM5NDk4NjE0NHEBYS6WAAAAAAAAAK2bmpu+F96/Ms1OJmjK4L/pXQ5l1GrVv5raoVHDQ9S/3Tj08afa0z8lOlZ8HQWLP2CB3Gljzd0/UJVL2GEf4T8elvWTV4nUv962G7aRlti/oIoeiBJY2b8X2QLmplywv1Y/noVRCNg/WCHUtV1h2z+Ur2hdfnGvvy5OnJl4V8i/zISzKAjh27/aHeeOQzOJP0KgW7sJNKO/NXeu4rYn0L/48h8s0APLv1CiNh6i3py/L9X+fO2Cwb+cG19X+TukP2R80wI8RtO/H7Ucx9rS5L8DwoyRHevfP5Umnvedbdi/cRJ6W7Sk0r+5PMmFAQjav/ihrEnzUMW/Au7qL5N7xb88nYpSRb/Lv5tLeOXoY5+/rQ3u4J91sj9KVEoQ/MCbvw3vZxKutrO/6Z+NPSz937/QdOFYmg7XvwQzRASa1ck/LfCfnQuH5D+M4HoSO2zBvwH74UxZRKa/K6BanqA20r+IarQiAFbZP+PvO2QhbNQ/20wFEWbnzb8aZTcH9hXgv9n9hXfeKM0/VfaNVs/1qz9rxKt//UHHP4P8NAI+grK/Bk1Z8msxyL8BFrpXcJPVv4qLg5lvy8E/QpmhwU9v3j+d08DBBcPXP0XqjqDYrHu/1fh3lB+dsD/5zc3gJazBvxfL6PTdAt+/RNkoSc/nuD9udzAgKavdv5ew4XLrn4Y/23vXi91Gzb9YKUNVZbG3P+ZHPQ+ArMA//V8P8nyE3T/85nbiA46yvxkwwbQeBLw/xWCn9giCzz+PY+2d6KHUPwUO5KMDp9C/Ra06W8fd3r9tnAF7pii7P/FQuGxK0dO/8VVjTT55yD/DJvfA5lHKP+DPcKuKfNm/IzhH6N9zvL+OCJKEY47VP0iLAPhYvpe/aXx4dbB6yj9Ax7obTeTQv6XgY9uB1dc/kPIJjOV84z8UTOaVKWvSv/BK9FZflcW/uFPGctKQ2L/bvtmmmK7kv2X3weJuaeI/WdZMQAyluT9oVw+yGYPgv0zhuLiF2MM/a2Lqp3id1z/fncWYlc/ePwdx8VMlBHc/Wgk8Z2SVlD9h2lQGhVHgv3pMKQf51M0/vphNGOEH3b9MTGQfAEugv7V9pLlyP9Y/qZU+5wD/o78GAb9jJY3PP7DhL3VCOZa//WvL8nrvub8TZwV01hudP1ySHI+/Aao/eFBDcuFyyT94ej1oVleXv7J0bWyzR9a/HVOSZQm8279Vv9ehWm3MvzDGmXBPXdW/j5z3yP1o1j+v84nV1NrnP9FjcVa7Fas/YrlZsn8Y2T+NqRDs3HfTP7H9xsh7hNk/8fZzgbBC1b+nyoSDtnnTvwNyw6cAe8A/EhlwXudlxD8YFFlUnSPVPw2GOFgeGr6/ZfIdWlzQ2j+nIIoTpQzPvybYPf3al8K/jDg6QF5M6z/QdV5TLVPQP1GHdDEdiaO/hZhwSIUTuL+FEBV2NX7Pv0qO2BETJeA/1HqHghEHrz8yIdE4T1fSP0VAiOQmGMG/VKQonNuc0b9u/H9DdVrgv8bqzEV4DrG/JvTs98Cky7+DiGNlT2Hbv/XTtJOk4La/57oGJtruxT/WKXX0W9Kxv+HvdOi7m4+//0aHMMNgv7/CzK6sz52rPw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0OTA3NjE2cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5NDkwNzYxNnEBYS4yAAAAAAAAALpxSl0cLNq/1F2frzfRxr9aVG67m3vYPwqTV8xaqbi/k83V1rfJsT/3a1yuF3joP7H4a8aHH9M/ZC5/cl6g3T9EDElnQGPWPzJHiQ3GP8O/GMkv8lTA4L+jmPjru6TjPysu8bokc7O/5/owokbJ5L/W0GAenmXkP+1XdYSnnOE/f6vaHrx34z9cer9V4w/rPxDe7hHPXdG/3Bp8tc4827+WD8QEySPdP/Sqa0+Ub+E/Uw0LgJQZ2j9ygfOCPIvJPydjjYGERMG/OgmUGpIZ3L9Gsw89NA/vvyeoXqmh+ua/+2UZI5010b+iVJx3pQinP7han2Cd3r8/9RIv22B92L96uVcEuwfjPyeBVaAh1eg/lMtY65Mg0L/XckStA/SxP1yQd60Aw9E/PX2LxLAK3L/+ZnLS3gWkPwX1tEciAsm/paizXpu70D94UWgwXfi4P4WArBdKPd6/MMPOv1dg1b+p+Xvrpo/Dv7qm4dZews+/HrVgDgVK1D9aNuzQWoq3v/MzG/wWmMg/1Y7vrORj3L8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0NjQ2NDk2cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5NDY0NjQ5NnEBYS5kAAAAAAAAAO2RjSx/d8U/mpkoOjZft78zNRiundW4v/7QKEkzUqG/XGFMTwpvsj/PND66zvLIP+/UtNENmcU/QHxb4JWHyT8qsxsa2u6zv9xif+fJbnu/bV55YO9YxT9RSDeaJUTTvzbRladoVZQ/eNcjLjRawb9//nsF+1yxv3+i87xjGcM/Uqf1gXphkT/AJcEwuy7IP2uWZIZqO7i/rv+WEJNFv79W2Uyiz0Sjv/FQE2EcI8s/TJkjKbKwlr9g5LPn4F/Jv5E0/McN2r0/tQ7s54S6eL+uLocfU26mP8XeQq5Kj7+/pYmDzz/ZrD+Q+Kaols6+PydUWtRA7bg/89T8Gjqqu7/YmifUsFukP6X0DSfbnsA/lENdWF8Rwj8Sc5nr7+LEP7pL2jaNk9q/0TDp7s+gxz9ZaPnzTNG5P4Doivhq9KK/fHRdpqSttb9vTqR+ZxiuvyhqjRPymK6/W+NzRAbTy79dwXSn5pe6P3IQNLSVe6e/ziHiDvYLzD/ke3AZJc/BP58QIpV0ZKW/2tLalspO2j8LSfCqhtC8v14SE7gjKrI/M6fY+8OzsL8t7+ce6cSwvybyBXySRsC/tPkKeakMnb8ZnYcUKXeyv6uV5XvL8YG/L1TVI2e+mL/iLigJ+bK4v/11sHiGj54//JqulVmEwT9XtzcwX2O8P8Og2x07SoK/kh+0axC3xD8nnCP3F0HBvwtNaSa9xqI/rKMK8Gewsj/tgN+YiRm4v0jhJ1Xk58S/w1IEXivbrj9yoRim3BO8vybQGMGoH7M/062IUUBlsr8GM6Wb0wFsP9//BTA5dLe/VnG8F7BZwT/tgNK2i8bHv7zbPloDZqa/457Q0c6juT++jTJ12jOnP7wltZpu0rm/o40zRSfDwr84FvGBchmov3uz4/xGZaq/ahaYdOmhhj9beeXndLigP2XBT2tK9Zq/BYHw5H8+sz9l+wDyVCTBv5RZcXOijYS/BN84FSOjl7/CiHlKNbS3P6ZQwQn7dbE/gyfNnztRrr/FNSxLaSVzvzD0y4dovMI/d9QDg376vr8CtdPigyGyPx/VaH8oHbU/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0NjQ3MDcycQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5NDY0NzA3MnEBYS4CAAAAAAAAALUGMtKcQsk/unDLKq0ir78="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        0.004953690360004773,
                        0.23053212560191472,
                        -0.4673169630294354
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    0.004953690360004773,
                    0.23053212560191472,
                    -0.4673169630294354
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 80
    }
}