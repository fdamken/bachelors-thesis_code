{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.980310489398141,
                            0.006251719984752335,
                            -0.028733637309864512
                        ],
                        [
                            -0.1291925980743709,
                            1.0400415640344747,
                            0.02793261086017211
                        ],
                        [
                            0.15871350905261342,
                            -0.05330840972605611,
                            0.9504773414561668
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.980310489398141,
                        -0.1291925980743709,
                        0.15871350905261342
                    ],
                    [
                        0.006251719984752335,
                        1.0400415640344747,
                        -0.05330840972605611
                    ],
                    [
                        -0.028733637309864512,
                        0.02793261086017211,
                        0.9504773414561668
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    4.397434502572479,
                    0.31288740926426317,
                    0.5895403296388263
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.25273377315630935,
                    0.08782139486360592
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.05979157373552327,
                        0.013784435357501379,
                        0.011562996328559005
                    ],
                    [
                        0.013784435357501379,
                        0.009072295109595355,
                        0.0005085346329922005
                    ],
                    [
                        0.011562996328559005,
                        0.0005085346329922005,
                        0.012777804758991151
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk1NDAzNDI0cQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM5NTQwMzQyNHEBYS6WAAAAAAAAAC1Po0kG+di/X0AkWZv9479biHHf6Bjdv2sh7KJ7Ytm/Id623PmS0j/c0LIrPfq8P84acVS1hdw/p/2P4jjD4T/R0mAiGn/dvxHd5wdKtd2/7VGsSQiB1b9nxOHlplywvzjfF5r/T9k/eBpboa8Z2j8KypuAd9e0v8kYtlyf9rG/j9MJR7cj4b8b6LsuXe/AP76h3cF4bWQ/7rHTc7Uwy79C/elnoKDSv2pHTR6i3py/IxBZqCLnvb94mEZnEf2TP1jdCLhay96/7+3LidD74L9cPzTdPD3hPw0hnQxMtdm/OkP7MlgV0L/jpCaHAQjav8b1qU3zUMW/WLCeT+hC1r+pY/1bRb/LvzK/ceXoY5+/g03s4J91sj80ZKQiaxh9v25bGnIUapG/8rgilfKN4r/sITgbkDfTv4NfeIqFJ8I/nhTLp+Iq5T8KQUc7l/vDv5i63kxZRKa/gUJcnqA20r/GqSk3rp3aP56yLo19+9Y/dtwB6AlYy7/FGw3mj5zdv8vQVHfeKM0/XJUVVs/1qz95HXGoWdHJP+5FILWPfsO/UV35w4Ll2L+XblinWzvJv1OaZ8nLWsQ/cIMRUOVB5j8p1yJBSj+yP8Pt7W8XZpu/I0d05te7tT/CdKRvkzm+v/nQmuAvu92/6IoH+xbJsz+DU6Q01/Levw/9qHDrn4Y/6Fu6tDnWz7+bZVVVZbG3P5o0Bc1HOrw/kqBCBivM3j9hx/99JqGgv2gwocAoVIM/OaU5cC0d3z+EMzpg3srQPyQ7P7ix7tG/uCmlRhmW3b9sAmKPC7PCP+Cw24+mYNa/2ipIZKkT0D9yUCFEw8ywPxx77b84xNq/8r+UwbwGy7+j3VXWG63aP01p3h+dHKa/RjN2ngwKzT8OvzIw+yvSv5cg3u8vHdk/MuzNgQ7Z4j+nzV2q17LTv2Q7y3+7JMi/lnmIhiFn4b8qPZ5+PB/iv1oCLsPpfeA/KeismMaRpD8QD/VPhb7fvw9MRAw+98g/hMONyfnY4j+GvHQgfVfMP1c3CptcmqG/wVHWepPFrj/k5w3Q/8vcvyGKLQf51M0/q3JOGOEH3b9ilSkgAEugv0+qHc4gh9c/5o0XhyCDk7/J+806yf3MP5QcJtkS5lu/9K3hoMLQtL+ZnPVY6kGBP2ARII+/Aao/9Z9gSYXjxj/aPigFqeNmv95CdENXuNO/rA5q+uVY4r/VMpvfbyzXv4kicxQ3ceC/lzbczgWpwD83v86DHLziP/QH1N53Hai//A/EOaby4j+hYeczSbLMPxwyhAaGW90/IxD15NuZyL/iD1VuCDLSv33tRtdcCsM/hGaiT2Rw1D+zp4Yb5QTQP5XSBH7HK8S/3b+bbgoY3D/U7C0RpQzPv6ru3E6Ttse/XBkRNoeo6j85HVp+/hbOP/GwBhtZl5K/fTSQSSmsq78aBLL4JJbTv7iAVQ94At8/BDMoeWAYlT/qOjRN/Z7TP/IlszXfNsa/qvfMPEza27+Kr5cN1gbZv9hXDwn1JHu/2BLInwiGxr/3J1mOq/Ddv2xmy+Vc/7u/snnUTjZ+yD+BBQBDrVOev19ibei7m4+/G1A1wb0/wr+E9qysz52rPw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0OTU1NTUycQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5NDk1NTU1MnEBYS4yAAAAAAAAAAyZaSDAnNe/+fKjojfRxr+D2p3c9wrbP/6pxHOiirO/HsPOKHDotj8XR1GGu+jlP2yC/p4rkNA/RpMLXrBY3D9nlDNTkhvVP0fPIQnGP8O/17iQSDlD17+dVCr2kkjkPymAT9zYqKy/tPdpoUbJ5L8jgxUUx8HjP959GHD5VOA/0wE0H7x34z+TtmoTsNznPy45kvogFtC/N0yTtc4827/+AlAFySPdP7BwEZd16uU/JHyVa+bR2D/5wEZc4PvGP/EXq/iY8si/sHU+G5IZ3L/VAuLM9gTov8KR5Z7KVua/vBAEHd7bz7/fnnc0NP+/Pz94lS5jncc/NeoCuATu1b9nUhrxDMDhPzeiC6Ah1eg/h3K6/0Fo0b+SXxq3lqqpP+SP68GuCtM/y+X0afjr1r+muqq7NpXQPz/gwUQiAsm/A2tc8qr4uT9x1gE2o9mzP/tO+RdKPd6/5irMvldg1b9CNczb982gv+aJy60CM82/xFuf5ai60T9y+hq45ePAv6L1xvsWmMg/S+pMmDYc278="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0OTM3NjMycQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5NDkzNzYzMnEBYS5kAAAAAAAAALaHmAMj6MI/a44nOjZft7812DRc5bazvzb7tez6I72/EtGOopnlwD9SrkaRcmPGPwaxvaixCcM/YT9Ytzn4xj8ny/1rkg25v41a3OfJbnu/+yp9N5PJwj/PMcOFd/zRv2w1vRFQvCK/Z5hYCrCVvb9XszQF+1yxv7hD2eW/qMU/TeTLg3phkT8OUMkHX5/FPzMfdjSyHLO/hBkwsSUywr9t+KaTBOeWP7z6HDjAk8g/UbaDZhBFkj8qXLy+hNDGvwqD/nVVu7g/mrK/54S6eL9nYnf3xGGYPw+F4ahd5sS/ODNezz/ZrD8FXrhW3q+5P7ZnPyb5C74/x9sNyYGLtr8L8zfUsFukP/CDNPz9Hrw/cExiWF8Rwj+c/0Ls7+LEPxTP8eTUdNW/p4XwxXMRxT8+mhWilLK0P++zX6n0bZG/LRMmpqSttb9e9cLa9tqjvxXqvW+BW6S/pXV/G6pDyb+9DXen5pe6P7q8Q7SVe6e/Dpnq5Zl8yT+l6vfgkX++P3rfL5V0ZKW/wcoJgBwH2T9NG2h+n/fAv77GXMzWFqo/3e7X+8OzsL8Dpu8e6cSwv8RoBXySRsC/sNbceKkMnb/Q7X0UKXeyv0TUnRP3A4c/4YTVI2e+mL9cnEC3QJSzv4/Ci2JKKYQ/hMFjNYqssz9NvSa+C8HAP1eZIB47SoK/ZoqGD4H0zj/3dWCcd2O9v1StUcotBK0/FpYS8Gewsj/9yOeYiRm4v4TUHmPnVLW/MH25LJTAlD8xbSlUJPW2v+SgADxwxKE/cKWXUUBlsr/V6XHk71q1Pzf07YHxkry/49u7F7BZwT/o8+K2i8bHv6OmPloDZqa/0ZnX0c6juT/3WjR12jOnP/r7vJpu0rm/GMcuRSfDwr9P6yu8A7ibv2N0A1nWJ6C/QoOjpFsjqj/2YKkPEeyJP5oDZ9kVuKe/C3fv5H8+sz8yOPcasbPDv5HXV3OijYS/IOBVFSOjl7+RGov4fJWyPwp+pW+Frqg/ET/TnztRrr+UePDpDWOPP4Cbz4dovMI/6ff7gn76vr8/qsohlwWqP+MFjLqoPMI/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0OTU0MDE2cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5NDk1NDAxNnEBYS4CAAAAAAAAAEMrOqlAs8Y/EPi7Kq0ir78="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.37975913330938665,
                        0.005082606303137253,
                        -0.4214231961493825
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    -0.37975913330938665,
                    0.005082606303137253,
                    -0.4214231961493825
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 50
    }
}