{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9872332066598262,
                            0.005963531097775332,
                            -0.0378498678814145
                        ],
                        [
                            -0.07303752357797602,
                            1.027081176359163,
                            -0.001211236281342202
                        ],
                        [
                            0.13492855331735454,
                            -0.05325447801472394,
                            0.9569874614290907
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.9872332066598262,
                        -0.07303752357797602,
                        0.13492855331735454
                    ],
                    [
                        0.005963531097775332,
                        1.027081176359163,
                        -0.05325447801472394
                    ],
                    [
                        -0.0378498678814145,
                        -0.001211236281342202,
                        0.9569874614290907
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    2.700122054611252,
                    0.454428217256294,
                    0.5881913091282173
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.28679539871388804,
                    0.17113926345561525
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.1410396546963032,
                        0.06275296629728674,
                        0.021556260013308348
                    ],
                    [
                        0.06275296629728674,
                        0.03960523055714005,
                        0.004466272845387448
                    ],
                    [
                        0.021556260013308348,
                        0.004466272845387448,
                        0.020824969445313563
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0NjE1OTA0cQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM5NDYxNTkwNHEBYS6WAAAAAAAAAHFncD8vVdi/GIkz3oZP5L/KXRMJDibgv0B2Nq1SBtq/U/38vXSn0D8kP3hUmYm/PxD9vDUwmto/UnHocfu44j//TZ8s8SLev8qlrv1yEd2/wYLlU98k1r+Cb9EOA+yyv6+oVqTW89k/a/ccl9h12T8ar2j7i4W8vzN9U1d4TpQ/sNq64FC94r/gGl0npjC6P8YCNyhx4Ko/ohd+DE/KxL93Qcua09PVv3q4qHoxoZK/xx5if8ZXu78hl/+HQX+DP4yoWupvW+C/pNOsBOWp4L91UxNYUevgP4cb3RYjWdq/p8oyPS+50L/qDdh8KmTZv08ZYbNZt8u/t6FqRRGf1b+4rmS28wbNv1qAmUF4JpW/AnvbCfwEtT9ZHYdsi4ORv1hnJqTwBcE/kRbAFt7f4r/n2bj+CkzRvyqaMiroOog/BbdcPnzE5j+cC/CHodLHvz5m/vqgJaG/Fq0glMmS0b9BxV5q4dDdP3XbeZdUn9c/oB2QWUdiwr80OITwZkDev8koxYuMcM4/c/X+00OKsD/JIS2Uq4nIP69TdffD5a+//bJzvqtB2L+1x+KrmEXAv6B84aJDGak/XHK+36c35z/5YZocHCe0v/8E4gnE0aK/M6RlDzRLuD+piU3Md2TAvxpB2+oGX96/lJ7+I3NYtj/VHGIqAE/evw6rMdAjBKU/M0DDdy//y7+VGYp+wUC6P6mihPWjyb4/0qcJJoaj4T88H1F/YtizP2J4GKfw/cG/u8+w/+8S2D8sTTr5d2TaP9oMhMKIktK/bbRjPELy3L8ABs71cRnJP3cUmYXPvNW/cgyQboC30D9asrBZgOvDP6aU3IwFkde/szIElJG20L9N7RrMRAnaP64VvXFVO6u/OxH6iV7Cyz9b73E60s/Sv8uJHPoGwdk/lMau/CKH4j+G4p20rlbUv+QfmtmRA66/XcG1KZKk478cC2LlooXgv7UxYlKsc+E/NxE4jhzmnj/cXFM5ANPdv2hCo6s+5Lo/YOQGbmoW5T/VQkLmk0iyP6PkCaKtPKI/UKmNipYvvD82lsKLcKPgv0klF/O59NU/djFQvFFF17/ZtcpDBRG6vz+1W9j3Ktg/0o14KpHAnb9Ic1QmG7bLP3f/fewe/oA/Ywbqd2ZBsr+opk7QZd6SPwdzE+F3IK8/pY3kNNebxT9S1DSJyzOKv628/yTSzNG/dRUFiKhO479grRgSo1/av15rHq7QCuK/bn394rPwwT9WDy3gq37gPzIWpyqROsm/hFX8qeP84T8Djo7P4kvGP1a8ZugAcNs/jF1s0y1Sx7/5Yml439XSv93x2JQ0KbQ/C12JRY3M0z9LbTlYvjLMP39Zf7vRAsi/YSRIUIUs2j/gngTPMwHUv/yKgCw1LdS/cByqc5F/5j8TDvRqUM/MP0c+UO7Qs4C/f0okzXBlsL8TpJsYqoHVv88zEwWhXt4/3UkWHdFVnz95tXNX1ELUPyQtjarIRLC/EXSGW9HF3b8W++TZotPVv7xZVagU75c/vINfYv6uwr/ttlOF1EzdvyJA2Q65jr6/CI1vESynxD8nBkDAKJ++v1TkiEG1QXa/znK6rA/4wL/kEEz/Q16wPw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0Njc3NTM2cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5NDY3NzUzNnEBYS4yAAAAAAAAAAPsVhLp+Na/giG1Yy36wr+d+kHBch/ZP6UOGUtG+7C/8jwqUsx3uT/TMInbcwfjPxcBRq+UKsg/cGTMU9m02z+UdupIu3fUP6dT0vYX+MG/IHEePWKf1r9pX0d7fprkP5mG2cwgiqe/pj/38CdE4b+w3/Vlf+DgP35aH5gRL9w//PD3j/mB4j+3QryRxIrnPybZsmV/Nse/BGBHq/eY2r+WmvT68X/cP5ZwsQez9OQ/pb3+JAVX1D8EC0ql28/TP3NfIQ5HOsq/XhpwT8VM37/qSsYU2H/kvyZqpear0eK/Q+kOCDCUzr83psX+/2XGPwTetEMR5cg/gmmVronZ17/2W0eFir3dPwP6Nu7Z8+U/LUHeCRkM0r+N/iCG25yUP4NzKMyFrtM/1Vixgn3X2L8UUMTau4DSP6z7P1HQScq/rhnf00saoD/YMeQTR0qxP1ZLmffEUdy/KNQPnzSszL/ba5S0yDO1v87dlsKwes6/o0dMFtzt1D9MBaX277rEv/i+YxLF38k/A3X7trsH3b8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk1NTA1MTIwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5NTUwNTEyMHEBYS5kAAAAAAAAAICrG+90oME/dfLzYpLuub+QeieFQUa2v3hcxsOelLq/FTwKt0ctwj+MQMp8xBvFP2gzQpQDwsE/0cXaoouwxT8WeQpDNn62v7PbJDMCyqK/3zj/IuWBwT/Z0p95oFjRv0HCBYjSxYS/Vqlf4VMGu78HbhEuV+yzvyLod9ERYcQ/OpOaJ+uemz8fuEzzsFfEPy4lfQtWjbC/yPqnxdN5w78Nv7abOpKgPwX2oCMSTMc/F2JpCoGCnD8SvkCq1ojFv0mdO/tADbE/sYgfpz07cD/SllWnqEiMPyNGRL0LLsa/LNSoEPz7sD/lV78tgiC3P1UomaeqTcA/sLYUoCX8s7/F+g4maXqpP3wgP9Ohj7k/WoTcbA1Zwz9lcsTXQZvDP4RXOMZPidO/hopzscXJwz/vNSV5OCOyP1vMCBYQwny/jBg3fUges7/uYp4RfXidvx/UpTuSeZ6/U0YEB/z7x79nMIZ+igi4P17eW2LdXKK/iAZu0es0yD9kKgK4NfC7P96zv+Ysg6q/uztSYZcb1z8SleSSTT/Cv/FYVnoe+KQ/ym7PJCBDs7+7cgzsGWusv0HmfpBAjsG/kPNfDg2lo7+DJBjXmc+vv4RrSl+uSFQ/H9bo/+wBjb9qBqDgnCO2vzhJOky5ZSS/BUEdalEQfD89mFVTu/K+P6RpLE0xhVE/Sgeokhce0D/THElzG9S6v/JQRHl15ac/aWAZxwshsD/g2O5vLYq1v/GOGTqLxbK/N5VwEEcGhT9iCiF9gIS5v3038I0o46Y/2zaJepz0tL+2/nu7k8uyP7gMDatNIr+/n/+xtEsFuz+DQXh5ge/Dv7hVWghLR6G/317dqHIUtz/r/3rHklKsP0jTw3ESQ7e/kncOCzrYvb91ynZ5cQJoPySc+6qORqW/g2K9UqMEpT/p10Egv8RlPz9RWSvO1qy/LO3xuyOvsD+Fl3wGA2zCv66wTjorwQK/iYzg4mTLir+hknX70M6lP3rwvR3Nj6M/o/jD+Pm3sb8oJcuX9+6ZP7OrUnO6dME/hkwYWiJrvL8AebLP3uakP72XCM9WhMM/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk1NTEwNjg4cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5NTUxMDY4OHEBYS4CAAAAAAAAACeivZSSa8U/t0VXvrIgsr8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.7714129099527858,
                        -0.2961284921233963,
                        -0.45107342375464465
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    -0.7714129099527858,
                    -0.2961284921233963,
                    -0.45107342375464465
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 35
    }
}