{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9788393763533916,
                            0.012986482047563181,
                            -0.016556341908346612
                        ],
                        [
                            -0.16864112518035945,
                            1.0347982920564955,
                            0.056362511449076245
                        ],
                        [
                            0.13582062214149807,
                            -0.03357825566071107,
                            0.9521767486407755
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.9788393763533916,
                        -0.16864112518035945,
                        0.13582062214149807
                    ],
                    [
                        0.012986482047563181,
                        1.0347982920564955,
                        -0.03357825566071107
                    ],
                    [
                        -0.016556341908346612,
                        0.056362511449076245,
                        0.9521767486407755
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    3.988715850369364,
                    0.18910134869087367,
                    0.4837050770235103
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.2073565920099436,
                    0.1136855274876562
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.031374097792090445,
                        0.0016009855599156495,
                        0.006386128710214451
                    ],
                    [
                        0.0016009855599156495,
                        0.0036158339524989883,
                        -0.0016424666925094339
                    ],
                    [
                        0.006386128710214451,
                        -0.0016424666925094339,
                        0.009914478273343547
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0NTY4MTYwcQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM5NDU2ODE2MHEBYS6WAAAAAAAAAOQ1qnw5LNy/TyKtvwFk4r9xQBuYB57Yvx31Ia1SBtq/3a6C0iLv0T8g1vAacB2mP7wpEV+MKd0/7KR0XU1x4T+FhZiy3HTWv9nWWsBoOtm/Df7efTu02L+o/QR6lZqrvyZpYHt6ZNc/gAkSwDQF3D/vPHoLxlKqvyd4Ahdsw76/Bz8fzKJ14b8Gyjd3auavPw2mZg3CUqi/TSzhsL8Hz78UIQcYIrzJvxgZCmEJjqO/A8qCaD87wL+5Z0+psVqpP6eddXB5UNq/iX+LLUE547/4+z1YUevgP01M5u3Gyde/aD2wUd0A0r8NSn2R2Kvav+Xd/YX9J8m/JTP2MGNX1L9GeVI/l3fKv1JsnkF4JpW/N57tb4fMrz9ybRJaNv+iv7N0PulRJ7G/MdGe+1j04L/YL+o5FSPVv4qvlMeP/sU/5yGVGCA15D+nDPIm6bPCv0hr9PqgJaG/67WYqHfa0r+NuHYYKbLYP4eB/llKyNM/6YV4JRQvz7+3G1iM4Wfgv2dtDYyMcM4/RVhpBBfXpj/VRRtrT/rFP54lXovhNsK/ozF+j0+y1b9ChcItPWDSv7eV64TBg8A/kDvfrHQE5D/GLdZR2FLMP4fYB8ymKJG/VCl2vXsssz9eb0/Md2TAv0VIqOoGX96/lJUoIHNYtj+ImnEqAE/evzX571hRKFE/tIBbdy//y7/Wuzt+wUC6P6NluiMu9ME/EIfS56Xg3D+TJ3ELYB21v1jmRtp6k74/moB0FJ5a2T/QUNNptW7RP8wkp5ksA9C/WLEGUfA53r/OKfajAri9Pwr0c599BNe/NwrIikhQzD/4wIkRkJm9P6/jt7VhINq/c5VRMvoQwr86BDij6HnXP/0q8M3k/aC/61H5iV7Cyz8XSHwRdkDQv1iMJtGqMdc/dA4pEdHO4z80zaeLUsfRvx+XiGsN3ca/yFPUBDYV4b98jDf5UM3hv52ITVOsc+E/5+pH6n6wqT9D35RB3HjhvxFjuKTXkMI/lthsH4mb4D+nbo4A/DXVP9ey2OwUuaa/qsuiCtXSnj/lee2xeuDav1hIr/JKjcw/BU+LIrir3b+FzXxxuGmlvxhrZq+bm9U/5yyRKpHAnb+3oR28aWrQPyRmhIxZO6C/RA3VyR5gt78M3++Lo6yjP2OuCOF3IK8/rU/IXTMryD/3iAuGY8qgv3TOlE0uXNS/8noaayNj4b/xEWtvMiLQv7+A06OCkNi/zMDdr4C9zj/nXkRGEuXmP78d+AMD96U/a0Q5lTW14D/7RK66qUTQP5H+FPyut9w/GFkJS0IAz78E1MZPg0bQv7xYtjWlZr4/kaCORY3M0z8x5KoQvKjQP4IqRC/Ciru/EiiXoT1L3z/2IBDWmjXLv3w5wugsUMG/j2hYxUme6z8a569dBPfQP7h0VoPVp6i/n4DDzXBlsL+rNZHZn6rRv+SeAJf+duA/huG0GtFVnz/lkogueLPRP+7QivjUX8K/84nOM3U227/k4GgXrarZv/QD0m7UnbO/DkGA4xJdyr8PKyZbeL3avxaFxGpIUbS/t5OKESynxD/fzmsduGG0vxWfD5hOC5q/VJ2u1WuHw78IWEz/Q16wPw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk1NTE0NTkycQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5NTUxNDU5MnEBYS4yAAAAAAAAAMp+fGXzz9q/u23mjomJxb8b7vXDch/ZPxCG4qP+Gba/+/z8W7d0rj9Y00QpLCboP9ihXNFew9M/P8pCaIf83D+d/TFYab/VP+B6kR10h8S/tpGmosgF3b9Umhdxp/bjP4gbweSAAra/SnHtHFt35L+Pa3ujibfkP3rIggmT7uE/AVwPpKfJ4z86OfOqSXbpP8eKnwb4udC/0/PJv6Xg279cEuQOoMfdP4TpDRxhPOY/4nrjiWu92j8KhVmT6tLKP6mJ5rqOG8W/WsRT/Awu2r/56fOO7C3svzwugy6NTOe/UrBALXTZ0b/K3AsXIFG4P2UXexm1VcY/+cij4zch2b9W5GmeVKHkP0BBaSUNJ+k/o/WQ9WrE0L/or9kIT8muPxggsrfXZtI/HADpw4eu3L9rT1JulobAPxsgyjJ0use/o/bM3btiwz9Js49Jt4e7P+z2YK8VXOG/k9jDyS4E1r8OVjwef16Xv8g678Gwes6/wv5NBy6m0z/k+uym/vq0v2lhdBDF38k/13QUjl942r8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0NTA5NjY0cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5NDUwOTY2NHEBYS5kAAAAAAAAAATUERjRL8Q/q1cyEdrPtL8ZBBHX+WS7v+AccXHmdbW/6hVLyh4duj/rhcKlIKvHP0YXOb1fUcQ/Iljay+c/yD/KpyLxfV+xv+0hwR0jGZG/Ngr7S0ERxD9D6ot7oFjRv+IMcQfwL4Q/po2oGYYSwL+2bge5PZutvztweai10cE/XgtEeCeQfD+pa0UcDefGPx63bV0OrLW/x/S2nHfqwL9xFLPfJ1OJP0dImExu28k/pJI1CoPmiL/OLzjTMhjIv1GFEk35K7Y//lF1pz07cD/GHXNxC42rP/Olc2tTD8G/FlCNfYe6pz8gBrB/Oj+8P1VrZKvkXbY/0rkF8t0aub/t94QE8XmeP/OEJiVarr4/1JneQ7HJwD+x8a0AnirGP4XvIBgIqNi/7+Js2iFZxj9P9O0cqWC8PyfNN01lq5u/w3JTzwA9uL8v0bQsr/mov1c7osE5eqm/vzj5L1iLyr9tVX5+igi4P30QMwZOmqy/GItm+kfEyj8k//QEd4fAP4SlMUO8RaC/wuIKeEVj2D+MSPiBKkG6v1a+OB6PNa8/++bDpc9IrL/sjPDrGWusv/pwf5BAjsG/HpEt1TjPkr8JICHXmc+vv4wioV6uSFQ/TsvX4+t9ob9hni/gnCO2v6/9SY57ZqQ/+q4dgas8wD/VzS5Zu/K+P6HWyjKOYpO/OUchqRqOyD9XvlDF0/K/v9aMWHh15ac/rrkBGcQ/tT9GltbB5ai6v1k96BfaEMG/sD4VDHO8qT/njSB9gIS5v7FcH5hMkLA/Y7l/epz0tL+08mgvRhyhP0G5/FiVA7q/SyRBAwISwD/oTFLLOQ7Jv1xMUwhLR6G/SZnH+iozvD+Sox/HklKsP6c1rMPKYby/O1a3MHl7wb/SpQIwuvqivxcK9KqORqW/gkYBXmWOlT/bptsreTOXP7IzbsfZt5C/jCb6uyOvsD/Cj3wGA2zCv0jyhrwrwQK/BcSK3EnwoL8Z94Eh2SS1P/iNk8E9za0/skPeTYMyqb8HoVxEWdB1P9d2R5wWBMQ/N9cMWiJrvL9girdzTySvP6r0aKiErLc/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk1MzcwNTkycQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5NTM3MDU5MnEBYS4CAAAAAAAAAIA9tr3u+sc/hDLd2PQDqr8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": "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"
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.060043268546974025,
                        0.1888195217242119,
                        -0.39937665433021474
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    -0.060043268546974025,
                    0.1888195217242119,
                    -0.39937665433021474
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 65
    }
}