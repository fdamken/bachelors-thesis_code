{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9948278477834432,
                            0.013670483655707681,
                            -0.01554704330094853
                        ],
                        [
                            -0.15674816096264388,
                            1.0286791412717138,
                            0.06834470555380324
                        ],
                        [
                            0.13747804790631832,
                            -0.0355811103987457,
                            0.9453932365924693
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.9948278477834432,
                        -0.15674816096264388,
                        0.13747804790631832
                    ],
                    [
                        0.013670483655707681,
                        1.0286791412717138,
                        -0.0355811103987457
                    ],
                    [
                        -0.01554704330094853,
                        0.06834470555380324,
                        0.9453932365924693
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    4.721734465200276,
                    0.24882082676316886,
                    0.5626244298825308
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.20658473591449275,
                    0.09977187342269116
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.021889054007828344,
                        -0.0007658524627160495,
                        0.003780170162254303
                    ],
                    [
                        -0.0007658524627160495,
                        0.0027304141902654497,
                        -0.0023311651942303224
                    ],
                    [
                        0.003780170162254303,
                        -0.0023311651942303224,
                        0.008578452473482406
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0OTQ4Mzg0cQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM5NDk0ODM4NHEBYS6WAAAAAAAAALcYB6aVu96/Jgh+M0up37+HT4ta/cbUv3baqR6QENG/GdKg59A20z/GmacswzWRv4gC0GCMKd0/EAHzSJ8p4D8aBi2eLi3VvyQfWMBoOtm/a1HifTu02L8u7SN6lZqrv5E8YXt6ZNc/hCYRwDQF3D+q7n8LxlKqv6SqH64mn8m/x0RQHjE9278tXNJqEteWPyVNKA3CUqi/PNPqsL8Hz79l+7YXIrzJv0bFBGEJjqO/qH2EaD87wL8pSUipsVqpPxsxrs8IE9C/ORU6TMYk5b8QCFaHRkffP3QrVAJ1Edm/GswGUd0A0r8F7Ld6KmTZvw5VWV6hmMa/UJ+vk1kqvr+Q5fE9l3fKv6ixokF4JpW/ho3xb4fMrz9e+Q9aNv+iv3v9iulRJ7G/4ustHvnJ3L/CoRtjcbLXvx5oiRpIHcs/6KF1GCA15D/wgvUm6bPCvyIz+PqgJaG/G7eXqHfa0r8qOncYKbLYP5fx/llKyNM/+bB+JRQvz7865FSM4Wfgv8KU+IuMcM4/gpG+BBfXpj/VyDprT/rFP7QheLPD5a+/mYQc273pxr9n4X8266fTv4EfDoXBg8A/hAwRjxw82z/Oopr0OPbaP68Q9cumKJG/rz1pvXsssz83UlTMd2TAv/rPrOoGX96/up44IHNYtj9KgGwqAE/evw9WAVpRKFE/rUFddy//y7+ahjd+wUC6P2UPtiMu9ME/zAzS56Xg3D+/rGkLYB21v8CPKDoKVrQ/XKuUkKIbyT8+DtKTEf7TPwHkIa7aStG/Awz9UPA53r+1jfajAri9P+1m83YhddS/xC3BYezAyT+4nbXFlJnLP/SywowFkde/XLAsETwDv79yZ+Vl3qLTP8RK6c3k/aC/GTzviV7Cyz/L730RdkDQv4M7J9GqMdc/eD0oEdHO4z8CrqmLUsfRv0PATkKxTcS/ZLudQZ9d1b8uOAoshADlv05Jql2DF+I/gfwOXpCpwD+y8HosLjHgv/rROwF7AcA/5F5UdkVq1D9yYItlZAHhPxQDTjqd8XG/mqD3CtXSnj//9diKcKPgv12wrvJKjcw/WEOKIrir3b9vSjxxuGmlvx3BZ6+bm9U/RkKvKpHAnb9UcBy8aWrQP9CbgoxZO6C/XOXVyR5gt7+eRe2Lo6yjP+aWB+F3IK8/84LIXTMryD8xlQmGY8qgv/pdu3aK69a/kyi5WjIY27/KdEONrCXLv/L5WWZ4udS/3noH5oJU2D84xadawCzoP/RYwwQD96U/4PUSgUzl1T8vSkL2sxvUPxQSrr6k4Ng/L2Koi4fm1b+0naeNjR3UvyP6VtbsR7k/s7PlH92OwD+yiqxTGDjTP/utQy/Ciru/9KnbT4Us2j9rYgKUKSrQv1dGxOgsUMG/2L1VxUme6z8X0ZFdBPfQP/6YWoPVp6i/9X9pHymEtb8sA5ZhhzbOv3CV9Jb+duA/wUy9MFnoqT9xipcueLPRP/TWCKDxoL+/lqyD/qxiz79lLYfIYKzgv4A8tW7UnbO/hwv5u7bNx7+D6zNbeL3av5/SvmpIUbS/tJSMESynxD8A7mkduGG0vz0SEZhOC5q/pDWPB2fRvL8ySE3/Q16wPw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0MzY3MDcycQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5NDM2NzA3MnEBYS4yAAAAAAAAAPiiumfzz9q/dZPSmomJxb/k2/DFch/ZP4poWfW2OLu/4ajAW7d0rj/HdE4pLCboP2NXYdBew9M/5I9CaIf83D8uo2FxFwfXP40CziJ0h8S/V/iMd0AS4b8lFBdxp/bjP6A2W+OAAra/8eI1HVt35L+lA4CjibfkP93wlQmT7uE/t1zvo6fJ4z8AtvLQ973qP+QdnQf4udC/GoWwv6Xg27+7AP4OoMfdPyW5tGv1q98/JPhjimu92j+G1TOY6tLKP9Q/F5YyjMK/jW84ELt127/+P2XCH2Hvv9E0eS6NTOe/4aRXLXTZ0b+rGvXEoId0vzomQDJBT70/ZZ4Eqi1K1b9YA4CJplnjPwYGdyUNJ+k/n++U9WrE0L/zwI0IT8muPw7GtbfXZtI/l+sQz4eu3L8xjqv3TM6dP1J1gDN0use/r5Z0eiCn0j/kM43XOFPAP1crUOUWCtu/ifM2yi4E1r9QNkpRDfbJv2X5mMKwes6/FF1U3tEW0T/IE32o/vq0v5H9nRDF38k/s11KzGlP3r8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0NzMwODQ4cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5NDczMDg0OHEBYS5kAAAAAAAAAAXdEhjRL8Q/ID4zEdrPtL/cIgvX+WS7v/+mB5vrcKa/PEzHqOuBpT80fcOlIKvHP2cmOr1fUcQ/va7gy+c/yD/AUirxfV+xv0oZtR0jGZG/CRP/S0ERxD+LsgSQTqDSvyWrgAfwL4Q/BgGpGYYSwL+xKBG5PZutv9SxeKi10cE/ccnAeCeQfD9xeEYcDefGPx8eb10OrLW/4q3JnHfqwL+u/7CdNG+2v519mExu28k/OnCbCoPmiL/vMjnTMhjIv7Y/Bp+xSrs/cgprpz07cD/JB3JxC42rP1iWSYXu/7y/pvvCfYe6pz96grF/Oj+8P6/oZKvkXbY/i2YH8t0aub9penYE8XmeP0pNJiVarr4/CszlQ7HJwD/FhB3XQZvDP78hnSy279m/3opu2iFZxj9MK+8cqWC8P/OuQE1lq5u/autSzwA9uL/Vnbksr/movyN7osE5eqm/Sxn5L1iLyr/hcH9+igi4P3FrCQZOmqy/ZGxn+kfEyj/byvUEd4fAP9fZOEO8RaC/R1kZoaHy2j/ryPuBKkG6v5faOx6PNa8/NMLHpc9IrL+q0PPrGWusv9RVp87I/b2/ozE41TjPkr+tmCXXmc+vvzsw612uSFQ/kwDU4+t9ob9buzPgnCO2v4wPP457ZqQ/Amc9gas8wD9XjSxZu/K+P2+/wDKOYpO/bdg4V2Jvwz8JDFLF0/K/v5HVUHh15ac/uW3/GMQ/tT/NT9TB5ai6v5WQuUA2oMO/kSUeDHO8qT+TQyR9gIS5v+OnJJhMkLA/CoR9epz0tL9con0uVnuLP9Ml+1iVA7q/TdxBAwISwD/oukjLOQ7Jv8ijVwhLR6G/dXPF+iozvD+I3RzHklKsP1/0qcPKYby/BV65MHl7wb+TRQcwuvqiv04I/aqORqW/MNobXmWOlT/puv4reTOXPypvfsfZt5C/mVn7uyOvsD9hY3sGA2zCv3vQ7ccrwQK//fOF3EnwoL+lz4Qh2SS1P9tqmcE9za0/zqnjTYMyqb80Df9DWdB1P1JcRpwWBMQ/6PoOWiJrvL8TUb5zTySvP5j6RaiErLc/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0NjMzMzc2cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5NDYzMzM3NnEBYS4CAAAAAAAAAL1at73u+sc/6+bh2PQDqr8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        0.020972387976952195,
                        0.23252721136489726,
                        -0.4850423100321754
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    0.020972387976952195,
                    0.23252721136489726,
                    -0.4850423100321754
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 85
    }
}