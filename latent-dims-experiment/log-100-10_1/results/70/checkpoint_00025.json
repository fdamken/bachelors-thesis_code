{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9808983439411146,
                            0.001270331032824508,
                            -0.0437702062829615
                        ],
                        [
                            -0.07307729955301781,
                            1.0239581480645075,
                            -0.013801608545360847
                        ],
                        [
                            0.13280283807006937,
                            -0.06384673789831015,
                            0.9569133985749383
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.9808983439411146,
                        -0.07307729955301781,
                        0.13280283807006937
                    ],
                    [
                        0.001270331032824508,
                        1.0239581480645075,
                        -0.06384673789831015
                    ],
                    [
                        -0.0437702062829615,
                        -0.013801608545360847,
                        0.9569133985749383
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    1.5486796997538987,
                    0.5728513418151722,
                    0.4186804323100718
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.3093672396965676,
                    0.13885204160240347
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.2991082896189409,
                        0.1805932737069275,
                        0.04289864291772169
                    ],
                    [
                        0.1805932737069275,
                        0.13192372558098428,
                        0.01344051203813823
                    ],
                    [
                        0.04289864291772169,
                        0.01344051203813823,
                        0.041315958518865825
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0NTc5MDQwcQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM5NDU3OTA0MHEBYS6WAAAAAAAAAG/zQZHnc92/8nhPtSrA4b94hZT9bQTfvzvl29Wuldy/ME4fANWgyT8/dQQD4Wq6P0hwvTUwmto/jx/ocfu44j9XCaUs8SLevwt7rv1yEd2/IbHlU98k1r/Y69IOA+yyvytAV6TW89k/JIcel9h12T8iaHR42vDFv2iMNlx/jrk/o+SpwcvR4L/gUvC0Xk+/P3kAS4UAo6A/2ILOBAn2r78FvInri/Lav5MvlnoxoZK/fTpZf8ZXu7/QKTeIQX+DP3QtjPRG/+C/qV54+g0G4L/sQ/ZXUevgP0lQ3RYjWdq/K94yPS+50L819dV8KmTZv6QaV9y1Rs6/nc7vMGNX1L81LHW28wbNvzTWez3fckW/A5vgb4fMrz8gURtaNv+ivzFAqHC90s0/pz6ix1VZ37/whAw8FSPVv7/Bkz+Ec7G/1m7xKyA15D/MPWgUCQjRv1AEvp4RY6u/ijEblMmS0b8TQ+bT9dPgP9KXEIOmV9Y/4d9KgqPxxL8BYRzXuPjcvzUdx4uMcM4/qzIC1EOKsD/8eyiUq4nIP9dunilTqKW/Ekn7vatB2L9TtyhSoCCov6rVeIvvGaq/tZHj0NCT5j/ctHDXWuDGvxVbSMymKJG/eLCBvXsssz9iYED10/PCv7DPS/+0pt+/VOvadSt3uz/j7e0VUgfdv1w6QNAjBKU/19N2TNNvyb/axH1+wUC6P7JZz0yKg8Q/s7LsHK//4D/q7D/goSnEP0bzqXO9ys6/UP7CmYms0T8iE/5KMIPfP3x+hcKIktK/YSpiPELy3L/fU/f1cRnJPxt1ha4rTNi/+ytdi0hQzD/vn1OC3HrGPymx2YwFkde/5J0UlJG20L+LNzmj6HnXP9snvnFVO6u/3DH5iV7Cyz8phHI60s/Sv27YG/oGwdk/hhOv/CKH4j8IBp60rlbUv/Sb/VehL6U/UXlMH7sA479oeFD4UM3hv1djKEjVz+A/+joC636wqT8Rh4w6ANPdv7NXPk5RqnQ/XfvVbpNy5D+L4zSjFkSdvxRjO6GtPKI/n/U1l4M2wz/UBhsDM//fvw5OA0VyE9s/xTB4apkm0r+gyMQEOyfCv6usXtj3Ktg/AkdvKpHAnb/2hVEmG7bLP1iFf6Kj94e/GPz+S1xFqr+Dm23QZd6SP/6GdEL0rrQ/wW+ENNebxT8kqSWGY8qgvx+FwBAkhdC/udiPftGq4r+BgBQ6/+7cvxARmaP5ZuG/rE4QDBCAxD+lq4yDTSbdP5tAk/uuA9O/4C+J7mCT3T/1ZIWwqUTQPxV3T6v2mNc/NOiG/Inhyb+7zYZjMY7Rv0jPA+qH16M/PvxqMd+E0j/GHsZuafDRP3FOHrvRAsi/3UiRZDN02z9ryJ+6hbnSv/8DmZKbk9q/0yi/SjXw4z+xJCVcBPfQPz+4r+7Qs4C/cjQF9nCNpr9m0rEYqoHVv7vxCwWhXt4/UCNZHdFVnz8pv3pX1ELUP3MIRN2hqaI/EqqqMnU227/PMfwUrarZv0fhMKgU75c/2n6qIIwgu7+jDFuF1Ezdv5GV/A65jr6//RF/f+cQvz+BTCfAKJ++v9DqCZhOC5q/uYCKB2fRvL9hDjFR/Hy1Pw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0NTk3MTUycQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5NDU5NzE1MnEBYS4yAAAAAAAAAEDJxiaXQNi/3n65hHl5sb8Z30fBch/ZP0GPDktG+7C/BeU2Usx3uT9rFClSgajfP/2gFsiPu7Y/boCKPytt2j/hv8JIu3fUP6V+0vYX+MG/K5p8URDn1790L0l7fprkPzSDkMz4H8C/FEutfekh3L8Qf+CO9OndPwI1VG+1n9k/utrMhSLe4T/ZZVJoP5/lP1Fu1Dtl07S/IL3ZlklR2b90uLvmQzjbP2hnaf3bUOQ/rxBa/6jH0T9KrxnON1/WPw1TGg9HOsq/V49+J2m93L/8UAnse/Dhv9wIS9zULeK/WMr8BzCUzr8TXX14ZjKzPxDdOh21VcY/n9sXXtG60r/MqhwfJFfXPyYrzrumwOI/FA/WCRkM0r84Yd1cH/0gP31mLcyFrtM/cRAYq9lm278uM6DGDTnRP8Ke/K5fDMC/h5kVH7xXqj9mkg95/2i2P6rhrQtzmd2/8oaS/MNuwr+S7M38VNfEv8EaTnUGhdC/L1wIY+sOzT8cZtGZYPjOvxWs7BLF38k/Hudpy2lP3r8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0NDM5MDA4cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5NDQzOTAwOHEBYS5kAAAAAAAAAMEzGe90oME/9IbvYpLuub9ezCiFQUa2v7vNxcOelLq/Uy4Lt0ctwj/BjdVTaIzCP2ZqQJQDwsE/N9jleS8hwz+y8wlDNn62v1IfQDMCyqK/C573IuWBwT/nwFOhiJLNv19ZmYvK3Z6/3EZ2j5vntb+b+AGADwu5v4dHddERYcQ/SMCKJ+uemz+oxlfKVMjBP27TJ3M73aa/c4iznHfqwL8gTLqbOpKgP2DVrPq1vMQ/KwEHKbF+qD9ZhTyq1ojFv1MGpl1BP5s//wzfpz07cD86i2anqEiMP1KeT5SvnsO/6hgvgxIswD/FEtbbyQGyP/Tal6eqTcA/GRZWnNq6rb/fxwomaXqpP28cLdOhj7k/fM/bbA1Zwz9AIs+u5QvBP3S3sLGhQdK/Cfx+iGk6wT+emih5OCOyP16sHoS6lIo/ecc8fUges7+M3PqTN/uBv/GTGehh/YO/Xc4S3p9sxb+NAoN+igi4P0DkXmLdXKK/yGF5qI+lxT9XRP+3NfC7P/36s+Ysg6q/PSjVTOnT1T+YFuWSTT/CvwCMUnoe+KQ/MLeKdthhuL+Y4NMeN1jBv3bbKn0Q37i/6ehgDg2lo78xYBXXmc+vv7uGMV+uSFQ/0pDDAO0Bjb+pmxjr4r/CvwU34k25ZSS/TqAHnfV+mz9CUlVTu/K+P2QTSk0xhVE/4iWpkhce0D/arEZzG9S6v+elhA5zEbE/+dIYxwshsD++Xe5vLYq1v+paGDqLxbK/jyxlEEcGhT/RXSF9gIS5vwFx8Y0o46Y/jsOJepz0tL/YqHsvRhyhP+CkDqtNIr+/UQnHYpPmtT8cwHd5ge/Dv5B6Y/qxnHk/R8zcqHIUtz+J7m+1AUizP5hLw3ESQ7e/Jqc/uYG5uL8PtZh5cQJoPwVh+KqORqW/7oW9UqMEpT8sClEgv8RlP4z8WivO1qy/wKLuuyOvsD+EhnwGA2zCv+F8dSgrwQK/etTa4mTLir+/InX70M6lPwrfvR3Nj6M/pdO++Pm3sb/bUNaX9+6ZP21iUnO6dME/MMIVWiJrvL98ebHP3uakP7GXCM9WhMM/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0NjUyNzY4cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5NDY1Mjc2OHEBYS4CAAAAAAAAABeFyGs23MI/X89XvrIgsr8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.2219656873516433,
                        -0.018942247706741716,
                        -0.36152101967309375
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    -0.2219656873516433,
                    -0.018942247706741716,
                    -0.36152101967309375
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 25
    }
}