{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9673337178882891,
                            0.010909404102406461,
                            -0.022887754167921874
                        ],
                        [
                            -0.1687362853530172,
                            1.0488584723820078,
                            0.03850660080677587
                        ],
                        [
                            0.15412505847775818,
                            -0.047814151829301675,
                            0.9529865646261434
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.9673337178882891,
                        -0.1687362853530172,
                        0.15412505847775818
                    ],
                    [
                        0.010909404102406461,
                        1.0488584723820078,
                        -0.047814151829301675
                    ],
                    [
                        -0.022887754167921874,
                        0.03850660080677587,
                        0.9529865646261434
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    4.631203731428558,
                    0.2824742343449204,
                    0.5849844031515035
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.2712382824905926,
                    0.0771445104599116
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.04546036971507551,
                        0.00724037918708903,
                        0.008704493350746162
                    ],
                    [
                        0.00724037918708903,
                        0.006018801038801641,
                        -0.0006669339897931795
                    ],
                    [
                        0.008704493350746162,
                        -0.0006669339897931795,
                        0.01136373456719697
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk1MDg0NzA0cQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM5NTA4NDcwNHEBYS6WAAAAAAAAAKV8wlPdnNm/OFUM1K+r478gYkvVEXXcv2/BsZikvti/OVjy5tA20z++b4xUmYm/Pz0csl6MKd0/exZyXU1x4T/sCBcElZPbv9wjqv1yEd2/mrLpU98k1r9qmdUOA+yyv6H02o8orNg/0biXq4a92j8zU6dXG0iyvzZiRoX7hbS/L0YnzKJ14b85K1Q0Xk+/P43JUS4Gv36/cc1KiGN4zL8Kbb9dyfzRv2uDcnoxoZK/bk+iaD87wL+6GwkLgjqeP6Yqy62DJ96/QrHpDrxN4b9dJS9YUevgPxJd5+3Gyde/VmCvUd0A0r94knqR2Kvav1cWr4r9J8m/DGtnRRGf1b+dKsFHl3fKv7imo8Ss0KS/61j0b4fMrz9zUHxsi4ORvz/oiC4zEai/VRnlBTCY4b/GgmclZ9vTv6AL1Z4zb8M/ni3PIvfY5D+6Xv8m6bPCv/T8yZ4RY6u/ccoelMmS0b9zpGNBhUHbP4rV8YKmV9Y/BzN7/LefzL8CpUbwZkDevweByYuMcM4/jCY+BBfXpj/AzvqTq4nIP1ys0ck9xsS/Vi1iuKtB2L9ZEX+8CYPKv0LUrK0dE8M/10Euy/nv5T/BICwMFwy/P9RrGMymKJG/WdN+vXsssz/CWEzMd2TAvz4I2uoGX96/oJADJHNYtj8GKWUqAE/evy6TKlxmjZU/Bn1IoIuOzr+XYGUsCSK1P9FDr/Wjyb4/gIFB/FMo3j/KADpzT/2vv3JBtCUzMaQ/ankGZlZ53j+I7yxqtW7RPyF7Ba7aStG/KE7fUPA53r8Koed6XWvBP4UIep19BNe/+nc1i0hQzD9xbIc2znqsP0qPtrVhINq/OuMshLIvx7/EjCjMRAnaPy0l9s3k/aC/u2r8iV7Cyz94A/YlJIjRv2tFoeVYedg/Cy3sBvoq4z/DKSGgAA/TvyVYoUKxTcS/A+Zq915x4L9b9cMN/xTjvzaCAEnVz+A/QvhW6n6wqT81Rzg3BdXgv45rDc8zIMU/8nvBOjfj4T9RGv2uQxfQP3Vr4OwUuaa/fRyxCtXSnj809B7GKCjcv3QytvJKjcw/yumEIrir3b/spxpxuGmlvxbw4MNJ49Y/ukWVKpHAnb+So0dPd0XOPzRTyqKj94e/UqPUyR5gt79ZfkLQZd6SP1H3Mz0H46Q/jN7XXTMryD/QfeKIyzOKvwGKqE0uXNS/X5ZZdfoG4r8MYAXB6kDVv5VpLQrp9t6/FLZA47PwwT9hYSIT37HjPyIqKIu//qK/cAS0s7qg4j/Sm3hM9/nNP6NrnxBd/90/xR9V+Ynhyb8PGCVkMY7RvwwCyjWlZr4/M2J7RY3M0z8KHv44avDRP6E6iGkZ5MK/vl/peOG73D+CQtXWmjXLv7nPmxGJ38O/Geg5u3L66j/K9M+SrF7PP62v/r7J1Jy/vTPG93CNpr/LRUruTfLSvxoskBlPpt8/7/J1GtFVnz8T6PhCJvvSPyWUlvjUX8K/HCCfRiN+3L8VGhwsW/LavwvRQpbHwKK/QYA9tLbNx7+7gZOYgpTev/98kw65jr6/HF5bOog2xz+gfP6W/4WuvwmmC5hOC5q/mo2v1WuHw7+x5En/Q16wPw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAkAAAAzNTYwMjIzODRxAlgDAAAAY3B1cQNLMk50cQRRLoACXXEAWAkAAAAzNTYwMjIzODRxAWEuMgAAAAAAAABhsqQql0DYv+m/FLflGMi/A9/A5s6u2z83cepKRvuwv6+Q7v8TWbQ/XZdPFX7e5j/+W5e9sHvSPxsBRGiH/Nw/VaVSXWm/1T+Qspn0F/jBv8AtxWW+Ltm/LxQScaf24z937KHngAK2v0lmDx1bd+S/YLowmbIT5D8Fczv15KbgPwZ7P6SnyeM/NsxAjsSK5z9Ohi3hk+TOv88bWav3mNq/hDke+/F/3D/3CyocYTzmP1NdfWEPLtg/rfN8cI5DyD/SNR3k6qrHv/TTYxC7ddu/r08uZpCe6b/+H0gktqjmv7XHvxjGkdC/p/vUwx9RuD/dlU0atVXGP0apB60tStW/EJmdiqZZ4z+snSslDSfpPySaivVqxNC/EdjRCE/Jrj9ZyLC312bSP2aZUHTPj9e/cnhjOmNTzT91jMIHGCvFvynZ1RoHiLw/AkYHX/9otj/UeDWbZxTgv+8RgckuBNa/+qX9G39el78KeO3BsHrOv1s+4NvRFtE/kGKk97YZur9C4B4Qxd/JP0QHEo5feNq/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0NTc0NDk2cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5NDU3NDQ5NnEBYS5kAAAAAAAAAImyEBjRL8Q/PZk3EdrPtL+6wCeFQUa2v8TfqxVXs7+/Et0Jt0ctwj96EcGlIKvHP8T8N71fUcQ/S2/Sy+c/yD8tDgxDNn62v7+m1h0jGZG/ofL2S0ERxD/kr4l7oFjRv1zHXQfwL4Q/17WmGYYSwL9iHwq5PZutvwWNZdERYcQ/hAOyJeuemz8ouUMcDefGPz/nal0OrLW/S7m1nHfqwL/hOpjfJ1OJP1hFl0xu28k/ds5ghT8PgD+LqjbTMhjIv9ODJftADbE/Ckgjpz07cD+ZfKPNmk+hP8ISZ5SvnsO/Do6mEPz7sD8TKK1/Oj+8Px68S/2cfLs/hqoC8t0aub+BqhUmaXqpPydVJyVarr4/TBnUbA1Zwz8zCb0AnirGPw3/Lu+rGNa/urJq2iFZxj/A9QfL8EG3P9QHMU1lq5u/DNUXzwA9uL8rjqwsr/mov7Kxo8E5eqm/C2P5L1iLyr8UiWXQQie9P8XBXmLdXKK/SwBl+kfEyj825PUEd4fAPziRTEO8RaC/1/hTYZcb1z8PHd3T4l+/v/eMSB6PNa8/tljNJCBDs7/PdPHrGWusv2VcgJBAjsG/l+5dDg2lo7/+qHQ9hQa1v0LR7l2uSFQ/RR8FAO0Bjb8gc1CO5ASxv/ffD9UVUpQ/6uRaXuY7tj+4mVZTu/K+P6Y2yUwxhVE/em0L+9KszT96gFbF0/K/vxTIYnh15ac/chwbxwshsD8WQvBvLYq1vwuw8937Ar2/hl8UDHO8qT8WMCF9gIS5v1qqN5hMkLA/KMhBUcirr79s1GcNTOq3P6oC+FiVA7q/rrI2LF6hwj9srGai3X7GvzyKWghLR6G/CnjgqHIUtz87BUkjIhWiP3F7xXESQ7e/eziqWdUKxL8/ywIwuvqiv0t28aqORqW/zkTkXWWOlT9oC8IreTOXP7MNgYddmaK/JyzlDdzNtT+uvnsGA2zCvzcWg91BhJS//vX04mTLir8fhYEh2SS1P+cBk8E9za0/T4XW+Pm3sb+9SGxEWdB1P+r4U3O6dME/pCj5Ve3EwL8dMLdzTySvP3SBEab69MA/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0NTI0NjA4cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5NDUyNDYwOHEBYS4CAAAAAAAAAPqUtL3u+sc/X3FVvrIgsr8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.20750435345098867,
                        0.09893104558283242,
                        -0.40720248490813393
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    -0.20750435345098867,
                    0.09893104558283242,
                    -0.40720248490813393
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 55
    }
}