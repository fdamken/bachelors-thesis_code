{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9957135394087826,
                            -0.040426013669817525,
                            -0.03421194942224124
                        ],
                        [
                            -0.044108343441993984,
                            0.9828034739174712,
                            0.0042871208864594355
                        ],
                        [
                            0.09354764948994032,
                            -0.057330415987562465,
                            0.9471817937389089
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.9957135394087826,
                        -0.044108343441993984,
                        0.09354764948994032
                    ],
                    [
                        -0.040426013669817525,
                        0.9828034739174712,
                        -0.057330415987562465
                    ],
                    [
                        -0.03421194942224124,
                        0.0042871208864594355,
                        0.9471817937389089
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    1.3521347253696288,
                    1.1864281229150684,
                    0.9441329001344706
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.2531259627439249,
                    0.19414546757992532
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.47285931709215934,
                        0.3341452438736052,
                        0.13290543218866646
                    ],
                    [
                        0.3341452438736052,
                        0.33225721981027867,
                        0.07026446825167576
                    ],
                    [
                        0.13290543218866646,
                        0.07026446825167576,
                        0.21589315996613043
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0ODg4NzM2cQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM5NDg4ODczNnEBYS6WAAAAAAAAAIK1fpu+F96/cY9AMD9u4b92I88HRajfvzW3OxkfLOG/JEqpPrQYtz8mx6rwS+F7v+Ub7Whjzd0/FmW+4jjD4T9zJpUObDfcvy6BdfObbdy/z/YiXrbI1r9NJME3X3u1v4KJC8Nb39s/ID3fjAHS2D+bmeW15MfJv8B09GReTMg/cG1zPeB/4L8vV1/BFQ7GP7DQew9NHrU/09jLTtHHvL/oNiAdvyXevwYzlQMN38A/UMR7SbpPzr+D+PEYP/vBvwbv3o3gmOK/7Veo6kRo379i+7LdPD3hP8y7nwxMtdm/bTlxRwZd0b/V6xOHAQjavzJU6ccH/8y/EgMlZJaK179iCC1gZdXWv1+/c+lJucC/GNoV5viWyD+EvFSVWqmyP93EMVH4gtg/BiX9kyIm3L9ZhpsdkDfTv5kEhK6Er8G/4fJjfthT4T9lZrCY9FnZv+zDVfjkQLC/eaHdifLu0L9QpgVZ4SXhP2T2V/PjYd0/M89x6AlYy79h25h8KTbXvxsrWXfeKM0/Pnj6/J8Zsz90B5+oWdHJP4xlfCNuXZw/oQECGjsE3r+CeP+A2vOlP7cHL+e+ClC/vnMPGbIO4z+Bv/LbanrSv+hekAxIWMW/CqL6bQCMwj9lBqky3srGv5l8nSbLEOK/HJ/JdmR30D+s6998uG3Tv6cjL9WDVcM/WFl5tDnWz78O190sRIN+v6nzcImUWsg/FvPjyyD12j8tMtZ6wK7PPxNwNVP4/ti//MCRAOAlwD+oGpCqgxPgP3JzTbix7tG/NKwpMmtO3L/+c2UKIGHKPw1rdgq7Dt6/GZRTsSo6sj+0Luad/f/QPyaeKKuKfNm/u5TViboS0L+RjnM8+k/OP2FB2h+dHKa/Md+CdbB6yj+B6a9EqXPTv1P8QFaWg98/2dfXWLJJ4D89WcMQPhnavw+Gd4gbf8g/JnoliyFn4b+oGyBhtzPgv590UteXxeE/eeGp7VKfyT/+RqEce+fbv75CTFJPBKe/n3oytnTt4D/Uk4gFttvGv9o0J/NlW6c/+1O8gtXuwT9QRK0GhVHgv81Yw9rXDuE/JZvzGxTIyL+R9749qYG3v9KD/PZ8Fto/VxrEhiCDk78nhtsRbW7KPzG5y7Cwm6M/f0rHoMLQtL89VzFOXHG3v3F8PI+/Aao/cBjxceFyyT/lkHloVleXv1WWr0NXuNO/qgV2FmtE5L8W/ppA8LTgv3MnKq5ZNNm/n7hKn6HZ0z8v5mlpyDrbPy0WTpRIndy/ULOm44nv3D8NbHjakJPHP/2kgU0Wjs4/7ZAibgL7078m+z9WWurQv85hBm2iery/a6sdO7Yo0z/JfBuN7tvTP7C8zCA4ac6/wXoQR66I2T+QB0KcAM7Qv+sd5pWaFuK/qgw//NBG3j9MsoG+5XHVPxaOItGCOF4/8/1RSCmsq797CiF1OUTbv0myvPrJut0/Lavc4KDJpD8aHrhhq+bUP+94MKqb3cc/J22R1uVz1b8t//dvPG3fv6V/h5oCBr0/oxWN8cCky7+cmV8A6frUv38AyGjXW82/vhU71CHQwD863TCXzA+8vxW0nU0NtHI/t+CAMMNgv78Iq0Z6WAy4Pw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0ODEwMzM2cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5NDgxMDMzNnEBYS4yAAAAAAAAAL6JfxzAnNe/m8qBfPhepT8OYTVRNRXSP36o+RYTyL2/rAp0uKixxT+UXn/P5w7WP/E19qUzLLQ/w32GUgIR2z8q1cGt+9rKP1tPQuJpsMC/2vD/4NLc0L+il8e4iHHgPyYJyGmVsL2/78V8I1pf1r8m0ZGEHUbdPxcSEyjUJNU/DItEADeM4T/7lLO4973iP7KUwBFCVp0/Ewe3sc4827/lB9ROqp7RPwSiTIHHouQ/3FgRJNz61D9wQVIBa5LZP8PIPtE8Y8a/i/QzzNn61r/SeuRkkJ7hv/1L+kwSOOG/CVY4qvnBtr8SDROiwsG1Py2h2GZ0grA/9+nrjm9Cwr92/UMp+/rXP7I6eN+z59s/TPEImW8iy78Yq/VRFqjAP5+WOI40ucY//PRItLQK3L9lz57S/OzGP/nn6TFjib2/mHouDcY5xz9Zz5mRZTijPzVn3TIBruG/Kb0wqOaNeD8gZoMPAx/GvzfFY/nx1ti/KCjGTD3Hyz9d36Qy+pHIv3WnnCRzJ8s/jnhSRn791b8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0NDIzMTM2cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5NDQyMzEzNnEBYS5kAAAAAAAAALcslQMj6MI/lLPli+59vL/Q3iFc5bazv5Ju05pCBbi/x4eLy/V0wz/lHE9oFtTDPxNMuqixCcM/i/Bejt1oxD+j5h1skg25v9AhFIS66Ke/62xwN5PJwj+5DNdjfrvJv9/eyOdZoJS/XB5quPd2uL+6aTt7kAaAv7K97+W/qMU/buu65S3uoj/zJdHeAhDDP5kVD8Xz+6u/jBQssSUywr+CL4+TBOeWP41TJg9kBMY/wBEh1/hfoz9XCbe+hNDGvyLZFN3x85e/nThy54S6eL/IyKp+HTdvP/cJyqhd5sS/+hCJl8BzwT8ZVskEJpG0P8YjE7xYlcE/M0Ied8lssb/RGxJ4IZmuPyfTIfz9Hrw/T5ZYgbugxD/jX4GS/kq1P26IUILIbsa/nvz4nBeCwj9jhmaguCevP8QA9/FkZ2g/pANIVOyOsL/4/cltDDuTv2sR3JchPJS/+PCM8k20xr8ZHnOn5pe6P7mF0SBKfJq/VQDzvD3txj+pUPPgkX++P6OWnTjloa+/o8CAZp90yD9q3GCn+4bDv7XdP8zWFqo/6IqBnzTxur9V8Uoz5Z/Cv4FQIaZsbru/bzROYMXDqL/mKIAUKXeyv65cz3vL8YG/N/QjchcOcb8ZzpH/kAfEvz568Cx4zIS/2TdtIDPeoj8cml4qX2O8PwfnXXGHq4Y/Gfk1bRC3xD+WNj2cd2O9v00vDiy9xqI/dzNEPF8jqz9K6PdG0fqyv9AqIREvNrC/bm8RLJTAlD//Bxim3BO8v8zt39/gAaw/bm6TUUBlsr+9QyMOxLqiv8gnGILxkry/jGa8i+91uD/KG/pk06fCv51gdCKdpJA/LdrlfxaFtD/ba3qMpbiwP7+mzEi2s7S/iOwx4t1Iu78PHZ3SifR8v6yy6PxGZaq/5xqhAdbLnz+Fus0PEeyJP5a9pD7D+rC/iRXl5H8+sz9KMgHyVCTBvw503XKijYS/JjqObA5Cab/tUmJNie2qP8Iqq2+Frqg/v5SzIVZHtL/UaOjnDWOPPxvv1l4MLcA/TRsMg376vr/9Fp8hlwWqPycXhrqoPMI/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0NTc3NTA0cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5NDU3NzUwNHEBYS4CAAAAAAAAAFeWQYDkI8Q/v41O5w6wtL8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        2.100164885952235,
                        1.995092760762822,
                        0.32427573647659774
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    2.100164885952235,
                    1.995092760762822,
                    0.32427573647659774
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 10
    }
}