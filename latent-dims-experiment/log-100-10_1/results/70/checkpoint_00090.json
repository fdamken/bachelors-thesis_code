{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9993701033008359,
                            0.01439539126782129,
                            -0.01662743052397418
                        ],
                        [
                            -0.17113655386347013,
                            1.0370823494708743,
                            0.06865379823841723
                        ],
                        [
                            0.1577280550569853,
                            -0.04262124804707357,
                            0.945001243824469
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.9993701033008359,
                        -0.17113655386347013,
                        0.1577280550569853
                    ],
                    [
                        0.01439539126782129,
                        1.0370823494708743,
                        -0.04262124804707357
                    ],
                    [
                        -0.01662743052397418,
                        0.06865379823841723,
                        0.945001243824469
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    5.269916849530242,
                    0.27851570116296875,
                    0.6043139863874761
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.22517763563515655,
                    0.08850554285051414
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.020735070164850593,
                        -0.0009294362497741723,
                        0.0033615006401340342
                    ],
                    [
                        -0.0009294362497741723,
                        0.0026487482137093135,
                        -0.002391208119978977
                    ],
                    [
                        0.0033615006401340342,
                        -0.002391208119978977,
                        0.008364708779174501
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0NDEzNTM2cQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM5NDQxMzUzNnEBYS6WAAAAAAAAAKVGCJy+F96/3OEVKXQF378Hl41k1GrVvxHMcRS5bNC/QJ5Y3fmS0j+ofEfRM3Obv8PhaH8RFd8/ZbqRh2ev3z99z/GTV4nUv3IsGraRlti/5lUgiBJY2b+jZwrmplywv3IAn4VRCNg/TmjTtV1h2z80nW1dfnGvvwbiyZl4V8i/ew4TFFqZ2r8tvyCNQzOJP4UdJrsJNKO/o02m4rYn0L9bXTYs0APLvzutMh6i3py/CEf/fO2Cwb83P1xX+TukPw79Bzmrv8m/opMbx9rS5L8BxJaRHevfP0EFRQxMtdm/iPjQWrSk0r92Sa5yU8DYvysL90nzUMW/MWMF3tpcwL+krkpSRb/Lv6hpeuXoY5+/itPu4J91sj+yMEgQ/MCbvxhvjRKutrO/ku5mESIm3L8Oi+NYmg7Xvz8V6S72ZMw/okF7nQuH5D/doH8SO2zBv26C5ExZRKa/vSVanqA20r9wrrQiAFbZPytNPGQhbNQ/1tIFEWbnzb+5zzUH9hXgv1O/dnfeKM0/fia7Vs/1qz+zZr1//UHHPxAlPv49grK/FM5Hxw+ixb8dVXcYZrzRv0USWZlvy8E/dVOHXOkI2D8Wf/UmbCneP2e0ZaDYrHu/Y+xwlB+dsD9dFNDgJazBvxOv6vTdAt+/dqQwSc/nuD+Wji4gKavdv4IG9XLrn4Y/zlPXi91Gzb+8NkJVZbG3P1+8Ow+ArMA/s/4M8nyE3T+RpXbiA46yv0P2YxGuxrE/U6J5VJhExT8joKmd6KHUP+sy5qMDp9C/WNk4W8fd3r/o/AN7pii7P7L+rmxK0dO/B1Mdn/aXzT+NaUIDn3DPP/R78pbcNNi/oMo26N9zvL/fsw5wtUbUP4IY+PdYvpe/xhJxdbB6yj9ux7sbTeTQv+y/ZNuB1dc/DnAJjOV84z81UOeVKWvSv6IFmC4DBsO/p+4OQMi51L8evu2mmK7kv+uBZ9iXxeE/oaMvw/YPxz+f33pOhb7fv0rQjBUpScE/6a5gRhI30T/PppfgeK/gP7b6wVUlBHc/YLY1Z2SVlD90s0oQXPXgv6gWKAf51M0/CIZOGOEH3b8qWE8fAEugvz2upblyP9Y/XwdG5wD/o790Qr1jJY3PPyv+L3VCOZa/WdbK8nrvub+Y8gR01hudP1ypHI+/Aao/wSJDcuFyyT9PiTxoVleXv5BTmWyzR9a/UljGPK0s2b+//ZShWm3Mv9UUkXBPXdW/2YBN8Fn42D+p4IvV1NrnP+SozVa7Fas/JHHXdHVB1T+5zP/r3HfTP2Pka7TNPNg//lXtlV6K1r/8FPKXZMHUvxKXXv1I17s/i6o9zKVvuT8geJBIQZTSP2a6N1geGr6/0eSYRa6I2T+Sy5ITpQzPv07rPv3al8K/VXU3QF5M6z+ZBk9TLVPQP3hQbzEdiaO/jlM6SIUTuL+N9gR2NX7Pv1JY0xETJeA/wTXAghEHrz+77dg4T1fSP6cEU+QmGMG/Y2nJiC1V0L8kzFhDdVrgv5IbuUV4DrG/32X+VVBnwb/h7XVlT2Hbv2Gbr5Ok4La/A6QGJtruxT+CmXX0W9Kxv1+idei7m4+/l6Cd3gpCur8EU7Csz52rPw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0NTgxNjAwcQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5NDU4MTYwMHEBYS4yAAAAAAAAAPZEvV0cLNq/COwLrTfRxr9XfJbKScPZP6cjlMxaqbi/iYLM1rfJsT/fUHmuF3joPxlbHMaHH9M/JQB9cl6g3T/jiiBnQGPWP+8Dgg/GP8O/IObE8lTA4L9VZPjru6TjP4XXYbokc7O/gI1vokbJ5L+sDWMenmXkPzCrfYSnnOE/6CHMHrx34z/4Mor5ubPrP1tPBbSJDcu/t95ttc4827+32MMEySPdP7//lDjCeNw/DWpdgJQZ2j9tg4mrmBrMP78E0IGERMG/NGNfGpIZ3L9KQ4BHC7PvvyNuV6mh+ua/+DAjI5010b8Nwy4Ssr6Ov6FB+gjlv7o/bXvpefoW0r9gSwYFuwfjPyGpY6Ah1eg/B6ZY65Mg0L+gqCOtA/SxP2NWe60Aw9E/DpE0xbAK3L/eY6O+3gWkP0yNCUgiAsm/LrjkhPdK0z9M/H0Un7nGP/rNz8aRHtm/t+RywFdg1b+sZoLbOS7Qv+EJLNdews+/xKzd0fpy0D8lQlfRWoq3v0XzPPwWmMg/YLWR1kDz3r8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0MzQyMTc2cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5NDM0MjE3NnEBYS5kAAAAAAAAAEY/jSx/d8U/oqEoOjZft79hSRSundW4v2hxD0kzUqG/zx8AwrdegL+a5j26zvLIP4CitNENmcU/w9Za4JWHyT+mOCEa2u6zvyZDhufJbnu/6vR5YO9YxT/RfkWaJUTTv6lFlKdoVZQ/HzwjLjRawb95y34F+1yxv/oG87xjGcM/pdwBgnphkT+f9MAwuy7IP7TzY4ZqO7i/7UvIEJNFv7871aLGkP64vx3QEmEcI8s/4gsgKbKwlr+tqrPn4F/JvyNa+ccN2r0/FwPq54S6eL99a4cfU26mPyYzPq5Kj7+/ZX2Uzz/ZrD8gV6aols6+Pys2WtRA7bg/fEf8Gjqqu7/6SiPUsFukP7qpDSfbnsA/K+FgWF8Rwj+NP5br7+LEP1Vq2jaNk9q/8P3o7s+gxz9oVfrzTNG5P4qRivhq9KK/I6VdpqSttb9BkKN+Zxiuv5u+jBPymK6/TJRzRAbTy78+cHSn5pe6P4yMGbSVe6e/yNzhDvYLzD/3PnAZJc/BPzOwJJV0ZKW/hJ/flspO2j+I9/GqhtC8v5L1E7gjKrI/Rlba+8OzsL+7JfAe6cSwv1CNV6Vsbru/waAQeakMnb801ogUKXeyv88K9HvL8YG/F/bUI2e+mL+h7CkJ+bK4v7yuoniGj54/HoDPlVmEwT/FhDYwX2O8P3Ls0B07SoK/ehTBQrQnwj8G+SP3F0HBv3CeYia9xqI/h2AJ8Gewsj8rR96YiRm4vz4jkSyIWMK/cUYMXivbrj/psBqm3BO8v4T8GsGoH7M/cICHUUBlsr+gbDmb0wFsPxEoBTA5dLe/wtm8F7BZwT/7wsu2i8bHv1SUQ1oDZqa/ym7P0c6juT/avTB12jOnP4rrs5pu0rm/GJY0RSfDwr+TiPOBchmov3I07fxGZaq/4A2IdOmhhj/2FO3ndLigP7GOV2tK9Zq/+0Lx5H8+sz+yXADyVCTBv/qfd3OijYS/G48zFSOjl786G3tKNbS3P235wgn7dbE/qtnPnztRrr9NUJ9LaSVzvwVYy4dovMI/NwIFg376vr91ndXigyGyP2O8FNHgO7o/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0NTY4MTYwcQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5NDU2ODE2MHEBYS4CAAAAAAAAAJzZMdKcQsk/fQjOKq0ir78="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        0.02614480592483979,
                        0.2302171925206692,
                        -0.5055646115127292
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    0.02614480592483979,
                    0.2302171925206692,
                    -0.5055646115127292
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 90
    }
}