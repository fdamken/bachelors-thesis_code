{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.8846154016104792,
                            -0.0207965600727429,
                            -0.0067652903685990395,
                            0.003430885939602671
                        ],
                        [
                            0.0027540110673818586,
                            0.9706186963742307,
                            -0.04765460587310757,
                            0.058405178300834394
                        ],
                        [
                            0.00814233952816956,
                            0.018753175447944283,
                            0.9597871135888519,
                            0.032975639688958516
                        ],
                        [
                            0.13075064008288437,
                            -0.11550159974300368,
                            0.012387461142613078,
                            1.0419369267689973
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4,
                    4
                ],
                "strides": [
                    8,
                    32
                ],
                "values": [
                    [
                        0.8846154016104792,
                        0.0027540110673818586,
                        0.00814233952816956,
                        0.13075064008288437
                    ],
                    [
                        -0.0207965600727429,
                        0.9706186963742307,
                        0.018753175447944283,
                        -0.11550159974300368
                    ],
                    [
                        -0.0067652903685990395,
                        -0.04765460587310757,
                        0.9597871135888519,
                        0.012387461142613078
                    ],
                    [
                        0.003430885939602671,
                        0.058405178300834394,
                        0.032975639688958516,
                        1.0419369267689973
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.18485530994630262,
                    0.02523250263080346,
                    0.1060926120526219,
                    0.016178151413252257
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.018591579046662445,
                    0.01876410788307078
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.012217239149994591,
                        0.0015574490239889938,
                        -0.023497485454355482,
                        0.0013201208145892651
                    ],
                    [
                        0.0015574490239889938,
                        0.00469958574646577,
                        0.005940072479978298,
                        -0.002385255187728502
                    ],
                    [
                        -0.023497485454355482,
                        0.005940072479978298,
                        0.10553040842320982,
                        -0.019235485652760786
                    ],
                    [
                        0.0013201208145892651,
                        -0.002385255187728502,
                        -0.019235485652760786,
                        0.007923753750516349
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            4
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            4,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzgyMDkwMzUycQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM4MjA5MDM1MnEBYS4yAAAAAAAAAKDs877ZfOQ/tdYAzEGH2L9GxQoUcETnv61CQCArutq/7pB9iGvh6j+r19WyPvvmP/aH+/Z2TbA/uP39UujV4j805Xrirmi2v2TP/EdYTNW/ljAlE6WXtb8Z2wBYbRTIvxFoqdUhkOW/d/pQnm8MqL+fYDPt7+3EvxO1d2kds/M/MCjbpgQpxb95sULe+DDSP5JDybunt7u/KFOVrAT5wb8olTgx00GOP5FcISYV0Mo/2qfo+mMP2T8J5b6KpG3Yv30za+YLH9i/+oKUPfDOzT8SYnPka9W8Pyuu9AMJmbW/C2jk5TTq1T9zqeh27Aqsv98BSeMULsU/tHvgLHBvx7/QqZw1AV6zv0HSxDN3McQ/qVCt/g9sor9fpzeskcDXP5L7MBLMnuG/PFIBzCM43z8+zjCWn1rBP3JVF9NFWuA/ya6hgQlmtz/2UGnYQUrQP/jXvRXykOS/qXn/knay2L/EX8iZ0gO5v+zMtfaUtue/Y/49lWkc3z8E3cRLJb3Dv/6HFiAYPNO/AUDPRnlA6z8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzc5MTkyOTkycQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM3OTE5Mjk5MnEBYS5kAAAAAAAAAFlZIab1t8q/nyiQxNytwj9nvOm0d47Ov/B/q0tMvKc/HmgoGogD0L/vF0/n85HCv44F7ySpJJq/Fa97mS0usD/q66C4IPO2vw3bPVEjPp6/82IXQwPmuj/0Le6okiPCP/OceaH1kaU/zYqxsqcDqz8Pr5FAsYiVv1j4Uw6+stC/zju1J0ELo792nrKs1szDP7OsmVDwGKc/ZYdEFzmtwL+kjqKkA1q1P5eA/ZFBX6Q/bVhKcj/LoL+cDmijFJhsv63pf00um8A/jKJzys/enz9sJLdCEZTEP7SrzMT1q66/Gvb7PN9ykD8D5YD75CfOP3Byzcg+uqQ/Qqlug1HasT9ZWoE3kxmCP2PcIWPzvb0/hsOz6yXAqj8RJ1wmtIuFv5+y6Fwpisa/Upv+nLr2xL/qgYdenG/CP3iLfAAY5L2/M72ej1xXwr9njD7YJtq4Pzg+xHxR/8I/BjU+C770rT9Pb4UmFCrJv2ugpmQBdcs/AJNRldV2oL+A+/7taNGdPxDwX4JpCcC/k/CWl1f5zz9I+s4pCRu5P6OQjT9SyLa/EREoA1WIqb8V3F4ws3qBv7981QMf8rG/WIgM7RH2uT+Kejy6g6qlv4ad1B9xlbm/i/g1pRKosD+cTZyA/HKhP4ieTQOZU6y/QCPLkU0WpD+kGY5EQoWev8HWgYmr4LY/i5My/ovZe7+vg5zpVTWaP2iJkEeop6Y/6L6Fqlcjwj9FDDQQWgGzvxoJkDKoyoU/Zrj6Zq3+wT84KoE9yimiP2csf4MNZqS/EZnHiBetl7/1e0QHe0rJPwhucre3MqC/URGfyqNWx78p8maI12tlPznm2suxiq0/JF4BS+09m7/57slX/Zaqv6wFjRYC0FY/jjxlf6CWfr/o+KyNOszEP+VIWcDnkKo/qvEcKLoakb9L7ccsfoW/PyaEFnE/ucC/s++r3of7vr952w0kTTK1Px5UGxHPDbc/0vPtztLfwz/30+63/+eRvxxp5vZGdq6/165K1HM/uL+VreRheW+9v5/iShKD+pW/1mJjkjCXtz8Pw1ZG07Oyv5AsB2bLv6w/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzgyMjkyNjI0cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM4MjI5MjYyNHEBYS4CAAAAAAAAAEjCf6BeK8Q/SW83wb/wv78="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    4,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        0.25584076949909645,
                        0.25636481554682344,
                        4.875171467250602,
                        -0.8902418010298879
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4
                ],
                "values": [
                    0.25584076949909645,
                    0.25636481554682344,
                    4.875171467250602,
                    -0.8902418010298879
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 45
    }
}