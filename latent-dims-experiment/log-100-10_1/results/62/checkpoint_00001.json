{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            1.0041209720723112,
                            3.969584475613984e-05,
                            -0.001583130887116152,
                            0.0029525887953023183
                        ],
                        [
                            -0.00612816264771767,
                            1.0000668581920733,
                            0.0015672501942145985,
                            -0.003491821023890754
                        ],
                        [
                            0.008501967786463656,
                            -0.000229476129143702,
                            0.9972087539414515,
                            0.0054112900630019015
                        ],
                        [
                            -0.0061840789343256914,
                            -0.0004963679294343759,
                            0.00264457717910447,
                            0.9949728497804776
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4,
                    4
                ],
                "strides": [
                    8,
                    32
                ],
                "values": [
                    [
                        1.0041209720723112,
                        -0.00612816264771767,
                        0.008501967786463656,
                        -0.0061840789343256914
                    ],
                    [
                        3.969584475613984e-05,
                        1.0000668581920733,
                        -0.000229476129143702,
                        -0.0004963679294343759
                    ],
                    [
                        -0.001583130887116152,
                        0.0015672501942145985,
                        0.9972087539414515,
                        0.00264457717910447
                    ],
                    [
                        0.0029525887953023183,
                        -0.003491821023890754,
                        0.0054112900630019015,
                        0.9949728497804776
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    1.2487683828737222,
                    1.0132323852446274,
                    1.001624883222417,
                    1.0321146832025032
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.8808948889629592,
                    0.41745636341558584
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.8573675842336277,
                        -0.0306676978157574,
                        -0.027854486006791968,
                        0.040109918049611615
                    ],
                    [
                        -0.0306676978157574,
                        0.9402393375501867,
                        0.057285762628671244,
                        0.010265558967695765
                    ],
                    [
                        -0.027854486006791968,
                        0.057285762628671244,
                        0.9092865655919268,
                        0.008624407365870113
                    ],
                    [
                        0.040109918049611615,
                        0.010265558967695765,
                        0.008624407365870113,
                        0.9797588924965739
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            4
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            4,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzc5MzM1MzI4cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM3OTMzNTMyOHEBYS4yAAAAAAAAAJikeGrRQt4/tlx9Op21x78qyGaqS+DbvwraG0ybf8i/B7X2JWMU4D8RcZZpFs3ZP9G5wCO3Odg/ULAyG+Q+2j8vA+3O8j+nvziDnWw6FLi/xvKqbvbmyj9RH7vX0IrhvySVvtIZaNW/XzMfSdYzvL/o4OqK2V+pv26VsFPSaNw/lXBxjQi3sb/12h5c1z3OP3fLpDX2paM/oHyhxhwO179ycXszVMPXP1Mg1BDn190/v93rLuVO0D8KUlzXZAPYv5zigVBlh9G/z/hayFqkzz9lfkDeM7HBP8iTTKLmp92/M10YE4dS1j83yjCxAilyP2SKhJC+Z8c/QXhkJHB1wb+jk5yJEyKrvyendOSV5cA/KGB/CWSX3D+oSY6+4C61P2EpiwHh3di/q1UW/lDszT9p2F62X7zWP7kEyEHU7c4/4sOBNYyQ17++HazQiDPAP8eEV+daCqo/G+mX/SfJ17/866jM5BvIPwxLUejZoNe/pbi2GsaH1j8peGQBsebRP+ApEyxAYLe/YWHJMVg+2j8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzc5NDQ1NzEycQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM3OTQ0NTcxMnEBYS5kAAAAAAAAAJaNmuz168i/ug98s8n9vD/vQ9tXdGzFv1jfUoNTN7C/dCcme/Csxb8/P59Ndkq8v94SfKqVMMG/zJlk3jQ2sr+Q6JsjXSCxv4Vub0EOA7O/LuVstOF0sj8maQrTR425P9cB7X55QcY/MqO+/2zjqr+sqxhFGlSkP84Cw+ncp8a/CeotSvdwkL9XL6tpFHq9P9HXpLW5dcG/blZg3rbhur9ndqDecrOcv+/WZhnOWai/2N4NZGR5iT8N+ZIxKy69vwTxXGHzWI2/r+dcZadixr9VvlNlVxnHP1y+pj0thcW/MEGK0Tyzmr/yygls3DbCP58C17NngsA/CHgAl5cok7+Rhe8HB1zDv0n3dStcTqw/rTWYNp5Fvb81dbesN9Cfv9vWwqHA46m/CNr9hjElrr9KM5RrkSLEP2MqMbptLsm/z6W+y016sr/sg8pIDzmuP0yeGnKqZ70/sFlrnIT8vD+og3Woox3Cv/k+iVKwF7Q/tVNRIPVwsD+DnvqoTi+0v3luIGavHoe/YLYnVVaXwj/eZZtyluO8P4brzfKKqbi/BAz0apdCsL+vSp9utLOcvxZEehjvpr2/mHXqWNn0nD+8EYUqP+ORv+AjuwsCqYC/fVYwag4enT8y4alA7HafPzNjwuX+oMO/pMqF65yzoD+APEBYeu25Pwp120+VspM/xN1hR0boub+HO0hZO9uZv0USmxhbrqQ/6hvUzWt+uT8y6tpzXNWRv0vWaE5Zl5u/EQZSAlqmtj8X2Z0ysQqSv5ULd5528rm/aTTvBLdcpL/upbgFT6ZjP/a1gvWSELC/HUOrYV+osb/C+gCC/NW5P8QYJhUQ/py/7Pk2bNo3rb8PqJ42WhjDv7yFdJGamsG/ifnMC11toT82hVdGAVCnP0vxgM2Lk7C/uHjC7uDygr+McUk5MVrDP9oYRguaHra/D5WC8zYswL/nqIUUaRWWvwtzCknSzrs/tKFkr4S+oD/T0bozuIGnPw/WMkrxSp2/dYDSQh0dtr+UQscnBTq1v524PF1aa7A/IU6b+KB2sD/bAOM8JEmxv3O0dXFFg60/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzc5MzM1MDQwcQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM3OTMzNTA0MHEBYS4CAAAAAAAAAEy0Or8kqKQ/ytimtivGwL8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    4,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        2.2599137076943245,
                        0.5089451244775685,
                        0.8045222316937907,
                        1.7357565251091363
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4
                ],
                "values": [
                    2.2599137076943245,
                    0.5089451244775685,
                    0.8045222316937907,
                    1.7357565251091363
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 1
    }
}