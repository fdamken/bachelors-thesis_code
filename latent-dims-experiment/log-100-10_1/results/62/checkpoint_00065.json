{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.8930442199524885,
                            -0.022998197585783392,
                            -0.008738098065607137,
                            0.008333734658309033
                        ],
                        [
                            -0.0063326763374546005,
                            0.9893035693299088,
                            -0.02669929573270318,
                            0.03960542478252231
                        ],
                        [
                            0.007597735016193635,
                            0.0674362943001906,
                            0.9632780555171365,
                            0.02272677090181703
                        ],
                        [
                            0.06720343751532368,
                            -0.1628277616028075,
                            0.036424581798734965,
                            1.0261530102730343
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4,
                    4
                ],
                "strides": [
                    8,
                    32
                ],
                "values": [
                    [
                        0.8930442199524885,
                        -0.0063326763374546005,
                        0.007597735016193635,
                        0.06720343751532368
                    ],
                    [
                        -0.022998197585783392,
                        0.9893035693299088,
                        0.0674362943001906,
                        -0.1628277616028075
                    ],
                    [
                        -0.008738098065607137,
                        -0.02669929573270318,
                        0.9632780555171365,
                        0.036424581798734965
                    ],
                    [
                        0.008333734658309033,
                        0.03960542478252231,
                        0.02272677090181703,
                        1.0261530102730343
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.09693255089629195,
                    0.013865939700781474,
                    0.026477389002188018,
                    0.005539596263875529
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.044127433495334115,
                    0.006723969194485619
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.007385222453649615,
                        0.0012638287796295482,
                        -0.008109287835213586,
                        0.00030383081026340297
                    ],
                    [
                        0.0012638287796295482,
                        0.0019371978206556718,
                        0.0008393545316255357,
                        -0.0002059089719532274
                    ],
                    [
                        -0.008109287835213586,
                        0.0008393545316255357,
                        0.03145089122461897,
                        -0.004201264955665307
                    ],
                    [
                        0.00030383081026340297,
                        -0.0002059089719532274,
                        -0.004201264955665307,
                        0.0014733541886990387
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            4
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            4,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzgwMDEyNjQwcQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM4MDAxMjY0MHEBYS4yAAAAAAAAAAIwHtd4pOQ/VmCDghyZ2b/686pi1Hvov+ktLAEmadu/z3YtQjfL7T8AFIeFd27pP7+QE3yvgr4/yHbKseei4T+p3nz0aj6kv3Q6xHAPXdq/3UmlKHDWvL/xt2YbhyLNv6X8Dh0qL+a/J+3tPuzSpb/2nqdi6ie8v2nbsdUyvfM/Ptbc9emPxL/Ly2oEv3nRP5dncR6a8ci/MtA9k5KTsb/UGszFyozGvwocWt9DZcc/6ZzH58uw4D/cxH6eQ+PWv+B0voZZ1Nu/HmeUF8i4yT8HMmIUpObGPyq7K4bqL4U/2bHMsCJH0j/lKFf1qY1Pv/L0wrzyoro/6Beh56O7yL9burJWBs+8v2akJIDCz8A/EcCtfEfStr/j6qbyH6nZP9JM8CRAhuK/bxDVyrC84j/swUd9wDm8PwYAAuc+tOA/pVK/GaGTwz80wqXngCXRP5UgoljYLua/2wPB1DA/2L/DaLuuXa+zv6Kort6ZnOm/DzEYr3wL3z+zSZana07XvyRhy9Gh1dG/q+XFKsAz7D8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzgyMTMwNDE2cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM4MjEzMDQxNnEBYS5kAAAAAAAAAHiAeP+l+s6/oGAOwN4uxz/obakM4fzRv0eojoXm2aU/WUAzaxDAzr/JUj+SIZrDv3yBSYsEV3o/8Gqcpgb4rj9O2Dbu5lesv9keGdn1UKW/7ZRldJNYuD+uIBS1v5rHP8u/LHpjln8/+74w7SNSdj90a32YH3ieP97BeFJPO82/c2a4EqlShj+UyYkFKeDJP4N+cVKztXw/1rSq2hYrwb9AIi8JPPe6P1MJIMOiQbE/1A3mOdIOr78FYoEjyAiTvx+OafSFI8c/Xf3u3kMMpr+H+0zcIdXGP687T6XOJmc/BWeMe9xFtz8dKe793qXRP60LE19T3qs/XhvNVFD4wT8212d/yhOLP8dqIU2uecc/pXpwMk0PuD9QEGWTtCJ5v9giCbKwlsu/pLxWC+TQx78KU3vXNZW/P+xqZ9Wlo5i/3FB7Dpctw78hjzvPZOikP/J9Egfs8MQ/lTDD04MJkD+dOFHK2GnOvzUuPc4uw8g/oO0TwOxNtb94gShdJhVpv0qN89//asW//OtuEX+00j8dLQxIqeu0Px222Rdpl7K/+imr2f0hsb/Ay1plwUOBP0u7eU0zwou/TxXW45hNvj+8cnFqOYiJv7BD/viCFsO/+cXYZNO1pz9N9RZaGzhnv2LOYdxr4qq//P/Ax08cpD8eBlVT5hyqv215O92hj5s/A/5BcMq6eT+jRBhc0Um3P/SAAOAz6GC/fEKoGdw8wT+9Wn4DlLGpvzEvwkZy86e/MTPazPwKwz+/3Oc/UO22P2/0Vlii7mu/ZkYArwOwob+N306SQgjRPzD7jg/cwK6/oSVMnjWSzb/6bIk6xyt8vyX6xiOANFc//NKxhRwHhL8AAiBhvSGKv93T7qfVKnQ/qNxbtu2fkL+FGWlaMADRP7k9v+lOq6k/EM6+C6qboL+2PUxNLA+/Py77KF9Hd8G/n3OubLdnvr+36m0XGF6Hv59pNfErJ4O/c39X7iK/wj/BHTC0Bo6Ev5ZYu4j6C4S/jiSd861LvL+hR/UwW9eyv5TDRB5MKa6/JxsXNa5cqT855l3PGQG3v0/fW5fzzrI/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzgxODIxMjE2cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM4MTgyMTIxNnEBYS4CAAAAAAAAAArO55ZKp8k/mCSQ74iCu78="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    4,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        0.24715181855225363,
                        0.03881530308881449,
                        3.926276376405378,
                        -0.45106778023915883
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4
                ],
                "values": [
                    0.24715181855225363,
                    0.03881530308881449,
                    3.926276376405378,
                    -0.45106778023915883
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 65
    }
}