{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9144075147812151,
                            -0.035303070108670544,
                            -0.00023484115333263084,
                            0.006728886611641883
                        ],
                        [
                            -0.006386631317812813,
                            0.9809077205619151,
                            -0.02328329247918639,
                            0.03575477798086703
                        ],
                        [
                            0.008347529079190542,
                            0.07628225200508001,
                            0.9549861578310684,
                            0.015530641191746799
                        ],
                        [
                            0.04051171378110583,
                            -0.21396812810212595,
                            0.05621995634065848,
                            1.0442552358393957
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4,
                    4
                ],
                "strides": [
                    8,
                    32
                ],
                "values": [
                    [
                        0.9144075147812151,
                        -0.006386631317812813,
                        0.008347529079190542,
                        0.04051171378110583
                    ],
                    [
                        -0.035303070108670544,
                        0.9809077205619151,
                        0.07628225200508001,
                        -0.21396812810212595
                    ],
                    [
                        -0.00023484115333263084,
                        -0.02328329247918639,
                        0.9549861578310684,
                        0.05621995634065848
                    ],
                    [
                        0.006728886611641883,
                        0.03575477798086703,
                        0.015530641191746799,
                        1.0442552358393957
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.07537795686960613,
                    0.011501599414514714,
                    0.017446560651808544,
                    0.003582237699675262
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.011734630031174675,
                    0.03598091515614488
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.006401872424153271,
                        0.0011648971071047745,
                        -0.004746659997852509,
                        -0.00015996037695523158
                    ],
                    [
                        0.0011648971071047745,
                        0.0016216695675125709,
                        0.0006992535433807956,
                        -8.384623299358823e-05
                    ],
                    [
                        -0.004746659997852509,
                        0.0006992535433807956,
                        0.018257351283338608,
                        -0.0019490372559592961
                    ],
                    [
                        -0.00015996037695523158,
                        -8.384623299358823e-05,
                        -0.0019490372559592961,
                        0.0008597273229860314
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            4
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            4,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzIzNjQxNDA4cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTMyMzY0MTQwOHEBYS4yAAAAAAAAAHO5u08MEeY/pBsSm08+3L8P3nxc98nnv3nkEiqEW9m/OGiR+JDB7T/vloWAErzpP6pxrbFuDFC/H+Vnugdw4D+F4D1k6LJoP4Kg5FDdh9q/BLveIxmfv7/vsCI4l77Nv3CI5F0iN+W/8RwhIr/JVr/3G7S1lv3Iv58EkT6lIPQ/0neZ10i1y7/SnwMc7mfSPyQoEAhglce/W8ZRlyY0r7/6EuhouQC/vwy04qNvfcg/3B2LSz9F4T+K/DhHuPjYv2ZDnakFwdu/4POHORlA0D/H6XpUj0fDP43gS5c4Bqu/k3/YZUQt0T8UoU8pYTmZv9cJqlq/c6c/6qqhwYieyr83LJ3OGCe8v2Ah9kLfLsE/8O3qk5V9tL+CNuRdoCDaP13y8t6zaOG/XPNbDYk24j/iHHFUZiSzPz26pV6v7N8/SZ4SgDWCxj9Q/YzX5oDRP/zAMKSgbue/Xvp78jWq2L9z9bKB0KKuv4wNOvaW7eq/Adg371TC3j/5e9C602DZv4MQcLB/Z9G/fvV9h61O6z8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzc5NTU2Mjg4cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM3OTU1NjI4OHEBYS5kAAAAAAAAACjkiSZhiNC/2/1XAIyyyT+MGHfajPrSv9s9lsgzmFa/ZCBzpIm+zr8asaY3mVfGv5VksKKwCnq/96P6HNaauz87bdMPoKV5vxJck8X/gqS/KF+63s6Tvj/8i6K89ZvJP4wwVqp+arA/sf0t19FTl79kSsDefWWGvwc8w7yF28y/smuQPOb3gz+PcZZdUaLPP/qi8cxU0JY/c5SN6RFrxb9XZxd1Jp66P/2DKYfxF5w/HSSj1vCMrr8/YmuT5j9Yv58RxzEFiMQ/TM1Mbu2Vu7+nYCG+oRfGP6fXqHp1ZJm/5EC8JwQHoD+luFYcMI3SP63iC/3lEJw/C36rxSVqoj/woachZtWiv+5kHkOEFcY/eBnSe53zuz+PYc1Wz+uUv+3BFJlRkM2/4xjNnNAhyr/3EljWyRPEP2CyHw2XFo2/xl46aGdWvL/aiyU13ZGFP+JLYxOmJ7Q/YUhWCpholz/NNEXfty3Qv+i3tlJPtdA/R83n4aBNrr+lpZQ78bNtv2klE8wzZce/qW/Ika+y0z8q37cIF+i0P8fxJ+za3rC/ptHZ6vylsL+4uGU++jCTv+sWw8U2zYQ/cenx4IJbwD8JmZUwYLiXv6M8sRqqEMS/fDrh485ItT/1d4zFfNSav+KQeuII8o+/bDSJ29XWoj9Kg8SS9/iMv4FeKvsPvWs/NTXQ6rxwcb9FtSi8b3C8P1vWrlcmQGg/sBamTV3Vvz8FXU7CvlqWvzfyPaRGzKS/r7YZopbPwj+CY1zLuHG7PztSjC9LWnO/Buomy61Kpb/ATbFRIWLRP6KA74i93qK/Nd55QMEn0L8ChbXDI66Nv16C47k1TKI/tYYwE+cli78O6KIHjq+OP3OAD/sVW6K/HMpu2HVFdT8tYPxntsvRP7Qk/InzJqg/V2H+fqUxkr8RVNTdGy+/P0M6ckiNOMG/pq7DrCQMvr/UTFFNDkVmP34rtVLML2O/gyUPVbvJwz8N9tpboTGjP51tRpIb0Zo/+gxZiXyhu79TZl/JQQaavxsLSgcbvba/8RJXBPKcmj9ICMMrfXS2v7PEhMqNVLI/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzc5MzQwMDk2cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM3OTM0MDA5NnEBYS4CAAAAAAAAAL+1+3Zkpss/WssksoTzu78="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    4,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        0.41848015212336703,
                        0.11291479922089627,
                        3.12784118826306,
                        -0.2302877327300521
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4
                ],
                "values": [
                    0.41848015212336703,
                    0.11291479922089627,
                    3.12784118826306,
                    -0.2302877327300521
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 70
    }
}