{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9361656229061336,
                            -0.03869905916883411,
                            -0.013536324849509026,
                            0.01195262204366797
                        ],
                        [
                            0.013604868017790052,
                            0.9621099490869586,
                            -0.022183122619786427,
                            0.03616207393803138
                        ],
                        [
                            0.00906140855415823,
                            0.08166686366635482,
                            0.9627801097919878,
                            0.008414413045042441
                        ],
                        [
                            0.06470639978645497,
                            -0.2192972979421786,
                            0.03436159386360347,
                            1.057196321045494
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4,
                    4
                ],
                "strides": [
                    8,
                    32
                ],
                "values": [
                    [
                        0.9361656229061336,
                        0.013604868017790052,
                        0.00906140855415823,
                        0.06470639978645497
                    ],
                    [
                        -0.03869905916883411,
                        0.9621099490869586,
                        0.08166686366635482,
                        -0.2192972979421786
                    ],
                    [
                        -0.013536324849509026,
                        -0.022183122619786427,
                        0.9627801097919878,
                        0.03436159386360347
                    ],
                    [
                        0.01195262204366797,
                        0.03616207393803138,
                        0.008414413045042441,
                        1.057196321045494
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.048276076815601594,
                    0.009303480278735614,
                    0.010626820375395318,
                    0.0020324212283040818
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.02294544472184134,
                    0.01177524685979938
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.005184858917214152,
                        0.0009361519081748093,
                        -0.001532261597160245,
                        -0.0006028497077197881
                    ],
                    [
                        0.0009361519081748093,
                        0.0012801618640951862,
                        0.0009313664126000543,
                        -0.0001266396604417963
                    ],
                    [
                        -0.001532261597160245,
                        0.0009313664126000543,
                        0.007970770289713158,
                        -0.0005314455582537403
                    ],
                    [
                        -0.0006028497077197881,
                        -0.0001266396604417963,
                        -0.0005314455582537403,
                        0.0004449490933566974
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            4
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            4,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzc5MjM3ODU2cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM3OTIzNzg1NnEBYS4yAAAAAAAAAPAbW6dGJ+U/vLKEB/6H3r/jGJ/yDp/ov+RRQs8/5Nq/ZWjdj4Z/7j9izc4pyCrrP33IsNuj/5Y/cdywT8133D94Ueewd/qiP85yliYlht6/6Wxa5gwJw78u0aguG2vMv1GNEbq/Mea/9ouEPclIZb/FYHAr0G/Jv59vJjAkS/Q/+GD2GtQdy78+DX+80PzQP2aF0nG5fs6/FJRsBsFEbr8Uqf0SxN1DP3u+w6Ju+sY/IQPyRZzQ4T+r9zt+qEjWv2aWMx/W5du/DnJWQeLJzz9J2mtKwXW7Px30pjRY5a2/xXzCyQWxyz8ZXW5wT0ajv1jsB53iQKk/fKSxUGINzr82ow3C7LPEv8cBQax2usA/p5K3lPdNtb+tOdCG0xHaPydiSMfFKuG/ZFr/OXcB4D/N7AMGIPSLP8hMuGaHlt8/y232QwRUyT8OwWRukEPMP5kRlRzNK+e/Z7tShdaU279eYAkI/Ty3vxssaO1T/eu/p8P6unEA3z/MPsS/Q/njv8l0MZKFXdS/BF7L6tZu7D8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzgyMTIyMDQ4cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM4MjEyMjA0OHEBYS5kAAAAAAAAAMcfPxNeys+/7MdKrT2nyj8pq/17z9zSvwZdoGG0U6E/o52l5xEjzr+cpCl4VkHQv797TxXiw3w/3d+3eDAftz+OL0zsGEOgv+s9n2LiZ6W/D9IXGx4DwD/3Wpissw/JP02hebPKI6E/Dtngt6jlhL+12ZeDqHWiP86vuU/DS8y/BEAPSJD1dj+HeyZQoY3RPznHWT3sIac/FFgPDlIDyb9qFgPP5Fe5PzfqCBGAjpk/Kgqj08wrgD/JtgsKxX58v0EELPpRWcY/+T/7Rv/mmr8o1l7ErbTGP1OcVacD9ZU/yjLh3LdXnD9+ccPJxw3SP7lt61az4pg/0mm8ZUxqXD/3hi5V5seOv1ksfIOCOMY/cebhVHu1uj9xpx2lhKKrvzUfq/gnBM2/vylFog2Gyb+sbngb6kzBP8v26iFnAH2/ZSmQnfTQpL+0w0NZ2XWZvxBempj73KY/pc7bw2XBlb9NL2ZnX//Pvy5X6RH9+MM/RQlNqJqQub8XFADAdcWcPzcvigTxHMe/eIfDsaqU0z9gpkjmEBS1PzWXN7hoLa6/3FowvTcPsr8EAzANNnmJP86DOh9H0X0/TosWYVbOxT8jbXvNhFG1v5AHLOgGMLS/WJCO8ITpk79VjlC4C9CXv1qpRCbmoqW/tMimTYswpT89ko3yr4Auv9lcnmivxJg/FvYF+j/qkb95YrNnMau5P6TScciPf5k/cNjdCujZvz9J95Prw7Sdv2NOJ9IvZrC/rdK2wDdDwz+cNbYl187CP0btVaAxlHE/LEbMWmCxnb8+oQEVQXTSP2UWahY6nYi/JR5tanYPz79f9t5b6Eivv9xTLr0i7ZA/UwhHH0lKh7+blixucgSRP8bAFof1xnk/HjBW72bDh791+75NYRfUP3uck4n8Iqk/kRvW0fC+k793QAj37be9P3hZo/LqqsG/88OAdx5/tL97APo7zQGSP9IwTJ8R4X4/H6zsJXajsT/easd4T+eZP6QkuBbwDpC/xaUo1semvL9TBgUntVywv5AW9PnsTbm/XJHf5F9Tqb8MfuyA0L63vyElAJS2xLM/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg3MDY3MTA0cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM4NzA2NzEwNHEBYS4CAAAAAAAAAHEhMyqPeMs/Q18goOpwur8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    4,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        0.6246634233609655,
                        0.26733140399180905,
                        2.518185177859729,
                        -0.17300833933144869
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4
                ],
                "values": [
                    0.6246634233609655,
                    0.26733140399180905,
                    2.518185177859729,
                    -0.17300833933144869
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 80
    }
}