{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.8957102662315812,
                            -0.02385195815178385,
                            -0.011165981117413773,
                            0.006564576441231206
                        ],
                        [
                            0.004894402045655081,
                            0.9664858264064352,
                            -0.045927099001294734,
                            0.0600066975838028
                        ],
                        [
                            0.00909123524919891,
                            0.015531910019387621,
                            0.9631570755275594,
                            0.03226368611114707
                        ],
                        [
                            0.12251772980698136,
                            -0.11468425692399146,
                            0.018760494570928966,
                            1.0397372673487941
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4,
                    4
                ],
                "strides": [
                    8,
                    32
                ],
                "values": [
                    [
                        0.8957102662315812,
                        0.004894402045655081,
                        0.00909123524919891,
                        0.12251772980698136
                    ],
                    [
                        -0.02385195815178385,
                        0.9664858264064352,
                        0.015531910019387621,
                        -0.11468425692399146
                    ],
                    [
                        -0.011165981117413773,
                        -0.045927099001294734,
                        0.9631570755275594,
                        0.018760494570928966
                    ],
                    [
                        0.006564576441231206,
                        0.0600066975838028,
                        0.03226368611114707,
                        1.0397372673487941
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.23048678520340737,
                    0.03484306472150756,
                    0.1437682989347966,
                    0.022258926348320142
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.012224951742588018,
                    0.059566691107524494
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.01420816578513831,
                        0.0017141301604555181,
                        -0.030269392833251585,
                        0.0017135875789011656
                    ],
                    [
                        0.0017141301604555181,
                        0.005636078548865192,
                        0.007069850559705104,
                        -0.00318643612734662
                    ],
                    [
                        -0.030269392833251585,
                        0.007069850559705104,
                        0.1355668273081463,
                        -0.025332676637344953
                    ],
                    [
                        0.0017135875789011656,
                        -0.00318643612734662,
                        -0.025332676637344953,
                        0.011585927447933964
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            4
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            4,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzgyODcxMjQ4cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM4Mjg3MTI0OHEBYS4yAAAAAAAAAOJ++5/X5uQ/aAuHzwMY1r9FWU41lermv7m58djwz9y/DNwSjKvj6j92oIhWY9jmP/R5GGDywbU/yJqPu5B24z8/TKSYdFy7vyJvdangSNO/EXkYn8MdrL8chJsHTNbMv4RvqemohOS/CyWp8oveqL8QWdKk8vnIv28iq0GI5/M/2tzN/oa3yL9BUvRE/OXRPxt1A6MJkL6/7aMOUuOlxr9ekcSNOY6bP9S29JYyYMw/0QTQpc+s2D8bSreIGYbYvxXoSzWEmde/uTDOgl1o0T84M+2wt/y2P2mUspBAhru/LjD9NWVA1z+ocbGlqRayv6NCsxQrisg/P20l0ycAxr+7LilLNJ+6v0jtYcXkGsQ/k7eFb+QGrr/K4l1L0lfZP+8OfZhrmuG/mCYjG++E3z8BYqtN2xjAPzbZpkPOUeA/YRyt8L0ouD+F9fKt/xnQP13DirM+D+S/WzZNwRPI2L/MaI0nYVa2v7cf5kYK6Oe/v08DgwFd3z9vCVKCEIjAv4G6fJB3VNG/3JnNhVm16j8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzgxMTI4NjcycQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM4MTEyODY3MnEBYS5kAAAAAAAAAPn8/rRXV8q/w0TlfOHlwT9Ifm6BowLOv6cPKVWKDk2/n3lDvh0tz7+E0lZkNuPAvzCj3NKGVqG/86uSStODqD+/1RH8/tO4vyfLfftRiaG/Nv470Hn4sT++0d+tUpbBP0ckh+6Gkbo/B9ZmA9v5pz8whMUOgsiOP4CcABO1cNC/Bji9fWEXkT+aV/o6ijDBPyrCu0jNo2q/KmkU+VQyv79aU9UCnz20P2tlxvgwdIs/eD0Dd7HZmr8/E4z/Qy+DPxfpd8SIUcA/SteOPzG8Yr8CerZEqrzEP4A/5qUbaKa/T9155vnApD9f5dYeid7NP7ovSr7+uJE/rOd2BjIArD+5U+S9n0Ohv7PUEWMvRLs/mjQkp95uqD8yauT6MmCYv04mgjnJ/MW/DAWQNEljxL8/M4OCuCDCP59v4EnQQMG/MXWbi1+/yL/N16dQmqS3P+5oS5gUPcU/EwKssDQytT+tWSDomZvIv4b/309Qusk/CcS72UKRrb8VoRlILfCYP69Bial89r6/+fm6G3ptzz/CZ1CgK/i7Pw0+HV6Dvrq/KKv/GNaupL+OnUl69c2Vv2pAhqKb8bO/2EGYmt6ctD9WIJiOPY+kv5EYjiiaK7W/J52flcvQpz8canV57aClP3IPaAH6vLa/rYtnrRnunT+tR+nwqSOTPxacSA7/2LY/aWfcMkdHoD+6w1tyVhWLP8d9MnmP650/L9+36Sb8wT9pNTV2/M2xv02gtyWT8Jw/hTSSt3GywD9YMw6u77SaPxIiewbRM6q/3jjrgTdhn796jzKheMvIP57cqWtuTai/F9TiEWGCxb818UcVI1eev6Eb1531GpM/l2axZkQfor/UNd57ebGov6UVJ5Klx5c/yZ/yQuqSYT8tK/22vbnDPzOkE4+v+6U/Jtz+l2rHkr+inzPNeBrBP0vG5nqK0r6/KYR41qKEvb/0SlyH//WwP57PPLpbhLk/XNL1sWS8xD+87mAIp6x6vxrm+XexTqm/PfK5/sjUtb+nbSU8gP60vwPswCtqOIO/rwxno8DfuT8wAP2UWkWwvzfTayCa46c/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzc5NDU0MDMycQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM3OTQ1NDAzMnEBYS4CAAAAAAAAAEFEUE3BnsM/KFemT4Mzwb8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    4,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        0.25036659652517523,
                        0.22710487251365366,
                        4.782444654723047,
                        -0.7997921749143304
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4
                ],
                "values": [
                    0.25036659652517523,
                    0.22710487251365366,
                    4.782444654723047,
                    -0.7997921749143304
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 40
    }
}