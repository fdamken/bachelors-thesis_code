{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.932062277382808,
                            -0.013301666940390946,
                            -1.8608160477978012e-05,
                            0.005585402099489777
                        ],
                        [
                            0.02180517944571121,
                            0.9800522911585315,
                            -0.019832045868033214,
                            0.03458154775682707
                        ],
                        [
                            0.010556707592281242,
                            0.08094104799257702,
                            0.9590994365434286,
                            0.016665246895162703
                        ],
                        [
                            0.0767164814117702,
                            -0.2021237139727116,
                            0.03826494564488637,
                            1.041191630828731
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4,
                    4
                ],
                "strides": [
                    8,
                    32
                ],
                "values": [
                    [
                        0.932062277382808,
                        0.02180517944571121,
                        0.010556707592281242,
                        0.0767164814117702
                    ],
                    [
                        -0.013301666940390946,
                        0.9800522911585315,
                        0.08094104799257702,
                        -0.2021237139727116
                    ],
                    [
                        -1.8608160477978012e-05,
                        -0.019832045868033214,
                        0.9590994365434286,
                        0.03826494564488637
                    ],
                    [
                        0.005585402099489777,
                        0.03458154775682707,
                        0.016665246895162703,
                        1.041191630828731
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.07050641133021159,
                    0.013343820440541696,
                    0.014835564231053762,
                    0.0032564062238855957
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.023296561559316614,
                    0.010671135471546904
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.006021383911155642,
                        0.0011351690904581602,
                        -0.003397714543401431,
                        -0.00028494920587109063
                    ],
                    [
                        0.0011351690904581602,
                        0.001452584968543759,
                        0.0006673651843203121,
                        -5.534727994416233e-05
                    ],
                    [
                        -0.003397714543401431,
                        0.0006673651843203121,
                        0.01301808102585511,
                        -0.0013167483628363508
                    ],
                    [
                        -0.00028494920587109063,
                        -5.534727994416233e-05,
                        -0.0013167483628363508,
                        0.000649633257699421
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            4
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            4,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzgwMTA5ODU2cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM4MDEwOTg1NnEBYS4yAAAAAAAAAL004ZMoneU/8aGvAlKV3b8udG3Rztrov9aDWC/dtNq/qX3Fom3f7D9BwvXt9ULqP+M2yqEfnqU/QJKjfGto3T8UmGcy8YKLvxpjVJZQKtq/w0mI6grbwb+V75TKXqHKv0hnpACCRua/KuCCM3YfqL8AvIzrUGXFv8YJdArE//M/FXazcOmbyb/Tv2cu5TzSPwlJCK/59ce/j2o7J/ddqr/vMVOstQ2nv6vZ0SA9zMY/z/j1dfJs4D/wCXFNp73Wv/uQFpazv9u/EmhWdvPxzT+hHGQ8unzCP5lqmafsU6C/jjIf9MrX0D8ZiWyxiHNxP4+SsZuDi7I/E1KhXhHrz7/NtUGIOgy1v4j5iE5evsA/PFpOZbxir7/9HwBU0+faP1glPNbDZOG/DcsXv0l+4T9GDhNuoZKqP4x5AIQC4uA/SMFgDM57yT+ACljEGw7QPwgI77m4Lue/QsUgC0ZN27/fpwc7foS3v8XLgDNNueq/V2v1ZckB3z+4laP/bR3jv7OWYgqCP9O/l5gyT49T7D8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzgzOTQxNTY4cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM4Mzk0MTU2OHEBYS5kAAAAAAAAAM2iFQG0ZNC/SdF5jy9/yT+QxL4aAjvTvyx5pGQeGIU/zOURGwgbz7/FjzBlShrKvwKrWGb6J4K/8+wyDXTQuz+qkLk/YZyZvxL67g/yhaK/t6DwRfiFuj8xsVB5m/XJP9bwMpcALZ4/pOXtTtYzjb9TxzlRUzmBv+0UvWaowMu/HzH7zXrHgL+WUn2bgoTQP1qKqISirKY/cF+laMARxr8UVHIa6zC7P5GxVXYbmZs/uY/Zn77Gp7/235VJckmDvzgNG9g9fMQ/J/pZ4p3BsL94Z7MXAmvFP2OiXci4lpm/+mQmmiH1nD9xKDwPxZ3SPxuJaPZ7HWS/1mtXTxLzkj93nFMuvUurP/I4rQ6REMU/TvKS5GZjvD93sTg/ILeQv92qcvM80c2/Nh398g11yr8ani6Rst/CP3srLB0bVoe/RUsA/9r1sr/aeCFK24aLvxlu+M4ktbU//IOj56Rulj+OmKSBW17Qv5ddmJCdv8Y/ANOuLyYVs79SjYtZueNtv+LcojTe2ce/7oz2IGrz0z8IDmSGIRy2P9AZDEhrObG/cfQ6R+TpsL8GUMXOtZCCPzKEGpru8Yg/ZmAYLS7JwT8oMB2/NIyZv2vk5A3k0MG/T1xmaA2rjT+W8Efn9hGdv14DGA3kvLC/biEETkzaoj/oi2fVQAmwv5R6bZ/sFXC/tkq+bEQsiL+CQDCeMvK6P4mv2vVAL5C/NhSmiXK3wD9048MtW46jv5eD/vQJvK+/23uhMy+owj9na2lgDZ2/P24sY1+FqYW/Xe1SAptwpr+WnlFFjr7RP04pQP+spVs/CyYsT3sG0L++ElCpVnmCv14eOHT0Sp4/PEVRnyq5jb+nmRAeg8SAP7Tgr54Y6aC/Fio8txrxkj/ZhHdPHVPTP11K51VbB6g/CAQdO2O2eL8hrg7GfDi/P+bVCpoQCcG/NOeBAuwXvr9u+oyMteJ5PwKWuOvrzYA/iu2fMmg9tj/zmA1NNaynP7Oq1iAkxqe/L0g0m7u0u78f4+GpcCO7vyWJ4TEDXsC/plPpN5cUoj9eTzRHDKu2v5/k1pOlnLI/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzgxODc1NjgwcQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM4MTg3NTY4MHEBYS4CAAAAAAAAAE7vz0a5MMw/gU+P0xWhu78="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    4,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        0.5054585348326059,
                        0.20403547494193502,
                        2.8314127139139735,
                        -0.2210094361336105
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4
                ],
                "values": [
                    0.5054585348326059,
                    0.20403547494193502,
                    2.8314127139139735,
                    -0.2210094361336105
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 75
    }
}