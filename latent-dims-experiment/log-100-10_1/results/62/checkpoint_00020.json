{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9457042664642112,
                            -0.0191038814218779,
                            0.015324411598193382,
                            0.00038756854034997914
                        ],
                        [
                            0.0443036277637531,
                            0.986166525203439,
                            -0.03124876254095757,
                            0.07930155575458486
                        ],
                        [
                            0.03740124088328245,
                            0.01954609025032671,
                            0.9634251992182921,
                            0.04226776885186657
                        ],
                        [
                            0.0691570807858746,
                            -0.08399313802595629,
                            0.03866152913992687,
                            1.0237385638966932
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4,
                    4
                ],
                "strides": [
                    8,
                    32
                ],
                "values": [
                    [
                        0.9457042664642112,
                        0.0443036277637531,
                        0.03740124088328245,
                        0.0691570807858746
                    ],
                    [
                        -0.0191038814218779,
                        0.986166525203439,
                        0.01954609025032671,
                        -0.08399313802595629
                    ],
                    [
                        0.015324411598193382,
                        -0.03124876254095757,
                        0.9634251992182921,
                        0.03866152913992687
                    ],
                    [
                        0.00038756854034997914,
                        0.07930155575458486,
                        0.04226776885186657,
                        1.0237385638966932
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.47036547092849323,
                    0.11652868665640596,
                    0.5682700866282048,
                    0.0911274345722041
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.016886656738899546,
                    0.017153781398014132
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.025759472531860728,
                        0.00622781822960583,
                        -0.07352806231658393,
                        0.0030678565784710288
                    ],
                    [
                        0.00622781822960583,
                        0.023952934820268112,
                        0.008583449956137579,
                        -0.023209894990494938
                    ],
                    [
                        -0.07352806231658393,
                        0.008583449956137579,
                        0.3360462023515396,
                        -0.06127713970930648
                    ],
                    [
                        0.0030678565784710288,
                        -0.023209894990494938,
                        -0.06127713970930648,
                        0.05059691562317778
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            4
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            4,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzgwOTU1MzI4cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM4MDk1NTMyOHEBYS4yAAAAAAAAAFoWawofQ+Q/Z+cJYcz81r/mEJ0ZiW3jv7A9sZfrv9K/vHlImmJy6D/gt0rRseLjP0bfI834PcQ/QpnIH8HV5T/2PWKQqQfLv+/Qs0pP69S/eY6OP9rFi79nX3YJ+5DZv07RUEu7ueK/PECGoUXzs7/OelBP8+a9v1nxFmozSvE/LQ0vSFPRwr8QKh4VOOzPP6HzXXk6S7G/rdQZaUqAzL8liZP68G2cv3lZueQFq8k/hxOQE0Bd1T9/rsEJ1nDVv/UTnCCkf9C/Mi43+fMwzj8DInSDxpm2P3Ul5Lmkj8u/S7u4KIIl2D8DU/n7ukvAv4rDghv2LNI/ytOP9jXbub81GuyBypWzv/xe5B2wysY/kkGCc2Kgl79wGTQ0YS3QP1WM3K1LOeC//t3ylF454j+5jRgpib/FPwGxnJRNL90/OpGKKQT5pb8psKwHvRHLP06cUuloeuC/QaQI7p0y1b8gtibe2xSxP/txv5hy0OS/Sg3yqnKA3D/Vl2mIiUW3vz2l3YQzGMW/uls38xkY6D8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzgwOTg1NDcycQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM4MDk4NTQ3MnEBYS5kAAAAAAAAACyyhUmQw8m/oRDGpSUWwD+xYpkMJ9TLvxYUjojphpq/UzX4jdQW0L/0dp0uZDvGv1Ewc9iaUZ2/aZh2BmuTsT9W9L+NDuW2vxnqWRiei5i/GRqeW1hmgT8uv3rIA8m/P+nxeMV+m8U/Z0U5/2Axsr8mgWjtonWRP40iF2rkxtC/eDs6vrpgVb/1rQHMIYa5P9KZ/LvDd5I/689WEaNvu78yRUeZhh2wP+qzSzdaVYE/BnKkRHmGk7+fZOiAuU+dvwsPazkofXo/8Zagkbgcp7+xhQtCNy/JP/9qisSa5LK/x79q8GM5sb89KIW67erLP0VKsBLgPao/pstIAkWppD8apD/xgH6kv27jEiCeLXG/pEzljH5Lnz+yxSzXPMqyvzMCOXd3wMO/fS7Yrvdswr9k+3GNuGPIP2GjacQrTcm/6Yil/6Htxr8bA5ulWNC6P1wbZOUtg9U/7aTLEqn8wD8lHv7bWGLGvx96s+fX+cc/DJZXf92btr/rDcBZhdWHP1MUp1Uxg7q/Lu7qhz84zT/T0FmVs/O3P3bpAgxwlra/IJEIb15Dpb+URDGBSxGhv/0gb1ONn7u//TH0cAfnoT8gqlIU5P+Pv8rgGZeUvbO/RjxxvsL6oz+s5oqpo1uxP9043BLQILq/K6melZK6oT911GBZGm+lP/QyIjHYD78/M09jEqpxsr837nrWTEObv9di15AEkJ0/UfAuwj+mvT8CLpzrCt3Av7wWoPVaYqI/tmGBIKLXwD9bTxx/iXmVP9YRjM0XBbe/ew1StPBQor8WR97ENB25P2xmKEBNa4q/A2kjU2LDub/wrVd8RdqcP2cbNnqbQ4Y/znWkwWhDob/xGPxHsQTAv/IGfr+w0bS/LUQ5hNsdhj+XUwqWUr25P3d4WAELDac/A5vfJ1Urkb/ocfV6LjTBP9vwZrnMZr+/tiWJ/TAPtr/+AQ6BkIGNP/PgxSmVrrs/zjlCJCA0wj+ToDHRz2auPxd62FFB8FS/sf+HWcL/tb+SqO99uN2fv0s8MA8Xco6/3zxHCQqcuj+nQr8pe4Kwv5/NrhPolag/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzgyMDkyNjU2cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM4MjA5MjY1NnEBYS4CAAAAAAAAAGZ1ICZRWME/riT2DPslwb8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    4,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        0.500361957224791,
                        0.2285164559797805,
                        3.547247342457697,
                        -0.21360050948599701
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4
                ],
                "values": [
                    0.500361957224791,
                    0.2285164559797805,
                    3.547247342457697,
                    -0.21360050948599701
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 20
    }
}