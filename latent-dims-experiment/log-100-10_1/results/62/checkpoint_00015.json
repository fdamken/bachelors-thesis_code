{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.969002137498159,
                            -0.024088488511094137,
                            0.022400616284561775,
                            -0.006326954255570271
                        ],
                        [
                            0.04688923878045924,
                            0.9827921186065547,
                            -0.011517904647415016,
                            0.07544735386817619
                        ],
                        [
                            0.037712998399596215,
                            0.016453909145854612,
                            0.9732732866484078,
                            0.03951497754457808
                        ],
                        [
                            0.05804097424380844,
                            -0.0812422428720803,
                            0.04044930655696217,
                            1.0124607200709088
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4,
                    4
                ],
                "strides": [
                    8,
                    32
                ],
                "values": [
                    [
                        0.969002137498159,
                        0.04688923878045924,
                        0.037712998399596215,
                        0.05804097424380844
                    ],
                    [
                        -0.024088488511094137,
                        0.9827921186065547,
                        0.016453909145854612,
                        -0.0812422428720803
                    ],
                    [
                        0.022400616284561775,
                        -0.011517904647415016,
                        0.9732732866484078,
                        0.04044930655696217
                    ],
                    [
                        -0.006326954255570271,
                        0.07544735386817619,
                        0.03951497754457808,
                        1.0124607200709088
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.5977949464889432,
                    0.1890571600377148,
                    0.7473337621568809,
                    0.1506105605950071
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.08444035105493822,
                    0.0077729428123069514
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.03451889914900358,
                        0.009964775004109167,
                        -0.11358308811825713,
                        -0.0024016429681756463
                    ],
                    [
                        0.009964775004109167,
                        0.06121761143094778,
                        0.010915288688049585,
                        -0.0668455881917044
                    ],
                    [
                        -0.11358308811825713,
                        0.010915288688049585,
                        0.5330886589048145,
                        -0.05893320636463972
                    ],
                    [
                        -0.0024016429681756463,
                        -0.0668455881917044,
                        -0.05893320636463972,
                        0.10625733523734207
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            4
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            4,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzc5NjYzNjAwcQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM3OTY2MzYwMHEBYS4yAAAAAAAAAKHIVP4ECOI/BGBm3UHq0r/y3LF3Nv/gv1XDCUx7ldK/fEL5KJm06D+p2NXObF7jP+CXxiYKFMU/ZJHF67065T94vUeb9srIvx4Ic9R7HtO/6BBYtdYfYz92dkp+3IXbv8kUmGbx5+G/QfE9sJz/qL8UK+YZfZ2zv7KBN43AzvA/tyy8EkDht78OLyEmM/PNPyCJsRw+Gae/fLS19kyN0b93Ukt0PtWgv5qBmnINDcc/c70/PHKS1z9nyYXtLiPVv7DMHh8fW8u/OUNmuS0Ozz+WUwBcy628P9qTKsIcxtC/cSiUQaYq0j86vf/fpdfBv00IM9CpA9E/gDm4VJ1Bsr+btXV+uZCtv/mr0fbGVco/WBD+pYH5b7/yAl670dPHP202FjJO0d+/n2TAvery4D+umDXdKQXJP1HjwcNL3No/R6INpGkZtr8Ss0uTHXPJP6ZVyOC8hdq/KsvCs+/p0b8inC2N/XfEP307u2el6OO/RFKY4kpC2z9VGvNXjqG1vwlpJGnXu8C/x+tDr6vr5T8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzc5MjIwNjg4cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM3OTIyMDY4OHEBYS5kAAAAAAAAAFp6o3FXdce/xE29Vx2zuz/gIQYtm53Jv+/Jk8oEDpy/1Fje8TDOz78X3RfhYZDFv4hF88//Fqa/0MZuTY4DpT+xYC6Jt6W3vye6RpnwEpi/7EuGy2afoT954n5spVXAP1CiRp+Cqck/CH30OKemtL92pvXxlTOgP/rgv3lrddC/XrIwfFurmz+9YlUwaz+3P1b3ujSrX2C/BOVliZJutr/MBfDg3MKmPyZIXuunG5A/n9YO/8TGk78XqVEtKHOxv8Q58nf6j4S/anH9KL+LdL8sOrkwjm3JPw2BvU3fhKq/aigQKR2Tsr/WfLFS26vJPzLyt2dpn6A/s3nliZgMnT/BsEnPBtKRP+BrxlByw5e/fNFSkhvciD/sE2PthZOxv4nBxrjracG/cz9bbHikv79DFKp7pb3GP+8NFcVklcq/m6POCQ4mw7/Bn+jCO+a4P2KPD1S6BNU/UOCLRAqLwD/oCTpybzfEv2wY6TFEdsU/YiI1K+ULlr9FbGAv6vB+v43jtJaT+7W/aHo4L4z8yj+4LkInuuCyPz7gUn1T7bG/IfJ/ScwLpr8j5Lzs/Vyqv3wA4LGmL7y/72+vJ91rpz/7VJfe1/Stv7BSWsC67qi/YvObL1pNoz+Y07r9EYapP6zELAuj6Lm/M55CuGhzoz/N2xGT3mOwPzAjuQTA6bg/CIm/0TTZtL+8bsYjp1+cv8QJQ39Wyp8/shA237Cltz8jeILDVmnAv+US5ZUna6E/hgBcrG8LvT9qhoUgui2DP2wsQKMe8ri/BoPuBjnvmL8mPT2652e4PxJMcN6i8JO/cH7t61oWub+aWX71LuGfPx3sNYDf4H2/mOSlsJN/oL+VQ4I2LfTAv/g6qtgBZr6/Xp8MiB4UdD9yf0rYtvK5P4aejk+19Kc/ccwfk3EUdL8TrpOg5hrBP1o1pMEr1bq/este1RwBuL8vfZ9w1i+iv5GAwziiX7k/WIbW1o+3vT9LIv9QGpKwPz9n/NtwJKa/I+3uPZGFtr8Kfkelzk2YvwfAEWiPXZq/ljYDCMoDtj8kghb2S+2wvxPY9KWRYqk/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzgwMTA5NDA4cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM4MDEwOTQwOHEBYS4CAAAAAAAAAE62dPiqMr4/TDF4yLj1wL8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    4,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        0.5815459973710148,
                        0.26198863524575794,
                        3.1336600644366137,
                        -0.1303868381823257
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4
                ],
                "values": [
                    0.5815459973710148,
                    0.26198863524575794,
                    3.1336600644366137,
                    -0.1303868381823257
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 15
    }
}