{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.8940426271234031,
                            -0.0217213394291975,
                            0.0059134031840679,
                            0.006927756352823293
                        ],
                        [
                            0.010107050957051715,
                            0.982430747843327,
                            -0.04569540650976904,
                            0.05449567533666932
                        ],
                        [
                            0.012760145782453387,
                            0.028687332969166104,
                            0.9592462778510072,
                            0.027952038738880018
                        ],
                        [
                            0.11179529137146271,
                            -0.10184455546933867,
                            0.014557240718279763,
                            1.0287152494593084
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4,
                    4
                ],
                "strides": [
                    8,
                    32
                ],
                "values": [
                    [
                        0.8940426271234031,
                        0.010107050957051715,
                        0.012760145782453387,
                        0.11179529137146271
                    ],
                    [
                        -0.0217213394291975,
                        0.982430747843327,
                        0.028687332969166104,
                        -0.10184455546933867
                    ],
                    [
                        0.0059134031840679,
                        -0.04569540650976904,
                        0.9592462778510072,
                        0.014557240718279763
                    ],
                    [
                        0.006927756352823293,
                        0.05449567533666932,
                        0.027952038738880018,
                        1.0287152494593084
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.2637089114913267,
                    0.051389487527722266,
                    0.1853057073741058,
                    0.0372352005632982
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.06714993708648763,
                    0.026200315209193036
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.01596165072450116,
                        0.0016904260644809294,
                        -0.036781790805172854,
                        0.002177497925107741
                    ],
                    [
                        0.0016904260644809294,
                        0.006734472682233636,
                        0.009494012740811075,
                        -0.004622881434649312
                    ],
                    [
                        -0.036781790805172854,
                        0.009494012740811075,
                        0.1688060009359269,
                        -0.03379868224343108
                    ],
                    [
                        0.002177497925107741,
                        -0.004622881434649312,
                        -0.03379868224343108,
                        0.017365953655360034
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            4
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            4,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzgwMTIyMzA0cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM4MDEyMjMwNHEBYS4yAAAAAAAAAHd/lft3sOQ/sq3Zm8Um1b8p8sxRItrmv4Ys2spbk9a/B/b9/2Lo6z91ZOd60kLlPwEVRXkvyr8//EI374i84z9Xq8hIemnBv47ykho4ate/9DzdljsTkL9okSPje/nTv2avBktH7uO/ObyK0A5Crb9xwdhA7h7Fv9kk+PCuGPM/gqB55EFhzb8aG3Hnq57SP8yAKzK18bm/nwrkFgiOyb8etqQEtWGovzU9VEytjM4/GigRaBmw2D8VohfL0IXVv2rwa+fnIdW/Yeg+wK2N0T+m8VtXyK+4PxhbRyeIpbC/U6ktZr+g1z9OpF7BGIumv7DZX/OQGsg/9MaYV+kfyr/QHUqcGpzBv8Qt5xD97MY/k7PNyRwXqb+bzoVGBNvYP5DxPvtFjeG/lWV9XEea4T+ifcNnTyrBP0JVhBShed8/0Kalfg/Ltj+t2eBugPTPPyYngvDiTeO/8zM9Z0Nl2b+4vh5FUbayv+xIpj+Zdua/3GYNnUlm3z/iJ+2XHsLHv4Ub1HEhL9C/vOQKmwBg6j8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzgzODk4MjQwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM4Mzg5ODI0MHEBYS5kAAAAAAAAAAHe2y/1YMq/+lJcs57VwT9pTBh7sv3Nv0MCXrNLkZS/dSB8uipyz7/uJVJA+ve/v0KF60R3VKI/N3p2yY16oj89xTV95Fi2v4M8dSswQ6C/s4Av+WvQsT8jjaMT7sPBP9q5av0ahcQ/O7m5b6dLVT9aJyCTwg6av615ACoundC/onqJVM37mr+kC98F78/BP6FA3SJTyFg/vCMPxiEawL8HRQMbiE+0P++VOMe28Ks/SHW2Cim5n7/k+wC/80h4v9FXs4xHGLY/EBMV2obKmz97S1h6tL3EPz0B798HrIg/h5PBdpYegD+2JUcjMOzNP1saUkBin5G/5y8NVcgvtj+GwoJyv/IivwDhGawnTbM/I57K1t1tqD8+L6LKJmGrv4P12Pjf78W/Nygdrml0xL9GvpVYYe7AP3g42NwzicW/y7BC5BCbx79TQkPAAnO3P8/nfXaNK8k/mJS7C3llrj9FpTcSDJjIv7pNj3dMz8k/eN6zwSkXtb/U3CiGct2ZP7LMciRw876/ZRjZE69pzz+k2+G0RGe9P++p60a4/7u/to8UK+ojo7/WEaw9/lGbv7qbJK7vprm/FvuWDoLXrT98OJAOlMOhv1iVRDYTC7u/2Q+2qddgsz/fy3eBZrmlP0im8IiF1ra/5v7nULp1nD/XyB1OkteCv6z7Y7XWU8Q/bT7YXT8rp78qHawI+jKJv58RaIp7MoC/PITssXejvT9Rc1Eb9Euyv1MQD4PgRqA/aBmkgTBkwD90CPEEKZysP280P2iVbbO/qIdg+SvkkL+qvxp0gXDFP727AukUjK4/qPmNIaqExb/zrw59FQtwv9Q/rEaeOKa/0ItrfESWo7/JmBEvww6+v7MVia5kd40/SFks15fYWL/leaIZgATEP2MBF2bY+qQ/k/LZtfGSpb8bvqS6hovBP1rZ8UKpUL6/wf8wNbunwb8PTXK0jDSwPzFQs+KiOro/o9PgcBRtxT+tlKjN+oasv4tM5ZfF/Li/9GlqVQMUtb830xCE4uO1v0TtGu/OB62/zpHC5YqXuT+CcpG/eRevv9ERzu4GZ6Y/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzgyMjg3NDI0cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM4MjI4NzQyNHEBYS4CAAAAAAAAAEnQfDwjmMM/n9pFojKVwb8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    4,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        0.3127536663071407,
                        0.21024943631071516,
                        4.439928284340302,
                        -0.6685242455853604
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4
                ],
                "values": [
                    0.3127536663071407,
                    0.21024943631071516,
                    4.439928284340302,
                    -0.6685242455853604
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 35
    }
}