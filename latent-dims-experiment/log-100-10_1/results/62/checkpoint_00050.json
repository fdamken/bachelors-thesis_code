{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.8919768820241623,
                            -0.023326363025512,
                            0.008151681457017237,
                            0.0030701665319212627
                        ],
                        [
                            -0.0018801094485913496,
                            0.9772231356397,
                            -0.04597617698734135,
                            0.05137635436767744
                        ],
                        [
                            0.00230679242029496,
                            0.03256240691520264,
                            0.9546781849276212,
                            0.027970780724043017
                        ],
                        [
                            0.1276782190052425,
                            -0.12321101404436019,
                            0.009723541053241304,
                            1.0418333477803647
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4,
                    4
                ],
                "strides": [
                    8,
                    32
                ],
                "values": [
                    [
                        0.8919768820241623,
                        -0.0018801094485913496,
                        0.00230679242029496,
                        0.1276782190052425
                    ],
                    [
                        -0.023326363025512,
                        0.9772231356397,
                        0.03256240691520264,
                        -0.12321101404436019
                    ],
                    [
                        0.008151681457017237,
                        -0.04597617698734135,
                        0.9546781849276212,
                        0.009723541053241304
                    ],
                    [
                        0.0030701665319212627,
                        0.05137635436767744,
                        0.027970780724043017,
                        1.0418333477803647
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.15166902532632365,
                    0.020923424878789093,
                    0.0742491184001867,
                    0.012379221789679961
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.08013110776088433,
                    0.006768902581877626
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.010757652587599892,
                        0.00154202821075905,
                        -0.018392054950675307,
                        0.0008034512221944679
                    ],
                    [
                        0.00154202821075905,
                        0.0037702150788962857,
                        0.004053317897222852,
                        -0.0014692671270207236
                    ],
                    [
                        -0.018392054950675307,
                        0.004053317897222852,
                        0.07950360204912954,
                        -0.012868939214292219
                    ],
                    [
                        0.0008034512221944679,
                        -0.0014692671270207236,
                        -0.012868939214292219,
                        0.00499406573889094
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            4
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            4,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzgwOTY2MjcycQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM4MDk2NjI3MnEBYS4yAAAAAAAAAN2ofOY3muQ/pNIF3gYa2r+N9D3jVkrovxahQjcgJtq/ZeLvkXKP6z/xSUj0fzjnP6oWUwPmn6s/SdtctcKY4j9rWlnzaZ+0vznA0uxBEd2/XBU3s97fs78BGlUsiH/Hv02wqfux2+W/jzbnlTeNpL/0ALYz96nFv7925SxnX/M/ScDoODvZxL/ereaZaWzRPxwGm1XN9cC/Bgc673+tvr/+8gqDFVOwv9lbjuK2bMs/9bp3D/Ec2z+0Pkc5PObXv37szNshtNi/wqwSLfY70D9TsL1kXt7AP4t65UEpwqS/lbRZA4+71z+SM36djop5v/4CjVqXd8Q/HM7QtRuLxL/OzJjTLKO2v4aK+0O1r8I/G6YO+y8/sL+ridaQDtbbP5cYZWuF7+G/q2OhPiQ14D+ycJFMR8/AP0MFl9hROeE/tjJEVqdRvD9/nMjZ5FvPPzfldcYtZuS/JwZDq3c42b+qZ5boJ8u8v+gb4+4mg+i/UFcIlYS83j8bGd4bTdLQv4tMB+/4QdO//3crQzWH7D8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg0NjA0NjI0cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM4NDYwNDYyNHEBYS5kAAAAAAAAAAqMjFhuwsu/0AVnA8qLwz8aZv3V7sHPvxMpnwnssq8/82EbOVCO0L9S+PbtMunBvxSwotBoMZG/DqKWyZ3GtD96q4uStSW1v73Fv1k95ZW/ZS2xJH1DvD+vJ3OEZlDDP4EzWHv0rKs/9HBPtORIKT98wPbjWpZxvzGM25ebK9G/HM0DR/cig79cTT26DH7FP4Ci8x26C6U/bnrszKXHwb8O2njwLqq3P8PSVGuGpqQ/wrxXJhNUpL/rQ/UVTjWJvx3N4vFQGcE/Edhwiwndkb/N/J5QELfFP8pSjfZ7e30/VRJNsybINr8wh7t4Wj/PP4i9Uy73WZ4/GqhpUvSnsT9LkGKvHzmRv5blkh53JcA/YjhNcadcrz+Viuyil3Ggv/0fG89Fnce/I5g6bccdxr/bUrbyTXvDPySCIau5YsG/uNZqeF6Vw78/F5ntfAq2P+lE/sNcG8A/VraaAuzntT84LuzmIVvKvyRWqUpRGcs/rloe9bS1n7+VSneiej2jP63FLf9YO8G/ewj/HGKW0D9su6vlYnW0P4XskHD7i7C/ZiXRBIqesb/4DUGkGEWjv+o++5XltKy/UVHOnx4euz/kLy4TW2qMv7UrOMxdb7q/RulMqR55tj8mru1cCxOkP+tRp/Bhl6m/0LkopVwZrj+eEL2pxQaRPynVz73Jy7k/ggp18eSZlD/cdGzVcKejPyThN1fli5A/xibOHihTwj89MfKN0B+zv7vkd4ggQVK/oKQi8s2OxD9qPl8FcNGsP6AvXucnlZe/7zgrsROukr9DwRyGJUzKP/KHK+Invq6/aYou496Ayb+VEukptLtTv9MnyGqrX0u/QmA6fIN9gL/LGLoWH0Wlv4MnBRjT1qC/OKo/gjU0hz+GdiKMaOLGP3RN5ivDMbI/N7pGH0ohq79KshlSPri6P3P/ZoKGScO/a5qnqF72wL/vJGESfxyYP3ZiGXO6nbA/+z96C9IRxD9VbDR30qSxv5kbbfwDkai/PeaVodgbvb+G3yHxiHu6v06JNeDBJJu/GRYHkzZkuD/e8NxEwpK3v23R//RmPbM/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzgwMTM1MTIwcQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM4MDEzNTEyMHEBYS4CAAAAAAAAAFpZEJBuYcU/6mVPrbwSu78="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    4,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        0.26054037039808464,
                        0.18413502963434378,
                        4.69487332833785,
                        -0.8196620678256558
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4
                ],
                "values": [
                    0.26054037039808464,
                    0.18413502963434378,
                    4.69487332833785,
                    -0.8196620678256558
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 50
    }
}