{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.8934761780332998,
                            -0.022848502795537774,
                            0.0005868664746058119,
                            0.003602359519762736
                        ],
                        [
                            0.007083779178245735,
                            0.9866280267274331,
                            -0.04602555880646728,
                            0.047797677132731246
                        ],
                        [
                            0.011325523777545166,
                            0.040863476132812625,
                            0.9536221966323047,
                            0.027497795356350864
                        ],
                        [
                            0.11381997040016686,
                            -0.12250161702416355,
                            0.017407179457286325,
                            1.0383488015531288
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4,
                    4
                ],
                "strides": [
                    8,
                    32
                ],
                "values": [
                    [
                        0.8934761780332998,
                        0.007083779178245735,
                        0.011325523777545166,
                        0.11381997040016686
                    ],
                    [
                        -0.022848502795537774,
                        0.9866280267274331,
                        0.040863476132812625,
                        -0.12250161702416355
                    ],
                    [
                        0.0005868664746058119,
                        -0.04602555880646728,
                        0.9536221966323047,
                        0.017407179457286325
                    ],
                    [
                        0.003602359519762736,
                        0.047797677132731246,
                        0.027497795356350864,
                        1.0383488015531288
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.13207572835253922,
                    0.023560559734019017,
                    0.05980872749989908,
                    0.011826411046899785
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.03376237468977888,
                    0.010678771161111399
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.00965079540221301,
                        0.0016047833234980463,
                        -0.01482804097224677,
                        0.0007021059329805346
                    ],
                    [
                        0.0016047833234980463,
                        0.003255301442174653,
                        0.002713094822795803,
                        -0.000986085162121439
                    ],
                    [
                        -0.01482804097224677,
                        0.002713094822795803,
                        0.06225526524524838,
                        -0.009680109902217904
                    ],
                    [
                        0.0007021059329805346,
                        -0.000986085162121439,
                        -0.009680109902217904,
                        0.0035070602226788816
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            4
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            4,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg0OTM0MDQ4cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM4NDkzNDA0OHEBYS4yAAAAAAAAABvqG/fazuM/eWu6yuNz2b8bGzYRjfnmv/SDk5NYlNy/xanqc1oQ7j9cyOE9kcLnP2MxHTVj3Lk/zxpQ5ASw4j8wDRXYbhy1v6OWeBJiqty/oFZCgvebtb8iyQvo1JnLvykgm5xvceW/tEvAjUwvrL+mLsHnFDDAv2Cdtv/eevM/KZQnoAN7xL9/vczk3dnRPyLiQpYXIsG/hULrH6eotr/s8T0r9knBv5RWxcCz7sk/Bp5kX43I4T8aMuCKwSrXvybYJbwI2Ni/YFAMnY3KzT9WFY2Az7XEP41vKr++kqq/nFsSjyf41D8WN2MTKqqiP43A9VC1PMM/zl8d0yzdx7+k4urAn1yxv7MdOEP7wcI/uqFtubuftb/ke+MCtWjaPx7vchX3pOK/zWtFcChI4T/nchYWOPnBP3INaO//neE/WoGqGouRwT/US92aSAHQPyKJCBmiHOW/vyxPijkE2r/CSOBKT8amv1rfh6MTqei/cY/0m9mz4D/6FGfyd07Vv3n1gCGSUdG/oznM4pz26z8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzc5NDU2NTQ0cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM3OTQ1NjU0NHEBYS5kAAAAAAAAAFS0r8j+tcy/bNZbYxAqxD91+mm7uozQv8ks00c1M7g/Fij3uusR0L9FkFqUobO6v8DN5i9nQni/OIvxV8V6tD+bZy/CiNanv3AMz1/A+Z2/DnowQihtuz/2HkmLgavEPyLwGctcg6Y/h+QjiRRSi7+kGwHO4z9Rv2FD4XcA2tC/TZLJvAhqhb+NzOGnQbLGP4RzDJ+vo6A/OXLht8gRwb86Znh3qm66P7K5kWTAX6s/s4jdvfc1er/wcvkDUhZvv45RBxAkLsI/qI+O+Gpqk7+vz/Etk+LGP00+VZc1TWu/s78zaQMgwT9i/pv3qUXQP0VMfFQSyKE/Jmz3GN0rtz96r/8v7zuJv1hg0vO3ycA/81S9mo9psj/UZtI6ftmjvzOMSvsMrci/WL3kjUN9x7/uGRn9f9rBP1NJoQkM5a2/42CAzLPby7/vlxI4+/m3P3dafNX4vMA/9dLKw899pT/9Y9b5YqbLv+9Rua7+b8k/mHSYXixKfL9qH8FOja+eP/1BgBUylMK/2N1eVGRD0T//7YKteVW0PxjOK3Y/bqy/DGqIDizysL/BU+C9JJhxv2oK7rnZHKW/Dcn20DzItj/WgWAV2JmAP8l9iy++asC/zZzyk4jTsz8qg45L1iGZP997gaYh7qi/Yb3+aR4nrT+F9JrU1UikPxg9UAwd5KU/HaAakWl7ej/g/gIU12GpPzm7BO0c0JI/1phYlAikwj+soq17+xO5v/X72fvZ0Jy/K8o1GhKRxD/vdv7W3U6IPzX0j9CVGGC//QV1EEX6n79aTvKuN9zMP3NKZfi8u6i///NGtlwCy78H73L39qWTP5Ub9EGfUIO/RAlXPvrnhL9uuVNlIayev++mJY1ff3a/rHhNyO6vnT+sm31Hve7GP9+u6yAjqrE/N2SswJy3rL/TeVi395O6P+W0A9WnLsO/l6IO4JQ/w7+BSAY7zrqcv2qmQZSjqqo/1N35D6nxxT8DYDou9zSov9pWutmazIu/NpBBaARuvL99M0eMzRG0vxZt4TqYqZe/ordLT3BMtD9rRjF6mum2v0/zkk4Qk7I/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzc5OTQ5NDcycQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM3OTk0OTQ3MnEBYS4CAAAAAAAAAC0JL/0KwMY/9WSSJpzEu78="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    4,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        0.24050703143079005,
                        0.11421178095500115,
                        4.586909543844274,
                        -0.7621005099654796
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4
                ],
                "values": [
                    0.24050703143079005,
                    0.11421178095500115,
                    4.586909543844274,
                    -0.7621005099654796
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 55
    }
}