{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9461331178749185,
                            -0.024998688738577253,
                            -0.002221584636413341,
                            0.009013429455263464
                        ],
                        [
                            0.029607677251756045,
                            0.9784878658151033,
                            -0.02636093952275009,
                            0.033789064539246405
                        ],
                        [
                            0.044431092241048166,
                            0.09247511363738856,
                            0.9556940215297053,
                            0.011728875616432844
                        ],
                        [
                            0.06221261965389646,
                            -0.18406485766561445,
                            0.016919425204778026,
                            1.0500252839172477
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4,
                    4
                ],
                "strides": [
                    8,
                    32
                ],
                "values": [
                    [
                        0.9461331178749185,
                        0.029607677251756045,
                        0.044431092241048166,
                        0.06221261965389646
                    ],
                    [
                        -0.024998688738577253,
                        0.9784878658151033,
                        0.09247511363738856,
                        -0.18406485766561445
                    ],
                    [
                        -0.002221584636413341,
                        -0.02636093952275009,
                        0.9556940215297053,
                        0.016919425204778026
                    ],
                    [
                        0.009013429455263464,
                        0.033789064539246405,
                        0.011728875616432844,
                        1.0500252839172477
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.04053578097638732,
                    0.00852378165045101,
                    0.007865003197224439,
                    0.0016976544972944275
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.010109335382368955,
                    0.016703135057372778
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.004892801264555768,
                        0.0008508723580079314,
                        -0.0008176260454930695,
                        -0.000589536288116907
                    ],
                    [
                        0.0008508723580079314,
                        0.0009985093974464732,
                        0.0007679580345524295,
                        -7.729195439135084e-05
                    ],
                    [
                        -0.0008176260454930695,
                        0.0007679580345524295,
                        0.004964618584468283,
                        -0.0003230638770713168
                    ],
                    [
                        -0.000589536288116907,
                        -7.729195439135084e-05,
                        -0.0003230638770713168,
                        0.00030442617762663216
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            4
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            4,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzc5NTU4Njg4cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM3OTU1ODY4OHEBYS4yAAAAAAAAAOrkbSc2v+U/NE6S9IFS4L/a5hOY/Hfpvzr3/q0a79+/BoV+b3Uw7j936rKiA8vqP/otWy+G3rA/yHfcKxZS2T9pG6tDI86xP9WLXB5FueG/+cgzD/rwyb+wr2t+3rnMv/kjBhngyOe/t+j7ZrgBij+6/PWI22THv+aX6grZMPQ/FikaNhKgy786LlJ4fMHPP8Bhjno+ks2/0AnMrEbmkT9wdM4qVUSxv8yRrLs9sMM/hiGVAlUr4j+IkBzZaVrVv7pkLnRSRdy/vHZSzN2h0D9llodtbcWuP14KBiwEO7K/F/leee7tzz9X29I+Kh6jv7v3BeYps7A/wu8/Xo7c0L+1qp3dBuK6v0bFTo8mL78/GpbCynTXt78UR6Qi3IHaP418VJ9l7+K/i6Yrp9Jw4T/LnFcKg9JxPwMo4FT6cuA/yAEnfe930D9Q7woj6jbPP9mY169kq+e/x+xQSwEB2r+yjK47g6i8v8XCFrIs8Oy/4YAWP8Qt4D8VAdjvTsjkv8YULXWZv9S/6IIgjkq37D8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzgwMDI1NDI0cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM4MDAyNTQyNHEBYS5kAAAAAAAAANh7lwVM99C/T13Ld0m/zD+HQFLSCg3Tv6R5dVX2fps/b+MnKhEbz7/v0u1gCDXRv1Oa+FAchnE/LTL3eqQErz8JBF1Q9D59P8YiH5gENae/rzumqPcWuz9loxSMKFnJP+c1IZFwcKI/WFrp3cNhar8vxUhm2lSFP/0muYEPBcu/cQXLDBlmjD+ATXxlvarTP0dKI5bvB5g/Bt84MJFcxb94v7BGfFa1P2gUwSJg1Ic/K9N57zIkp7/zUXyNZgFXvxqAQG9DWMw/nQJb8nKebD9W/k9+6aHGP/vHOnhg2Hy/IlOYsbaEgT/zBrBu5crSP3EdjhNErYk/+xAM40ulhz+Czo7WqpZ2v/UJMn89tcE/E7qXNIHJvz9gxaf0qbCtv/QfbujJ88+/L+VWtZ2Kx79yh8CmZr3AP9klRUEyo6C/m4lRChcdqb9z3BuzyeOnv2IP5AJz0aY/a5McVXz4g7/wYp71miXQvwoNvCA1lcA/5KD/HCdtvb8qPLkxihxnP0cXyN91dse/qsIOlUDG0z+FSAaN2iu3PyBRPrgAbqu/zWqfDVMcr79lHGh6y61Lv8sP4CXnzZQ/UUjx2n06yj9YT2KQlkKkv8mCt8t8L6a/oWjJEl/Wbr8jfsmwy9Ojv+fNubBdE6+/nKYTrkjBnj9DN+5G5RKFv4lARXNjfGQ/LrNb1Sflib/LNj8nWlC+P3Udk0JCMnS/92Pa1rrWvz83GQvkmW+Zv9FhH8ZITrO/9/m1HG3LwT9Xvc6T0yCrP6AEOwW3koE/nRaaPjdigr9egCTvu9TUP3bExOk+fI6/oxV4ODws0L/FybhLvwSov0A98hLRIHA/XjFzKLeTnr8EcjZy+YSBv9YtCBauX2O/g5b1fnnWiT8qOdXiN4rRP+1hihmzhqE/wKO38FIthb+axjYo7fG/P8AU3G9tPMC/pFsaIKIMub8HQLyZqmuPP8qYuGVwmZk/qX9sBMpjrT9QjC2MmDOXv4WTQCBVxbA/2LX1eXr7ub+FASGqujmpv29DYNEk+LK/RxTIEnWQkL/8ZyZQmSi1v8fiWmZgQrE/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg0ODkyNjQwcQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM4NDg5MjY0MHEBYS4CAAAAAAAAAKcG4Nng4ss/nDoZMaHhvL8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    4,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        0.6019104075771469,
                        0.2639651845121504,
                        2.4378984114012168,
                        -0.16767725288816246
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4
                ],
                "values": [
                    0.6019104075771469,
                    0.2639651845121504,
                    2.4378984114012168,
                    -0.16767725288816246
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 90
    }
}