{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9551552321445523,
                            -0.016246981635990258,
                            -0.010203793883138764,
                            0.008953109751120406
                        ],
                        [
                            0.01252947485472738,
                            0.9759625289896299,
                            -0.02781117771711297,
                            0.03697104754463609
                        ],
                        [
                            0.03393079474602821,
                            0.08284904381575049,
                            0.9593255638591586,
                            0.014862601334300124
                        ],
                        [
                            0.028620324801517282,
                            -0.17717777227562945,
                            0.012503704105476372,
                            1.0531371718968556
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4,
                    4
                ],
                "strides": [
                    8,
                    32
                ],
                "values": [
                    [
                        0.9551552321445523,
                        0.01252947485472738,
                        0.03393079474602821,
                        0.028620324801517282
                    ],
                    [
                        -0.016246981635990258,
                        0.9759625289896299,
                        0.08284904381575049,
                        -0.17717777227562945
                    ],
                    [
                        -0.010203793883138764,
                        -0.02781117771711297,
                        0.9593255638591586,
                        0.012503704105476372
                    ],
                    [
                        0.008953109751120406,
                        0.03697104754463609,
                        0.014862601334300124,
                        1.0531371718968556
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.03892294144296973,
                    0.008979003315484468,
                    0.007513558683790151,
                    0.0015365695816119463
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.02530357614267632,
                    0.0065629254981723764
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.004789336094213781,
                        0.0008403602973714175,
                        -0.0006453365579808246,
                        -0.0005653772694745735
                    ],
                    [
                        0.0008403602973714175,
                        0.0009124880550414605,
                        0.0006575927165044515,
                        -7.143150352530853e-05
                    ],
                    [
                        -0.0006453365579808246,
                        0.0006575927165044515,
                        0.004097695925827871,
                        -0.0002682203716791731
                    ],
                    [
                        -0.0005653772694745735,
                        -7.143150352530853e-05,
                        -0.0002682203716791731,
                        0.0002602931472589533
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            4
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            4,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzgzODc3MzI4cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM4Mzg3NzMyOHEBYS4yAAAAAAAAAHf4ei41feY/FzyIhr0y4b+8ZG7Bq+Ppv3jrjAu5QuC/S3CeXsAE8D8WkM/eBYTqP6mhJvQ25qQ/k3pZnuCp2T8eeQ+AvY+4Pz67MX5zyuK/L8vEpvpfzL9Xe5331YnJv01bIM9lQOe/55At8RDipD+PnkhXy2HJv9EdVKPbF/Q/uraWpjb1yb/IqD2Mv2LOPxp2JkXpCM6/EBd+thNhnD9NVT3NqXewvyQV/ZU2t8E/9sJ2r3xi4j90LbUT0KDXv2jq1Fcurty/dh5jjotMzj8BieyGoYCzP6ZGowJ7zqK/JgocdhBbzT+6bniXYiCqv+HDR3mEI64/LXMx6MPuzb+73qyeJaHCvwzsVOq1Y70/F520wmM7u79krmc0YpTcP6kPDl5louK/jav4tv0o4T9UjJ58gwdyP8/Eb6gdu+A/9fRKebwy0j/5e4V9pqTNP4e/Tn/Deua/Eyj4NIz/3b+77ZUjBeK+vxHINzavOOy/JsFCmZCW4D8rnCP3LQvlv5GiE9y/Xde/RxOSe5qu7j8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzc5Njg0MzIwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM3OTY4NDMyMHEBYS5kAAAAAAAAAIKGYRbEfNG/n26qq6hQzz9eNcitVcrTv1Gd+2h+nY4/OE7hV4Q4zr+ODheFRkXRv0yFEMD9R4k/+7qtFpTWtj8d0KeLIwCav5O8EyKxJp6/iMFmhTmDvD89tYoSFajKPwjzaxqQeaS/wgwecm54lD8LjcrVoB+hP+L+fodEsMy/5SLgHNeKpz8USQTTwOHVP26njkrnbZg/qxR6cRMWx78+czqKwT2zP+GplQSlGnC/5ym3b/aHpL+Aa42Y/a6bP7dUtRLm58w/w6BnPzkpZz+jFmGYEwHGPwcQ+4VFI3Q/j8QEwZjCnT+JDrZimPzSP/CA80vfPJA/sN08+I1Vor++4Dw4/sAvvzKBhhwolsQ/RpKvW5G/wD8SNLVPzmCQPzI+2klNt9C/wiqS/6iBxr9wKXI05nbCP8khV/HLPYg/77DJRXxKt7/YzMtPTESWvyAYGVjfcJ0/mfWLPOetmr/B0AWQvtfQvwIQR2tan7U/QJGacbDsub97y7zrp/efP6zFYAXq5si/BqTHqFaE1D+5+K9yfqq3PySLqIqwY6m/AHIYkB47rb+SP96YdXNTvxBJYDruk5s/ktgHWu05wz9o5P7Xq7euvxxYL+D0HLG/dPVffwvlfb+VyL2Bkmulvy9f5vuKUZW/2gtX11S1mT9sLCjIk69Av6lp1ybgiIS/G1OntH7nj7+1BbeTew6/P+s1tFqQ1bI/YufMp7cnwT8CPS16sbOpv9tPXS8zrLC/c14jhCwewT+o0wtcgr6HPyO51cGbuoY/ZhaGMKXimT/cXgGS71nVPwCmNjrOUoa/qLgSBx710L9WbpBYgmyDP38ZWpQjH42/pNAYXS/vo7+7C3h8haKdv/hQwwXlg4K/NmAbq2hBrz8mBxdlad7QPzWn7OObr5o/pH3VbyJinr8XEp6OwGHAP58ETmDLDr+/fV7efv3ytL85ZsOu+U5mvzI/MacycnG/9mphz6LcrT/DGioHrhmlv7llHad69Yk/acvpfgHtuL8etEA6tjmqv8keuHltAbC/9fGqVeiEkr+Ze2AORye0vzqj0EN3UbA/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzgzMDU4NDAwcQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM4MzA1ODQwMHEBYS4CAAAAAAAAAAzTMGPUZs0/Fmhs/QTHvb8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    4,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        0.572459641071,
                        0.2510947117126887,
                        2.3999963660060657,
                        -0.15328101684901804
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4
                ],
                "values": [
                    0.572459641071,
                    0.2510947117126887,
                    2.3999963660060657,
                    -0.15328101684901804
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 95
    }
}