{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9966701697478995,
                            -0.011834907801858904,
                            0.01799072797420134,
                            -0.0037270200496246544
                        ],
                        [
                            0.03816786218445684,
                            0.9736537550322505,
                            0.014854668382909773,
                            0.06572753295625634
                        ],
                        [
                            0.025977797420766,
                            -0.006654524532597215,
                            0.9805246387483154,
                            -0.006300207657488119
                        ],
                        [
                            0.045901784708584914,
                            -0.05411866200543965,
                            0.02564402330955936,
                            0.9788160188547262
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4,
                    4
                ],
                "strides": [
                    8,
                    32
                ],
                "values": [
                    [
                        0.9966701697478995,
                        0.03816786218445684,
                        0.025977797420766,
                        0.045901784708584914
                    ],
                    [
                        -0.011834907801858904,
                        0.9736537550322505,
                        -0.006654524532597215,
                        -0.05411866200543965
                    ],
                    [
                        0.01799072797420134,
                        0.014854668382909773,
                        0.9805246387483154,
                        0.02564402330955936
                    ],
                    [
                        -0.0037270200496246544,
                        0.06572753295625634,
                        -0.006300207657488119,
                        0.9788160188547262
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    1.2138430286219968,
                    0.9970259570425493,
                    1.001326189502336,
                    0.9991767335911403
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.0805234881508386,
                    0.04436333882811084
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.15207126368086787,
                        -0.000702578715314206,
                        -0.11252364963850059,
                        0.05953552029031517
                    ],
                    [
                        -0.000702578715314206,
                        0.4222761572046561,
                        -0.0058997704484985425,
                        -0.13642365879523266
                    ],
                    [
                        -0.11252364963850059,
                        -0.0058997704484985425,
                        0.8104655534076923,
                        -0.03271434056273903
                    ],
                    [
                        0.05953552029031517,
                        -0.13642365879523266,
                        -0.03271434056273903,
                        0.8033622043190514
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            4
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            4,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzgwODkzMjE2cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM4MDg5MzIxNnEBYS4yAAAAAAAAAAL4zOyqJ+Q/T8hLVwwHwb/Hmx3YOJDav9nE+nXQ7dO/LdIuBYEH5D9Ova9ENR/jPyyPNxu/JNI/fjOy3Vhz5T8VEiYXj9+1v+0f6u14scG/8drisxO7pj+sJCTZ3yThvz5+LUW1WNy/IVJBPGSOnL8bzfRX3ByxP0/nJetXf+Y/UdasE9pKZb/2VydAlxjQPyJHZcl/wIe/GUVqxCCx1r8VCNdGDBfMP5SGKEluetk/rYgQ3t4P2z90N1EcHa3Zv3E3DAn+B8q/iNPZDi/tzT9irfLCnYzEPxDYCTT6adq/3qdTI2vz0j8qgRPAn1eqv6zWf/L3HdA/RK7fDehst79CbL0u8ih+v3edBVeI58U/pmUxTp7V2T+v6UIcRh65P8xQ77J+ad+/RC4R8ff40z8aE138+4LQP9hI5s8P19E/+RlHexROz7/DA0uCXEfGPzX8AeAZrLi/3KmAo+gk1r/fp6ecFKjIP73qyrldYOC/bJqJq4n30T9FQpkDdWPAP1AZ98vAH8O/kGae2q734D8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzgwOTA0OTkycQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM4MDkwNDk5MnEBYS5kAAAAAAAAAP5SVhE3lsK/RSb5I0BhvD+KnD+lcsfEv8fifVCvgpq/uhGfhbVRyr/l+lNLUmnCv/6J4bNzGr+/hg2N6N6wqr+y6jGifCG5v1BLUQDMAqS/UpSO0USzqz8Skj75djfBP0eQx0rO+so/nnAZ/Wtyt78O6F/JAn+UP3eE2qMCF8u/CbF6PwU8d7/l/senxAS2PwvqsCJT4Ka/9Hb3D14QuL+3bsh/ihV9P/oJDWgTyoK/Kbm7LuE0mL/QpxxWoly9v5T26G708aO/5cCn0obMs7/1Y5f9BGLLP6v0HHE/qr6/QUYjAmkLsL+C5TExUZvFP6e/hhH/CrM/fz+nocZHnj8DU3PoA665vwM7qvuHT5q//53m/fUXmr8bl5CMjRawv8Vi4BLaxri/wiY0Lf4Ftr+DUXqTFcfDP0/PBmw/Sr2/oTJOf4v+o7+e4WH+liS3PyjhBbpU9Mc/kqpL//krwz/K1DbdqhPCv8XTaB0le8U/YVYq62srnj8NclYs/6Cmv2Q+tMgKcqi/FxXpRqFExj8XOwkQ4wqyP9JE9kzfH7K/d0SkG2H+p7/VWRDSZrGZv5DwYJZ6v72/PFTuQKd4mj8HfVO59a2rv6KGUsuEBqu/K9whNKyXij9mduN+Ny2gP+7ZeSlW1ca/RtZJQnUvpz8CMPidW7q6P++yJ8BzbqA/QJCYaxSjwL9T7qrROIGhv7Ap3jMr1rA/StDDuQLXvj9CBrdNhrW/v+QJtpVxgZw/5UnI20M6uD/RBSIYdaWPv6XkwAksKbu/KJZ9o7j9sr8F8wtpmoikP8+NSeUIFq2/qGrPGAxmr78yyj7ZTn+Av696sSYQYaC/aJpm7Npnqr+7AR68EQbKvy8esmDbLsK/Sq34wNpPpz+Nn/J2V4iwP9cHMr34w50/Vyyrd6L1hb+9yFN33fnAP9xrXxx2nLW/JWciiy0Fvb8i3nLCAdafv8WsF4o2P8A/rgu6hcNWpT8ErxAGsby5P96axczkZZC/78e68dKCt7/VgJ9ob0qxv4FvpT6hQ5g/aEzHxZ16sT/x2nX4F9mxv4KoBlfKOas/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzgwOTAwMTI4cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM4MDkwMDEyOHEBYS4CAAAAAAAAAHu2fl5/QLQ/buseHvd3wL8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    4,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        0.9285452464495761,
                        0.6611630078319098,
                        1.1635738152932475,
                        1.4562108281719865
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4
                ],
                "values": [
                    0.9285452464495761,
                    0.6611630078319098,
                    1.1635738152932475,
                    1.4562108281719865
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 5
    }
}