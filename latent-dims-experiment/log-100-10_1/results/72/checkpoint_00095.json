{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "byteorder": "<",
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "shape": [
                        5,
                        5
                    ],
                    "values": "eJwByAA3/8G+4C6Vjus/GW+sw9yaqr9L0eEuQ1e/P1/GwZ429nA/PxJL6rf/i7+yPOLJjzW2v0CoYd+rje4/ZJs3bYvjdb+vPFXJtQNwP3xg7vlggnE/c5dN16eJoz9hwDNAmCm/P/+t8mVkde0/Kro8liwxkr+eQN5JHmt1v7bPuwk3wbA/j/cpnRaNvT+NsRXnr1eKv3DrgY0Ie+4/+hCJDgpVhT8ML79O5yaDv/8839Yilbe/17I5H6IHtL+lLlhCwz+NP8c6v56aS/A/voxnYg=="
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "strides": [
                    8,
                    40
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    4.8991221142354195,
                    12.546741289250647,
                    5.639843917219318,
                    1.0168492144047794,
                    0.8558717768036602
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.35224698392542,
                    0.29076078742788863
                ]
            },
            "V0": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "values": "eJxLuLy1U+PcBXsG329u+9bttm9Y5Fb8Zccqe4Y5e+ueXpy2n8EgdmlQypz9MHkGI41vH3QO2TO86xK7+wqojuHD5MdJS+wZclqPCTRuQuiHyjfU1W3xzFlrz/BBdo7Nrw57BoVPe7ZK9iHMh+mHyTefZd92/ow9Q0b09GbtrfZw+6Hmw/XD5GWquXPM99oDAI6kXT8="
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            5
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            5,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzYwODEwMzM2cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM2MDgxMDMzNnEBYS4yAAAAAAAAAK2EQUkinei/XyQEjqyOnb/AvFQkM2HTvzIrsyaz68e/6uoU30nW8r8A29AoRLLgv6FulAXHf+K/LsNALV0s2L/x8BKTrFXoPxIxzr9W+9q/tUy7rlCR0L/5vOEFXiKhv+Z5U4Xha+Y/HZsKBAq2jr+2Qgb+mGLgP1vFbq0cB+G/H4Cg/o7avr/qsbmLIjThP4jmq9axWcE/cfErM9334L8tL2TE/oGnvzooZFTkieC/A2uBrGWEzz9nIecNQM/HP9LWN56ZzOM/kwqDpRmKzL8K8meF6ZXaP2ywQq2fu6a/iaKyc2RpuL/3oX3u4LW4v8nyRBuYh+A/SFIxhf2Q07+jchQb6VyYv9odCez+8MC/G6XlLH9Ey78mcFK9mIaqv7qO/xtaMsO/S6Tc1wK0uL+mHdPbgwXZP6Cfxendq+q/wlabuK7O6j9F+gLVyaHJP2Ndm8UDFeM/b6PmHGFYvz9Tls4ErMrVv7o7tyBE/rm/UbZdIYK2xT9gzu/kQsfWv8NF4uJou8A/Zwsomewkhj8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzYwNTgzMjAwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM2MDU4MzIwMHEBYS5kAAAAAAAAAFR3c32mPag/4uQ/YiNevL9BiPQlxYLAv59ZTUNmiK0/c2aX8+zKyb/syL9I6FCtv5HVKb5pQ7W/4dra2Suwq7+QXTBfmum0Pz9WRX+LlrM/ex+VM+vkwr9AP2wfe4zEP8Jk27RefbE/EE2h9Ggvgr/T8a1i0+bHvwb4Clt3Sbe/Vv0TkSKAtD/QsrAi48W1P2cYA61jVJE/0PsoByc7qT+LekWJSIfJP1zggJ+ffMU/87aeRzxVwL9rRKWHXtXMv1jNJLeYj7Y/6/ORG9U6sr8Z2tYKNCTCv8SGAPvCsr0/46L93PVvvb9fkfU8Yx+dP1fwDpzN5sm/nBJEOnNrsr84CYv7baS4v4Nm1HmjRao/4yA2zY7GwL9ovFfNDyGzv/xbl+SDErE/UjLVSUkyxb/uH6OaL7bJv8OubpXDvbu/HewFGtjhxD9GVDlNrgC0P4jDzFZPbLc/xOstmwyfYL9v5RLr2fTAv383/QkpG76/n0OuIRY9uT/m7aimq6HAPwsEGSeYlMO/JBBgOcC0vz8YSrovmeqcP3swsKOOCru/mwDMWJw3w78Is/hLsUuwP7tUu48gipe/t3IyF0vfkz9pIQHUX2Sxv431/GmH37M/hOfCbZ2drD8ap0qoK7eEP1R/Zg34nb8/taXy+v+IzL/00YPa+l+Dv2V9hQGdPqC/H8XJKZEJlz/Wco5FPSKjP7UX+IltD48/dhdftO4xtr/V6LYDfdqwP174EOrs4b2/GsJiq8SllL/ypn044m6vv3K4RprT0qC//vhK1MAguD+UNildQ/68P4UpQ2jgF6O/foXl/17Ttb+6LcNLci+iP2bkr/aozcS/bAo+VIJesL/6SmiTySuyv7yPSvctZ8A/VUwIMy7znr83qFpsOd2yv4YEOVqcULe/wX4m+hGNoz9RRfrN2Iu5vwVnAPoS1JO/84zrapDHrb83+LDvLTKuv6aqSVmmQac/oRdypxF1xL8ZjbD32BHCPxhkL8JajMK/c+63oKPqtD+OnW/6OdCzv4mK7iJy4cS/yBVN5krpqj+h6MAbnB63P0VWtUlvSqe/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzYxNDkxNTUycQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM2MTQ5MTU1MnEBYS4CAAAAAAAAAGHDpOnywo+/nklhYPnvgz8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    5,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        2.8807775819327768,
                        11.0696409601042,
                        2.091396050981852,
                        7.317048005528158,
                        9.792600410948708
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5
                ],
                "values": [
                    2.8807775819327768,
                    11.0696409601042,
                    2.091396050981852,
                    7.317048005528158,
                    9.792600410948708
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 95
    }
}