{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "byteorder": "<",
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "shape": [
                        5,
                        5
                    ],
                    "values": "eJwByAA3/50AwizVuOw/pugx3Hm9dL+Ckpz3UZKwPxOkqN2iX5A/Tg8RutwtZD8AgAMU8rivv4JCeBt3sO8/nfwSBvvUpr8xuM+sWeFXP67Bef8JZIs/02E0bMgFRz+88e93Olq3Pwutaveqm+4/7JjVXKUokb/M+IQaAqqNvwwYqPeYPWy/zTWgTVeVsj92mQ2jRJ2Bv8p4nmz3bO4/5oHGc6B4dT/B2/Awt1mfPz8pgjyZH6W//+j0JY/QrL99F+VYhq+KvxABTNWMR/A/2bxong=="
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "strides": [
                    8,
                    40
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    1.8178513590968495,
                    2.799694185509493,
                    1.5698614564358224,
                    0.9130497808699671,
                    0.6717711860648327
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.2862577900208835,
                    0.08199068212888057
                ]
            },
            "V0": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "values": "eJxLOHHPTe/6dXuGtEb7vokH7A8oLDcvWbbVnmGB5/sHojP3M5xb3LB43cb9MHkGFvfNBXFH7RuEXy7tW7PBnuHU4UDdl0C6QPM3I8N2uH6Y/IEAmXf/v260Z2jy/vnDZpY9Q8TBBB79ZoT5MP1Q+YbNvcqFYVfsGZi+qE3fsccebj/UfLh+mHx0UsGfV0fsAQZOXKU="
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            5
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            5,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzYwNTgyMjQwcQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM2MDU4MjI0MHEBYS4yAAAAAAAAALU7CsY2S+C/lSsQbqyOnb/9Me4PhRnSvzz8TzhrCs2/EirZG4dY7r983W7eRdTQv17k3iWdI+O/2ppYEQGd1b8C3mLgOC3hP1C11pb6a9i/IA3mrlCR0L+mujILGsR6P/RFUmRcgOQ/CtVbh72amT9P4HhDE0DVP0MomQdg/ty/h8v46o7avr/Na1BpJuPWP/3mw9E6V7M/86LmEQLR3L/N2nHe6zh4v7A8RVMQ9du/382zqWWEzz+eU9iVKyHAPzYa8rfb0dg/0RkNhCvK2b+aN41YeFjQPzcuNGSIfLC/mF0Pn6tKs79HmFaT4PCsv+CzHEEHs9E/kZAfW6EB0b820nrBAbnUvy5RjjKNpLe/0FOBiQ4Hwb9hZXY+KEmgvwBHUPv9osC/87VX0QK0uL+/8jp2HZ/SP1EO/eTr/eK/3MOrgfHc4T8lJy+sbRLHP48VcsEDFeM/Cw6Myqg5uj9NAnvr/YLUvzE+SLuL37S/KeuG0DnVyj+l99768A7YvywqKXMZWLw/cZsKLTZevD8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzYxNjQ0ODk2cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM2MTY0NDg5NnEBYS5kAAAAAAAAAHtlyULaTMA/z047YiNevL/EfElWYamxv+JRP0NmiK0/Fz6L8+zKyb+DZo9I6FCtv3Q9EL5pQ7W/GHrhPs72sr/gDBhfmum0P8spi1qm76w/6bOPM+vkwr+BOrNKuf6uPxLT4sVMvag/ccHT82gvgr/I8bo5d1fFv4Zf81p3Sbe/U9IUkSKAtD9dyZl0m+S6PyifHaPsM2m/DykiByc7qT9o+Es3kGjEP/Whlk3nXcA/Mb+GRzxVwL8S3K5eAkbKv9Z8DLeYj7Y/CIySG9U6sr8M6r9x9wq6v/nKc6a9aME/R5ju3PVvvb+Z8548Yx+dPzBr7u2FBc+/KDtMOnNrsr8dQFgMipCiv4XTddYyCKA/sscq9upVw7+BWEnNDyGzv+lmfjY8MbY/2SDhSUkyxb+b+rVId5fEv5BaVpXDvbu/9sP5GdjhxD9TlxWfZh+5P2WbxVZPbLc/j5aQmwyfYL8kWRHr2fTAv8cY+gkpG76/qOmlIRY9uT/gX6amq6HAPzy1Uaq/67y/OipaOcC0vz/xR4s7vbKoP9SNsaOOCru/fmbNgfjGxb/KrCv08VmmP2FlKUH6eWi/ZVxkLxYtpD80EjgET4uov1qA+GmH37M/fNP3ySxgoj+vKhUcd9aeP3cVpi9YXsI/BUtGVo9Lwr9XsErb+l+Dv9ptagidPqC/sGoc+vlwrb8liVnprV+tPzf+yIltD48/VxBZtO4xtr/XeJOn7Re7P0FaDOrs4b2/P3h4+VKQpL9PfXI44m6vvyYc9dmLVYq/ImpcJnk/vT+QrEMLi9+3P9VvNWjgF6O/GtgArqa0sL9iucxLci+iP68Kvc1MPsK/gI2pBJR/pr/DxkflgUq3vxS4sJyjr7s/GMlKvQe3qb+K/Ve+8fu3vwYhLqxUb7y/Ovsg+hGNoz+b+9jN2Iu5v/5BavkS1JO/N07sapDHrb8J6+VLvfSjvzst/WprCJo/trRl0G0Ex783eHyd+QS/PwTPJOu2G8W/Q4y3oKPqtD8wDSBRA2OtvxC60yJy4cS/rg2FQtqroD8AebkbnB63P8rku/bvw7C/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzYxMTk1NjgwcQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM2MTE5NTY4MHEBYS4CAAAAAAAAAHRJZ+rywo+/ggbLLskFhb8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    5,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        3.393525833554696,
                        9.64560866937767,
                        1.5993775795884824,
                        4.9593886439394845,
                        7.92310316755204
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5
                ],
                "values": [
                    3.393525833554696,
                    9.64560866937767,
                    1.5993775795884824,
                    4.9593886439394845,
                    7.92310316755204
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 65
    }
}