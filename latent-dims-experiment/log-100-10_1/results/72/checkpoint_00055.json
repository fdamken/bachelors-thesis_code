{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "byteorder": "<",
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "shape": [
                        5,
                        5
                    ],
                    "values": "eJwByAA3/xdYIz1/oe0/iMoFvu93g780ZM6mK1ymP9WskVyrmZk/N/H6WTd2gz/wrekSjDGnvy9ZQYmHhu8/XrBG6bCLqL9letHET5WRP4l0iTQLjZA/5kmrkFk5mb9wqsuQI3S2P7cinaNl/+4/jpoYmBgdk7///LeSGtGZv8ThgGHPXJo/nMy5mk1soz9JM3ftgoZ0Pwg8i3i6SO4/wIAek40JlL867RxQnUukP3qaCThYLaC/yq/F3/LSpb//7gBSLfGKv8mMEcHaJ/A/J0Fnvg=="
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "strides": [
                    8,
                    40
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    1.4479484353947056,
                    1.7385382904383127,
                    0.937546434991245,
                    0.957718902904388,
                    0.6925839854800703
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.23868087742853278,
                    0.23845411861427054
                ]
            },
            "V0": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "values": "eJxr2MddXWFyx75BOtDSbcMh+wNnNp+q0tttz9BoE3Nhxor9DLuMspjYt++HyTPI2VYUtR+3Z6jI7/Xy2mzPoFdp3XcISKvcqLDt3InQD5U/cGzFlVV9W+0Z5obnrLNcas9wYe2K69sqEObD9EPlG0S7YwvO3rJn6GuVVwg6YA+zH2Y+XD9M/nrrPe/0E/YAVyBXaA=="
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            5
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            5,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzYwOTc5OTM2cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM2MDk3OTkzNnEBYS4yAAAAAAAAAICh+MU2S+C/iXkWfO41sj9rHHj71tHQv3GU5jhrCs2/wOpY/iop67+ix4SdLxnPv3sSjglBlOC/CyzJEQGd1b8uVwGy8PTbPyiudayos9m/yzkRxP7Y0b/vYGnO5yubP1IfvFqF3OM/N3veUtjCtT+ULXhDE0DVPyUdDk0ORt6/tOvdTx6dtL9n8qSy3gHcP1l0PWaUM6I/58+z+6VB2r8sEBKhTNmMP91Kr1IQ9du/T06/qWWEzz+YstiVKyHAPztjbpnAa9I/liQlhCvK2b8m/+h91OfSP6kPb2aIfLC/vrdUl+ZXrL80T8aSFXdsPzbaFUEHs9E/fo0djuZzz78YpF/BAbnUv+p7vmZfTYm/wzQfwWTvvL/sSXFLU96cP0CRKvv9osC/JPfdvbl4wb/5HZJ0HZ/SP4DTMXtxld+/X+SmtAdU3T+7/YBatfPBP48ryrYsceI/Jl8kTnD4rz9Tlvn/q8rVvwGyO9Kmga+/FH54JKdB0T/zDyv78A7YvyL98xthObc/o9SIR3e+wD8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzYwNjYxNjY0cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM2MDY2MTY2NHEBYS5kAAAAAAAAAOOowzP8ers/Z3g5YiNevL/82kNWYamxv/FeOkNmiK0/ad+J8+zKyb8WIYpI6FCtv5iVDb5pQ7W/uNnePs72sr+ETxVfmum0P6O6glqm76w/1I6OM+vkwr+mWOpIzby5P0aC5sVMvag/SwS082gvgr8ITLo5d1fFvxOu8Fp3Sbe/ihMSkSKAtD9BQJd0m+S6P2uT16PsM2m/DnQbByc7qT+58Ug3kGjEP+hLlE3nXcA/AaOFRzxVwL/IOv8MSifFv3u/CbeYj7Y/2JuNG9U6sr8BCb1x9wq6v4GDcqa9aME/yfrr3PVvvb+kZY08Yx+dP+Gd6+2FBc+/wdpPOnNrsr9decq2c6VuP5W2fdYyCKA/6y8q9upVw78eTUfNDyGzv0kHdJWyxsI/pbzfSUkyxb9O6LNId5fEv2GcU5XDvbu/SGX4GdjhxD/Q8hWfZh+5P1X8wlZPbLc/Q4QJfvBwoz+ndxDr2fTAv7w19wkpG76/qQKjIRY9uT9sEqWmq6HAP5WYRFgHzbe/EWxXOcC0vz9ngY47vbKoPyveqaOOCru/Uj3NgfjGxb+ZnA/08VmmP4dEgUD6eWi/yFRvLxYtpD8BKy0ET4uov7mU+GmH37M/dFHtySxgoj/LVhEcd9aeP9aTl1i07cQ/bvgBZT0csL/2Kvy03iqev/xPaAidPqC/ytEHTzXXs7/5MmTprV+tP23RY4ltD48/KWRWtO4xtr+aY5Kn7Re7P3GZDurs4b2/m5CH+VKQpL/SfHY44m6vv5s/VqL8yps/XthTJnk/vT+Oaz4Li9+3P33tL2jgF6O/n+/8raa0sL8LtthKci+iP0rsuc1MPsK/gEStBJR/pr+sdohE+cPAv0RSsJyjr7s/a8RRLi7znr+hRli+8fu3v+vcLaxUb7y/QyMy+hGNoz/Ap87N2Iu5v5pVRPkS1JO/P4viapDHrb/gqdtLvfSjvzMp6GprCJo/1m10pxF1xL9FXned+QS/P3l0JOu2G8W/FSvBoKPqtD/JCApRA2Otv+EU1SJy4cS/DDNcQtqroD8T4NQbnB63P0Siv/bvw7C/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzYxNjQ1NDcycQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM2MTY0NTQ3MnEBYS4CAAAAAAAAAGQ0ferywo+/vA71LskFhb8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    5,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        3.6027030448202524,
                        8.819872191520403,
                        1.493915351749257,
                        4.011429322923269,
                        6.817888744002712
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5
                ],
                "values": [
                    3.6027030448202524,
                    8.819872191520403,
                    1.493915351749257,
                    4.011429322923269,
                    6.817888744002712
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 55
    }
}