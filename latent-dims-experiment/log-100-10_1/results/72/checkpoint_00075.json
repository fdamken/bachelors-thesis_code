{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "byteorder": "<",
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "shape": [
                        5,
                        5
                    ],
                    "values": "eJwByAA3/zu/dVTZgOw/0BZJEkULob9lPkdDE9e1P4b7t2EPJG0/4nqmolJHVT+WsuqeD6ytv4uA54N5Be8/eC/V49V3lb8pEsOWwKJ1v5siBD/F8oA//LDqJOQdgD/RkDzPP5G7P2Yp8M3VZu4/kkyeCP8sjb8uv7kkgwiQv9MAOV2w4po/hPCM9hnCsD+XjKngUBmXP56xSEntGO4/neZsPrlDUD9X9skObp+iP48O+zKBorO/WtJESbI7r79SzVvL5ZIOP+EBEI4sSPA/N2pkQQ=="
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "strides": [
                    8,
                    40
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    2.6050007038156946,
                    5.755303076858947,
                    2.8163963153916094,
                    0.9340075831080143,
                    0.7158425600947541
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.3489859398879089,
                    0.29490108956477273
                ]
            },
            "V0": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "values": "eJxTCNd4YJN31Z4hyWKSq8d++wPWh+uqfTbZM5icCE5zmL2fQUK2/W7K6v0weYa4Q5uPcB+xZ0hT3M2yYJ09Q0Xxe1m2NfYMHRq3tf5sQeiHyjdczhV7mbXBnuHY4T0vqybZMzBMqHS53I4wH6YfKt9QPy9DdOpFe4Y1i+3k5HfZw+2Hmg/XD5O32XDmqOchewC9MFRF"
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            5
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            5,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzYxNzMzNzkycQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM2MTczMzc5MnEBYS4yAAAAAAAAAF+j+u2S2uK/cjuldKyOnb8TdukPhRnSvw4v3F7Hmc+/FAdsxWuX8L/eQ+7+qDrXvx45Co4hD+W/v+GIBQGd1b947/MNtFXkP6AhNb9W+9q/KXTMrlCR0L9WwYELGsR6P4bXZoPha+Y/o45Uhr2amT/BCQRZwYfWP8RIyhifauC/3+f/kqP8wb8N5BrHjEndP2b06tE6V7M/S/KzPF5g37+ImjXg6zh4v8yL1VYQ9du/LI/VqWWEzz/2uOKVKyHAP/FlJYVdLt8/Ea6RNnOr1L9zbLf6JqDRP2DL86NAm7W/Mk8S36tKs78Qa2+T4PCsvxX8oX4RitU/eJ/Lbk9J0r9elq64NqXMv3F+mjKNpLe/sNTBiQ4Hwb+dAyOuBGKyvzEDWPv9osC/9KDAhEqVs79N9QuKy+bTP3//cLcdMea/abK8g/4N5T+I5uvUyaHJP36f+bgsceI/Cjx6HGFYvz8tU4Ht/YLUv79tH+Wmga+/SgFU0DnVyj980FMOn1bZv34tXHMZWLw/qr28x34/tz8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzYxMDE5MTA0cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM2MTAxOTEwNHEBYS5kAAAAAAAAALzQG+JDXLY/oxE9YiNevL/F3eEIUhWpv2bDQ0NmiK0/i6uM8+zKyb8TAJVI6FCtvzwFE75pQ7W/xobiPs72sr/E5xpfmum0Pw2KmVqm76w/whiRM+vkwr9gx2f2Hv3BP/Gn4cVMvag/MOfs82gvgr/GFLs5d1fFv9g39lp3Sbe/SMsWkSKAtD8W05p0m+S6P7AwaqxjVJE/i0InByc7qT8rHlo3kGjEP+nVmE3nXcA/STCJRzxVwL85UbBeAkbKv7pXD7eYj7Y/hCyRG9U6sr/t7MJx9wq6v/mVdKa9aME/cdHw3PVvvb/tSK48Yx+dP6So9u2FBc+/nMZJOnNrsr8DITaqtYWzvzoVctYyCKA/2Akr9upVw79XzEvNDyGzvxWdgjY8MbY/eyjiSUkyxb+ZccGaL7bJv100WZXDvbu/ZzH7GdjhxD/QjBafZh+5PwvMx1ZPbLc/jkpAmwyfYL8lEhLr2fTAv77J+wkpG76/nL2oIRY9uT/pU6emq6HAPxIwEieYlMO/1bxcOcC0vz/o9ac7vbKoPwYpr6OOCru/+kXHgfjGxb+NECf08VmmPwIq1UD6eWi/VpFpLxYtpD8C2DIET4uov0c4+2mH37M/xI/yySxgoj8xsbWoK7eEP8Uypy9YXsI/hTgU+v+IzL+MeSjb+l+Dv5drQJKxBIi/ZcEQ+vlwrb9ZzF7prV+tPxO5tYltD48/A7JbtO4xtr9PRZZVNfm1P82v+51SgMG/Y/R/+VKQpL+V0SRuKda0v9qe4NmLVYq/fDVn1MAguD+0CkELi9+3P3YjxYjftJG/b7D9raa0sL9EecdLci+iP9HOu81MPsK/yI1AVIJesL85mEzlgUq3v3TarZyjr7s/p3VTvQe3qb9IP2VsOd2yv67eP1qcULe/FYQl+hGNoz/WhPLN2Iu5v4T+YPkS1JO/uxQgxx+Ko78WoeBLvfSjv86l8mprCJo/j9pm0G0Ex7+B43md+QS/P8G3Jeu2G8W/ycO5oKPqtD/k2BpRA2Otv/q+x0vOcMe/4dKAQtqroD+xiL0bnB63Pz7+v/bvw7C/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzYxMjA4ODk2cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM2MTIwODg5NnEBYS4CAAAAAAAAAC9yUOrywo+/WhXgLskFhb8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    5,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        3.401493509516806,
                        10.343230074203523,
                        1.8477194968343835,
                        5.924092957697532,
                        8.722672450020843
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5
                ],
                "values": [
                    3.401493509516806,
                    10.343230074203523,
                    1.8477194968343835,
                    5.924092957697532,
                    8.722672450020843
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 75
    }
}