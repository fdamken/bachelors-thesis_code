{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "byteorder": "<",
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "shape": [
                        5,
                        5
                    ],
                    "values": "eJwByAA3/zGS4S3qE/A/7dBm+0F3gr/e2kU68bygPxAdaIwIx1K/KwYrhrU6lz+7AGyp3FONv1Pv3S5az+8/NdL15k0wmL/3rF8yNBJhv8Y+EDQQvXm/7vkx1wuyl786m7NOpmWHP1h1zfwDsu4/K/jr/cRIQj8DoY0LYXKVv1l+1m++14w/1B9d4JXdab/FKKEuMlVPP7hgH8CRqu8/s5/ArJJsMb8qrH0o7nmCP7YqTljmyXK/5xbg8OjBgj9qMNPkB/tePwppKPfwBPA/UAZnMA=="
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "strides": [
                    8,
                    40
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    1.4522817989002692,
                    1.1486793447442842,
                    1.3383433752708866,
                    1.0249550737051738,
                    1.5599480140198374
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.3805355998321156,
                    0.16529942085750324
                ]
            },
            "V0": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "values": "eJxz4Az6XKr50r7hzDrz+oMn7RPu3d59guWQ/YTc3e4LZ23bzzDzltamKzv2w+QfuM3y/VR8x74hNE7xZNle+wWmK4UWOBy2P8B05gjz1hNw/TD5GqPG+psJ9+0rbeZXO+7fY39gb8aq5Q0r98PMh+mHyX99uER++7bX9g5mu48knF8Gtx9mPkw/XL4jIsat6LU9AGSkagE="
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            5
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            5,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzYwNTY3NzEycQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM2MDU2NzcxMnEBYS4yAAAAAAAAAD6GsUVjv9y/LJIowAvJwD94Stk44ajUv+tZNg9KM9a/RFFTr41T1r82P73sWUzCv6mAwhmrhNC/WuA0s8XTlj/MJexzsvFpvwxabq2os9m/U/ThFRQPpT+AwrTxpcHCP2OcR8nhXNg/lffUeb2amT/6Xb4FCWnRPwqtZ7FNUNW/yGkhrlu/pL9cMIFRD7zGP85jOALJusy/9Ed4X7Lpyr9OvSajTNmMPyjwhgFY1ta/CBgOrmWEzz/Kk6zPOkXGvzT1cndqKMu/gtRYpCvK2b+dRfWmMHfVP+DcWxVLe9O/c4ZOiBertT8+gstlLirPP2eEPd6dKMk/LDDrX4rkzL8pDHiE9+HQv1sY9eMST5w/HIpJBCO1yL9O9oY2l2jAP9zSSYjvC7c/TP6dI7vSvb8B5M10HZ/SPxVQAgpnvtu//npsp/NBlr8mfvhRIFqkv1GE6gw4sMs/j7sktow7wj879BzAofPRv+THXwaeKlm/0ydceLvv2D8KZPJLqS3dv/Vnm9pou8A/HT1r3Of7yj8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzYwODU0ODMycQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM2MDg1NDgzMnEBYS5kAAAAAAAAANQ15numPag/1mAQ2m2+wL9zbT370ea7v2r5kp/1SqM/cIeGypA7x7+CY4ekdxOjv3EnAb5pQ7W/2//WPs72sr/SWh8axJWvPwZLEtFDtbg/HMtHhaMDyL+iWVhPzby5Pwmx27RefbE/JXCUhLsGqb8u0KU5d1fFv+yE4lp3Sbe/du8bftTCrj9QZjnjqQHAP5/4tbJjVJE/3Yn+Bic7qT8Fn00ONNnBPzJWGafagag/dcSpmfRzxb8UqMoja/K6v90ODGXgcLE/UUtXCX/LwL+bP7Bx9wq6vyUCdaa9aME/x9Txij1RuL8ST+zoA0mBPyZSNPC5Ur+/usxXOnNrsr9pLj+/j0+YP3jB0GBCYLc/J3qJSGVuvL9bd0PNDyGzv4+J57sOVsU/lMbXSUkyxb8qAaZId5fEvyfSTUMLn7a/YooC8XtSwj972CefZh+5PwKKpqgHi7w/qU6JImGurT+NigMUNoTDvyGOBwopG76/MsGOIRY9uT/EQKCmq6HAP0WnBf47BcG/iOVOOcC0vz8OsdC/UhaIvzw2ynqjFMC/f007WZw3w7+LDwz08VmmP9dZEED6eWi/MQV3LxYtpD+uRSkET4uovziB9mmH37M/0EnmySxgoj8t3EAcd9aeP6QKl1i07cQ/gdkG7Y0CaL/IYBrc+l+Dv9syZAidPqC/n7cMTzXXs788n2fprV+tP2zQWIltD48/D8JyYjYTsb9uN7Qlr6rCP/gFEOrs4b2/nmeO+VKQpL8wSKeUcTGlvzY77tmLVYq/NhJtJnk/vT8a8zoLi9+3P4xZ5tdgybO//In4raa0sL9kVtlKci+iP/iQuM1MPsK/nV9CVIJesL/0iHqWseLFv9U8spyjr7s/6bs5gfQYt78v1/MwsRzBvyRYEG1XJqq/j8atrEKfkj++BCN45LGUP6mWPPkS1JO/v2/aapDHrb8Wg9VLvfSjv3F02WprCJo/LKB+frXlwb+SRWOd+QS/P84LvTL9+b+/6IOURBQovz++pBVRA2Otv+3c1aFzhb+/5ghZQtqroD9Oh+nJ4/+xP94Uwvbvw7C/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzYwNTg3NjgwcQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM2MDU4NzY4MHEBYS4CAAAAAAAAADYtrV4tLqK/GkoRL8kFhb8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    5,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        3.5480846574881775,
                        2.859584614995769,
                        0.852361675404607,
                        -0.1434425461365558,
                        3.7489918984406962
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5
                ],
                "values": [
                    3.5480846574881775,
                    2.859584614995769,
                    0.852361675404607,
                    -0.1434425461365558,
                    3.7489918984406962
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 5
    }
}