{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "byteorder": "<",
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "shape": [
                        5,
                        5
                    ],
                    "values": "eJwByAA3/5BeAIxDie0/ug183gdLpr8SzFIWR3uTP40xDth/7nQ/JUi4lE8Umj+qocwsxAyev4CG77pHDu8/PRT4sUS/p78Vd3j03e2TP8Gc4FSwC5I/k6lTRdzHlr/s/YILrb61P06eNS4ize4/dih7y3X4kL+vpJiBjPWbv8FTlqLkaqA/YzKoCOYKlT84xPE77UiLv0aMs22XBO0/PZmaqFboh78VQRdKMWuvP2M4moSqLZi/V28vCyBMir/4aIeN6H2Bv1cCebz82+8/5mtkjg=="
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "strides": [
                    8,
                    40
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    1.201749985243789,
                    1.2056774388960865,
                    0.602474528939091,
                    0.8825211958309663,
                    0.7582288679208475
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.2668123651621991,
                    0.15176154450000423
                ]
            },
            "V0": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "values": "eJw7ENzfcCXwgT2DC/e1u11H7Rv4JkzVvXDQniGtRvbH90X7Gf5ohPzasHc/TJ5hb+ZnJ/0z9gz9m/X0TLbbM5xLWsMRtMue4V3NrS+lBxD6ofIHTOe1v4zfZ3+A+dWVmfs22TO0yDTet+zZDzcfqh8mzyEpm5lw6KE9Q2r+p0tfgebC7IeaD9cPkzf507I+7qI9AORmYls="
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            5
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            5,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzYwNTgzMjAwcQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM2MDU4MzIwMHEBYS4yAAAAAAAAALXErYGW8t+/vs6V07kQwj8yzjjx/y3Qv0ZzEuMWANO/oCA12exc5r9bUhDJHHjRv2CzfMygrdy/Vfbx381p0r+lCYuTd1vSP1NgqLZ/V9q/y/ae0N4syL/zjeu+xpezP2yCHqVmV+A/qrQhfDRSuD9KeZ9N6uPVP0nQjkrKGOC/hHyKxjJLvL9UrSl+q87YP4r2197jLbi/vFrId7rv0b9zFUK21rxwP9tujEg5Udu/t2EX3wlm0D/k21NtblVwv6QoyOdfpME/qHPueVQm2b9MTBGwBxvWP0IynMIGNMG/4xwUaV3ydb/0OJTIPc+yPwIxTEveVtI/8vHOeSbt0r9ImGN6ID7Qv5QeDb9BRqM/LNk5mAhgur/DWcD94Y2jP2xRvCkvebS/uKvmpgsxwL+8Er1+9ELTP1dKH2E+Yty/Eqaiw5S60z9Mn81GB6zAP1PRe/sb2N0/I3olUJSLsj9vp2YgMbbXv0XHSOU0oIe/IVZxfzYE1z/FjTYtJELbv7Zj4fIEqrQ/I+smzjm0yT8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzYxMjY0MDMycQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM2MTI2NDAzMnEBYS5kAAAAAAAAAFmZys1eXK0/m9tDOcfOub/HaSDRdVe5v06WSfGtaag/EQ4N3z6DyL+Mdpf2LzKov116FJUNtLK/1z7nFXJnsL/arBs2PlqyP227M1YvB7E/oJMSHz2dwb8vyo7UuA6yPwxY1RcF3K0/oryjMgPoo7/LHz4lyQ/Ev7Rj9zEburS/NWsZaMbwsT9KGaBLP1W4P6TyrD3MW3w/sG4otW4cpD9bYt75hZHAP2jtQyC6Dbk/biA2hUYsxL+LcU34m9/Dv98cEI48ALQ//LBslunoub/IE8NIm3u3vx+n9pEPIcA/kOrys5ngur+VraOY8uGSP3PtatnXvc2/QldIY8/6tL+LTLQ0PiSMP2P3hSjrJqU/3Dyv4TwOwr9QBVGks5Gwv7MV8oAEf8E/BERjNZvqw78AfjE0yU/Dv111WmxnLrm//ZN7BSqawz/jow7Iwq67P2i3yi3z3LQ/F75FW3CknD/+2CitV1q/vyUPAOHMi7u/gyaUSnLMuz/AQlIk+7O+PwShLYFjXLq/zTZeEGQlvT9gyYCLKK2SP5Xun8zqmb2/7X1WbUp/xL/udyCiOTuhPwYVWm/FuHw/dnBjgc5LqT9Pqzuylmyjv1Ik7pLjbrY/PPXz7+iCmj9lqf3f84mkP/GtEm1iNcY/5t+vwoR7ir8iqWK5Zq5BP7NjS1pVXaW/eYpjqEFSqL+2B6odMz+xP8noUIMYKXU/o1lL3UrBuL/VFjkRAWPBPzXQgomkOMC/69N2Swuvqb9wnpHmKVCqvz+5GUmqame/Z6+h0MZ2wj8xwETiLlC1PyWY9K4EOrG/rfUHCpVKrL9yO9bxcyGaPxOMPbme9sC/L2Q4fd7tsr/2dBFZpwvCv/pfu3NHILk//DrZDMDVrr9XfGqVlWy1vxQDzb4PRa+/WHGOULPcnD+Ryyb2NBu8v5MLzqpELYO/KfrwGNioqL+Db9LzCaydv5D3Ao71lY8/PsP6kmMtw79mEH90nXW8P7rTrtYI1MO/oLqdG7iYvD/7AiD/SkSov7b7ZeVnCsG/Z8Tb4EMalz91qOxBD+GuP0QKuB9MU7O/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzYwNzUwMzY4cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM2MDc1MDM2OHEBYS4CAAAAAAAAACElJRnqHpq/STVhO1XAlL8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    5,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        4.447986910874755,
                        7.8375749097331955,
                        1.4693257952162648,
                        2.4779397530901988,
                        5.513940069826891
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5
                ],
                "values": [
                    4.447986910874755,
                    7.8375749097331955,
                    1.4693257952162648,
                    2.4779397530901988,
                    5.513940069826891
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 40
    }
}