{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "byteorder": "<",
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "shape": [
                        5,
                        5
                    ],
                    "values": "eJwByAA3/+PP3yf2De0/Bxh8aSwcoL+Em1mbHMCiP3QJCMV3fZs/1/QsbDkJlz+zmrqDNfOlv5h/wJ3NWu8/XxmffvrNpL+IqRh7+2OZP1JyhHtnwpY/xkaMPgOGlb/hV0gvzCO2P3nZ8uVNuu4/m5uEI1PHkb9NzP7JxTiUvzvXYgp3J5I/28mFsHRvoz+kOrsxQh1yvwrWXOHl9O0/9cZVQRKEhb8c0eG3V6etP7dZHhyj2Ju/TC4PE0qZmL8FnKHT9+6Jv/A7HcIJ/e8//ehnfw=="
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "strides": [
                    8,
                    40
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    1.1885246142480022,
                    1.3523581303826524,
                    0.6718539402041162,
                    0.8960858878238,
                    0.6434471791833125
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.22213279589189733,
                    0.11647327896427861
                ]
            },
            "V0": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "values": "eJxjONhjui7nnj3D5SnskxqP2DMseOjBz3XAnsHqscK1dQv3MzBqWlyz3LkfLm+X/z9D96Q9Q4jXxd0rt9ozOIQpffbbZs8QlvjM+ucuhH6ofIKV2b57xTvtG+6vPmbRu9aegSH3AgefEcJ8qH6Y/IGNq0QFL921Z9g8x+mp9j57uP0w82H6YfLrpj9uPnHKHgDroFcn"
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            5
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            5,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzYwNTgyMjQwcQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM2MDU4MjI0MHEBYS4yAAAAAAAAANIU44GW8t+/MAn7R7sCvz8sZDrx/y3Qv03tuc5ouNG/Hbin3rGP6b9liv/ZbjDQv6wdF+BO9d2/0/rVG9hA1r8GqqEy1MHYP8hfpbZ/V9q/zgdBztV80r/PF9vZHPKsP1bxcMzC5uI/CRomfDRSuD9eJbNN6uPVP8EZ81fl6d6/ctFVdHost786GJa8taXcP/Tvm5Bbu3Y/PpiQ3SBW2L/adW6z1rxwP8hAm0g5Udu/C/Ic3wlm0D9+6BGxQpS4P3ZThuojcc4/jJTpeVQm2b/CRDucWdPUPzlmouWcKri/MIOP82fydb/yrn1MmiOhP6wpUkveVtI//l+fZXil0b9A/dWOzoXRv7SqsDeiEZI/XOw3mAhgur9TOREC4o2jP5XrnA+s6sG/qgW1z2fAwr+aYMx+9ELTP8LeeE4+Yty/qar5u/Yg2j/EKdWXv8rFP80QNR6T1+A/LxQIUJSLsj8qAn8eMbbXv1AA4Nx9JaC/brCfLn7l0T8YgjEZdvrZv8Uma/MEqrQ/hrb1WyUGwj8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzYwNjk4NTI4cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM2MDY5ODUyOHEBYS5kAAAAAAAAAK3C4bjnzLM/XpxDOcfOub+Agjd/vTi0v2+lTfGtaag/bbYO3z6DyL/yk532LzKov01hF5UNtLK/NZfoFXJnsL+H/R42PlqyP+TumAju0Kc/0nQTHz2dwb+BZ53UuA6yP+lg0xcF3K0/FSikHSVVk79Yzz4lyQ/Ev6yJ+jEburS/fq0baMbwsT8YAKFLP1W4P6VpTj3MW3w/8KwutW4cpD8Xus0i4iDDP1boMXJyLL4/eSf2hEYsxL/xY5HPP1DBv39tE448ALQ/QROGRDHKtL+4rcZIm3u3v55h95EPIcA/3Mr1s5ngur9cLrGY8uGSP2bsfLB7Lsu/8SZGY8/6tL9cjLo0PiSMP79ybijrJqU/ug6v4TwOwr9FtVSks5Gwv1Sf/oAEf8E/x4VkNZvqw79pqjg0yU/DvzhIXWxnLrm/Sjx9BSqawz+7QBDIwq67P6alzC3z3LQ/RVfnz6iPqD8EmyqtV1q/v2n9AOHMi7u/ZymXSnLMuz852lMk+7O+PzZnOoFjXLq/JSBhEGQlvT/U4pWLKK2SP/Uenszqmb2/MixTbUp/xL809yGiOTuhP6UiR2/FuHw/ehZhgc5LqT+iyT2ylmyjv6h07pLjbrY/t7H47+iCmj8kVvLf84mkP/jAEm1iNcY/+/kdeMIZq7/uDyQRbu2TvwmESFpVXaW/xlkaJtlHsb8v5KgdMz+xPxkPXoMYKXU/xx5M3UrBuL9eN4fQSae9P66rgomkOMC/HIh0Swuvqb+PrTBFzUayv0wvhf6LjZE/Rq6d0MZ2wj9G70XiLlC1P8wwGLqYNqi/YTYKCpVKrL8EkdfxcyGaP+8ZPrme9sC/tq6eVkyeq785mR1glvi+v6XfunNHILk/IvXXDMDVrr/XtmOVlWy1v0RnTzFAwbS/cEeSULPcnD8Kfc2kfPy2v/Dv06pELYO/nZXzGNioqL8aZNfzCaydvxJwDI71lY8/I9/7kmMtw7/lYoB0nXW8PyngqtYI1MO/VaG5yf95tz/n+x3/SkSov90qWw7EmcO/0fnd4EMalz+RF+HyP4+0P9Rgtx9MU7O/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzYxMDU0NzUycQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM2MTA1NDc1MnEBYS4CAAAAAAAAACTiFxnqHpq/mnhcO1XAlL8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    5,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        4.4552263899910045,
                        8.68259324872595,
                        1.947160135927995,
                        4.012811027028926,
                        6.06220029718881
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5
                ],
                "values": [
                    4.4552263899910045,
                    8.68259324872595,
                    1.947160135927995,
                    4.012811027028926,
                    6.06220029718881
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 50
    }
}