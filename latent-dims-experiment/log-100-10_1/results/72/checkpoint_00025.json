{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "byteorder": "<",
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "shape": [
                        5,
                        5
                    ],
                    "values": "eJwByAA3/zHnZRRSvO4/twFbWWpej78MwX3KoUWMP07M5L1jN34/Hd9hQViBmD+PdejGEteGv2fRdsBCeO8/0tEENdUcsL9J1rd2U+iKP7Bgj6Vgn5Q/qzAiIzBdor80k0vR3MmyP6EQTOikEu8/6gE06TmQir8IN84Vfvygv0471BcW9pE/q6DhSe5ueL9/byhMH0FWP9jC1X1g0u0/b43wRZamib8+rvUGDranP2GLnm9O8pa/G/IDYgGCkr9OAydge+CJv/1GQtEwzu8/6b9jwQ=="
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "strides": [
                    8,
                    40
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    1.3790225261224345,
                    1.139753921581589,
                    0.7982143961132401,
                    0.9345501256490509,
                    1.1218353315983083
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.27227280963859085,
                    0.21920538247220905
                ]
            },
            "V0": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "values": "eJz78KjmtqbjY/sG5Q/uD26esF+QcPOYUv5he4FPpZciixftZ1j49Iet9eH9MPkGb/mFTBsu2jccfuzDvWaX/RTrSW1VPgfsGZhyN50pPw7XD5efFjt9fsBh+w37jfQ7dm+1ZxCaxjEtc/Z+mPkw/TD55ocLKqqsntqvWH5jj4bsOnuY/TDzYfph8gcKVr351HDHHgCFt2Xn"
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            5
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            5,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzYwODE4NTkycQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM2MDgxODU5MnEBYS4yAAAAAAAAAI5EqSUHMNq/YHdqvwvJwD9W7XX71tHQvylnZNk/XNK/ggP8iyyQ4b8+81XezonMv3ZwpszJCdy/Egyyjmigwb+peQSwvoPBP1uYZKyos9m/odFseK7mo7/fbUPqIie2Pyf9Ui9Iw94/ZS8KU9jCtT+7yCVDE0DVPwvbECxi/ty/maFkXFu/pL9PpWPLI2rOP4/edB8lSs+/nO9K4507w7+0JH+qTNmMPw1bNT5irdq/X3AZL1HWxz9uAGmqTC69vyt40jwR7Yi/QC8zhCvK2b/oUM6lMHfVPw+p4yxtmse/kLXF7Q90j7/TyLbsGXzHPxzmA0EHs9E/GPhBb09J0r+HKNCE9+HQvwS/CeMST5w/1NxkwWTvvL/AQQ0N3i6Iv7RTwNX9nKk/nvwIu7l4wb/DH3F0HZ/SPy4mPvy4dtq/wi89bf5BxD8pGh7fEtmuP0OADWyCPtQ/a0xZTnD4rz9dYQI9tqHZvzX7LxaLDZa/Irpou8XG3D8aXO8iTZ7av+CcDt7g96k/WEbO4uf7yj8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzYxMTc1NzEycQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM2MTE3NTcxMnEBYS5kAAAAAAAAALKq4HumPag/W585YiNevL+v3hr60ea7v1HFL0NmiK0/mKKG8+zKyb+g8n1I6FCtv2ClB75pQ7W/RI/aPs72sr+O1g5fmum0P/pjJ3+LlrM/yiSMM+vkwr9ML3P9FJ60P3KX7sVMvag/H9OXhLsGqb+lR7A5d1fFv/yf6lp3Sbe/3W4MkSKAtD+wPpR0m+S6P5IjOLNjVJE/DwYPByc7qT+fCFYONNnBP2aOTfddfrY/NEeumfRzxb8MadEja/K6v71GA7eYj7Y/EOxlv0V4vL/RMrRx9wq6v1WBcKa9aME/sBzm3PVvvb88a2s8Yx+dPyMr9pvN5sm/21FVOnNrsr8r4iO+j0+YP17H2A6KQbI/GJEm9upVw7/6y0PNDyGzvxNWZJWyxsI/V57cSUkyxb+/gapId5fEv8yhTZXDvbu/gCn1GdjhxD/7hQLxHj6+P6grvlZPbLc/CITgfvBwoz+WLg7r2fTAv2cw9AkpG76/i1WHc85bvj91zqKmq6HAP1QYIaq/67y/NJdROcC0vz9r78O/UhaIv+Ewy3qjFMC/kELSgfjGxb9xxQv08VmmPwPA/D/6eWi/NVF4LxYtpD+DpyYET4uov6jv92mH37M/4AnlySxgoj/JwukxrKipP6Jnl1i07cQ/BsnH640CaL/qTRbc+l+DvyBRNqwNfKq/dFZI+vlwrb8K62jprV+tPy3QVIltD48/4BJUtO4xtr8oBrQlr6rCPyjlD+rs4b2/Tv2M+VKQpL+p6KaUcTGlvwKn6tmLVYq/I2RzJnk/vT8kSDoLi9+3P1Fj6NdgybO/lcL5raa0sL+c8NZKci+iP/RMuM1MPsK/M8ZCVIJesL9+5YxtVVPDv8GBsZyjr7s/h5X0uge3qb94JmW+8fu3v66aXgjkMbK/8OO2rEKfkj8oZXevX1+kv+StPfkS1JO/Li3bapDHrb8kR9RLvfSjvwuh12prCJo/x1l8frXlwb8v43Sd+QS/P0hnOsJajMK//ECo8lsJuj/C9BFRA2Otv7hk1qFzhb+/eVRZQtqroD8OnAHwVsKpP086wvbvw7C/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzYwNzY3NzEycQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM2MDc2NzcxMnEBYS4CAAAAAAAAAEgCserywo+/bzAWL8kFhb8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    5,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        3.8259759470671395,
                        6.2866065780469205,
                        0.8091013168496224,
                        0.05736575189219666,
                        5.449748473907475
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5
                ],
                "values": [
                    3.8259759470671395,
                    6.2866065780469205,
                    0.8091013168496224,
                    0.05736575189219666,
                    5.449748473907475
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 25
    }
}