{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "byteorder": "<",
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "shape": [
                        5,
                        5
                    ],
                    "values": "eJwByAA3/5DNEnDthuw/5sbSsC+Pmr/qhN2dW3SwP2qrHVvD+oI/4KAjSXgaOD+Ullezrmisv5/pRl1bI+8/A0URnsrhoL9/fmbi5YVlv74fNVVtknw/24kNuxjXij88iwBM9bi2P9tzG5P6j+4/I5veqMbUjb/hAqJ1+fKKv+guK3QOS5Y/mGz03OMwpT+TPfSY7+WPPxGxpjiCNO4/BRYFoHwQb7/Jo+LJ/8ugP5w38kSveqq/NQBcLdNnqb9I+uiT7TpzvwBhzGmtKfA/rzxpog=="
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "strides": [
                    8,
                    40
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    2.2122627171677984,
                    4.257444957862277,
                    2.253408201510331,
                    0.9136495522256599,
                    0.6960258356144524
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.3049048843685032,
                    0.23298706198225294
                ]
            },
            "V0": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "values": "eJxbkPqg+8vKa/YMHfHrbooesG9wfcXr8XKzPYOChM2pazP2M5js4+ipWr8fJs+wwFHofvcRe4Z5U3JO7Vxvz1CgO3mj8zqg+JTfcYu3IvRD5Rec1C46x7PRnmHWWv0TkVOB5vqkx59uQZgP0w+Vd5Bi2P29+ZI9w7aZP8+92GUPtx9qPlw/TH6N4ottCYftAWVkXQA="
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            5
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            5,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzYxMjI4NTc2cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM2MTIyODU3NnEBYS4yAAAAAAAAABS0nFT5QOG/CGK/iQ7mo785sSYaXL3Sv+iE2UsZUs6/erouV3DS77+27tHdeAfUvwonZreIdeO/2dPeByr51L/3XT12ysPiP+0qPrV/V9q/qeJgSfPaz7+xF4YHUWNsvzQzQetH0uQ/5Zoqypm6jj/KrO5hmCvXP4vCLm/i6d6/7nqIhvW0wL//h8KXWRbaP1jSqfqW5rU/tYFgohoC4L8j3V6bq0uQv/RYGl7nmNy/3j0a3wlm0D/gmFGq2WjBP/9MnUJHAtw/tg7XaKbe17/zL1tCQmnPP3i33YfkC7O/u8T0fk+7sL+Z1pNyzAexvyutz1+MntM/CoLoZHil0b/trsGOzoXRv5NuZFvpM7q/Hyj7nbxOwr/r8sQJUaWvv327yA+s6sG/KgoTq6Yktr8G0UWUoorUP9ML9D+Fl+S/aKKGH9h14z9uDonAG1rIP4Zo4TwYw+I/ck9+8wTJvD8MU/D21CbVv8gxU5QvULK/GIIHvIuNyT+D/qkEyLLYv31gHpx1574/FbEonyKwtD8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzYxNzA4NjQwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM2MTcwODY0MHEBYS5kAAAAAAAAAKQz1FxYCr4/jy9HOcfOub+dRrxaCjSuv13GV/Gtaag/VJUR3z6DyL9bqqj2LzKovxXZHJUNtLK/r/LsFXJnsL9YuyQ2PlqyP9Pepgju0Kc/T/0VHz2dwb+2yiogcS23P9mMzBcF3K0/LE42nsJbUj84bUAlyQ/Ev5sLADIburS/LPMgaMbwsT/sPqVLP1W4Px49qS/MW3w/X906tW4cpD/+z90i4iDDP1UBO3JyLL4/Bz0bZhwbvr9cVTVKVP7Iv00rGY48ALQ/C0w95fFWr79vmsxIm3u3vw2z+ZEPIcA/N8f6s5ngur/j5dOY8uGSP/IDfdnXvc2/fv8/Y8/6tL8+uJpeQq+nv1HSXSjrJqU/SFCw4TwOwr/jsVWks5Gwv8h9jA3gobM/jztnNZvqw79OjyOGgW7Iv0MIY2xnLrm/MRuABSqawz/hHiF2CpC2P+bP0S3z3LQ/VNeAbqSiiL+rXy6tV1q/v1UTBuHMi7u/eIiy+Lmttj/dvlgk+7O+P/zMlBLqTMK/96RmEGQlvT9yrrjpBJSjP8REpczqmb2/TLdSbUp/xL9MmBNGqnirP/Wv5ddfmYq/efD6urscnj/z8R5WB6qtv1eeBEErULE/IqneG+V+pz8lwDx4BpmUPwsGLBuqFsE//Be1k5kixr86RnERbu2Tv8bU+2zJP5a/Aj4AJtlHsb/nsnKX9UCoP+w8tGgnxZk/2yhli5Kis7+I7pt+kYi4P7iOgImkOMC/S6omTzXjnr+jaC5FzUayvyWZyZA2aJe/EPGAq2SRtT9jFzc05266P4TJlSxQ8pu/Wsrz1gJEs7/AhrSdKk6nPxrZNuL6hcO/HZCUVkyeq79MhVW8Jbu0v6NspMX/Pr4/k6Rma0+YpL9q1GCVlWy1v88oOIP437m/fFpyULPcnD9l9PqkfPy2v1v/OZ2DEZ6/8rkMGdioqL/ZusyddROpv0VsZQfuIqI/y6nru7+8xb9BCjjjKsrAPwu0qtYI1MO/E6PDd0dbsj/M24PR3UCxvz2xTDcgKca/cS5tlJLKpT8DI8fyP4+0P3mSk5snaay/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzYxMzkzODI0cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM2MTM5MzgyNHEBYS4CAAAAAAAAANLqABnqHpq/nPz15fxcMb8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    5,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        3.4635897712652706,
                        10.02610035723611,
                        1.7528746150720347,
                        5.533666862065805,
                        8.32407069301626
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5
                ],
                "values": [
                    3.4635897712652706,
                    10.02610035723611,
                    1.7528746150720347,
                    5.533666862065805,
                    8.32407069301626
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 70
    }
}