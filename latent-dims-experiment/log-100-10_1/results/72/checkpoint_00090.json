{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "byteorder": "<",
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "shape": [
                        5,
                        5
                    ],
                    "values": "eJwByAA3/w+ul0B/3es/l7awAkb4sb+jZcvpvFy6P/DXA6CDLX0/UciO6fI4kb+MpGU0m6Ozv3vSB4F92u0/n+o66FJRQL8ybQc7dh9qPz5rYoKaECG/Q9KV+WBJmT8Np3LKACm/P+k9/EusGO4/DiWLx1yLlb8SlI8cFz9+v55YDJrm+LM/PK2ymgT1qz8qj/KqWzeKP6ea57JJD+4/xX00ayipdT8PbMpEp7yEv+i+9f0RC7W/wdGKzRcHsL9CvR2zlQSLP/tphzgkNvA/yJljqg=="
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "strides": [
                    8,
                    40
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    4.349343200900451,
                    10.366828365507699,
                    4.761578933260777,
                    0.9873720577238609,
                    0.8126799703428343
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.18876935778115966,
                    0.22899262822060779
                ]
            },
            "V0": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "values": "eJxTKD95xvPjRXuGeclJy2/usW9YH2B+xXitPQPL/4OMPjP3M3BENk9ZsGA/TJ5hlvGjWbsO2TM4ee9Y/Hm1PcODuluqnMvsGQ5cfXLUdDNCP0ye7c6/K+7r7BnuZNq9Dei2Z+honZGe2oswH6YfJl8cKq74+pw9w5ycvZ5TttnD7YeaD9cPk39i+23n8332AHn2XIM="
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            5
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            5,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzYwNjMxMzI4cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM2MDYzMTMyOHEBYS4yAAAAAAAAAGrSB7pfp+e/SoMAkw7mo78gqCEaXL3SvyOiED1hM8m/LFS9jao28r+/kZXKyWTgv5BcyHGy0eK/B88dI4aI17/4XdjUvQ3oP7VA0Mktn9u/UV4ISfPaz78RA2sHUWNsv3tf2QD2GeY/4KZwvJm6jj/k/mDdrNneP6DrDKqVX+G/x6v/SvW0wL9/rwUQDobhP3GvSD5PBbs/xb7WoxoC4L9nwXNyRmOiv/FIQ8/4N+C/mAHd3wlm0D/ktHzQNfjDP0FXwsF03+I/EEcGkWtCy787OamPwDnbP/lwuv1X2qu/+mxoc8D4ur9LC+pyzAexv0le4herI98/Rj7jeibt0r/YYHwPB+Syv/oER1zpM7q/ppJt8HRtx7+oPuYOUaWvvw8E1A+s6sG/rwvpsaYktr9tj5jRrGHYP9dagU4otum/xcGAqXfF6T/er4PAG1rIP66jQEAYw+I/E7X88wTJvD88GpoNg27WvzTESvnnbre/Qc+xNjD+xj9/WhDwGWvXv/ZWq5x1574/dVI87+ZPlT8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzYxNjc1NDg4cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM2MTY3NTQ4OHEBYS5kAAAAAAAAABC8hyvuHqM/2LtLOcfOub9nPAkjLna+v2XMZfGtaag//jkd3z6DyL8lF9f2LzKovzp8NZUNtLK/4wnvFXJnsL+nBDw2PlqyPxFuUFYvB7E/cb0dHz2dwb8y8OszKdTFP7RTyxcF3K0/HmoNmMJbUj8OTEElyQ/Ev3ifFjIburS/fxklaMbwsT82kKdLP1W4P8JFtFDUkZs/F9tJtW4cpD+YGst0mj/IP3HbBovxNMQ/jR5JZhwbvr8JZzdKVP7Iv3B0MI48ALQ/+0g85fFWr79rD132hdzAvwRH+5EPIcA//00JtJngur+L7iGZ8uGSP7Oaj4cfn8i/dIKeIi64r7+CiyGBWfawvx/6VSjrJqU/tL2w4TwOwr+fJmWks5Gwv0G1jg3gobM/k0VpNZvqw79m41yGgW7Iv9dVemxnLrm/qL+LBSqawz+3oC92CpC2P8Ka2C3z3LQ/opfhIB5TgD9nFTKtV1q/vyn4CeHMi7u/6Oi5+Lmttj/If14k+7O+PwU3oBLqTMK/3ZdsEGQlvT9nncfpBJSjPzKyoszqmb2/hY00bUp/xL8Kfw1GqnirP2i11NdfmYq//WwDu7scnj94sRpWB6qtv70ZCUErULE/fmraG+V+pz+qHfd3BpmUP6DoLRuqFsE/canK5VFBy78IyFcRbu2TvxT+4GzJP5a/9DqUBgO7fr8S8XaX9UCoPzhVpmgnxZk/a3Rpi5Kis784q321QZasP8brgYmkOMC/lmYzTzXjnr8sYjJFzUayv24UvZA2aJe/pnNXq2SRtT8R+DQ05266P3R+nixQ8pu/ZMjw1gJEs7+VA6ydKk6nP2HFNeL6hcO/U9acVkyeq7+zrl68Jbu0v0caoMX/Pr4/22dva0+YpL99fU6VlWy1v0JFLYP437m/Ob99ULPcnD/shQGlfPy2v5yiLZ2DEZ6//ZcEGdioqL87e8iddROpv6ItYQfuIqI/eVPtu7+8xb//ozbjKsrAP6qPq9YI1MO/fxXGd0dbsj+HGIDR3UCxv8TgTTcgKca/DsBnlJLKpT/uSsryP4+0P23kmJsnaay/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzYxNzI4MzUycQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM2MTcyODM1MnEBYS4CAAAAAAAAAFPFoxjqHpq/400V6PxcMb8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    5,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        3.0667734323482683,
                        10.909995392451886,
                        2.02823366359184,
                        6.703586025148102,
                        9.52374323147758
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5
                ],
                "values": [
                    3.0667734323482683,
                    10.909995392451886,
                    2.02823366359184,
                    6.703586025148102,
                    9.52374323147758
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 90
    }
}