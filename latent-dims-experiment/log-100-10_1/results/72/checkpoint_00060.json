{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "byteorder": "<",
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "shape": [
                        5,
                        5
                    ],
                    "values": "eJwByAA3/zO2ZWuKEu0/m6S7pG3Zk79X97jDvnukP14k8uoExYw/nqE2AgFmdj+LicLPZmiqv4UWqYjEcu8/YJUpDsA5qb+5MFmZXPN3PylNaYTz8oQ/CcwjCn2Phr/qNSAwfaW2P90zSppg6O4/TIx8tmoNj78IYKr8hamRv4dccJqwQZA/00iq9xTjsD99L5aH1uWIv9rshZOkPO4/NFLjKdd7dr9lv9i48pijPydz+Syc/KG/33tp0doPpr9gg3oggdSLv2Py2QSJJ/A/TetpRw=="
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "strides": [
                    8,
                    40
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    1.6189978613760165,
                    2.107889249980307,
                    1.2028778964466507,
                    0.9385847854583755,
                    0.6723136029756857
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.2655332499761307,
                    0.12897924315232456
                ]
            },
            "V0": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "values": "eJxzcJCxXL75pn1Dst8sn5iD9geyly5QEtphz8DxrX0Z36L9DFEn9hxs2LIfJs8w6z7//cBj9gxnOCsmHd9oz2AV4rW4c5M9Q4+EwhPLHQj9UPkFp9Qboys22zcskPumv3sBUNy1UImnAWE+VD9MvmF+14/4qdftGU4U6XPl7reH2Q8zH64fJn/Ha/uXJcfsAZobV88="
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            5
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            5,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzYwNjU5NzQ0cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM2MDY1OTc0NHEBYS4yAAAAAAAAALPWGEsineC/XKtkv4aklT//D0Hx/y3Qv2LS50wZUs6//S5MclbC7L/joUjZbjDQv+BAypYDiuG/FcOvG9hA1r/+hW2+8iffP38WkbZ/V9q/dIS+uSc10b/xOvYpd+6QPxAlnd9wLuQ/1pZZtIcprD+y8rNN6uPVPzAhYUY3ot2/0csUwzJLvL9E34aWWRbaP8xHL6rex7A/zP/4G9l03b+wM0az1rxwP4t58lznmNy/A5YV3wlm0D+140uq2WjBP2QMSGfintU/lazreVQm2b95bFWIq4vTP85wKI7kC7O/Cb5YdU+7sL9PVtY+KNKnv/5UU0veVtI/U4xgZXil0b+5YT63KhXUv6Ys+W/x7K+/JUxNmAhgur8qLUXf31SWv784qg+s6sG/4xEqA19Du78jo9J+9ELTPwBYNFRSZOG/hXFgsotD4D9YaaDAG1rIP6yQJTwYw+I/qW0CUJSLsj+SbZT11CbVvxwP65EvULK/C97aC0Sszj/eN0UFyLLYvy5m0EW9yLk/TcEdZpLtvj8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzYwNTY3NzEycQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM2MDU2NzcxMnEBYS5kAAAAAAAAADLUSleIlME/pupEOcfOub+M9KJaCjSuv6HiUfGtaag/XcgP3z6DyL9oo6H2LzKov91WGZUNtLK/JbvqFXJnsL9rISE2PlqyP396nQju0Kc/+GcUHz2dwb8R/RkgcS23P7RmzxcF3K0/69Epn8JbUj+fB0AlyQ/Ev/hz/DEburS/SfkdaMbwsT+lE6NLP1W4P7qdh3Dcx4q/Egk0tW4cpD+xr88i4iDDP0CpNXJyLL4/9ukWZhwbvr9ZqDBKVP7Iv2KRFY48ALQ/+wo15fFWr7+Y+shIm3u3v25n+JEPIcA/zr33s5ngur9/UcGY8uGSPwnpddnXvc2/qKpDY8/6tL9mpP+zCKN5v8ioYijrJqU/Jdiv4TwOwr9YulKks5Gwv69OALBQ370/L7NlNZvqw79vMTo0yU/Dv0FvX2xnLrm/PE5+BSqawz8HqiB2CpC2P2jPzi3z3LQ/OzRVIR5TgD96YyytV1q/v14pA+HMi7u/vgiv+Lmttj/S+VUk+7O+P21ncC+rPbW/IFJjEGQlvT+Iz5/pBJSjP1fvtHoye7i/AaBSbUp/xL8yASeiOTuhP763BG/FuHw/PdlXgc5LqT/hl0SylmyjvwLo7JLjbrY/ZUwJ8OiCmj8fQD14BpmUP53aEW1iNcY/413DMQrpvL/urCgRbu2Tv0Nm/GzJP5a/7TdcqEFSqL9lWqYdMz+xP/UIgYMYKXU/BOFK3UrBuL8naZ1+kYi4P2SvgYmkOMC/7ctuSwuvqb/39y9FzUayv6N3AaM2BKM/UgJs/Rywuj/tFUriLlC1PzWqkCxQ8pu/D/sQCpVKrL/x4N/xcyGaP6bGP7me9sC/ldSWVkyeq78AtTEO3tm5v3iGvHNHILk/JE99a0+YpL8tdWKVlWy1v44qOIP437m/XR8bTMqrqD84zOKkfPy2v85G5apELYO/Fyf6GNioqL/s0+XzCaydv1+lLY71lY8/ARfuu7+8xb9R5YJ0nXW8P9YNqtYI1MO/k5O1yf95tz97/iD/SkSov95YTzcgKca/Kz/n4EMalz+Fnr1E+K25P2MZtB9MU7O/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzYxMjIyMzY4cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM2MTIyMjM2OHEBYS4CAAAAAAAAAI9SDxnqHpq/391LO1XAlL8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    5,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        3.4551491678143753,
                        9.19597092363298,
                        1.5124317008927637,
                        4.409049855277916,
                        7.332260588730502
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5
                ],
                "values": [
                    3.4551491678143753,
                    9.19597092363298,
                    1.5124317008927637,
                    4.409049855277916,
                    7.332260588730502
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 60
    }
}