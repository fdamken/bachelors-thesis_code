{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "byteorder": "<",
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "shape": [
                        5,
                        5
                    ],
                    "values": "eJwByAA3/9cDjbTVXe8/COA+0CmOlb93sP+/bA1/P0o1UvKer3S/wwQv2MSImD9dHj5eRQ6Sv4smEnQ9Ve8/cT0Aav/4r7/H2l/dW0eRP61B87hgnVG/03PeJ1aZp7+Dohnn2q6sP+cL0Gn43u4/rM2n0ONcjD/U9ntcaeugv/qeAj8wmoI/0yLSiEzPar/rzWx8udeDPwdJM3RupO4/52sbiMGbgb8m6F21IpWkP7CNyGmJE5S/tflLuGiTZT+54XY7tMOOv+Zftxcjv+8/PBBq7g=="
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "strides": [
                    8,
                    40
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    1.458661446452933,
                    1.0061370477923481,
                    0.9380854236049869,
                    0.9749902484296118,
                    1.3711350033877305
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.3269074743887122,
                    0.20070793890918487
                ]
            },
            "V0": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "values": "eJw7kHRxS1PiM3sHfxHuvV1n7G8IXTs4U+SQ/QH1t/ffNG7c33D3WpP+/oP7YfINXG6Nd69esX/w+WBZCstu+wXev+Rvdh2yZ5j1OUnj02m4fpj8u8QzyjaHj9s/aVL+fCdykz3Dh0N7j06atB9mPkw/TL7O1+DtCv6X9gwnVJnfLqmD2w8zH6YfJr/gytI5Ddce2QMAu/RufA=="
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            5
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            5,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzYwODI5ODU2cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM2MDgyOTg1NnEBYS4yAAAAAAAAAO5BkPyqoNe/SYPHvwvJwD+2mnH71tHQv4w3Cto/XNK/oCAFyPO53L8zMJipzonMv4grlWtjo9W/YKs1DG9Oo794ckopytuiP++HYKyos9m/oQuKuYRMrz+nVBnuIie2P+RELPI97No/XOcJU9jCtT/KXRZDE0DVP3LQocn7l9a/pCp+y8v8rr+pFF//Vp3BP8JIWSQlSs+/FgHSXLLpyr9ql2AzHImav+3RNT5irdq/j4sODPVGxT8Ple6pTC69v2vqAoA7t7y/Cgg2hCvK2b+Lbki73r7WPx+c/K6BSM+/7ldQgRertT8xuMg70prMP713+UAHs9E/kAVJY4rkzL9xnfCYpSnSvyVNHRX6ZKg/UPllwWTvvL8LlEpxU96cP+tJ2Dw37bE/ehZrhEqVs7/VErl0HZ/SP4oSKw9nvtu/gtRGMMjUrT9avJ9SIFqkv76VFw04sMs/ggdNePAatT/cDrL8q8rVvwCEQROLDZa/QbwRe7vv2D8Ao302++Xbv0oOld/g96k/zGMzkC/dxT8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzYxMjUzNDA4cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM2MTI1MzQwOHEBYS5kAAAAAAAAADhM6HumPag/gqw5YiNevL+9Mxz60ea7v0VpKkNmiK0/ED2F8+zKyb8ZenhI6FCtv31mBb5pQ7W/1IbXPs72sr+vDAxfmum0P10uJn+LlrM/F6GKM+vkwr/W92/9FJ60P7KG8cVMvag//ouqhLsGqb+z2bIQG8jCv2XF6Fp3Sbe/dKMJkSKAtD+PEZN0m+S6P3HiMbNjVJE/96UKByc7qT9f2FQONNnBP3J6f6WlX7E/EIqsmfRzxb9B2M0ja/K6v4GGALeYj7Y/pjtXCX/LwL/ATbNx9wq6v7nzb6a9aME/74nj3PVvvb/Ll188Yx+dP7+4P/C5Ur+/sr1WOnNrsr/TrVSTVFGwP0wa3HmjRao/Ny0n9upVw7+MLULNDyGzv9FaXpWyxsI/pljbSUkyxb/8TalId5fEvxzXSpXDvbu/et7zGdjhxD+LsQDxHj6+P8xGvFZPbLc/3oSyfvBwoz+BkA3r2fTAv+PA8QkpG76/GaaEc85bvj/fZKGmq6HAP6kGIKq/67y/OkhQOcC0vz/7z8W/UhaIv7eky3qjFMC/eXnRgfjGxb/Y/Qr08VmmP2Fd9z/6eWi/MJ94LxYtpD/FYyYET4uov90U+GmH37M/prTkySxgoj9ObeoxrKipP0k2l1i07cQ/6uDL640CaL+pKBTc+l+DvwLEM6wNfKq/BIlW+vlwrb8YMWnprV+tP/IBU4ltD48/RtJVtO4xtr/E37Mlr6rCP/o7EOrs4b2/YIGO+VKQpL8E5aeUcTGlv2306NmLVYq/J09sJnk/vT+vHjoLi9+3Pygb5tdgybO/o9H4raa0sL8PxtZKci+iPzk2uM1MPsK/99NCVIJesL8APXqWseLFv1hSsZyjr7s/Zx02gfQYt7/kP/IwsRzBv0FuXwjkMbK/pHy0rEKfkj/2o6x35LGUP94MPPkS1JO/bkTaapDHrb/J7tNLvfSjv7ED12prCJo/DX57frXlwb/nLHWd+QS/PzBKuzL9+b+/nqOo8lsJuj99EBNRA2OtvyKM1qFzhb+/EapYQtqroD+k3gHwVsKpPyxrwvbvw7C/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzYwNTgzMjAwcQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM2MDU4MzIwMHEBYS4CAAAAAAAAALJfx+rywo+/dIkXL8kFhb8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    5,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        3.3339259013599625,
                        4.675522076016729,
                        0.4362219956917371,
                        -1.0013670606342127,
                        4.795161836274839
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5
                ],
                "values": [
                    3.3339259013599625,
                    4.675522076016729,
                    0.4362219956917371,
                    -1.0013670606342127,
                    4.795161836274839
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 15
    }
}