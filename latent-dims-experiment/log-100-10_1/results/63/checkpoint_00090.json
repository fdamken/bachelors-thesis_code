{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "byteorder": "<",
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "shape": [
                        5,
                        5
                    ],
                    "values": "eJwByAA3/ykL0xlfHO4/F7+ApNXMkz+wWmzzIpGjv2kD9lPOvJu/hvcLVO5rYz/2X8gtU1CXPzPlROR/uO0/iXCgbHvZpT9TUv47IZijPw5SCYDN8G2/xscakHpaw78+yVl64zSDP9yJH3vG2+8/doL/+gDJx78Dx4t7QsiFvwGV/zcOUce/dujgtmHHpT+iIkfca5yDP3rwuXSm0Os/Sywv+8QqoT+tUWSDTxvDPx5aZHjgMq2/A1C1BicQrT8YpAL3WxShvz3vyswm/e0/Jihlbg=="
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "strides": [
                    8,
                    40
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.0788978291067782,
                    0.021858323992736056,
                    0.008477342520848311,
                    0.022852449870398542,
                    0.00625082364306623
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.008363534246329437,
                    0.04248352945824422
                ]
            },
            "V0": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "values": "eJxj+HAxP/juXHsGBjX1XfMigPQxGc393UA6PmLt/kJ7hoZXce8TihHyEt2aciId9gwHtinahCTZMzyoWty2MXE/g8Pmj3W8bQj9MPkF56f92AIUP/Bio1Rl+n4GhTfna76XIcyH6YfJM3y9UXGwH6j+utbrD4374fbDzIfph8kb/ImdnzXZHgCnCVcK"
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            5
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            5,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk5MzYyNDY0cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5OTM2MjQ2NHEBYS4yAAAAAAAAAMq5kYLqque/oo3okLIi0j+oixzVXP/Uv2y8wNZCFOi/Fr0el3/zAMBOzKQ4Y0G/v/HaIFk/stA/9BDznjSNyD8XcEtHMi39PxT2oIUzefC/eSEvnFyAfj/7bP+OhLfUP8cqA7Evwuw/BNWlpGa81T+FrWouxE2jv4lgy1dq4Nc/EWT6ZNOZzr9fJugLP9/gP5LGS6cdqOK/nsx32Nqfvb9Voalk+tzTP8/M+s76QfC/7/AqOWCcgz/Tl+EfdqXgv+YLMXGgLdy/OTPdtY3diz9hfwdAg5vWP7L2T6BDDOy/HEKZeY/y5b+LpiOalc7iPyADR8KXTOE/xwz5hHke0r/hc5d5COXHP0EDNUcDvtk/aGhD5QMSxz/WxIxIeprjP1jFtBmgVp0/d68n1LbM2L+xfJd+qOflPzgmBBLMPPm/Fs2wE4XE4L+VG9idggzVv2HyMeFRo7+/xO/4T7dh0z+HtM64upfevyUM5GTgm+e//h3PHTPG3j/fKnW4JnjQv8o48UPDguM/olP7dzrJwD8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDAwNjM5OTY4cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTQwMDYzOTk2OHEBYS5kAAAAAAAAAEsI8SF1gqY/RdrHLsjCwb/LFX+v1gi7P6P5QuAOiKS/RbrUgoTO1L8wOFmJzDTKv+vR7TuQsoQ/z1zGZXK1ij9zLWvDfkjKPx2QVHB4ZL8/FOyDIFJrZD/79UQpJ1DGPwoKR+7pFZk/QTWx/yiZdz9HLAj8MYbUv5fM9bNjl5q/Bwv72QlwX7+oDMZIV8DLPwFVRS4IALU/ppJhji3LqL/LAArPDTGlPyvnYLjSCdg/88TFDW/rqz9kugqTtShkv7CJ+mg2AJu/seR7NseVtL8uu8lqr+qivx4QIagi4o4//IpUukp1zr//CkTUIKGWv6gEUF0q33S/380mMH6WtT/21eKfjIiiv5mHRHKCF6W/lAMe40DVob/2cqZ2ILt+v3Ep53ld19E/qkIiUOJ71L/AmossIV2hP3mjb8cjr82/lEEjiLUYQz8AwUkp43PFP/2CNtJfwbA/hGtmAbfMkL/gwcS5aO66v3w+JQDkCtG/AoOwJ74hyT+ppozLsf7LP17n4ktciqu/mMIyyPbfsj8uSE3kGIu3P8udT4/OrYQ/j5JT9SKXv79Pt+q+leePP7GI9DhXWJW/eavAO+aPxD+W8K5UuwCeP8KeUbAJplS/PPe4pLOAqz/nmxtHK+qXP5TD5PGaHrw/0xesTY8vlD9EvOT+jvybv1L3CpSiMZ2/oYxYIvCwlD/w5NCf0LWkvwR4wWbQq3q/Ae3w2OYIp7/JgFLInUexP/AAniYgMsC/hX5Mkr4eyL8vzr3cmHumv9hvRlO1GrU/3OHGIIocZT/pNjGpUGdQv4DNks78hpY/8Csu8eWhmL9L7Z5zuCikP+U1XpEsO8S/W9FLFQDcr7/zgQLSbcxlP8C/U/M8Vr4/qullT9GXuL/yU422Uih/v42oH3In8Zm/7Jz9dJhpmD/Kmk5Cl/WjP2SAoj75SLI/sX/F1Z3xoT+BNhIxfxatv8T1h1sAdaA/2xA4C0oHsb+yY/WWpgm3P1bXByXQOZu/RtvESE6Ovz8E8vnl8IG6v40SGD+f0cC/tXqth2MPuL//Y2U1hvSuvztZh1HwO8W/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDAxMjc4NjU2cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTQwMTI3ODY1NnEBYS4CAAAAAAAAAJtWh8bwr7s/x7bezQw7fz8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    5,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        10.875276208170032,
                        4.324060546386451,
                        6.965468147440872,
                        -5.329128743390945,
                        7.15511556574824
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5
                ],
                "values": [
                    10.875276208170032,
                    4.324060546386451,
                    6.965468147440872,
                    -5.329128743390945,
                    7.15511556574824
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 90
    }
}