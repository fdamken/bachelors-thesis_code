{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "byteorder": "<",
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "shape": [
                        5,
                        5
                    ],
                    "values": "eJwByAA3/2FnllEyHu4/p6IhYqtdmz+ZAivXw3Shv7UIu3UWiZ6/5TbFieQeOz8MzfeyMaWgPzbfja6P3O0/1aygsglpqT/PTrrktHeWP+bC6Lz+pYq/tsf5lkp8wb/CJZZmm0KgP/HTjwOkI/A//Jp12DhXyr/MsI/lNYOZv9/Cvxvxose/Q1vtzQJ9rT9SqBg40FaRPyKZ2K3Vp+s/FVDKW4gomT8IVrwasinDP4SYq5R77rG/4EaReO/DpT8yb3rv0umZv5j6ekagJu4/RJFtTg=="
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "strides": [
                    8,
                    40
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.09511746630949325,
                    0.029563649226708105,
                    0.00679101249639308,
                    0.025107590247280896,
                    0.006280831583534015
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.0042910582859040005,
                    0.006711022552705856
                ]
            },
            "V0": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "values": "eJxj8JBtuqu30J6h4ZVqpUycPUNC2u8d7/vtGRx8vk1fVgqkT691Z61EyHtEx71z6bZnOHB6xa/MDKC81Znp31P3MzBMXJryrBOhHyYvUDV1+3egOEPM9PMVmfsZFLRN7ppXI5kP0w+Vb+mLlDg1Cah+VaNPYOt+uP0w82H6YfIHPr1UujfdHgDMMVOw"
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            5
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            5,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk4NjEzNzkycQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5ODYxMzc5MnEBYS4yAAAAAAAAAAb4F1JgR+e/DuVYwYaF0D8Dk1IrwX7Uvw2VLgt1gOi/2RZGQHwAAcBK1HfJ3Nu+v7zBQ3zC480/LSrWmUamyz/gBb6/wCn9P0Yi8CNvbvC/ECsLhvjTsT9VorIq5RPVP4PJuXnD4u0/Em7C6DS50z8dvFMreLaTv5eaQUN33tU/on6K7t49zL/0hujkKtXfP7qIUf88D+K/1FgfM16av7/TMaTSZS/UP76oWwL7XPC/xAHw/lfVlb+sUzFCj/zdv2ti1Aw8/Nm/ICfH4OdAkD/jW1aEewTcP2lxoMMnF+y/nLTlzYY35b/aZTqrhDTkP7tQNRxo9eA/+qcfPoOp0r/pTwOwsCjJP0yNIKg+LNw/3bzzq1hTxz/7Qn2VrKPgP6L6dtaHcZw/hMiSjIQE2b9yEG/ddfDlPzJE8vtSwvi/6u883AP7379WPXi7bHrWv+Re6I42V7+/gZSlrNUw1D9k03ieCWzgv07ye5lkrea/B3VQgVx23z+w2yl1hiXSv5CAxz0SMeM/uj5FBol8vj8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk5NzI0MjI0cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5OTcyNDIyNHEBYS5kAAAAAAAAAIloW5IzeLY/5IMlbsukwr8CNEeIvfa+P7FwhUYEWl0//Ny46iZR1L97uP/fH8DJv5YXd7zXXKC/fm2d7FZaYb9JoTOTw03JP/g236P8KK4/tPvCL9rfnj9lYJeR7bvFPx2LGsgzfJq/bQo0ZDhdbj+dl890ki3UvzOY+AOwJqW/YzrGHPoijz+adNoIA97KP45M6kj/8bM/3M6k8vEPt796Jk+gzROoP1Iz+GHkS9k/9xyG+wGhqT8Hi/FfeuOZP1aFJFtcI5k/a2w1zH97uL8xMsvS+tp3P8r13ADvUVG/BulpppZ6zb/LjtdqFfGMv8MBr9OiKaC/YeMKNNtWtD8sdn3p3oBxP2juB/8JxJm/gQ6Lit9Wir+ystH5bhGVvyper/fY8tE/UJ9bItgR1L/KSZ/Q09Qtvyph0aRotMy/NMQ+RcLbqD/ZcXn8xhzFPxu26rOY9a4/wSwjkabUfb/og2tuV3+8v9JsmJbBjdC/oYRgtw04yD89DIohgPLKP2Uwg1gpGbC/4nnRSO1GuD/7LXujGOa6P0kR2D7MsXE/vjkJjcODvr87Mb84F8GDvwK1hb60gpS/MXiFg7bAxD+j+odEjKVTP5nE0d9vNVG/4qeCZ+IVqz9co0eJMputPzfJQSSUGrY/T64wFzpFkz9vVZ1HkZ63v8XBrMyGwou/7U15c/c2lD//sM7VAFqBv5OUgMT6j5O/h0xvqfSkp78wJF6lZJGxP4gwxJvHN7q/Ov+Qc8Ypx78V/59v+zqkvzDE/RUShbo/zB2QBEroZz/2GyA7pNlAPzI9ULZ4BaE/CRQtYgnDez9dTDZgcpp3v1ViEQB8IMS/bhW0ogX6o79gqr7BXhxJP4NQy67ax74/KGg4AaaGw7/QHEtNvEh4P26zmfeUDYW/GAUuQhoMiD9SnNLR9OGiP7S8p+9DWLI/VHzpHAaWgD/2Ehwmrqusv7mr9EROQ4I/YmnD1ewAsr+bN71LO4y1P6mZLUh8F32/nlqoLWkKvT/96/7M7Ey6v69xZdux8sC/mIuT3uRAt78/aV6Hmu6cvzBzM3KTN8q/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk4NzA2NTI4cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5ODcwNjUyOHEBYS4CAAAAAAAAABTVF2Z6urk/8fwc5ILkez8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    5,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        11.194663753783031,
                        4.403700214050784,
                        7.092496760222685,
                        -5.327547727369838,
                        7.478025591979046
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5
                ],
                "values": [
                    11.194663753783031,
                    4.403700214050784,
                    7.092496760222685,
                    -5.327547727369838,
                    7.478025591979046
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 85
    }
}