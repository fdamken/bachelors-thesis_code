{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "byteorder": "<",
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "shape": [
                        5,
                        5
                    ],
                    "values": "eJwByAA3/4nrCLniSO8/IxdYoPxxrL8r8pt29hqRv4fTqsDvYJG/HiSfNahyqD/VmGcrZ+qOv3qpyMtcDu8/E5+oHBk+ej9Zxv6X7uyWvyZb0R2WEqi/MLD62Q0cnD8XIBxTxcKbP9isAzEpHO8//29594StsL99neT7NU+yv1+q5xnn6qe/K46CGtO0kj+ADkRmMs6bP0fODq+br+4/hPxsbxV5Uj9o93pHKP6Evw3LXsqjAHG/g+rlWL9tnT/Jv0dXOj6YP4ECmuVLwO4/AYxnRg=="
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "strides": [
                    8,
                    40
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.5802330846559919,
                    0.536552158710289,
                    0.312955777204326,
                    0.8246708465257888,
                    0.8192379367841375
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.03647954232012125,
                    0.028822840115160203
                ]
            },
            "V0": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "values": "eJw7ELmCP5L5qn2DXLkZ26HNQLrSbbHgOXsGgxNbuF5O2s+w816S6p3tcHmH8Mdax2R3AeVLm3kVV9oziCSX1yUv3c/w2k3zbMkpJP0Q+QTGS5GSvRfsG7TuPrnhunU/w7f8nIKnKxDmQ/XD5Vdf1ow5fN7eYV2pRJXsIbj9MPNh+mHyClUJ5gtOP7QHAHDJWPo="
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            5
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            5,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDAxMzcxODcycQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTQwMTM3MTg3MnEBYS4yAAAAAAAAAOgNf4b67uC/0BMxL6x4wT+egoxGUGXWv4xsYtRv9uK/koa7/VHo8L/zhIC+b9O+P1d0WVCtnaO/GYGB463pyD+qBx3HBqnmP1EYRMcoA+S/Pbexo90buj+aWurzsNXEP+lqJFGe5uU/SIj+lLayYb/i62RS0MHdP95ID0g+DLG/A8n8XG1Sjz/XfGg+Q53RP8NGIxMtvte/4wo+VcHB1L9PpeKoqiLLv1yEqBIZB+K/ZaMbtCiU0T+K5yfAdM2Tv9emMrs079K/1uzPYmOBzL9oef70uB/kP0EE+RLHLuO/S5UfI0u2wj/BCs2eWmLiP5FgL8/oStM/uLfwtcch27/Apk/1iRaqPy3/tAIruKi/5cZF5VrNuD/nOF9u4snKP6G+i8MdfbW/gyMiJ2UJrb9E5tK5v8vcP2iNRCj6W+a/NB04b1yBzr+NSiXyDUfFv1gTZjZ5u7C/6zBSPw8LrT8pXG2382vUv0AqvadMacE/cuUcPdWV2D/GGvW9777lv1Mjx4S/iME/0yG8plfjzj8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk5Mjc4MTQ0cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5OTI3ODE0NHEBYS5kAAAAAAAAAKE7zjKaI7w/4nis+UEbvb/NkWqaRhqvP4kUtxOTW7c/OU5WA+5kzb86YnzUDOS0v1rHVWV49cC/wGua0TB8t782HdanxyC8P4lkmg+ZN5w/0eNnC33jw7/5eIJqQgW6P7WAj4RcM5c/5mXuAd4ypb+BU8QclN/Jv3svyA1Cka+/AQ792olVuz/x6r6fDYfBP7uNA5r/CrI/ys+LmLzjtz+0DepHOhTCPwVBPl6eJ9A/UBeccHUJwb//Z/+LBZKKv0ju70fENac/m3lhp6Xsxb+T9UhfM9m2vxixPx0uG8c/YY7dwbU9wr/cdqYJF8yrPz0RB15r4rK/d+AfpfVgmb9m+y1ifEGUv3Ho5GT8Iqi/i7O5WJWqtL9iQ+Yl6769v0jmG7ROHc0/p/QP1tUky7+Qk98aSHXKv1RDT90wd8G/O/wcUL1mpj9DbyOQECS/P3+BrYZ3Z6U/DffzRd/Ks7+q5Ovq9vW8v6+jPPmI6MW/ffXMU5KTuz+kH+rEoTjAP9Kljzddybi/GjV6ZWWRrz/MZKLLt0CvP5zdTAgK2Kg/mUMzQfisu79zsmv1kmG0P99IQcRG9FQ/DtAdvhtctT/DmA5SA+SpvxZYjOhXJLo/MUkN1+UsoD9ZOJ8yCOmIP6ILzGj2+sg/Ytm23fsabr9AdPT1UnR1v51J8neAtZA/iC43gAgbsb8okdP5rKqRv2U+vknZMIU/krzjo5vKsb8W9h+24zedP5s2G8Yi5bG/GdDQezt1tL/YapQhLsO9vyxhPjVKvn8/sYSiBnbDwT8uJhrq2tu3P5VpIY9xqGO/UH3r0bkXmL+ffhY7JIqKP0P0XfZbZsG/GuYKp1kbsb+/cgMCGqW/vxTGgj9ImMI/7FO52ej8oL8QqksfdpmJvwxhJJZxiq6/6CXiHvGJij+UWV5ZGq6SvwbI9chuJ5k/IToeY993qb9/SPP+5cKhv4a1Ko6MxbE/7RV1PGQwwb+hwLN5P3C1P8UoJ5nrg8G/a06idTotsj+dlGbXd9+0v35pCgNUFcS/6Y0tA0Xce78kkMzsU5mAv77bETiK0rm/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk5MjI5NzYwcQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5OTIyOTc2MHEBYS4CAAAAAAAAAL8Yc9DV/Yk//P6N5LCxjb8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    5,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        4.543392270978921,
                        1.7091792898222657,
                        3.046861252874756,
                        -2.5262435574681956,
                        4.333234874486579
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5
                ],
                "values": [
                    4.543392270978921,
                    1.7091792898222657,
                    3.046861252874756,
                    -2.5262435574681956,
                    4.333234874486579
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 15
    }
}