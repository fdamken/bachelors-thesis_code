{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "byteorder": "<",
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "shape": [
                        5,
                        5
                    ],
                    "values": "eJwByAA3/+NZ6fJyme4/GxF8ipJwmj+ojmLe35Sgvwh5B2Wm+ZW/r5GG7XZvcz/8zCd28UeOP6XQiOeisu0/1T4Q7KuCmD8SEdYbZbKjP4DK/cHvYHK/VucQsPpCtL+jEtalhmqhP1fGMbS2JvA/nEV4ylunyL8OTySbthGVvyZgNje1+cK/AcZuk0GAsD8qXc+zIQiaP8bd/sO56Os/r2UkFOvklj+J0iiKqv7BP73Ie3OeV7S/Nup+iYFFpD+XgQ5eqtqav1x/sChFK+4/gI9qtg=="
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "strides": [
                    8,
                    40
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.1454189487213117,
                    0.10087090915635873,
                    0.015212427674032917,
                    0.0548838145607483,
                    0.01158465575152802
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.03582938911236124,
                    0.004704304417050537
                ]
            },
            "V0": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "values": "eJxj6OBoY9270p7hwFXdY9Mq7Rku2Mcoz5tlz/Bg2rrlu9uAdNQZvXMtCHmRvOqdOybbMywQSHVoq7ZnYChkuRuXv59BYVdjcdo0hH6YvMff9KemQPEDEq8u/0/fz7DAO3BdajPCfJh+mLzIstyo3YvsGQRWXzLymbwfbj/MfJh+mHzFowTlycvtAS9hVS0="
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            5
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            5,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk4NzY4OTI4cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5ODc2ODkyOHEBYS4yAAAAAAAAAA622wWIoua/dfakFS3ayT/WVB054STPv5kj2SOECuS/ITi79xf+/r9HrEBpksGJPyyvHeByfs0/G9F2MLF/xD/qIeqk9tr5P4H+uvwxO++/cguCO7XXrj9tuU08hXrXP9BWaHqvpu0/ZNGnUbSJ1j/RvVsNqSvIP/T+2XoKB9I/+uj9m8sOz79BM8M8UqzdP7SxBPtkH+K/U4CWedDzwL813M/8CIPRPxWEi4VuAO+/L5QPFrrErT9MqpTmDIbcv5QfALst8NO/L0P1bcGbsL+PJ2BdZSLeP/d/07n/Ie2/GmRI6M0U6r9sFQo8CazhPy59ivfUWuA/H5kW+ibI179n/FedJP7NPxQRcaFxq9c/KbEIo5FTxT/OiZHqu+/cP3U9PcdqeaY/o7Q0gIzH1L/vT6VTHXvoPy4YHkiScfe//CFD9J6F1b95p2raz1rVv2JKRil2Osa/z/vU1iae0j9PkkFNBwvev6op76yRFOu/lWmfw8443z/DEBzr27TXv2NO0lJtd+I/HI1fkCa0yj8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDAxNzQ5NDA4cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTQwMTc0OTQwOHEBYS5kAAAAAAAAAAaQ3+APA5w/kncn/UW4wr8sp3DYAGW5PzdIWQgL57g/tPqhFAvi0781fBvRYIvCvzRM5Az2v5g/iAfy0KTjgT+2iwfni2/IP9X2yMrx27o/S1300DnAob9w8bCC6CPGP2uio/paXbA/OcAAibAlq7/0otPXzRXRv+YJwp7Q8qO/6kdPX7Zlmr+KCbBbG5fKPxfcIvb6ipQ/+2BpEGHGhL9sORBKjZqjP08s9IZJV9k/PB+eK6pTpz9bOkVoQAqbP6mZ0R7dIa8/iFW3QmUdqL/MKG146eqUP5SBSEEZ+bE/MjvBJVqczL/9C9fJ6tGhv8lSFF48O5a/p9HULIT6qT98fnKTnl+WP4qYZy97n5O/QNAeh49nUD/s4nYk/M+aP60dre6GitE/Gotro+9U0L8qxNoZTMOiP9Ep5CQx1su/io4HHicasD8J897gG8HGP/lxxdOm4Jc/exreTkdalL/YEFl9u4PAv5658nzEHtC/8KkBuWzbxz8YjisaQunJP8OnR+hNgKy/or4SKGZznD9380hRdJOsP/xIQyeV5H2//9+7lUkjvL+roKddUY+mP8qwJy1ZxZG/g4EuhhZZwT9KYgCw9PeMv6R39RGYs3m/IDDanjS3qT98Ix0NkBuwP/GJ7wi8Ra4/Iit0TANgkT//PLp0lQC+v81H1BhN35q/FUlPUQ0kej90slEVszOQv4DNcqU8SHS/X1yaepfxqL/sKIyiAtq1P+rmowASvcK/W02rb+zayr9hkeq41y5dP41VMdqXob0/YinPiBfMoD9ehprRzgmsPwBaFO6ceow/Mm1yU9ZYlj9mQIH5y3eqP2iaOWXPyMO/qpL4rYIpor/4bpzg7x6Yv770hhLLor4/fozM6dHKqr9jo2O42CJ9vyt2LT6x/ZG/xOb3GGNMar8tVWCt3PSiP4Jtj7EXAK0/Jq+Nqr30oL/fxSTj/0yrv+9b295QFqo/BroOZV3Fsr/4Pfuk+MC5P5I9Gaj3DXI/T+xMhKzQtT/SreE/W525vxMp6C8TSMG/hQIHDItGs7/0ZddFjHCov/nVAmjK6r2/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk5NjE1ODQwcQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5OTYxNTg0MHEBYS4CAAAAAAAAAOptnA0L/rc/DJ5unhTvcD8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    5,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        11.278727430601734,
                        4.801066024830666,
                        7.073188326384306,
                        -5.174188290570332,
                        8.494197146470373
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5
                ],
                "values": [
                    11.278727430601734,
                    4.801066024830666,
                    7.073188326384306,
                    -5.174188290570332,
                    8.494197146470373
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 70
    }
}