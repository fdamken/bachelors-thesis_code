{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "byteorder": "<",
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "shape": [
                        5,
                        5
                    ],
                    "values": "eJwByAA3/wDUlimQ1e4/4g9jH5KHkz9WJ2yMfmyhvxcODjvOXYy/KJIzL1PNdT9Sgp5zLt2PP1QbcM6K3ew/TPPq8gcYlT9X5UQw0+KSP+K4+8T1JYK/ftvvU1BHr7+YiNnav0WoP5CNQL4PLvA/CX4u1f3mxr8aUQov3TuYv0B6sMNJp8G/O2J3ZwY9sT8C3wcUmkCcPwhVC7k4Vew/dozti22tlD+g4Itdjq7AP6rflVf2QrK/cx6xDgs5pj9jXgkwuRKkv3Mv277vK+4/Dn1hFg=="
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "strides": [
                    8,
                    40
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.1941886935069151,
                    0.14195586408658994,
                    0.01908598044559665,
                    0.0687417043127662,
                    0.01985555808694804
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.04949016232768372,
                    0.01255957648903626
                ]
            },
            "V0": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "values": "eJxjcHFctHLTBnuGgr08LGHt9gwVs89u4lxsz+CgoRiY0mXPkKDek8Xbj5CPYNzSfmWWPcMC7+AHc1vtGR4c4/hYUrGf4Y574bpzCxH6YfIOhiE35RbYMzSczNmnVbSfweHqj1/OXQjzYfph8j4p2jIfVtsznGBfd7Nj7n64/TDzYfph8h/+WiTu32wPABmaVGg="
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            5
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            5,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk5Mzg2NDMycQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5OTM4NjQzMnEBYS4yAAAAAAAAAG7UuNP6GOS/rtaBSsrp0D/owgemn/nPv1P2mHUI8+G/+1Tuf4nM/r8qBeCGweu4P/VtllmHeMs/bDV4D7rKwT89ChH1mdD5P0Lq70TbXu+/Cp2kkrrusz+Pq4f5ZynbP8YpoEhALu4/o/uIAy7R1T/aRQ+7AeLVP6m9QB3hhNQ/A3Q32FHnzL/ogGeUlgPgP5qTGkucueG/UHnVN8rlx7/4HUnk417LP8W5IZo4Re2/RHzLaN+Bqz/VnWz8XirYv7dxegK1TtS/DePiN10Ks78giU8YyjXgPyi+mSe7Ce2/YmxMGq2f67/sKQ99fx7hPxZGVWfRst0/eH8Im+Jp2b/IVXBPXBHQP3ifspt599U//FBj9+APyT+/ZfRu58bbPxZFA7vXcbA/4TbAwaXm0b/WoWJmUPLmP+bL9UWZ1fe/SeW8ztWg0b+qZ1SbM3PRvwLsoKoHmMm/jM17qP+m0z+cgH4e9oHbv12Fp+KeF+2/opeC6/CW4T/Sn1j4W/Hcvy23OmCWCuA/b9CEI56/yT8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk4OTc2Mzg0cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5ODk3NjM4NHEBYS5kAAAAAAAAAIrAzv74h7M/AQwgyfZOxb9Syg2Oa8q0P1F7OrYK074/KCHVrOFQ07/K0Q/yoNrBvyG8PFD/1Im/OSoQ3muMWL/0120XOU3HPybkbzX15rI/7VevG2WSsL9rsPKmeF7FP9Xpx2HvkZk/WCqu32HHcr++ytul9+PQvxhiRKHGYqO/ueeHtO1IkL8/hCXJsrzJP2uM2xlgIYA/3F/EV7E0nL9Lg5zbM5qKPyZHq87IF9o/32wZKHAZrb8GhGrpLWerP1YXpOjvrLE/qNLldSJotr+tThTNgWZkv6mx1EIvTK0/YMIoVgd6y7+uHLMp5v6sv8FqrdV+CWk/s9Ys510upT8l1+RXPWKeP9VHE/Wmeo+/ReInlHBznL+17qY2fg+GP8dfX9xK19E/T9D7+yEl0L/Zgqy76cOUP9ju+lTes8q/G1yiYl19qz8xbZg9Z9zGP8jiSXQp+IA/efv5Ox3Nsb/6+pSnyRnEvwG7pps2G8+/GCGsEFTFxj/teNK9FxvKP7umCpDVray/M82nptEIsT8cGMJbYCWzP5VjYvt8s24//mE5IY+qwb9xnidwNBulPz2g5jrNFEo/6CMLFklowD9q4wg6U/V/P3AyUYHotHE/Kw5b0zRsoD+8tEo1NyKyPwFG3qku6bA/UyluojA5YL878+RT/GC1v9KIAHh4qoK/dLIcoaL6cL9jdn5Utm+hv5JGSCjMB5I/Xsuj2zNSsb+vllbeAwexPxhXZZksS8m/JQZSfHH9xL+m+2SK6IKQP/rktkKmm7Q/cID0+0vjsT+vk9MTwc2xP8ys3Y22r5U/uPhNwpgchT+R6pb2DaiwP+xSCHEPdsG/rXrwJ7PYp79x/8bscNi0vxiLaH5hN7o/9+s7ceSitr/M3TKwcIaIv2tPVuB6NIG/3DoKHZqvhz/2PHAv3buJP6kCIZr1kag/VwC9lk68jr/aoroXAAKiv5i5BOR9BKk/Z3tCWpr4uL8fuUm3RRi+PyQBK22XV5i/WozXnzRRsT9Swolu2/e0vwAJU68boMO/qg1HPkpzs7+fMyXefZ2jv2yX95j4T7e/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk5NjU2OTYwcQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5OTY1Njk2MHEBYS4CAAAAAAAAAG/gaG5lubU/KE7G3nS0jL8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    5,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        11.14385221039144,
                        4.821915637896046,
                        6.898047843418316,
                        -4.887953155217449,
                        8.716954964786268
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5
                ],
                "values": [
                    11.14385221039144,
                    4.821915637896046,
                    6.898047843418316,
                    -4.887953155217449,
                    8.716954964786268
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 60
    }
}