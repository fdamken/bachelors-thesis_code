{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "byteorder": "<",
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "shape": [
                        5,
                        5
                    ],
                    "values": "eJwByAA3/+3gVFd+VO8/LvdARgfnq7+PgOhzVrqVv4FKldVDaKO/d0ePBq2plz/hgu7aEX6Vv/wbkAZg5u4/hnFj4K3Iij9dP96/hn6av/5Nq1MNy6e/LbqeB34Nnz/LmjJRYsehP/rUnMladu8/vJ03tj/7ur8i/OJnApW2v5aTz6sWB6+/iVrvLHubmT8Ua0eoPCqhP3Nrmtx74O0/WIf7eNRveT91d4YR3ps3vwv1QO9SY2y/7jEwYkyblj+wrBy8qiOQP4MBiu7tN+4/9rho0g=="
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "strides": [
                    8,
                    40
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.4871198626411471,
                    0.459510922684111,
                    0.16371318730158665,
                    0.5383980245248763,
                    0.796414939487216
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.016861878169822375,
                    0.04870713998066378
                ]
            },
            "V0": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "values": "eJxjMGHLXL30vD1D+YPccyc22DfsjrrGtvSoPcMCxU8vN9btZ9gr78bitAEhv+CA0cxz2+0ZuBPfH7ZbYt+wvt4vuGzJfgYO5n+SL48j9EPlGVSmOdbdAIov3udr7rZ5P4OGTmdXwQK4+TD9cPkd6jtnxZy2b1Be4tty8hDCfqj5MP0w+QVf2TbfF3xgDwByXFyf"
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            5
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            5,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDAxMzMyODMycQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTQwMTMzMjgzMnEBYS4yAAAAAAAAALGTntpPxOG//0Bi7d2Mvj+f3TR28S3Uvz9GcHSZQeG/999kAxRD87+9J/SMU+PCP+91rTkX4Zy/Eix5wap0zD9mI1vt/IvsP7R07zcHjuW/y+CbjpU0tz+Vbmhkj5fLP90ucT+rqu0/LNk7m+L+mz/89XH8YjHhP8Pws6EXcI8/w/bRQEwQoD+EEn2puvfYP6oZt8JaSdy/WFR9HuBn1L/bJMiRfLbIv29hCs9zZ+O/PclA5YAozz8bZoiMiX2yv/0h1b2oOtG/AyRVy0jox78xtZEqN2LjP9jCn/t0gOW/Oomlqr1ZqL/pFxGvZiThP0AMryoIGtQ/A4XSk3o2279wDRTCG1K0Pz7yHs+4rVa/tvs78Qhzvj+CO5NQDUnJP+BfigyT14A/8/8lixW7sr9RYNJ+1z3fPyE32lMvPOy/8UQ9y61HzL9SRPS3rj/Gv2onegdoL62/KblO7XMcuD8aZNmmfWnSv28f6VxeTau/rSNtyt9P3j8IWA1pZILkv3kxMsA8+8k/BZtsHFAyzz8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk5ODUwOTEycQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5OTg1MDkxMnEBYS5kAAAAAAAAANX6nzsUebU/4euEMlNvvr9UOvgi0XGwP8DqUqoHDLk/7ZJpdGCizr+FmD7Ctna2v2sim9EUpcG/lHn/NztNrb+m4PeIrJu+P/2PLcuFJFK/8N2KQ4u5tb9dnAe1l+m7P6ztd/g3y48/QnXjeDeUp7+gQOCQkBnLvx+Dssib9aS/NQee1DOuuz/iUgqBSsPCPzhRNdqjH5k/LBM+OJSGrz/Ld3pTdJe/Py3ppv92XtQ/lY6+Lhy2wb8rPkxw6KukP3rVT57DOqo/5IAO8bs3ur/oVqrvGZO5v5rLigdN2sY/Bp0c4c96w79pz1DtR+esPxpqaRIGV6K/sjfmXtdhkL+YVRm0CfWjP2fJeemuOqe/S+GQGT+Ewb8gWLlguOq+vxIG34kJB84/Vvro6uf+yr9RcsO9mnHKv/8nENCAtMK/2PGoYHWmpT/CF1g55QfAPx7yf9XEcaQ/tGSNMljPwL9rjhlRxSa+v0ptNOVRHce/pJEn2SahvT+nUlfmiRvBP+GivyQstb2/3By6JsGdtz+ywHK+5yO+PxcTF/7ZDqw/YywAXsWYsb8cew3Je6CxPwcW9hYAeoQ/pUMZqoqWuD+hR7AEbpmkv5CmGx3f1K4/ftyXDhBslz/xmekbUo+NPyK/b5uPssU/1S2hQ+Khh7+p26cxRNpxP/fDXbP+zZU/hU8jJabbqr/t2XOUdfSMv2SNubOGEGM/wBT1yroHtL+k+a2RrweiP+45UU8IeKi/9MYVx/bvwL8XmU7/NCyzv/xB0EVJ1aY/mKelaPryuT8Mv2v/BPG1P38L9HtQ5J4/MJlRfZnLgL8abhxYlOGhPxIF3TqGSMC/qKLEuEv1sr+jH+yxKw+1v3n8hcMWXcE/w2oEvY/4pr897lUdxkxev3nfsk1V1ae/2WFBbJfZmj9jqIkfuiqdv5wKwzCk56E/KsIMypohrr9z+icoopeav6F37Y32mq0/s4KCXNwbwr/VoxqJJ/eyPwrr2izZ5Le/vqO9WwmiuD8A6Li7aJ+yvw/0SEYR2sS//bpaI8R6m7/VxJpQpOSkv36/M6et1bG/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDAwMjI3NDg4cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTQwMDIyNzQ4OHEBYS4CAAAAAAAAALoOVHF+6pY/kII/EZTGl78="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    5,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        5.932645995032969,
                        2.1565250471106365,
                        4.188970086243519,
                        -3.1640585138614994,
                        5.063276433442096
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5
                ],
                "values": [
                    5.932645995032969,
                    2.1565250471106365,
                    4.188970086243519,
                    -3.1640585138614994,
                    5.063276433442096
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 20
    }
}