{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "byteorder": "<",
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "shape": [
                        5,
                        5
                    ],
                    "values": "eJwByAA3/+hx5gtniu8/0LJYUp/Eqb+bIEc3SPKYv2cULoTxu6O/LmMucwX6lz9Pm+PPzhiSv9YaIE9+i+4/8CzAo7m5hT8f/GTaUbOKv/2OxOcXCZO/ADuU5tndoD+EVB/jSdSbPxria2yFt+8/a021UY6ZwL9+zlmiAC2xv6oOnwHRMK+/M45Im/PMlT/o5A71SFKgP/q1p9eTve0/oiC9adAGqD9AMJ+jPG+KP6u/FsfoeWS/GTDwOD32lz9LajZPPM1/P6uvthEn9O0/aQNn4A=="
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "strides": [
                    8,
                    40
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.4309375073914666,
                    0.4280088675431597,
                    0.10618068741929668,
                    0.41033268895847586,
                    0.7468968912076244
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.045917835830010516,
                    0.022650901363882668
                ]
            },
            "V0": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "values": "eJxjKPOIUDt30p7h3MV27Zcr7RmEpK5ICR+0Z9DoCNrT22LPICA8ZfnTxXD5hmtCxYErttgzhB4/Hqa0CCiu4xhWumg/w1Lnm31ORxD6ofINgVPdrNYesGew2ajyTnjFfoY5FpdiHRYizIfph8o3fHyu5Fh3wr7hbnfI6g8H98Pth5kP1Q+Tb1jNJXZB47Y9AMrkV2E="
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            5
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            5,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk4NzE5MzI4cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5ODcxOTMyOHEBYS4yAAAAAAAAAPoK843VgOK/wfYgxiL4vj+/VL2esO7Rv2B5+IAxK9+/0Pordw8m9b/M9V3+j3fKPziad4q1baa/p0DIKk+Cyz+Cx6lQoRLvP9E9o8vj0+i/r1ik77SKpj95xVLmf9jQP6LD4Iqule4/MQIVusUVxD9mzCmD0+HhP8pYOUq83p8/ajgsWBX0oD8ZkOKvzcHYPyRdpj6Aet+/k70iC3dV0r8RHR8Xz+/Av73+ZRgONuS/2Pw4xpprxj+q3mC7P07Dv/kQPXplKcS/c0vd4Q71xr8GyXWXXY7jP5LDTaynKea/4G4Ue14hvL9rzZKewZXgPyTY7eQZ6dM/+Gb/O2P63L+LZzGheVzGP4jALMlP3a4/95/LrkU4xT/nfQXQYwfOP21Thd0Tya0/AzTKT/w+s79MQMlx9AXfP3JHefyNe+6/XcE4slr1yr87WL1Bey7Dv5rBhgiOGr6/ODcq3y9Buz8PuWsKPkTTvy5f6A8dCci/16TEREVC4T8cUvF7ixzkv68HnSfmPNI/tddFONPGzz8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDAxNDI3NDg4cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTQwMTQyNzQ4OHEBYS5kAAAAAAAAAPaviO9sPIQ/jpm3SNXDv7+kgGhkPDixP9oKp2AY7Lk/tZVo0SRZz79ztSDMPra3v0/HKkMnW8G/dn8EOmaCpr/CoUyhmgTAP7avf99U54U/ej9kZpseo7/hajkCJkW9P6cfW7SKcIi/9G+A2W/ZqL9Pk4iLZu7Lvyyqsy5ROqe/66Cs1l84uz/d2ks7KnnDP2vuyFa8SW4/hSzantIipz8JPgM+csOwP0M4BnZp9NQ/bY9BLI8twb8LLgYYjFK2P5PbKo5BY6w/BRpe8a+iur+RGsQbLJy7v6xQBgSBLME/gUiXY4kxxL/kUGAEr2muP3ioNQqPTZ2/b3uBIkbYjr8ZzqgCNv2sP7+Ax9PQOai/Nd16Mqolw7/Uh5DjwvS+vx/mGQl6sM4/Jtzni6XNyr8MBf7Bk4XHvzn7bhNDa8O/+od66sbupT+c8vswo6DAP8gukM09NKM/N+sDidpktL/8iNf5qpy/v5QlXwYw08e/G3lc8sIKvz+I4T3kf+/BPw4D0Xfcd7C/k/IjgqIRuT/3MAj8xTS5P4EIVNOxt6g/AdslBDjsqb9ZfV/NVsyxP3fgAb+Gm3w/ZdW4yp2JuD/0oB9ZHryjvz1IFls6M60/2R1Fai6Cmj+3Yui4vH+lP2wYIdxfrsM/6TGI5z3Lgr9pfHlwZXyWv+TqwZptMYY/21j/MRDuqr+SeD2GFVOHv0UtoQ3D8WI/xIJm3upBs78upOZBcL6eP4q4xWlh3ai/xkmPkswbyr/DhGWwUxSvv8X0c/NPN7M/H1A+qM6xwz92VWjTYDG2P/fCNhEeDqM/pkvPGCxCfb/jNlmo5f6KPzmYjzVIq8C/fKikxFPisL8SODmWgfm0vwF/KiYQzcA/g5H+ysq7pb+IJ/p46r+Dv9i59crMq6q/v7fvPyLAlz8rVpsSSIaavxkwzqwXNaM/0iuaTVPis78rgVtcwa2dv2q/fDLyj68/oPmfKpxowb9DXNF0FgizP20lSXRxPK+/+pTQWBIGtz/k0c9EBGOzv41H5/H0dMS/3VTPSSQrnr9WjNw+tXurv0PiIRhcZLG/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk5MzAzMjY0cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5OTMwMzI2NHEBYS4CAAAAAAAAALD9eF2hoJw/wZGbtXWwlL8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    5,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        7.406343508215666,
                        2.924768051002035,
                        4.852823949651993,
                        -3.420647959129459,
                        6.3981831144964785
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5
                ],
                "values": [
                    7.406343508215666,
                    2.924768051002035,
                    4.852823949651993,
                    -3.420647959129459,
                    6.3981831144964785
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 25
    }
}