{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "byteorder": "<",
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "shape": [
                        5,
                        5
                    ],
                    "values": "eJwByAA3//LFFppiNe8/T61IxX8RiT/Jf0v4i0ikvzpYLxM3CJC/EXEdNC4jgz9XH/zu5vmQP9tV4YHcg+0/iZRpTusZlT9MqszZZvtSv3GyaQeIdIu/DYz6g0dwoL+o9hM2iuabPwuQ8f4hEfA/W+RakMktx78tziL5R0OJv+z64nOXAL2/0hQQ6W8QqD+wshKDtmWYP/s3DvUHMOw/4flIpeJxmz9icGCIvie+PywF0lGt3a2/ykjRJkgPpz+lJqJ22g2fv2T+8RT2Gu4/Jv5lKA=="
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "strides": [
                    8,
                    40
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.23407902954649196,
                    0.19960343796704608,
                    0.029214030632732636,
                    0.09040917860148695,
                    0.03487709247169486
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.05947210496788466,
                    0.004137158546792478
                ]
            },
            "V0": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "values": "eJxjePBy6Yavm+wZJGKNy2on2DMITODX9l5mz3BhVsAG7x57hgVTt+87Nw1J3vLB7d/z7Rke/MrbsRcoH+Fx7tPBxv0Md5KXv7+1DKEfJv9Fxmvz/UX2DAVe/W77K/YzcHDtWLpiEsJ8mH6Y/OnvLF/NgO75sKfxdc7i/XD7YebD9MPkbxhN+JO90x4AqXJerA=="
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            5
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            5,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDAwNTQ4NDQ4cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTQwMDU0ODQ0OHEBYS4yAAAAAAAAAEy/194qF+S/pGYregmPzz9jEUGfHubMv9/iYXNC4uC/Y+PKCxmI/r+z9C5Ion7GPwm4dmZRcsU/js1gawRdvz+oBVOG0JT5P1BGRUhAPu6/DABx082OsT/tkr1DSL3bP4W/LmugW+4/F0QT/YN91T93AXnn1avXPxdfHNaystI/V6YmC/NHyb9kbSi9hz3gP4aPZ2EabuG/BEoBdTr7yL9FbA+RKI3FP4akR8A1hOy/2CxPh2fmlD85BDETN7XVv6WQRNUEa9K/RokIrk/stL+Z3jtZsrvhP6Zu9vfyv+u/LHo9av9v6r93Sdr+nfTgP3SSywZ139w//DjrPVB9279DrlwognfOP+aXQhplKNE/EPx12jrJxT868N+tLqncP9p2Y+f88LI/B5F6Wq+uz78xm2UjjC7lP7bAQJXNxfe/j3FrtE9t0L+mqDJAthrQvxf4Z4aZ3Mu/UaTUN/lw0T9ZtIg7ASHav8cYmQ886uu/Vx33HNI94j8nTlRG9wbfv8gXnmSf3to/I2QQxOE8yz8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDAxMzg5NDA4cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTQwMTM4OTQwOHEBYS5kAAAAAAAAAJCepYaPKKw/MS9HhrCNxL9/lAXd2buwPwwQlko+1ME/h4bWuJpW079FJdNMt4LBv8ym0UY4uLW/MgRsyhQ3iL8Xr3Avq1jHP+O5+vp91qs/E7aBQZrtr7+91rUVsKDFP7xAz7P9PZY/e50vx/b0o78VWspe163Qv32g/xYA37G/GryPTFAzhL80TwUYEgfKP5gdKnZSYYA/j5lcNtZ/Yj+8fBVoTUtGvx+TJcxYN9k/5dWpgARxwL9c0UqUxTmxP+duf1P/0bI/TubUcDP+s78gPBdoYa1+v+2I532WZqw/b8hPbnmFy7/4u3juZM6gv1dYHbjb8Zy/EqDMyqNrpT8w2weQMZeTP7E9u2vJqKO/DlB7tP1IlD+7SesC51iQPzJ1kNTVZ9I/A2QcpRAG0L9NGUEZ5Texv/M5+2xQv8q/3oE78d4vrD/sBqsw977HP6DljoRwfnc/QK23jwsBsb8Ce6osjb/Ev2MxQb+oJs+/qW9/TrnWxj8bk7krMafIP5ffuKLfWa2/rvcsCuCypj+aHaAGuTm2P7zYkUBQXY0/XRr79+r4w78swQleO4euP4RS2fb9w3E/DDpydv/RvT9Pv4Hl2vKmv2Vsbu8KxHG/XWvXkhA4nT9jClmYiV2xPw6nUoWoVLM/C3RwwOdVeb9QNeTLuFapv3iaa/lucHY/vQrLfz6zkr/qOY/ITTecv6Umc/hHOm8/f+Nugqidsr8ORLg7cy+uP/2A/ROmfca/f7p8q+AMxL/mGEBZKhl6P5ceL+KBfrk/IRlLpsrNsT97b3UR7JSxPzWpOaxpc6g/Y5Vdg/j3kz/+xyLLoHquP5qqHU4EAsG/ro0BH85urr9D8asYM0Gvv12ny3rnVrk/4mvJnCUfu79Niz9KZBR0v1CRIw4kQ2q/HQysjfMUiz+Qu5z+znJ0P9Arz39GzKI/PqMJ48XIqr+nJL2N0zGgv5YWF2aKaaU/M8AJLbpHu7/huAqV0rS3Pz1MDxaRV6C/3Vw6m4vosD+sPHsZxQ+0vwhnse+rF8S/6qnwL3Hgsb9C1Lc/jROkv/6PoxCTALe/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDAwMjY2MTQ0cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTQwMDI2NjE0NHEBYS4CAAAAAAAAAKJDbp5J0LU/FA1Cg5P6kb8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    5,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        11.242805826430093,
                        4.9055676717906165,
                        6.933513778591695,
                        -4.473747434001953,
                        8.940861876890631
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5
                ],
                "values": [
                    11.242805826430093,
                    4.9055676717906165,
                    6.933513778591695,
                    -4.473747434001953,
                    8.940861876890631
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 55
    }
}