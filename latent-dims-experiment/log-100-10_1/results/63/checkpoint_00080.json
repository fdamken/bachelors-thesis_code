{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "byteorder": "<",
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "shape": [
                        5,
                        5
                    ],
                    "values": "eJwByAA3/51jiBO9Du4/9NJkgHgWoT8Yxnu17Zqgv1SU+muatJe/cIcAb8NPcD/ryINvovKWP72hy/3T0O0/zITJIlrwoz9qnRwPbDqbP0QbA+hMjnu/zMyCvqswwb9FseyJIg6cP59EKb46GfA/w42Ciiluyb8Fq8J38auWv+zL7wcIP8e/7CoXEn+Jrz+CtwVRjieTP8ssaaDJ4es/rBMN2+/dlz8Qp73TYcPDP6lFoGN6XLW/wFZ/1ntgoj+6o5myetSdvzv3pf7xK+4/arFqnQ=="
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "strides": [
                    8,
                    40
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.10971920739406076,
                    0.05220045223596728,
                    0.008417437660636915,
                    0.031286105523604474,
                    0.00784410854089629
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.010357318004522312,
                    0.0031288819227207796
                ]
            },
            "V0": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "values": "eJxj0CgU5a5fYs/gEBIVG5Bmz3BAZXtF9GR7hgVb+Zc4NtgzMPxP46uqRsg/2Oz57GcfUNzPaOb9AqD6or9Rwjn7GQQen65060foh8kXaLk8PAcUZ2hO3VSasZ9hwfNWyyU1CPNh+mHyFstsLm6eYc9g4Hp/Ekv3frj9MPNh+mHyBguXNHbOtwcAqVxOvQ=="
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            5
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            5,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk5MjAwODMycQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5OTIwMDgzMnEBYS4yAAAAAAAAAH10UURujOa/Wtivnrpjzj/f1JzjUULTv1yQwQu/Oea//Q3KuQBdAMAKJgxPpdKvvxauWXGuAtA/DEkWmmyWxj+oaw0zCqf7PxGDAWQunu+/M30BBK87sT9Sil0nn3DWPxc1N2HblO0/uNimQDVn1z+LeNZ+SrasPzkTptHZ+9Q/cBbGhFrCzb/s8vw7r1vgP2mP2JTpfOG/9FxlGdO3wL/EUlxexY7TP4E81YJCFPC/0TR7eRJvmj8jgSED4XHdv5wuB2OvTtW/ektPUv+Ujr+eaveWjtbdP5UpyONJfO2/ks415esy6L+7WbDwCi3jP+nZb9VoNeA/sK29O35j07/6trb87mDIP145QFUn1Nk/rzGQD0Zixj8+aNDbCH7fP2pIdx13c6k/rkmdQ8Xh179zR5AnXjHmP8aIptiXXPi/nkIy0heB3L9qqRbOB4rUv1IB0GYgBL6/JeLdyv0h1z/uZTZ7y2jfv12yB304B+m/aPyBheq33j+Oca5x6Q3Uv7UHTdJ7eeI/x6WrJVvpwz8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDAwMDMxMjk2cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTQwMDAzMTI5NnEBYS5kAAAAAAAAAP+B+TWLr7M/khUe+uDswr8Eeme7c7O4P4AZ8zHXQHk/B6IEaCq/1L+dvNmEMlnGv4gEIsEtBF6/R5WIF0nzl78+M8uNyinKP4+lDwvxJK8/9Xva3Si4iT+quKODMRLHP++m8Fk9TKY/+wlZpImLe79yXWhSDqXSvwOgSfHBKaS/2TcdqPpqmD9mtUZjfePLPz9459KQ1KU/YCXO+NdKr79VUnoQmsiwP4TcNBNrZtg/fJHv2X1QnD/VTSxR4QOcP/8QhlBV3rA/aFA6ugjzqL/XRqBBYHmWP2l7WQ/CKps/ygbwV5tWzr/c4R6ETqNov1oeoWp53Ki/a3ORJB3DsD8FGEzQtEaFP8EiPvnR1He/TIUg82YbbD/y2c8OPH9Qv9Irj94TtdE/QnA1Mfom0r+kYdA/7YWBP+s9isxvkM2/ed9Dwa1YsD+Q6ij2jnXEP6zTGd8k9qk/NvG7oCUUYD/SUZr7g1W9v1R09Yzg+9C/iBXUoltFyT/bpMuZFHHJP4v/UkypSK6/DDaN1y4KpD+RtXaU8Fy9PzT0CTYEH5W/IGRi21fxvb8DsQpF5T9wv4wwDf1vQ5G/wEL5WB6xxD8HuUejmK8xP+4th0Iv/Hg/oqLGBkB2qT8jGqBrmf+oP7BMr4keq7c/Cj4pGs/qkD89aDfdyT66v8vtisBgjHA/XcnJ+pOkkz9ZriHz/nx3v/LIQe+l0Iy/JZuC+e0Sqb8xdssUfFayP/pnfuxTZcS/k+qZm+onyb8aAMRXIwqiv/BvUwZQ9r0/E2grCseEZT/sm+DnJxilP7LK/wEKWqU/TfLABRyXmT8nuYwAPCakP3trZD6TuMO/uFxb1pxTk78xVu6IKKqUv9P16Jw8H74/+v9bg+yRvL8DXI/VSRtlP7duM5nrw1a/RH60mg81kz/pn0XIAJ+iP/K0+bDSd7A/Fkwm2FhgkL9tgcZoCwyrv9erZWlclKQ/S/Hh7ytEsr+jhOs55Mq6PzFBVU+7W3k/OcjcNGyKsz8wFDaHEn25v7tlE+LeS8G/TtZRO/zYsr/WiPDvXCipv83bjGq87sm/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDAwMDg1ODI0cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTQwMDA4NTgyNHEBYS4CAAAAAAAAAOrIPVuIcrs/nLS9vN/ObT8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    5,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        11.118744113967256,
                        4.629981092789842,
                        7.033217966645175,
                        -5.3728533187062135,
                        8.078934907960372
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5
                ],
                "values": [
                    11.118744113967256,
                    4.629981092789842,
                    7.033217966645175,
                    -5.3728533187062135,
                    8.078934907960372
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 80
    }
}