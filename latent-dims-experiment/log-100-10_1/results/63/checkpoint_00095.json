{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "byteorder": "<",
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "shape": [
                        5,
                        5
                    ],
                    "values": "eJwByAA3/5KZ+p1j8+0/KSyDmeTblT+q42icpwemv6NgLYc8fJO/hpaTRDBqcD/17xfBHoSQPx0ldCxql+0/+oXW7D6Fpj+D21bLkhqjP714szRGJny/nbBDGrtzw7+/ob8bJE2RPwbxvlsdee8/JoKvotnVxb/x91Lz7jVcv1kM4h1FX8e/XHHtuJ35qT9kwgRbryM0P0JXquhXO+w/wi3Thi2IpD/tihqgzT/EP4v2rxDzY7G/Ggj46nIkrT8OglADpqulvwCy17Pv6u0/sK5n0w=="
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "strides": [
                    8,
                    40
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.06515333218269957,
                    0.019910945028317917,
                    0.008870633806547706,
                    0.014829532698051465,
                    0.006220725217501864
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.006199530954894726,
                    0.057610231441119764
                ]
            },
            "V0": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "values": "eJxj+DB17aKzs+0ZGK5PufYnwJ6hYd9ys5xOe4YHYrx/NQuA/B+V0ez5CPkdzotTb7YCxRMeC+mGA+ltoi5vo/cz7ChL//+4GaEfJp9wbMF0rRagfmntf+wp+xkWWAWUTChGMh+qHyZ/wNLKd163PcMCzyUV9+r2w+2HmQ/TD5O/ISX+9eoEewDfb1OC"
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk5NjM4NzA0cQJYAwAAAGNwdXEDS/pOdHEEUS6AAl1xAFgKAAAAMTM5OTYzODcwNHEBYS76AAAAAAAAAJTqZsTdo8+//cYG5pPtt7+Gl0aGOAjrvw15ihrif9O/jU7Lk4irxj9b9H0jtBXVPzvoiNlpXdC/xwkc5WKN0T+4jZc5davZv/abfkhlL6a/hQboV3nAx7+TTh0UNljAP3YcybjDTNw/KTaes7K23T84e4t1FDSgv4FOvyOeVMs/7NLhm82nw7/rDbx2TQ3PP/ZlrNPWG9E/P00MLvK2tT8VD9xyv6T4vxgkSmwFRfo/UEbdRLMOzj+nHziq7C3tv6ieImzfuP6/g/4Fb5uR0b/5OQ3+avHvP1lUB3QU1c2/GCCqc56f7b9qORM0XVDRv36NMjZFw7i/76r6TdYJur9NuZZIA+6+vw9dTtRUWrW/CcF04pP8nz+TArpj3SSRv99Axn2/G9w/PFp1vMT6nr/Z2cG9ZTTUv0/6vszdQr4/QEk0xz2b9j8HKOyGWfv6v61R1aTeEcq/kWtZV26z5D9AALcUKx8CQEYv+KM4UKK/VH56Y227oz/iAgqf3d3Uv7c9FZTgtbU/6hLF+Bybu79r4oZRUZi4P5MTLO2Bqb0/ZGo6jGKkyr+Q3Ty9crvMv21DS/YzpNC/x4m+FMwS1D9JUibtMaK/v+JrlNrt1NU/ULpMEtPJwj+OO0xEzEjOPxCL8yepa7y/E6DYoX4d4T8iLhUpgrXZP8XYXl8WQrK/8APUEP+uxj/K/SqcrZTHP/UMOkRhVZE/tQFXBAFA1D+jbnNp27m/v1doIS6XUZI/JW6se54Kjb/JTk/wdIvnP/ZbG+E16Jy/QgbXKIZK6L+0wbCtRx3mvwbjXNnZcZW/w6xwEtmt1r/B/KNcKOLFP9wClmWuFsy/kQGK1Lid1z9cTDPYVpPCP3eYmLnwKLw/U55iVabjuD+VWu8/sGbEP6ewKKDvMr+/yzm0OLEw3j98nbXmoiOrvxNw4UuPSeE/IezKZiLD0z+jC/ByV57QP/xzho7hD8M/fFHdeqo83D+TGFGVemLYv+HhO1xsLsm/pS4D1sKAi7+OUm1O+hunv4xIH9xvaLI/Ep3XMG1HoD+tijMnXjzTvyr3Gj2sZeA/n5SgZGnDoL/X3sneiuHYvyGg1QBtNdU/lnhiLjatyD+gv2PBh0DcP9r3ksaiptW/rLQywp3/1j9YqYnxDq3Dv3o7UP4VEcc/K4/MKua0o795fXPbObrNv+J1Esn7Ta+/BA3DyfXV478B/64+3wusv0gHnYJvbtW/sTmNXrStfr8SvIqmAInYPzAGhuXSr9C/NEA6w/iVwb+oWHQ3nJCyvxXVXJnq6Zi/++Eow8Rvwz+aUN/nrETRvzV438mySNK/fvAunf7/zD/Xf3LobA3aPzDoG49F/ua/oMZue2k5zT8q3ilXqWzKvxFlPrazMbO/jjP7HHUXwD+0xeoOtHPEPzX31xAbbr2/93XoIySaub/JaSb/3MvgvwJ+DhqM2NI/JnCrYcbnwL+55WWKUebDP4ne0w47stk/e3pPTs4X0b8nw3OUVObpv71T24alyf0/Pl7SksfIxb+LPwVjisTgvzW4fEzKzOu/M1/XBvfPwz8JjwyEp+3FP0LF/MmPb+M/JBZ9eh2hrL/RomYscN2kPxkLLxJeycC/XWm+8Ku1wr9uzyFKvL2pP6JwV6yVlnQ/3cT/gj3ixj+nap008eLTP16xz0GVSOa/MHO6hLdWzT9+OZ3a01DXP1RgrNRyRMU/IXBo/dS3tL9gi+oMTqrhP/0dzcyttc0/ETB+ReOb1r9X8N9lSwviP6XIPLgE69M/36vzXX6pt78QgDwx6ozgPxUPUnwtJsS/19/RNJ54qT+hcnVBWuzQP0LcTaA63Lo/z95aWiSe4D/DmtLXzEyhv3GHLPBKAZU/tXZx5ddI17+a1x2R+LHevyreo+QHIOC/QWP/0SXJwr+s/2xOHhfHP5yUwNqvitE/SogFjkS2fT/PYfiwiIzMPxVs6w5ezsc/wqvOdM5EsD/ss8PIthmyv/47j8fYNNs/LbUez9en3T9k2T5CN81zPz3oTO72O9S/awJ4S4M0hL9ivf8qcnW3P/2CBH/5q8Q/uVCgQSw4jD9dR7H25m3Kv3VVa6FNp+u/xZyIpUwR8z/1/zUjXhS1P2VZCowtQeG/CK5Net0O8L9PVtTmzi2VvyzGxcGV/9w/re5rvZnm4r/A3XZEmLrav7Mhsdlhubs/4d3SIRib3z/dhnMc3QjIP2yf9TTTDdo/2/ZBj2ECzz8NPj8Fb4HDPz5mQ+cmp7C/uzximqKM4b/NTw9o64nkv8vZlvJLILi/20RnG9RZ0r/+LShLw03BPzBfGUe1XMq/obXRbTmC4D9yyMG2kPrcPweyDj35Qbu/sqjXa9h32T8VWJsEZvKtv2Zi+TjwPcm/wO+rk3DN3b9BiC6BKB3dv2JDLIBEIuG//+Tbv7Y49D/GpSQ64RnHvwN7//EYQdK/boL+fZrQ6r/57MIfRkHhP5ZL2JO3D8w/ZNJVsuwm2T/rdfXCKhbGP3E7KuUodMw/eicSZ/ClvL+KpBuuxHnVv6BDnN3yMtA/ISzs/IbF6T9f98eiwA7iP3kGkMUMkri/uExqBIkp1r/ayspI1JDKP/XVnE0SGLO/FWqBP+o12D8masIYAwbYv6vKwYXv9dY/+uSiuUJytD+pbQ6UYCvSP/wIRNC/+sw/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            5
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            5,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk5NzQ3MjMycQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5OTc0NzIzMnEBYS4yAAAAAAAAAClGw8/5z+e/eru897mv0T+1IFn4H1LWv2QVjhVXWOW/Qt4WgSvvAMDI64J5BhXDvwwD5g6q9cg/qsdgViDswD8TIB3Of6r8P7AQyJxKXPC/ypCcbyL8fr/q3kYhth/TP9ysqLc5t+s/u5BgNc7A1D8AdBq1NXOov/FK5NihgtY/Tad0CxNqxL8UcHzZ/EvgP15kOMXnhOO//q8b5tk4vr+m3oyCYgvTP8tf9TIOd/C/4DR4WgOyl78QYDcfttvfv+u0mpDbqtu/S6rx/ZvWdj+CQcdCLSfaP3t9QbjZIuu/7L9oX7an5L/EBpmOrrniP4ZNSpMC+d8/ShjzqnI/1L/7J6ETmTzGP4Hu0RVU/dg/bsN+cA1FxT/h9HY6Ka/iPwwsZ3JRbq0/EEOpOpBB178cQwheoA/kP2dbHZ0bu/i/4z9jgVg73r9AKMU7QLnSvzAEYamUrsW/nwdI6Aen1j/MPpIdw+Tcvz4t1H0X0ea/wP84qCIl3z/z8XnGue7Ov6nzV3s3c+Q/pChF/mp2wD8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDAwODk3NTA0cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTQwMDg5NzUwNHEBYS5kAAAAAAAAAPkbo6ygrpM/JFh+J4IZvb9AJ/sURhTAPwYtdN7j83w/BL+uLPNC1b/Xx4ZxeQvLv9lg31M2Tpi/9nen+4MGiD+DihoXXDHLP0frhptpF7U/LN9lH1lzf79yeGCL2JDGP3byI6lN33U/e9g43NLxdz8GyHimRR7Vv91EPJ+QAZG/T7bOeeGyVj+PYtb7RYnMP+AVJXib+LM/TFNOYp4ppb/VCxO9xs+aPzG7If+Rc9k/TmoST07+nj8lmsr01ExZPygSCFVEfze/ouyAebk3tL9OlvE3PriKP/fpsD+i95E/oL0M5Adez79EGJotCwigvwxiLjePY5c/Jthd4qGrtT9sHqG4IQWgv2quirDSd6K/qihqj/panb+8GZO6WqeEv1eda1yWvdE/0TVvTGme1L8roRhnUl+Av5Mm2roAmM6/aR3/Qmu5fL8MhsKAAtLFP4dC5e+5UIo/K5nwA/5zoT+auWgeNZCqv5uKTRV/ftG/47USq/jxyT87myP//1PLPzCEnupMyJq/3qU7JOypsz8K5oyJQDSoP/IphcBYHXa/8UX8GOpKvr8lNKbaoT2wvz/uTR+/F3y/RItTOkNYxj+dyPMY7NOcvyWslFVfLqU/6ycb7H9XpD8Q6UN4na62P7RYVKOxt64/AlymnE9xdD8CNhrOuVKIv2hZzVGzo6M/U3mD4bsYoz+2DJa0nRuCv8Uc5o7NmKi/qG4+afAsrr+ZNHLXT/ayP99sWITjQ72/4VCGT5Lhy78Q+nGCIsOdv+DeaLUBw7k/bJS8EP1Fsz+q+/G9/+qXP4uiAi/rWgs/2K+8p2u8pj8Pi2nZ0IxpP1neipTbcMK/UMvGobpMsb+Xh5hYcNCeP7HPMr1I8ro/5qs2nDzIs7+3Bghsb02sv84px7lpO6+/dFPMJu+qi7+iw0MCGF6cPyMTc7bIwLU/CoOp1egLlj9ZQkATTe2lv/ZVcuix74e/NNf6ok43tL/krncCKIS6P4of3OlL+n0/tuw6Y/Mgwz+YTVlWQOy2vxd0C0S0lcK/mSRdmuSKvL/qRVaQIJ61vy9rbxEXGLu/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk4NzUzNTY4cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5ODc1MzU2OHEBYS4CAAAAAAAAANvI+m2rgb0/rd4R95AOer8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    5,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        10.770789835060192,
                        4.224772343620067,
                        6.8591718351741084,
                        -5.223690401999172,
                        6.939117797268857
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5
                ],
                "values": [
                    10.770789835060192,
                    4.224772343620067,
                    6.8591718351741084,
                    -5.223690401999172,
                    6.939117797268857
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 95
    }
}