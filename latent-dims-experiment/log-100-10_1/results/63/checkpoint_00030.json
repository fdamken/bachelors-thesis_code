{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "byteorder": "<",
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "shape": [
                        5,
                        5
                    ],
                    "values": "eJwByAA3/+7NKW39du8/1xMDzjDVnL/EeON3JdGbvzteP6WwgZi/8r62BWu+kT87CMJ8bDuTv0gOvJvVye4/XbjNofSfhz+Eu1Y+slFaP70NHXPdFJG/G9t8CToPkT9Ny/HJ3BSTP+0dQZwKme8/npsdkbBqwL8r+sIQwwWjv0DpKcr+h62/2yY0cvgblj+y+PfZvnOdP/ufMU2//+0/GO58nU1frz81pXaO212TP2a/iuxKCYG/d7zfnhNWmj8dyy6myk1kP5xmxS/3v+0/Vlho6g=="
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "strides": [
                    8,
                    40
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.3905817661310254,
                    0.3972871224193254,
                    0.08209622740736257,
                    0.3147485971599445,
                    0.5568891731371967
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.09663924254128506,
                    0.01724215225638153
                ]
            },
            "V0": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "values": "eJxjKIicV5h+1J5hj1Z6NPdSewavuv1vLu2xZ9jAGnZasMWeYcfy09GxCxHy+2OXFBzbZM+wYpvj/5B59gwf3J/ZKCzcz+DrOUUk8RBCP0y+M+inKucue4ae1ft8VGfvZyiY13anbCbCfJh+qLzDveIntWpH7Bnu/c3N+bJvP9x+mPkw/VD5hqN/5PIMb9gDAPA9WrI="
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            5
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            5,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDAwNTQ0MDk2cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTQwMDU0NDA5NnEBYS4yAAAAAAAAAOAixE7lMeK/fHke8slKxj/w5PCSrprQv8VbBQ5Bgd2//zcM42lf+L/daq0brWnRP5qWD/r+jDA/X5WpFBTMyD+AZJBskLPyP6xC0fhka+m/lCzcobbGpT/v7PTydlnNP9izPYlp4O4/FFqQUV8KyD/NSvuT/iPhP+Ie5tdrRqk/r12g1aFZhb8EmkZmffbdP/6HwGCdAN6/lEx6aW2a0b/EejR4Dqu2v5s/jQqiDOW/J/5J77L7wT8NnuaRLg3Kvx6HIBJjNMS/LM7c0Wr+x7+SxLKlBLPhP29gDIwVYOe/Wq9wfCt90L/eWmdmWhrfP2LREiB35dA/5Fln81xG2793Y03kbjjGP80VsoDDYbs/bFyiRihQxD8/lIAoM8vRP1c+i2WAc70/t9TvLq4Ctb+r1efmiTDfP6JQgzaeSfK/rN0khdHIyr/Os5WI+V3GvwrE8v9YH8O/2SDlOmnGvz92GjEAB3rTv1uXTOyQQNW/Ib6CG2O44j+4Q9I58k7kv7QAksCVsNM/atqWAKflzj8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk5NDMzMzc2cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5OTQzMzM3NnEBYS5kAAAAAAAAAH12+RWmS5C/Z5FgskbowL+2ePWPcD6fPz/LaCsSH7o/DwHfrC7Qz78ncHEwcdi4vwQg9pAGRMC/2U6l9hnlmr/Hfjd1pHvAP8te2l8c1K0/Gbh5EMmlr796V2XWKQ++P9zXVTHo9JW/vVt1NIn3mr8t2TO8IpzMv3G/4ZC3uXU/8HeIrt3puT8fjP11Du7DP5yg22CM9Je/4XjD1/iDhT+IryXC70OnP7IOYu9QW9U/yLjYxRvlvr8DyGHm2jS5P715/uOR4K0/028r1pTFuL8CnZGmsP28v3wkL8fU2bo/jmz34HeoxL9DjDfRe6WSPwxfH9uV9pq/tY1NrP8Yjr/XfmsStiSeP4AlQkzcx6m/dWCUOgasw79Hya+vuVe9vyQFmqcNHc8/15o0CInkyr8GJYPwuS7GvxzwfdZJ4sO/cW+ckR3zpD+HLAOC+MrAPx7bNp76x6A//FisY/6QsL8ttjeo6zvAvxjfE+zUSci/dFV5xpfzvz/QRLJRG7LCP5FyTkdB/6y/IRIDFf13tj+jKkR/C7O7P0QyzCu2rqk/FC6ynjinrL+z7XepjZyvP3hNCGOvmok/AWRPDNhJuj9zmi6nf3Gfv72zskYH0ZI/0mI6aLjblD/1s8znY4qmP4f7UzuEhcA/Kc4sIJzRj797D/dHiTuRv3nCW6UTf58/mjW5wW6Hpr/DIj5+7seWvwMn7OUSwme/ueAX6PSqtL90cG+Xg5ehP7OOHwrZ7pm/eAAUO0dHyL8kdKHRUC+qv+OKHiupo7c/D0Z1E4Ukwj/y3dHFw9C0Pwvhz+hZ22S/q0S06QQkdj8YxTZZClKlP8LvPerz7L+/78MGZMi0qr9AsiAhCfezvyAtLawLQb8/8DHrzntmt79+/NmO8CuUvzerklOtula/moX65k3blz99tiGXohagv26RdvVX96Y/lz0h+yDjqr9xwevqTgeYv3gkqS8wwq0/idYkZJk7wb+UmW/B7yqyPxVgZ49+lKa/kWgyvHh2tT+r2VNG1Pixv/J/FdkgJ8W/yKqGGCGvpb+szcSHcw+xvxh+cE2GU7O/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDAwMDM4ODgwcQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTQwMDAzODg4MHEBYS4CAAAAAAAAAL1uXid4LKA/1mtut+tWmr8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    5,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        8.637972132808434,
                        3.4411208330858742,
                        5.388701896839378,
                        -3.174398782221155,
                        6.961687151920231
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5
                ],
                "values": [
                    8.637972132808434,
                    3.4411208330858742,
                    5.388701896839378,
                    -3.174398782221155,
                    6.961687151920231
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 30
    }
}