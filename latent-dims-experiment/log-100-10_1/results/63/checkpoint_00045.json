{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "byteorder": "<",
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "shape": [
                        5,
                        5
                    ],
                    "values": "eJwByAA3/yEv7n/scu8/UicPT/6Okr/ukBadeYOmv3gCL0wmRZW/cXi7fBwtkz9psTbPCOF8v/e928QMku4/cOpdN+HDgz8K1SSIRImFPxCWKZx8wm2/+bfG14zfcz/4G4lCEwhjvxd1dxSNtO8/aYLTixqwwr+DhC+Dd5SEP9YZChzK+7K/aIXUFyUamz9LkoRruJqbP9vhOpo2E+0/hvQJKaaQqD+C6Af3pra2PyfEHlkzoKO/Nqc7mMc/nz/KKFaRBeWHv6JDEYe25u0/oeRifw=="
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "strides": [
                    8,
                    40
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.3032047297138726,
                    0.2914283526545611,
                    0.061890937476836806,
                    0.16335691121553655,
                    0.11996784677972311
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.08503690920663394,
                    0.009587800040348895
                ]
            },
            "V0": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "values": "eJxjYGksfLFkhz3DCg577k9z7BkuZFUsXLjOnsHhk+mWM632DBWXT8roLEXIF5gauc5eZs/Aw9ZR6TDNnqFhmkLrjL79DE9yv0eHbELoh8k7FEktkF9lz7DDoLYpvnM/g8Oco0+OzEWYD9MPk+f7x9C+bJc9w5t5H+8rr9kPtx9mPkw/TH7J/F4d3qP2AELOVoU="
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk5NzI3OTA0cQJYAwAAAGNwdXEDS/pOdHEEUS6AAl1xAFgKAAAAMTM5OTcyNzkwNHEBYS76AAAAAAAAAImuDO1pkde/dhE5PEfk0b8Xq0UBkZXmv8EmhEyL+dm/j0Kbr/jitj8yAZ4F2+HOP70m6frr7MI/qrmbFx782z+Nclduhzjgv0IWZ8zYnMa//ThmSOtVtr+ZC5WDIfi0vwldY6GD8tY/rzPI9apj2z+ppn5zsFCVPykrbZ7cA80/bZkZu/sa2L+KmDoZPQbSPzkt/aYDH8g/aeL9/LXqtT+s7ejdAsT1vwWYRtFREe8/FQu8dn7Q07+1FN0/kIjav4BGPDrwwfe/wEexbiI9wb8bHhfYYYDkP9knYODt3te/7zjG1Sd37L82noZhVvG1P03kRcgZNcW/WqIZWjwvoD+RXtKdriu6v1EvpWXRp7+/m3cIx2YMmT+jsMnx1DzQPwaopfY9HtM/sYYj14UKxr92JWVhiv7Uv246Qx5gt8Y/g7UGyN1I9D+1g2BXe6TpvzpwbZ1vtNc/zSf0jCB6wD9PqSpOBj78PzGaNYRROae/YPQU1XRhsj+EmNIPFYLVv9xMAsPQ7Lg/vsbWu/thwL/l7eTBAPfDP7onoj7gIsw/Joo9XQhl0785JSOZuy+9v5u1BCivlLa/4vw4gg1q3z+aLuaWWELXv/5by+IYh9I/DFKskfbpxD/yEVY/4JrKP8HPQX+Xbb0/QnUF/yoB4T8zjrcsSBfQP3Jj7WjR57Y/asYsi3Es1T8mRND0LCHOP3iJFnsU04M/5aOPLfm81D/0iiALQmDJv5267aHtoZW/poGenbpeuT8sIt7kxCrlPx5ntyfaesS/5gd9GNIS3r85dQq4atbTv+QN0OjWOLw/7a36uEwz0L/l4F1hfhnLP5atSeaEIte/GOJQ/ZRrzj+vAdMw/mDMP3PWw67Dm7c/3oOtTmQMwj+FgQOlhce3P6MZpA4lhXE/emCERP9k2z9YZsyfTiDjv9n9p2sRp+I/P7DNcWJuyT+c02jlsajGPw5oK/Eg9ck//BAZmPlI3j+hnrUyxj/av652YxPqRZ2/t2nX9GCyxD+MH+Y+OAu8v6uzVoGuWrQ/s0naYmR+nD9qacdJbCDKvyiCE52yVOA/beF8ldSawL9b3SlzHnDcv0nHZrtgWNc/pv1URfH/xT84DyOMGqTPP/lOoG3449C/TB30Vvubxz8fBU62MlTPvxBlIpp2DMM/dIlAgUQRqr9vhBktvrbOvyliHemdwoY/4asI3EgH5L/NODKd/UXEv2IO9jyYwNq/lxvnYJrOvz8qay5+hynhP/+wsQkTiNi/focz4aLVPj9UcJyDgVewv15Uon246sY/Z5MeShqxm78t5i1NFjPRv3Hs9mPMCNS/AALUaufozj+kE08zzUjYPzJjHbrXDta/itSJrmOO0j+A/MSBAuLRvwGb0GKCIMi/ohbM4nY20z8Y266R1zHmP+1vw5SEh8e/uEBCT2TGtr/OUBM32Ebcv+hhqr7BQ8U/TEJ+/u7uob+cOQA3XfzQP7GXIbMK0tc/nigjvMvp1b8W9noowW/ov5QSCuyOGeU/LaXs2jVd279PH5jp3F/Zv7vf3flB0ue/ew6PXXao1D8XVM/6Cm/UP+eWL1q5dN0/etdE9wnMvD91iFi0lLy/P7Y6i4yq1tS/BQhvo38ryb9LFlk+esDIPwmgwmhrZpA/kGakbONRyD+8StDYCerAP5wU2Tiwk9a/6OGWFuvM0j/MlAScA8/SP6gNXpFSxYW/lP979zhvoz/HLLcg/v/ZP4viIZtYisU/K7ijQ3cnyb8ITEJGGRLkP8qOOAPXjds/xzvarjBegT85yqTEO/HeP6J6KQARMcS/LvjJ+lv5nj/NJFNuN8baP/Mfa+msIs0/MBv9PBwb3T/7R7iaCpamP5TZrMcnwrY/cQNJwVjz379rb0PFznPTvzZxPnglf9y/JU4GXLPPyb/WvXK/shJzP3aiPRwVN9U/ul+QSnXWzL9uTG0MRVDOP9uinAA5x8Y/D+UvwM6CsD9Hxx9kz5aUP5jjHwPB4dQ/q6NNDPmWyT8TsZqxGaW2P3UmV3UN9NW/TUqZXu5Moz/PHYYzAQLIP7zOP9xNub0/CqEDdEDZrj9sHqhTiS+9v40FjODDreu/QV/voQtu3T/xUgp9A+fIv3GG40Unqdi/mgN/+1ly67/jP9UZXMe9P7lOp8GB99U/3NI0xQKY5r+hadniJbjVv0uixu+RIc8/jXVr5ox13j9/uwyzS8SSvzk1X8wYwNU/knyCvIZgzT/VvFq7K0mCP33fKKZ6f8a/TcwxkBZy4L8f/TeMJ2nev/5r1eM3bqK/pwWb5vK5zr/PsBnQM6jOP+c+aFY0X9C/QC1vMlQX4j+IN8zipZXSP3Rn5ZauV8+/3EAr8SgN1z/MIJLsfIOzP4/ItnneRLa/aviU22Y94b8tA/hgmtTWv82dzkAC0+K/VxeYjQ0A4j8IcEeXRRfYv53Dd9lpdce/cdTJrEzb6L9Kv5/eSZ/jP16WdqNqs8C/KllABcya0D9trvY7oNjLP1w6vBPHeM0/ognBKBCMw7909wdnWnPUv0DhZ5jAa9M/RVBm2aOx5j8s8/9J2X3WPx+erD3hnsu/OeBOx/4Ex79dPatmuq3bP8QgHRIIH9O/DCFzzGFQ0z8uTQ8nconbv5sUta1TV9w/10B3Eg+tsj/3xBxMonXXP8PbPHGcudI/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            5
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            5,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk5MjQxMTg0cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5OTI0MTE4NHEBYS4yAAAAAAAAADPR2rcDZuO/FSpnTX1pyz+T5RbN3eTLvy3uIKaPH96/eOl18yZo+7+FVtJeSXbTPzgZ21IEDrM/Le/oE0PeyD8HnKrGvXn1Pw5CiSEQBu2/Twy7v1QQoD9FZ5YEiD/hPwnlOfLznO8/Cpefj74azz8Xoc1F7qTgPy+HjAnHcso/lVlOXiN0ur9Tb9sbNRfgP2BXBjpZLuG/fNY+J7NQyb+tiPUBn/KzP98x39LTSuq/QtJtOzu8hz8h5Z/CEA7Tv3gLqr3B89C/XtAD4hehtr8Z4LfDUP7gP7J9BQ9VM+u/MibOO48T3r8DL9BThJrhP3cnx866+dg/oAEyAbIi4L+KdOnFFn3LP6jV/q3xSNE/QT3GWmyizj81v16wdXvXP6o/p4tlLsE/8kfB2uTtzr/7YsPtdTTjP6ldy5MnIPS/AdP9U09d0b+9gquo8LHMv3pmWYW5l9C/K64RVXjUzD9tK3UVq5fWv8TRF7sDdeO/I9SZd9Ov4z9qd/3rz6bhvwGHElJwkdc/Isu5NDzXyT8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk4NTExMDA4cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5ODUxMTAwOHEBYS5kAAAAAAAAANL5ZA0nJYk/7jRVJ35Fxb/5x7fTJXKxP6+Sv9zEW8A/y675Y8wX0r8o3Mnol77Av9+LeMy1dr2/9tSr5SNfkL9aqNyLDtvEPzM5xGLA7aA/eGpQr7Vis79UsID8VlzDP4oQMprQ2JM/yCF6uaEorb/8lXvhvWTQv0m6cg11eLO/BtI3Nni5tz/NCC1tPAnIP4b2svw6Il6/tzWzA2BKhr9tg6YFp4J5P9hRHoTSttk/rtid8Nnpub+HbCKYa6G5P7ObUJsWs60/3NUzSB2FwL+ykv3Tak+/v4zt2JHCkq0/7fi64d4Hyb/TVTC/lJ+sv7IjoplbI42/CY8S5HHolT9hLePodTqbP823ngPTq7G/X024Spx7aD84z0GlAGN3v9IOjkmmrdE/Ni8YiFAyzr8e5fTf4xLAv1Zn1+GzQci/tFQJ8LPfpz8Vjabf+DXFP0o+mKY84ZM/PuYent5Dor+CumJ3NvPFvzqoFwQZqcy/LttQF4JZxD/Bc36WUXrHP1tDqz3+5am/l8aYCskgsj+sqKUtX6mpP50I6k9HX5U/cozhmSaus7/uS3b09I6wPxatJxV6KzO/JaZUlUjlvD/olejbKuSiv+FloHSobng/wIc0/N76oD8WIW8teUyWPyfNjvwFerg/NmzSAY8kab+JiUWjKXicv15VD3pDgZa/wZQzTqQUnL+9NN8Y15iKP0qzpZ2eg5A/5e+krLKhsb+osE6J+GayPy/V8klIUrS/hoTuzO1vxr84alro7eCNv9kzYhCmbsc/NdxpAFw1vj/Ei8v6XUe3PzRBwUEa5Ks/l50AhvwRoD/7z9j92a6oP7094hW6mcG/H+t9zIrAq7+Jq9T6KzOtv1qFHRqZLb0/u3ESKVJjtr9NJu98h+F3v8TvZSzRGZC/11PGEwzAkD8HW1BaIhiTv7D5x6ueBqI/61LWMAoVqb+3dpg2qpCiv+eXIotqU7I/alOWcrWCvL+02Rvf97+2P8WfLvD+RJa/GGkYZ0Ehtj+KDFalMj+1v68geSQeg8O/CKHlalnDp78PedLKQBypv0A+OKxA262/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDAwMjI4OTYwcQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTQwMDIyODk2MHEBYS4CAAAAAAAAAA6hO0oQ1bA/721nOsx5ir8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    5,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        10.848339402664019,
                        4.669843272264684,
                        6.567651097571112,
                        -3.6139993790604135,
                        8.793834954349894
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5
                ],
                "values": [
                    10.848339402664019,
                    4.669843272264684,
                    6.567651097571112,
                    -3.6139993790604135,
                    8.793834954349894
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 45
    }
}