{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "byteorder": "<",
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "shape": [
                        5,
                        5
                    ],
                    "values": "eJwByAA3/4cjMni99e0/f0E7bJFxmT/BoDc5SgWpv43bg5hKKYi/7Vme/wPDcj8WBtW5xmmHPzvY/lU6qu0/hVOwf/tRnz+Lf9cdEzCxPxewj+OYG22/QMWYBm5Uw79ENiZuKFaZP2aut/DY+O4/Yg6FCvjawr8q5pUQ2Ul2P0J0fW3MssW/qvAx0jwJqz/XvDF/KRqQv9zHDOV6ruw/Q8hseurOpT+OfArppmrEP+G3FiUPobK/6cv0qawptj/WeZn143C1v3XuJdOH0u0/K7ZoXQ=="
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "strides": [
                    8,
                    40
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.05309674106678711,
                    0.017452160414821095,
                    0.008546968285615124,
                    0.01172596925585049,
                    0.00567699905017624
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.006593114042254456,
                    0.020024027649189008
                ]
            },
            "V0": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "values": "eJxjUOBVtXCfac/AYJH2rssHSGv+9H7QZs/Q8OqDQ0Q2kO9nFamZhZC/UKz7hLEFKB/s7vjM257BYdeFzGWB+xkkLt7tnd6IpB8qf8G356Bokz3DgU8bn01M3M9wYNOeWzr5CPNh+mHyDbOWd2xpB8qX75vLV7kfbj/MfLh+qPyExwHHHHrtAVxtUwI="
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            5
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            5,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDAxMTEzOTUycQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTQwMTExMzk1MnEBYS4yAAAAAAAAAG+7sueTO+e/E+EmVXcF0T9L1LG6ysjYv5JNiwC5X+W/43llazdnAcALEph8ZZfIv8kglvfyCdA/H+QG99xzwD/RN3L2DGj9PyYvEmAPTPC/N1yIi2YWor/whgHcGAzUP8xsrF8oY+w//KejAUIU0j9F033TWtyvv5b2M3x60NY/5j0RQou0wb+/DT9EHf7gP7nMZOEgBOS/+Cf3r3+vvL+iFz9fIBjTP92ef51cpPC/c+GheNj/gL/ADXkxdcjgv5DPLNX2tty/ous4FOU/cL+LwpWLenjWP0FrcbcyEOy/hqfi/Zwz5b9hEolMxRPjPxUt9P1d8+A/ITALholo078IDecKz0XIP8BGdkkUQ9k/gBlPw5UXxj/ec2HzhBzjP6CF9jFkK68/O3yVOU321b8/B9nGkkvjP9/qIPfjYPm/wnW55oB54L/s7QRf1+nRv7RPGBFYjci/fzgDlBWi0z9rNIf2mWDbv6PDmlC1yOe/Q7BGK6lE4D9Z9A4rY2bRvwDTVHbdbuQ/vBN4ePi6vz8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk4OTE2OTYwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5ODkxNjk2MHEBYS5kAAAAAAAAAFNhUOfFZ6A/k5A9KCBkvL9nQPRiqOXCP0dXOH9KJoq/SMGUyeov1b+ItUg6ej/Nv1oR1iDdZo+/1m9qVcn3iT+Z6dhQSwvLP+UWbKjGYbA/AgfS2Q+vgT/vtGcRMD3IP+Deyk6dW5E/BHGVLacnb7/upIP14vXUv2r8pJc9hZi/qydAnVWbfb8RVQrgLjrMP1X4yTiaVLs/cf3G1z2Asb/IDahvNjieP4/Frj/YM9o/1j4LbMuToD+hn0DY5ImkvyByfqkBgIK/9tduxECbsr8k6rPu37KXP7ev6pn6lYk/UaRze3w3z78Gl3S1Pn6ov3wxJreV9qC/dVJLanFSuD8T4izSb46mvxB5x5bOX6K/aOWjAdATmr/mEQRLqKZvP3KNotfXhtI/xZ9ER/ac1b+slTRKDCmQvwgp7G/vcc6/OclGWMXdjL/Gnbtm18bHP7oaYcP4dZY/GSmKjNE5pb9H14uzWJeXv9WdNVeladG/6OpEUGi4yT94O8Cad7PKP9+buixfsJC/r/TbD6eytT/eLandZ2uUvxnA/NMmHoW/pCkFcZpuwb986NLoYfuRP/En6vUSLou/XP5savEPxj+9vKeRmhykP9LqqJaqeJW/FAWSxQygpz/BpaUXWIq/P4Nr0TqVYKM/ljbzvGmYhT98aYePdRRqv5U7v6J9yoa/0UkmMlRDpj/GLEKJ+oauv0V5tDvLSa4/Uf64cMXsqr9vKlx5osWzP68X0ncGn72/91bVRIY5x78nfOIZ/ySjv0qaXDdE3bg/dIOLEozDRz/61oqUTIaWP/OT/cQ3AJc/b85qFOqHqj+3l0eOp22qPwGz+BPOQsO/skIFmYfurL8oR+qcsuSwv3aqAp+CMbw/Lj/d/QYnub+fm/hQG6qcvx0FanjS+5a/oFQAGreOl79tNqQDX42iP3D70ZVlxrQ/UlklzYI7XD9JZmN42jWpv9BJ3/xsnqI/uQs7nRVcsr9y9nX0cMOyPxWXe7PfG62/gfeqP7Nrwz8+APPlmI24v6eRXP7awMG/hb7WMsV0vb/44OYWu265v5F2qxa0q7W/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk4NTQwODk2cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5ODU0MDg5NnEBYS4CAAAAAAAAAFJJm+GJNb0/eTDUuerqCj8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    5,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        10.701978873794678,
                        4.2672870516679025,
                        6.841448023565484,
                        -5.205440414181905,
                        6.894741772246804
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5
                ],
                "values": [
                    10.701978873794678,
                    4.2672870516679025,
                    6.841448023565484,
                    -5.205440414181905,
                    6.894741772246804
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 100
    }
}