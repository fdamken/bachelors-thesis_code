{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "byteorder": "<",
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "shape": [
                        5,
                        5
                    ],
                    "values": "eJwByAA3/5RaQDfVhu8/ad8M8nVrkr8PyV2P9KSiv0ajSrMWBpm/q4x3nBwBiz9Oa8uqZ292vwasZCAql+4/Low7G/dZiz+X6pWySahwP2kp4sTGHIW/mM6Zq0sPYb/O5L0SQ6iFP4jp7Wzwge8/nfpEW8Y5wb91EQp+HI9RP0Vr8U+tVLG/vT0AauMboz+QoRD3BXibPwdpSRZjxe0/gFw7kF1UrD/uhzMt4hqwP1GRGb1MvqC/6gxhmEZunD8+3NJjnImNvxGeTJixq+0/ikphig=="
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "strides": [
                    8,
                    40
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.3384314147999416,
                    0.32312253166398835,
                    0.07572425489381279,
                    0.21065285924857027,
                    0.22429916109937614
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.06321748242704597,
                    0.012680014114480173
                ]
            },
            "V0": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "values": "eJxjSHku2Km8x56hwDu11nuhPYNLqc8v2U32DA0zGGdfKLNnmDDp8fyDKxDyJhY1R9atsmd4c8SI4/cMe4Y7k51cuCbtZ1D6WBVzZRtCP0x+jVPMar/19gwc/9k2TJi4n2HF1S+rbs5HmA/TD5NPvPeu4x7QPX4cV25MXb8fbj/MfJh+mHwGrz/zq1P2AIrIWdg="
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAgAAAA5ODc0MTY4MHECWAMAAABjcHVxA0v6TnRxBFEugAJdcQBYCAAAADk4NzQxNjgwcQFhLvoAAAAAAAAATapopvwM2L9U2kGveIPSv78ERDvXX+a/Htr+CHoO2b8ej7YuzFy1Pybnb2HYd8k/WC2NInkPxT+TPduhxprfP4hMo+Kw+9u/9Lp4ZZzDzL/RBMUJQo6yv1ilexZvNsC/nyfSz0Zd1D/l5O6xAijdP2rHKTNa268/fquYQFzrxz+fctZ6UDHZv41DDvBHxNQ/bwlw5Jhlwz/lcX1GohmwP11h4hX/VPW/pdyeE9Vm7T+aDDNRdhHXv0rSPq11Rde/4PQtW/X09r+/t6IjQOrLv8Gf7I/xEeY/eCANnx/k0r+/Mr9F4sTov6cfJqdnGLI/ggmicstAx7+RbhgbgeioPxbf4mE8DLa/XSreHo3wvb9WAhIwSD6LP6wn4i1Rfco/C72sNeUe1j+/E96uPlXAv5JZJynZPti//4vm1di1vj9esTQHHwv0P4l7coT/2ee/9N6QkDpw2z+cG5w0ASGxP4/KGRnCRvs/JYH8dpp+pb+Kkjg4zv6zPzEcIOLE4NW/tYgQdQL2wT8T3nTrESbAv9y3JWM758U/drXrZn+yxz+vuYzmdqTUv5YlQ7GznLK/84CZRHqtqL/ENVjgXhHfPyEAC0kVUeC/E6l442nK0j+wVoR4sX7CP/woPM5Sesk/NMkeHe6YuD8907iQde/hPx8EOWE7PdE/fYgMKnyKsD8bOt1NyWrTP9Z39FAkwNE/CMdb4veXqL9N1R2Sb83TP+r/LvbSZce/ECgryWxikb93gUTWs3S5P9s4q4+XNeY/DEwZCTRmx78Bj23n6tXdv6Z38ZR4o8y/yy40dHE1qz9E8W6wClfJv9QmZD1mNtE/gWsQu0tF2r+rOVrLZHvHP3YrvQT1d8w/f9/DnGQosj8nh21i+ha3P2QRfx4SpLs/SDgPLyTOoD8TXrcqdi7cP1hR3CAokeW/wnnFiJox4z/99Kzf9dbDP3CYORznRcE/usK7OdjSyD95wmHBGAzePwZNlbFSAdm/gkY/1qohgr9NchJ2VvLHPwQZSSlhZMC/rjXmXC4ZrD+wpw0Y/8WXP8gxC7ajDMu/pXqtTK+M3z9ZW4agQXHCv+G6YnxW8Nm/lg3vhE982D9emP+zKe7CPy6aRdD+wMw/tQHxdZ3H0L9J/iV1DMnEPzE3IPbGGs6/xNAqfq/Zxj/QFaLcELqQv5E8/dALStC/WI7xAKC0ez/EhK1Ag8rjv2qKNzx0ZsW/N6b4P+UW27+xPK4eDIO8P5rIq8e/M+E/2krwTnaA2b+2BY542kmVPwK9eJeSqba/IsFZfaIqyT9gTPJZlFekv9/f/kPpoM2/AeqsHO3V079LsmESxv/QP9n6OV5uzdY/taQ98I9S1b+QuB/EcnDUPyTepqLbWdK/ZWte01+Dx7/PZ3+LCuzUP+ICVBFWJ+U/JRJLvwRNyL8BU2Vz4vazv4LOux4eptu//URu1US9yD8E3odKr6mxv8dQ0nsMsMw/c2h+0d7y2j9idvgUfjXUv5UAsvUtE+a/7n7ipKlf5j+dllWETxrgv43RRicKKtS/GWewUFd+5b99qNXCl4LVP6hA3sgRudU/YodDLaYs3T8NCetanFm8P9Ihwg0zKMA/ZTVJH3lW2L+8FWzDGXrAv1rYM/kEudE/kbzi2ppiir9fFZqfVDjDP43o3wFyprs/w9uXXeh11r8BayN7yizUPxGgMIMQqtI/F0p/mYxxn7+8fCl/fKCsP/wla8dUZ9s/58MubyPRxT8AZdwO++LIv7qON+svWOM/Qa7lGeKL2j8kwQPXzr6bP5wLBplrbeA/bpKp5sbTxb/YVeNpJO6CP3J9ctRnx9g/gi2qbUXP0D/qrvsznKLeP5iWjC+PrJw/07Wb9WkisT8OENGeYcfevyBPycfn79S/LlHYnOB43b+468KYPNPFv7QVWLyoZpA/VGZwtgOc1T+ZLRVP2iPRvwAS8+pDNM4/o/eyseYRxD9XOxecfK+pP410eO6VcLU/JyFpnW1u1D8DEpGJn+LDP7/dyqVny7w/DGR25eMd079hM8rSUhWoPy21BDqGj8M/INIt2nwRvz/gjmdDqNGmP9IoFKKD/bi/wO6pLK8O7r8srxhpXc3fP1htTbvXEcW/HXx6D6A42r+mg8/ziKnsv7o9mZ7tGL8/0Klzk2xa0D+8sgLkjSTov8EwXnEIctO/KtbHcPIw0T/qKsyqnorfPy2JHFBAk6C/nqr4XfmG1j+v+5MHIGfIP9qSVBzlNJy/sQrovOzkwr8WD9F/TOzgv7qZf8guqd2/VJkMdqiFsL+rLwoJHlnLv9yPH+41gMw/vkTqWgXw0L8asykfdVPiP2QQ8RcW2dE/SvNz1zhPzL+TuW7xjqrWPw6E/+o6dro/v6AGsKgSsr+uvfnlJmbhv/BvKqMeGNe/I0iMU1+F4L/iNibQfVflP9G6qvbtIt2/OlMS6CGoub99gnGp217mv+2jLznlheQ/U4XZTbbJxL9D0K9UZIPNP2LZTD1GOc8//f+gfLDr0D+bDBwd+Pq8v12uVutkC9e/Glvw19C60D8Gm2SSqg/kPxtFO5V95tQ/V5KI2DlVzr+OwYrYlabBv1hLoV+83N0/zQK3zBGw1b8h3xPhuMXSP16gpQUMI9y/R8WBym1/3D93K9Q7LKqzP2esqIDAfNY/nwM3fNXk0j8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            5
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            5,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk5MjExODQwcQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5OTIxMTg0MHEBYS4yAAAAAAAAAIUOLu2KG+O/RB6dViOLyT/xUDwQchDJv3S9JFouRd+/Oft9t/l++r/bQcV+WuzRP+xj0+uPfp4/SsLSoQEJwj8XiiNw9G/0P45j57SvYuy/JrYeqMxRrT8t5RwDn33hP7lhV7Mis+4/SV8s3B8B0D+hNaq/mG7iP41lqAeCpMI/SKki+6JDn79GzBWLtP7fP48NfHIf7uC/ZVbaDZ85y79o+s8D7iekPxbczgdTNui/RzlIElU/oT8kIdhhFuXSv5DYwq1oWMy/ljaVdEqAt79Lo/cXjPzhP9+cS/caDOq/NCCMx1uw2b8gDF9k1cjgP+ZaZr0XC9U/JI9B/CP63797t3e7HmPJP6I/RUXNGM0/8gc2Yu8Nyz8RhgK4iGXZP5bLiG04c8I/yGMBlMusxb/LElpq2TriP/cvGgGnkfS/Aj/EXqcr0L/BM8VU/q3Kv/X8sKwGE8+/VhnnnXqXyD+YQbzc2tvVv0PKhllQN+G/5ur6/S/S5D9iI/lTXrvhv+Fd2r3DXNY/4hjzOVFZyj8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk5MzgzNjgwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5OTM4MzY4MHEBYS5kAAAAAAAAABok/AGtDXI/5Dfi96xJw79mjdZkaQGpP4bodiAfSL0/7OosYQb50L8zLEzgggm9v8tzBtwxLLy/5K8gqBmlmb9OfDeJgp3CP8KK+7WvwY4/R6P7y0Q6tL/eENHbTR/BP/DePllHRl6/UOXCbNdddD+o2r1uuJbOvx6H2z0WFpa/20hZTLgUuD9MFQLY3wHGP51UDeZL+pK/48Cz+cTnoT9EU2K4EdCKP1ZkvKFDItk/KgYIxjH+t79JrS0rtpm/P4xCsvezh60/+SPWVHFyvL8J/gEbW+m/v3SiBXy0dLs/U3suZFTKxr/Mqd5Nb02jvzNoA/FqrJG/PCx9vSqIWL9Iagi3KiSiP6Ea3ZieZrG/W7VE6kyytL+BXvz49PCcv1zsXrdUltA/3L2Ul+MlzL+QPHF18qq/vy9WrOUnBMa/6ru0lrgkpD81wR0TverCP3v392wddZI/Cj5aaibDjL8j3U9DUuDCv+YqzU+ba8q/Cl7I5qMbwj8oT64tPiDFPwWcFfBE+qS/ZLrl32/atD9hmVevSWqhP+cDADu4KqQ/JpUzgJArqr8jeUZcm4+xP1VL76OM9VU/wEwM7CHluz/3YKVVPbOiv8L0YbywRXU/WDHdptskoD9PLhOjZvSmP7ZkTnJWZLc/h8GGTWVCc79527Wj/+6Qv0FeMTqM2oa/TWPRYp2Yor/jHb+sOxKQvws5mhqfrX0/rBNIkFHUsb/PSFjpmUStP+INcSSKWLG/GvIs4lCfyr883Iwhgkulv85vd4291cU/pqtblciLuj8dOwOT8Ye2P/JKU4GH7po/cACRUgSaoT8o0MXPxr6CP1fBI6Y5ZMG/8ttA2Bjotr/CCZMWSt2tv+mYMErhA8A/IuonLa5Utb8ElGBWsq19v0XeEOpU/GW/N6OEEWTihz+Fp2dXpfKUv+D+z7/JNqI/4L1QdPVepr9vBXHnprqhv04q8W+0864/gIUUS1xKvr8l1R8tTD22P+vu2l+9TX6/B6ZJgKiktz8GXdIZPNS0vyae4YECucO/NxXPX7RHrb86EeVzpdKuv23tCYvBRLK/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk5NjYxNDcycQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5OTY2MTQ3MnEBYS4CAAAAAAAAABKQtn3ws6g/5K4HoNnRjb8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    5,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        10.411513779505073,
                        4.2929364280648645,
                        6.347437722417926,
                        -3.36113494139658,
                        8.10358229135807
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5
                ],
                "values": [
                    10.411513779505073,
                    4.2929364280648645,
                    6.347437722417926,
                    -3.36113494139658,
                    8.10358229135807
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 40
    }
}