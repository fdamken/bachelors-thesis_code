{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "byteorder": "<",
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "shape": [
                        5,
                        5
                    ],
                    "values": "eJwByAA3/82sUzvYH+8/CbeIpXNFmD8TnMGc+fCjv28OfIIjlo+/L+knKlUzdj8IddLrAa2RPzWE292Dje0/qyjkGfvvmj83oS6FwvuUP+ci0aPmb4C/2MI7dcnNo78hzX0aDJOkP0A7/bdlBvA/S5oNdgTOx7/jWhL+EquTv+KiRnN77b6/GvjGjdxtsT9fZa6JXxqSPwcUthiEEuw/7Io+OQkqlT+1q8FPP8K/P3pTkaJC5LS/92vBAnf5qD8e3Scd3b+iv9RYdGGYUO4//tJl8w=="
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "strides": [
                    8,
                    40
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.1514896084325133,
                    0.11506496993424827,
                    0.015839112664106942,
                    0.06269899705905177,
                    0.013635231318928303
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.019405214923655874,
                    0.010833919045017638
                ]
            },
            "V0": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "values": "eJxj6OhW+Hd3jT1DwdfIrZMb7Rkm2IT18c63Zzhw/E7EvS57hgVaigeudSLkH1jt1K2YZs/AUN28xAfIb6jRXbeqaD+DhobHJtvZCP0w+R/MrxO+zATy5Xc/uJm+n2FC56Uoz3aE+TD9MPkl6UVXY5fbMzj077dnnbEfbj/cfKh+mLyCkI9L0lp7AFjAUwQ="
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            5
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            5,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDAxNDI1NjY0cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTQwMTQyNTY2NHEBYS4yAAAAAAAAAFQbUucYquW/l7GhjLCazz9vNOHJHP3NvwR53Nus+eK/iaorVlfM/r9Qc2O91oy7Py8HYsH6E8U/r5UCz9Ynyz9Owvo+fND5P44+iEzOwu+/ZJ/vYRIKsD8eXt6j8+nXP4AOG3J74O0/fwJYzSzw1j+21nxB9KfTP+xtvgi+NNM/kbBzsJmyyr8crloQRuHeP3xISZfLaeK/EFYC5ntsw7+4Rmx5k57NPyd+J5ooOe6/b0bwqOjWsz9eULZYsUjavxpCxXAzwdK/Hx8126BPt79lncqRrb7gPy9DXxiDrO2/XRFnutfz6793+jil5x/hP+LEYrV3jd8/zInW/pEk1785v3BV+urQP6Lgfooq0tY/qOFRV9TUxz+2qDzVN3XcPyNw5tMqg5E/vgReSGhN1L+sQCX1/07mP/cQMEezuPe/QSg3zmma078nyIAT0gnTv8pEMw/oBsi/pTVufV+90j9x8sqIPkfcv9swHZw/rOy/ZcMFheS74D9s2c5chtPbv/X10ByqoOE/KkEjkmiVyz8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDAxMzk1NTIwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTQwMTM5NTUyMHEBYS5kAAAAAAAAAPLj1s0NA7M/7ljkQvZiw7/qtURKKQa0P5j1VZOXJr8/encTSbS407+piHE9gh/CvyYUVlzfxaG/FQxButzhmT+vhOpP3hzIP7xUdwQ89bY/ycv+ttwhqb96KZn05AzGP0RHA93t8aY/03WoEGXxqr+nVWTooPrQv98Q8oqgHpS/srQoITXpmz8yLrPSqmnKP1Fra4VHWos/csvsqQamob8924fXP0WdP0JY3BZLwtk/Q51Ks9/6n7/0Rv0qQzCzPznLnK18CbM/E13gP4RHsb+4+yjpVRmwv8Aib1gF4bQ/bM+ljqxJzL+j8rS2sGKov/GiWkqixoq/t/1uD96OqD+bYpFhuLukP5A6dyJjWqm/t9L8W4ljkj9Trqdf8vmiP8KV2ED82NE/pFNE9y0t0L+knRj6lzOdv62/eY2Dg8u/Z3ot0MLnrD9zqvSJtdvGP3nEzk28Opc/aVEw3rZNfL9CF+LmzSrCv9gNTNTb6s+/hD58tBORxz+xI+Uq14TKP3ssCR8Yu6S/EuJjbRVEsj8bnpgKTZ2kPzy5bI5CzIy/8kA9urZKvb/0zgCEDzulP8WrMPADUYG/GPlGK2HBwD/nyWEyE1GYP6NIOWyBP5u/ntNSBMkopT9nMD0yZSGzPx0r9RWYxKg/27HLMC3qfz8SJhHm6fHCv85occmCR4a/H3H8G43JE7+D9YPYDK2Hv0LeG1l3gJO/9IOeNhKZrb+odE8EdtazP/p/I/U1xMS/nkRMyWXAx7/XOHRyEUOVP5erpkbnGbs//ckkw3I1nj+2VtWHqYerP3h84ypcbik/L6h82F3wRr+VLIhjh4iyP8B0Rn00pcK/+0X2qAo3kb9VQym5KH6svyY/2LLXhrw/WlnfS/T1qr/pC9JoyAtxP9BDtJU8zHm/dslxJcHfbD8EqUoJybGZPySH1e1dlao/frZf02rHZj8s27BIlL6mv+olDgbBCK8/sdJ6PuFbtb/oNMlaLku3P1F6HTV3CYa/zFEzKtKntT/Mfg2HJVa3vyk7VbdfbsK/wlLwgCWetL8Xt0/mGYmsv71gdAqf7bu/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDAxNjY5ODg4cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTQwMTY2OTg4OHEBYS4CAAAAAAAAAAk6Yt+vWLc/32/ONUiEc78="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    5,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        11.27025636860296,
                        4.802335595416314,
                        6.997363812973896,
                        -5.054239830705111,
                        8.638101064609963
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5
                ],
                "values": [
                    11.27025636860296,
                    4.802335595416314,
                    6.997363812973896,
                    -5.054239830705111,
                    8.638101064609963
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 65
    }
}