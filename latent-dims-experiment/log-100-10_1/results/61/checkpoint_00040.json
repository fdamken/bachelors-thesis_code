{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9148486982040911,
                            0.0651272762995858,
                            -0.027457771938934176
                        ],
                        [
                            -0.09790023415452724,
                            1.0706117650289217,
                            -0.0308897092967432
                        ],
                        [
                            0.16550703234883074,
                            0.011952176825863579,
                            0.9881622039932508
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.9148486982040911,
                        -0.09790023415452724,
                        0.16550703234883074
                    ],
                    [
                        0.0651272762995858,
                        1.0706117650289217,
                        0.011952176825863579
                    ],
                    [
                        -0.027457771938934176,
                        -0.0308897092967432,
                        0.9881622039932508
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.09576733342645363,
                    0.09892840232174432,
                    0.05407242572556983
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.03614561198416595,
                    0.025144788500898643
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.009703836458503728,
                        -0.00028795981110396607,
                        0.011327946989689142
                    ],
                    [
                        -0.00028795981110396607,
                        0.003848075615110691,
                        -0.0026322229304234224
                    ],
                    [
                        0.011327946989689142,
                        -0.0026322229304234224,
                        0.017545933392010493
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkzMTY4NTQ0cQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM5MzE2ODU0NHEBYS6WAAAAAAAAAALsqGjvasK/QEPD/slY5L/AV4JR2KTLv4zZ8yyfSeC/Du09J8rFob8KCgQOvyjav+r6k9GOHOI/G909zoQh3j8ay6A6f6Dpv70+KKreZ9W/GoK4m4c82b9OK8qam2PHv2u0hkGMSeQ/nffw+fO/1z8LrGgYLDnWv5s7YaLUqM2//cKcaS641L+I7Ji5lYjbPw6xhM9DJt8/X96jd7twtD9k0OPWrmfYv6Xl2r9ol80/15Ea8K6fvL/XLNPaELnBv7mwHrGyfOG/SyHRQ8iA478T+VBZM3DLPzY6pPJAgNO/f1ksNjB50r9nX9b2qOnovzrqBRiiu8u/IzG4LyVz079yhXK+oGfDP96RuFRM3rS/+MzaxAQtqT8QnsJME7rAP+ArWYUwx8E/EqzIX7/CvL9Y67KIiFPfv0GXvZjKpNE/zk10eC5F4j9W5kFLgrLVv8QocolELsK/pWZB0680wb+mmMtf2HDkPxrSYUy3dXo/MoMwMlyR4b9Zsdv/yVjNP2DuB9y+H6k/moMtvYZnxj+lm7KIkBzOvycXk9LmJ8u/Wg+LRJq91b9VSxdiwFO3P9cJ3tFF5dK/Et8ZMJg7zT+OavnMVw+zP0anjlQZ55Q/4D54VGp6hD9qUsxDjvHgv0dRkN+QnPO/fMt9UYtCxj/dJSAFDGC1P8PGmJWrzam/4FAKe4KUqb9HE3jS8mncP4zSFewbteG/1UEoAMim3D9JGHE5ro3bv3xozJIbTdW/VxpVI5DlfT9ADn4H3U7dPw5HiXU4sIK/B0sy+NOtxb8gAxAkRGXrP0nD6Wu48Ne/1qlHRTi1rT/J4h2yudbhP1JCB10Q4NW/1eFKIlKL37+XonPYBO+gv8d3rYUnGcU/VCb9tq3GxT+Gf70qIXTfv6JoUWfyut0//Xe1/UNv4j9hLjuHZ/CCv0cmlxg5jNC/C1628g8c1L8BvVMUw3Lkv4pRAc8rB+U/y+8hlgptoL/XVdnEDvPgv2bt3UOCpMA/cb3jib1a0T/QmdsJHFahPwmWs1tjX78/ESp9ta4cwz/9Lgk3B/zhv5bqOj68/eQ/0Noty0KjvT96OR7VvNPDv2dRuzWHjMg/C2gw7WDgsD9EsaBVLOjeP8cyG3Nf1LU/T7HDb17YsL+PfbyF26+4v9dhkTSn97g/YAzDOFCXyD8Jx59ZGJbJv3qVz07GD9G/Y+j//WbP77+uQvt5qF7AP9j0IVHHH84/LsavdpRP9T9LbbSb7VDbP5tGU0ifbda/EmlDgkRczj9ArT9AVo/dPyGGo5Nrle0/6EwQEyBXzL9ELce4I/jjvwGVcUbJbsG/QqUUXqi5XT9cQK22bWPEP/BdMV4Bwcs/9OopJG/i0D8Hvg1SoeXkvyK45fa8M2U/2RSWldi++D+oc6+mZUrpP6SOVLZXFIE/dHpNMpKI1L9HIQL0NRndv+JLvMVJLsc/VShELRNHxD+Gt8jzs9znP6QsD4TBb+A/ZY++MNkarb9GEcFJAXLav44YBwGxC8A/m9xVd+z/sT8j1i2JaPfVv+JpPqjQa6y/m8TJuu9xfz+havDxDVW5v1wLL8bB9bq/PZQRsHKBv7+MCszUCnasvw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkzNTE0MjA4cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5MzUxNDIwOHEBYS4yAAAAAAAAAMnp/Px2g9e/boKyMSngtT98SG2LXRPYPyaICe0OxIa/zFlQG4Y11T9sh0W+mPJ8v9b2AVwzupW/1Ey6WQnOwD+x+mM1BwjfP3sXyIOfCb4/g5YSHvAg4L/8qVqcwgjwP/prjfmT/ua/KgGwBTAe2L+XJvFLdNDhP/6UeNAqUec/i5IAXpwq5z/kn/Hbg9zZP69TrPcOUNc/P/II052Qv79jSv4lwDLqP6NOYygC5NE/bUGgUGWO2T8FlB70AM7wP0Pk2doFfua/68cExWgJxb/vYQflqJHgv1GD02aH9dW/SeD58N4y4L/eYuJQFr6gv8mo6mW14sK/HBHaVr9Ewz/kEVoh4NrdPwqeW8VLmNU/5g/K36dP0L+lo/cK44y3v+JEhJYBp98/q5euhe9ywz/d2XZtGpWyv/jyec5D4NA/7ZBrdsmZ0r8nmmDVf1DoPzkrb//LU80/goZMZR3p/r9oYJe6tb/JP/B2fLE4n+a/mkKBpjKQ07/J2jSBkFzUv0Ev/xuFdt4/wLGm4S8w4L8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0MTM2NDgwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5NDEzNjQ4MHEBYS5kAAAAAAAAAHKPdT8oEnI/sUDIe03Xtr88VnCNYGuPPw3BUg3uTbi/cjsuzzqBwj//E276FfWzP6Iznmfvcco/Pb1ucDDj0T+m1r/d0LBzv+N2/5rEYKy/mI0nGIkPmj9CXnXGUz3Vv/C8RkDdlKs/G3BKPyT7xL8jC7R4QYqev8Vbv7T6170/ooC2VSDGur8jnXgjkGfAPwH6dlOz7Me/0rW8e5aVc7+a9yILvSa9v7x+4XqIra8/xgVsM3vnhz9Fq/qfmanMv5YUqIAWLZg/ezpA8GPZsr8WaEhXBUygP03uNEvJnJS/R9/YfAEuwz8jviLuin1wP7hUYTa1vcY/qIgMGMt5xr9VAcsiswmwv4dps1d2rrY//O4n4SIPtj+6f37k/lrJP+5Dmc4xu6W/CI7UOXosyz9m82rr/Xykv5MYbeD6Cbm/768NUYp2pD8yPsxKSO61v7wpspqeU5e/4CFpM4kK0r+sQfumJZW/PyNidOVF8sQ/8YhzGwR/0D+GtGgG+FXAP/JHYlaWx4i/FYshhuprY7/I2YMGuNW6v5kcNyP4I6g/0q4051ggxL8b+tcgq9LAP3yxDGuWsMi/UNx7eXgEmT9C3KmGcUPDvyGa6ppUb7A/9SNjt8cIkb+kQLwA27SUvzsPBmtBa5s/LgaMytbQuj8DTJ5M+l/EP3GR1kgVVKi/JUOEqCvTwT/VEawcqTDAv3lIKHl3e6e/sd8WupBQwD+KGcZan1rAvxMjtuuwHaO/s7+fcw5tT78qBYIN2OySv1tDcdVIxrA/tN0mz+5Gkr+TXa1mypWEP1cjvOt05r6/NA1Ba3OKjb/PpBRUQf+yvzZUQbM1n8G/CMkyb05Ggz9NvMZD1IyRvxBt8gNaX72/YIXHvv1Lyr+Ca4hCDMalv4IyCLYfFVS/i6vWtz2vqD/55RUp8J59v2ZJyQt8mzc/pAw0SiEWmj9ICSoJiDHJv7k3GQYGE64/7bNWSmTDpT+qp2fq+Z9wP4aFX19vMZC/iRNybJ9Wxr/oydmNHzuNv0RwQAlCGcI/9bixX7qXxr8S7h/I3eZmvwbMAJw3PXY/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0NTkzMzEycQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5NDU5MzMxMnEBYS4CAAAAAAAAAM7ZvFBvENE/j+Jk0X7jkL8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.27249008288054444,
                        -1.1083462321387558,
                        -1.0472300257631617
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    -0.27249008288054444,
                    -1.1083462321387558,
                    -1.0472300257631617
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": "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"
            }
        },
        "iterations": 40
    }
}