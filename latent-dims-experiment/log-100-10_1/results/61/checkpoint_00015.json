{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9509874364173182,
                            0.025098591702569544,
                            -0.03986395755350275
                        ],
                        [
                            -0.09054927294097782,
                            1.0217355546726923,
                            -0.02835136467988787
                        ],
                        [
                            0.07052791834914145,
                            -0.011428825875864301,
                            1.0114690009065037
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.9509874364173182,
                        -0.09054927294097782,
                        0.07052791834914145
                    ],
                    [
                        0.025098591702569544,
                        1.0217355546726923,
                        -0.011428825875864301
                    ],
                    [
                        -0.03986395755350275,
                        -0.02835136467988787,
                        1.0114690009065037
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.6971525074431464,
                    0.7895949615018847,
                    0.3197140673704806
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.027969525170090492,
                    0.01106862496690775
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.11214889384970067,
                        0.05221014928683759,
                        0.0554749574564707
                    ],
                    [
                        0.05221014928683759,
                        0.06477446088591643,
                        0.007576041708711678
                    ],
                    [
                        0.0554749574564707,
                        0.007576041708711678,
                        0.060514106044111005
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk1Mjk5MDQwcQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM5NTI5OTA0MHEBYS6WAAAAAAAAAHLiJ4Ql09W/f7F79jcp5b9KGfDVna/bv6TmGJRsUeC/zLC/fnjntD9ov7nS8K3Pv7T7PoDDP+A/jQ3HHTM22D+fa8AUFHXnv/GBozwwGNe/V2W3ayEN3L9MibMOcgLLv/UctcJaV+A/jXB6ozb50j9DN5LrfAHTvyj60Kl5isW/0MXctHYP3L/Bmtoai4HRP2PuHvtBVL8/NHOZGDTwnr8CggfL/CThvyJezbYxLaE/3qt8iCUkvb+SSlEzjcytv3NENlL/BuK/neVWC7Qw4r9BK0+Ruu7SP6to5QVK/NS/h6+yA7gH1b+P0OqEzN7cvws8cr/sVsi/SgB+twlx179BrBugh167P1Xbn3ZH/6y/tzM8Zc2jnD+J6v3VlrG4P2SuxPf+P8g/xt4myge1yb80CjNiomvhv8S4DoiVgcg/BZiQf9AW4j8QRbK6svPSv+InlkFg98C/DRod131sxr97kJLGpQrlP0Emp75jkMQ/wE+sdaFp3L87jBxzyb3WP1C8eIUwDrc/lxLYEakpxT/NWctoSMfBv9q05oeyKca/7Tl2fAad078r4u2f+NSOP58lshxCrcI/n7h4XFq+1j9uXj9iKyLAP+48Ci/lLoq/XnoOcGm0fL8UHg5A3FrUv5mRao3GbPC/X12EAPe80T9FlOH42LLQP2rRf+hNEoA/4wwljIgozr+RyuHyzgfPP+bEdkWRGNK/G5hARNjF3j8ElcpjkUbcv3IjU2YILdO/9CiSwUyUgT/bGIKowm/iPwZYuJeoA8E/1VoCGdzt379ULaTE+OHgP0JBR4wj2tu/qXKr2PUyqr+KoYQJw7/aP7eiwzkN7+C/lllNrOQC0b+KoGy0srCyP2V0+k6dD7s/ooSWe75BzT9JcrFlk1bTv+/yEfw+99w/cWAS906L4j9vHKLQzLfFvwpkd+LtvYK/66VzD95627+FNByMnWriv4gbY2F74+I/tFOg7AjYwj9fksjnRDfhv8SUBdnzv7g/I4F3OVGE0T9JEuGO02LBP7tomMz2T8M/3JLJsx56oz/7T1gTBZDiv81C3rb7h+A/mk9a3bW1gL95YejkPv/BvxZiinbau9I/KaIPdinctz95IQY/DLvSP8I2k22HDa0/KDK70Jvgsr+50jUJsp+mvwxWwCP5Trs/7nuWjxzfwD9lQJVcviS1vxrIPxw12tO/mExhTQ8J7r/6o1r4zBLPP4urTF1BYtC/2CZ5tF255D+L+ODTy1jUP1hvcnOez9G/igihtWIQzD9E5YvPLsDdPxGRDu1S9+s/gPllBU8e1L9j3SkTTxjjv92g9aOZ27m/Sx/jrPjIwD/NekEI+wfWP3s+nDiCEYw/hlyE3FXb3D9nBWZr3m3hv5H+5rLbybi/hFMDKiX05z/qB0FujdvNv1frkrSogVE/G7mq58ESvr+bpBb1a6jevyzSOSbv+9E/Az6y9VFAyj8nH0RVQdDbPy4I5vstHsw/671HLjusxL/8KKBq3rXjv4wkGD0sG6Y/CL2nMy66rb/cHtWYqsjYv3kAH7eIx7K/d9xnemTNoj8aj+0zSMixv5NqamgyUrW/QxwzpOSDv787zcvkZri6Pw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0NDAwODY0cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5NDQwMDg2NHEBYS4yAAAAAAAAALukrde+Y7y/+X1l2Puqkz86ANrK6jXWPx6IOKrV4bI/qnoSKOJb0D972FMRuGC5P93iCjjAPa4/0BqWseVUvD9/sz49547cP7Mfxrjmw7U/pDn/N4Q63r8XLiBcqZjrP6G7HSF8Tt6/TgSB504N1L9eKzqMCEzhP1S4yNQNqeM/Wj6y7Csu5D+uAL8uicvYP5Vm9yxotc8/HRQBlBoAxL+a8tWtOkHhP+eLi3LwZt4/0ukWaeyP2D/sCnl+pI/pPzmP9ygpOte/okFBerXrwr+SRTWlLdPlv7deg2bO19u/E+4Q4DsA2r902H8+i6uXv9pgC+lLRYq/d8tQk5quwj+WnG4SbhbgP8YuNb9jcd0/1jeUUsME1b97KhUbp5ukv3c+kv7Rfts/b5LFwlHvrL8snZEqMQneP/ytGycNC8c/D/ONrCtiuL+tqW5BsfPdPyQTX8xLsrY/ZGTQl3iA6b/oduF5bh6tv0u0mlpR0eS/QZYY3zYlyr/1lfoF6IDFv9zOQcJmW9s/bZbzvgaV3b8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0MDMxMjAwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5NDAzMTIwMHEBYS5kAAAAAAAAADZrCXPEAqq/Esbi2j25lb/BTv9oFS92P6McsV7A2cS/5l+kSaIuuz+rD4w1El7JP92uFISrBcg/hNZGbwB8zj/9fno/hOO1vw5R12mtGb2/mr1Q8QEyxD8jGJrjSkLYvzamg02SeqE/R0k7tsJNxb9ovTpxDs7Bv8XcQp0ghr4/BQ/lTeb/w7/0o1DDZtjLPybMPs7BBsK/mOQEjosDp7+bxuzTAD2ev7odFlvJPMI/GAIPcuq0oT/oSxJhVVjPv4jzEkk//Xi/9LiaeBFlpb+YKnbSOZ2VP9AP2Sf35Lq/NBDKI1N/xj9bfVdNAWjAP0iJOfXJbcM/85zq36EaxL9+5/IVvSZ2PysE8as2Pbg/CbcWE74IwT/INc9TGJTIP1aKO83//cy/BVXX2tYtyz8rIMs5aCJ1v0ukTQ8i0qe/p9VO3u0gir/tcLsdRFK3vxTZAdChqLG/tTFTyv+Az7/Bh2O096+3P8u0MkI1+ac/qBRWWNWPzT8MloS91STCPwWrSDFnPae/Ag2z0mJhwj/YNmE0hAC+vwEeyxWhV7g/mb1bxyGPlL+uUMaADhqov86xIQyI38O/OHzERad7ez/2zDC+SMvCvz7M2/F/y6s/NYMlfxInsj/OQRtVGl7Fv7Qmw2Dn1KY//p8oYVKmqj8NMvaH3E7DP/KPrGaeDaK/C9ilB8hVvj+Qq4gwm2rCv4DeqkG+Dqm/pshbjYlruz8Q2KKu1cy+v34PR9+S+7S/jYu9zIPHor+ONXNC+ca/v6Qjz+/SirQ/o/7bsOo2sr+bLaLXKVe6v8mxzwhqHMG/kZMAzIsxtD/Oa6wGag26v7Za4GCOMLu/KmgsYZjGvj+G0cNEmHmQP7qRJ4CnZ8C/FX0eaSy6xb+bQcIo5qB6v+jx5hpAFq6/yW0J2+Yqpz9fvxsnC0WsvxLdSO7xOGO/hPe3BTYToj8k2STEHwvIv/sHuLgocKk/2LU9BWrPmL9nrttUARmmP6UDP9Y0foO/Ewog7K/myL+pZhXcsiyvP7vd+UR73cA/wt6HLrnvwb+PQ8XWgCOyP7HFTsfdlq0/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkzMjg4Mjg4cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5MzI4ODI4OHEBYS4CAAAAAAAAANGILQ4rds0/CcLO10m/l78="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.29040653759386426,
                        -1.65087242449148,
                        -0.008191703482401134
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    -0.29040653759386426,
                    -1.65087242449148,
                    -0.008191703482401134
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 15
    }
}