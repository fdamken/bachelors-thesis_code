{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.961852007864323,
                            0.0333881931916008,
                            -0.030654205848496107
                        ],
                        [
                            -0.09482331593300798,
                            1.0241543832538202,
                            -0.01516785096457934
                        ],
                        [
                            0.08850515717073344,
                            -0.010783934494328077,
                            1.0031384416018883
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.961852007864323,
                        -0.09482331593300798,
                        0.08850515717073344
                    ],
                    [
                        0.0333881931916008,
                        1.0241543832538202,
                        -0.010783934494328077
                    ],
                    [
                        -0.030654205848496107,
                        -0.01516785096457934,
                        1.0031384416018883
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.3977685575213954,
                    0.39428217274256755,
                    0.24451296549852783
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.03272789827853012,
                    0.009236416485888754
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.05014725855475026,
                        0.00714078213019248,
                        0.03131658534735665
                    ],
                    [
                        0.00714078213019248,
                        0.026851762525548217,
                        -0.013034670812598625
                    ],
                    [
                        0.03131658534735665,
                        -0.013034670812598625,
                        0.040876785574673204
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0NTM4MjcycQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM5NDUzODI3MnEBYS6WAAAAAAAAAEaT1oDS+dW/M4c3tGxC6b+sN6emnrjXv96fcliaNuG/qlejyJLDtj+3iSYJHkHPv0LcMjNeuOE/KTiIrDJC1T9d2GYZnsDov+DV2HgR49m//3LE6HPB17/2a4L9vIXLvzwiVj1G9uI/iYMUj5tD0j9XBuy3BR/Tv7VSucwzWsm/EGlluSgR2b8713WQVmXRP4XJ2tFOeM0/JCBl7u+DpD+yiujPf0Hav0N0te2sPLk/EWII/YQZvb+ntY0PSBmyv3t978q1ruO/Vsr1dCW04b8fKYyaDRLRPwwoYufwG9a/1Pbaljgh0r/p47i/8Zngv/Gc7b+7Isy/ek+a+PNv1b8aQn2X2Gm+Pwlc4S/DUqy/QfbwvSUtoz8LR8vBGzq7PyArMlohr70/o8dxstuzvL8jzmOxf5rhv5cwKttAMc0/1ErKqbGn4j94lPOo/rzSv8hvkLTV6MC/hpKiKQgryb804oaS5CDlP3MJpzaVTbs/KovwYhgE3L8SKY5Ey87XP8TLiPhP2rs/WhZFLb/cxD8giOL6zJvEv1B2JsVzAsm/GDjoPSjo0r/RBDEhDF+SPx0gQNsYopW/Pp69pI4d0j+jed9lmIKeP/hhaeCgf6S/3z8kXCvBrz8SpL9imRnZvwnb4/o7n+6/FB+tfoB81j/Yq3XeDiTVP9dQ9R8D2JU/58CUCimkyr/qXI+28rHRP+Q/UGkzTc6/5I3BULyR4D/+kM5bazLZv4bQTnvF1tO/pmUdThiqnr8HRqcuGBnhP7VaMq4IJM4/sYGeZ7Kr37+wEXWrlhHhP/yUz4+Tztu/SmOso776jj8NQTK6i4HdP6l0TBTKe+G/U9Y8DCsr0b+27T30cI2zP0A5bNWXpsQ/foPWYiLqyj+iLUNUrGfUv+34Fs2vqN0/WmG+b64R4z+pbVjAaQe9v8tib0R5p8+/uCL+WbGG1L8OPeuFN+vkv4HkYMQ5auQ/+jU/gTKRoz+Dv7SrH47iv61JjznOkL8/YVsp2ezI0D951jU4mlHDP8hlVrnuMsQ/GhJKYMEuwT/g4OTHlb7dv2+6y0ENst8/dOG5wRJPoL+QNZlz1oDLv3hfize/qNE/GFNJspPFuD/TjBXNNwvVP0urUACBNLc/RYemoEvau7/pbEuO1W2yv8aaMM2iBMI/2SwroqVDwD84KXU99ui+v6WxceaTU9W/dGG9eW0K7b8eeoIi/kbSP7/fyjYLvLM/YzREtnHy7T/Mni1LLAnhP0ZTIom6Adm/TTikHA63xz8EAWv/XbjZP9hiZqn/0uw/Ypo4YXXN078YSwL70Fflv2GI/wmZ8M2/iCYcMYhouj/ovbxXiJjNP+BC5RtKHIC/3qxCyoeH3j8CgzuzWI/gvwgKS5h7caW/wORQtmuK6j84fVzKjRm+v5SoDPDixZ6/0O7oeYActb80BATgC4/gvw/xOrorrtA/RdsnsjFpuD+Ose8sip7fP/1ZwJbiu88/9/OzWqLjw78OfMcHWETivyKS0/ZnlqM/R07fOEYInz/mj/fWeYnUv/2cJKEXTLm/EUlYt1RzmT9rxK8OJZ20v7Vn5X8rBL6/jdjzBzABwr+CirNO83C5Pw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMjY5NDY2NjU2cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTI2OTQ2NjY1NnEBYS4yAAAAAAAAAFoPznGGwbK/G5auqo5wfz9QZHZ5zczeP5BvMwwGamG/gf9uYRo80z8Vb0PqrwS+P/kn+YiMS5w/2PycqHSUuz9B3CKp5ufbP0U/0t/7aKk/BACPiCtu3b80BTkKJELsP4CiYLMyjOO/dWEVyF7D1b/Hqz+kT4ngPypYwN4l/OQ/z/dO4Tox5j+gdLKNaGPYP4SJGOdu6NU/NL99Wllfx78SZWfpIpvfP2MFXKfaktw/JhS/HYGH1D/ZG0/XoUntP5Ak7iWkYde/LMQOPr8mvL+G342DPNjlv98TfIV1rtq/xNKOScvQ2r8W3UfbkByov4pOp3cET56/yrKeoVl0xj/vXSt5m9XcPyLWSV0EGN8/ELy5YZ/5zr/tLn4RH3Sovwmvs5KJ0dw/T3VFb/Ktpb9xQgnlf0bIP7f8exu1xNQ/otQRal/Qy78a5q3SfifiP15LxME8xbA/ogmO5zLx7b+xCes5hGmfvzC5YvBoMeK/mzIESyW0z79WliEYn5bLv3NnoX1Uotw/qPBBRLmo3r8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkzNjEyNzY4cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5MzYxMjc2OHEBYS5kAAAAAAAAAHOXwErUt6O/mkJCHetshL8LRPFeTyKIP0M2oEQCpsi/X5lW/Fattz8Dstg6a+HFPwNSTjyXFck/DTeCNybBzz/MIfqfxhK2v1CSuSv1dbm/uh8oyT01vz/NUHoZerzYv4TaDm9R4KU/T7rwlyjgw7+iZWRceZzAv9f1oRSrYr0/mBVp5JgxyL+gTqK7WIHLP8H1CRJYXsO/pydI5167sr8KjVzmAYWjvzFKxyvZbLo/EWx5F9D0pT942qcpkUzQv0dDTS4SQlI/uSqlFFRbq78MFvUqUOqSPwqJ3ijk1MC/4MQxjq9/xT+6ZKKdjeHBP8C0MeX61MQ/Fwz9vjZkxb+uGPbaTsCOP2PqBg4foLk/7x15WoWrxz9k5AqT773JP+X20Tfqusi/25sTXqV1yT9T3VHZC3WRvw/Unnwd0ay/BE1ooa73P796CiiEC565v9AfCKD8UKa/BQ7+e8uH0L+kFGRcBwq6P2CmUsAYNLk/oVkrGWKfzj9E2lwidD7DP5t6DqUzYrS/CJuvwAiiuD+msRXBaVS5v/+/kbmxcLA/5k7ZZdCeuL8dswDN1/aRv0iFfJzwV8q/BPHNOWUwe7+0t0BC1wrCv+Nf8/0BEbM/nfh2Lv3vsD+l9CmImqvBvxPjSBa5aqk/VB7fhF3GvD9shEc8OirGP29629/jIqG/MQMQ8IvjyD/SdW4nArPBv4jITpqnK6q/EFapbJ0Fvj+OxV2hpgvCv0w9MGvyfcG/6PXhB72ekL+Rifp0fMPAv4OCN7R4GbQ/8vaCsme+q79sLhFit8a/v/e/9/QX/cC/BdX7NZNdpz+8hE6jxs28vwT4AGLLkL6/DUA6HQnLwT8qHEfOILaQPx9fNZkb48K/yz46cdaix7+ZKUplt4Kfv9T7YqgUXbe/UJYSoufRsD/R14eYJ3Gpv3gt4norloQ/JVRRtDMskT+6lBAkfM/Kv3meGPpHOrI/NwrXSJHxm78uRB5F/pmjP5vx0ozU9Ju/hCHQtTcfxb8ytUqXJbGhP8VJBMikr8M/HWrr5fbHwL8P863WrcexP9Vxyu18J3y/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0Nzg2NDY0cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5NDc4NjQ2NHEBYS4CAAAAAAAAAGPxfDznEs8/+B/0KP4Kdb8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.25250689549207,
                        -1.4783907281413589,
                        -0.21247986505815777
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    -0.25250689549207,
                    -1.4783907281413589,
                    -0.21247986505815777
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 20
    }
}