{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.8853636263160555,
                            0.08450213280714783,
                            -0.03287182822913543
                        ],
                        [
                            -0.12747293524226402,
                            1.1160523297689502,
                            -0.04671062188938493
                        ],
                        [
                            0.19373150357439525,
                            0.04153404132874624,
                            0.9774526334155248
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.8853636263160555,
                        -0.12747293524226402,
                        0.19373150357439525
                    ],
                    [
                        0.08450213280714783,
                        1.1160523297689502,
                        0.04153404132874624
                    ],
                    [
                        -0.03287182822913543,
                        -0.04671062188938493,
                        0.9774526334155248
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.055237350403418706,
                    0.0557681283381081,
                    0.020476385122405925
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.01348246316602308,
                    0.02656074564865395
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.002527472918276763,
                        0.0005490063508059029,
                        0.003157140581118212
                    ],
                    [
                        0.0005490063508059029,
                        0.0015255177136295206,
                        5.9685615446225526e-05
                    ],
                    [
                        0.003157140581118212,
                        5.9685615446225526e-05,
                        0.005773800555539221
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkzMjc0OTEycQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM5MzI3NDkxMnEBYS6WAAAAAAAAAHhhu2FqNMS/XJhhKga/4L+3hrD5gXXPv5DR/I2kFNm/D+PJJgJiw7+Yyfk9ObThvxFVATpNmeE/QMFCkrgn3j9IbMeQI/ntv6UGEix62NK/qMvYmHFI2r8JmDOekUW7v3tUf2E4EeQ/rcdcZDZH2z/UGo6m0IDkv2Bt/cMiINK/59plMqQi0b9JBW45/aXUPxoXQZGRnt0/6fl3gO6ByD/RanNEllHUv9d6/j2dZMo/WCXj57BDkr9BM/xNTLG+vzcJ9H5lgOC/70R4c9K847/wbyU8U7DRP1klSA4kL8m/YvWrvhQB3L+DbD27eWDcv7Ul7LnA+ce/03fX3Dbn1r9K9aFA8EG2v1/3WUDDure/jo9yc5AHez/jcPb2LP20P+Lnhv+cN7w/qSLudfcMsb9KAWK5NLvav9SBQbb4v9A/l5ecmTi04D+XRle/fLzfvwwf6oAc+8m/5a/BXYWLsr+yEmkRl0/kP/ZwvMIrgK6/FdBPEWkV4L+TPfB/7wjXP+gSaAbT8LM/KsPNQej2wD+v6h+vJuPKvwVRbaRtU8q/yi7ngZ1/1L9pDHsM2jzTP412Ax6sitO/+0Rjv1Oowj912KPwOxG4P3olS6Dlsa0/EJKZPKlonb/kzCyDIVDXvwbLQb4fx/G/H8pD/lpinD9UO0esKs2sv8NX0FxVDrK/9zKdr2epTz9wY5F9l53ZP8UGhQU0j8m/BX2T/57V0D80rwU3y2znv/J6WDHFbMq/jj4JaPaEpr8BUcGVNFbXP/PPW0liVLa/WF2Tv555tL9erpjyxMTmPyR2zZfKCNW/jXpcJpi+lD/MC6uxuYvmP53SjnCaz9K/semTkUh44L/W9n9NPTeqv3RoZIMQMso/nKzL5dnfuT9+YFEDD2vXv0vTgiDp3Nw/gQGDeWfU4T/Su6FQffa0P4XIpXgJHsq/W11HRtyc1r/G5jiC4fPXvwsTqqkh9eI/5wnLncKkdr9aO/hZcy7ivzgSnmk/78I/He5hGJL5zz/1Tl1uKiPCv5KJ9HZM4sA/+zNA+d6UwD/C11vTha/iv21rTpfT3uA/sK5EuvDL0z/zfPP5iwGqv9yp5yUouLI//+Qv0irlxz9m0tfblJzdP5GdHbWvQKI/fp5lzyzNk79I41DWY/26P0BbSVIxrrs/2R7vVzu1xD95jIDT7IW7v0bFG7t8xtO/Nch4oOq37r+tBykNtNTQP/MFcsSyfcM/ul60bBcr9z9TQeOugWvjP7rthTm3s9i/JJGKDikt0T9P/y5jIBLmP3LgSb/5O+M/t3UslZoEy7+MMTnpBATpv9S6wfF/q7e/5zSJceAnlr8FDPBM5ozTP1t6a473/Ms/R6QMpNqX0D/8mMS7QWXbvzS5SQ2YQMk/OBiEPL4eBUAornFfpmH/PyQ3Iy4al66/P8MG/Yh/07+QKCLTasHhv1tyXXxC7b4/Hw9aK2GGxz/uRfVR14DnPxq6r7frUN8/WngT5I9tlz9LDovWEObcv3XJnvE5eME/pIL+1RxTuD8jsjA0B7fVvx1uCTuGfZK/L5ZZqoD5qb/1TN8T1aO3P8zW9uinsrK/WAc0RYY8wb/51ztO8m3Evw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk1NjEyNTEycQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5NTYxMjUxMnEBYS4yAAAAAAAAAMpCSTu+qd+//i8z/zEbxj/twMcmO+7cP3uY3dXpV68/78kbLVLL2z9O/VBsoSu8vxb+pVQq2au/satIOK25sz+u6BgZ03zZP8TxaJxeH8M/GlhCvyG23b/7QJmAoPrxPzrHmAdhxei/HkKPsKES1b9GnWcc+i/hP/BIIrqvR+U/yDRUIGGM6j/xR26bY/LZP8BQeDevptk/89dWMq7d0b+JYcAVT9nuPxGZWhzIrMY/Od2igANv5D/zUSOjJijzPxxVaWqi4ei/rlrf1OOayL/oueZu+cfhv61XDWye5NK/nqVnto8s478XfvQfM5aIP+YJMYJr37O/WErZ54AI0D+FP8+y4KDgP/lxuZOs28s/Jwc2Br4b2r9p9Dsx91DQv7PE/hUTFt8/D86Or4ncwD8cLBixQVnWv1ITFtHsgcU/uGeRdQI5vL8FBcxqdjHpP/3BSyDinc8/is1MpZjiCMBHZeOc1Me8PyGg4aqonem/K0X5Et7Q17/KW7EB6U/bv5GSg19SsuE/+X+QrXuh3b8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0NTg2ODQ4cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5NDU4Njg0OHEBYS5kAAAAAAAAALfO7VAW/JY/ysjrgrtTxb9Ou1AwHRSmv7M1fuDHxI6/hSRWhPjOwD8nrDsjNU6bv0NfZ/q5ZMo/DFiXf2t90j8yQOVob66Sv4E9kWTnJqE/PyGc+g8QkT9J298OR7DRv8/WO8CogrI/6BwhBTN8y78Rc52NLzJxvwiZGVEfZ8E/t4O0HI+hgD9CYkhlgqjDP0WLzgoCM8m/ZPKrB0pviz/XHhKNlBrAvyXDjOov3Vu/ItjDjOmfpL/MrT1NTXvGv8H0xHOyqIc/gpR13lyrt78QyqLG2KGJvzaDGxHvyaU/nNzV/FHatT8QrTvJT5yNv6EGvgEz2Mg/Jlq2Udevxb834Ycs4YG7vz8IArEiLrg/kjUqK8jnYT+/sN1ieAu9P/jTGv915HI/JlzCW3Bmzz/4lvLzMTiwv59gVxwVDL6/crB07Riurj9ikFSMUmGYP6b32GnEk4q/jalsEUOT07/3ThBVxsPBP0MnTds/y8k/z1Jsx+FI0T/JEAUWLxegPzcBQtVFU54/pKMFMlEclr/8c2fqPFy5v+W4GoTG0a4/JQ1E0Ujewr+Ya/QBSsioP7Bip1Ng/82/AibuDBWelD/RTBzvfEXAv0FCRrjjvbQ/6nWA7WFYnz+4+j4JzUmfPzSaHaoV14s/yUm/JFUHxD9m1LBTVkK5P56YwedLoa6/XuqsMxRfcz8gBooseE3Bv+4aofmsh5S/Hk2o10RpwT/LCVVcT+2/vyEZmGoCMaS/YW2I22NPfD8X0c02jCBuP3bJjaNGYrE/C/x8mctykb//tmsc6iGWP95/+yS1F8G/eU5JtGFjpD+U/GhVQlWcv7Tr8FnPasG/vYGgR8+Rlj9WR9Q3MfBWv0JPQy7tFri/Uv+agmGXxb/yJPNonjKXvzqHzZ19wnI/QlNHwn3Dmb+1brpvHjyIvx0hOtna4Za/nNNZsKQ9jj+lxztGtcXKv3Yj/PZ5NrI/N9xiKvYShD/QrtDsyReov6yr8K4wMZu/LDxNyongxr8gGFKnDsV2vwDlt3DGWsQ/aiKHAcPowr+QLen9JuiiP/ZCZKXi4Ju/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkzMzU4MDQ4cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5MzM1ODA0OHEBYS4CAAAAAAAAAB0qCAUqmdI/43JrJ+2Od78="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.19637192017277558,
                        -1.0311231091490183,
                        -1.1439421020757021
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    -0.19637192017277558,
                    -1.0311231091490183,
                    -1.1439421020757021
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 60
    }
}