{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.8973895545284092,
                            0.08617642325863983,
                            -0.032905611966002134
                        ],
                        [
                            -0.11222308098475864,
                            1.105137003449964,
                            -0.041043685001196595
                        ],
                        [
                            0.18599264851431205,
                            0.03732917430971139,
                            0.9807693526623809
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.8973895545284092,
                        -0.11222308098475864,
                        0.18599264851431205
                    ],
                    [
                        0.08617642325863983,
                        1.105137003449964,
                        0.03732917430971139
                    ],
                    [
                        -0.032905611966002134,
                        -0.041043685001196595,
                        0.9807693526623809
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.05532101316736565,
                    0.0665489152029067,
                    0.023186288842632526
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.005288715771013813,
                    0.02138364973087147
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.0041916278134935606,
                        0.0004102109955745059,
                        0.005055275741625981
                    ],
                    [
                        0.0004102109955745059,
                        0.0019767045315661758,
                        -0.0002886240062320855
                    ],
                    [
                        0.005055275741625981,
                        -0.0002886240062320855,
                        0.008481818830863297
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkzOTIxODI0cQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM5MzkyMTgyNHEBYS6WAAAAAAAAAFPsdZK0ZLu/oc0H9drt4r+u3u3F733Sv3zAvFbKjNy/kbDk5uKSub/fCoXTaB7gvyMvfDjZ3eI/8u1VDWif2z93163Lez3rv8gh/czDftS/sAmjCI632L9iejwuiD/Dv0W0+4wWfuQ/ea4nfaw12z8YtLrddXPfv7x1HihglNC/gJWc8ilF0r+Y4QQwiPnWPwxkznlzSd4/TgROHJFpxz/fYhK7YUnVv55yijNwzsk/TZGDnW2aq7+t+4HuAz69vwtK2ynLReO/wL7xobip4b9ubuM2sqW8P/jtMkPaR9C/sfj+uURU1r/pqSFytkflv4Ur21kL3s+/JzcmCpte0r+z02Akrh+4v8htREmwFLe/krP0Uk8Ebj+VBTPimQ++P3MNo358R8A/Ey5Bklt4tb91ybusYpvavzFuX1X2q9A/2gFjqKqA4T/wsnpLcqTfv8Qgig1tWcS/Zz5Z/X0Du7/LaAYIn8XlP3uzsOyl3qK/dZ7QRbNT4b9QSeAHtNvSP8AT3+MvoK4/XV6mH05nwD9K4p1niXzNvyJhKhar9sm/QAWnUbCc1b+CYLD/17TRP6HsRXd2dNK/FyDNr9Epwz+2WmUbxCmiP7GtEQb5U7I/mE1vNeV/o780sWiQBjzbv41xaPqrQfK/jklwVAlftD80+083XJIqv1bVABkLna+/V4kB+m+acr9oa8n+YDnZP8nZ4GpENNi/exYeGIll1D8p/x9xr/Piv6oDBsnONtG//SO90oZ9l79aqFKOx0DaPwFMGds4orC/eKIlCQdTuL9+tLYa/3vpP7sP0NKMK9W/217rDPEisD9AB8zb6R7jP+xS9E2fWNe/RUorh26e3L+z/NlfMmewv6OSIoWcssk/gvJNSc21vz/w479NDt7cv3vyfzrvTtw/OEDSkVor4j+IAARfu4+qP+51pN22kMu/relnUysc1b/k3sKFSQ/gvx1JrzhoOeM/e08yu96wm787ebnXovPhvzKwsNPkbMM/n9GhiLCN0D8mw2QVK+Wqv0zk7h7yk8A/qVsu8iZpvz9FQTKjkP7hvzdcDzKrUuM/RX18N/TVzD9hWwf1lOm1v41ABUpDzME/wa3DcoR4vT9cPrPk2sXdPxb7y58cLaI/4OsmvDAwX7+DZD7/YMSDvzbsRlfte68/2/EAa2+6yT++qLvYkpfIvzWFs5TQ+dG/D9/k/5h077+NwGWYftnGPwR7l8ZCaM4/sHNyemPI9T8HV/VWiLTaP31pN2lvQta/J0o0awQq0D9JE4vNOzziP8xDormZuek/fWGEtGo4zr/DKau54xvnv+OVwK/E/7m/OP9vjRm6kr+1Ee0BYFnHP30WKCNk8M4/GBkd7mQ40D/ytSgaTKTZv4F4YrApds8/d28CcqvjAUASelFO2Qn4P+1TAweo4ay/CsG2lDpQ079h/eXch1jgvxiRTDDh28E/C3b7L2w1xz9D9AFwWSnnP6RzGXXQv98/ychxTS+Dkb9tNL78ZAbavw/vzmzHccM/sLnglW2UtD89Td0+SrLUv7VWGJ+HfbW/r33MQHqUWj/eyuNduVGavxkngk+RFK2/2nF09WE8w79pzOwBhjDGvw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk3NTA2MDE2cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5NzUwNjAxNnEBYS4yAAAAAAAAAAIiirdPnNu/Et70ua9rwD/Olpe1F8rcP0b+b2zqcac/qbR6tEZu2D/Z3lmgdmW2v6iTJFCeAa6/W9sERJNYtj/meO/gRTHYP8zW3HmeJcQ/mkwQJjYl4b8/pe8WTO3wP7vpycTluOe/x06jMqla1r8HyyF5yl3iPy2fhhatVOY/eqmKSFAR6T+HUjHIvHTbP422Ck0OtNg/aUggC0ZUwr/Hlb1Xv4/sP0Yg7kqU0Mo/+zi29ICg4T9ke5gMRRbyP661I823Cum/tYcP7+b/x78h6Xiu1EvkvyTkQ0Y3MtO/Nplre6K14r+gAZ/0JzGfvzh5qSAJvqq/fxvJye7lxj/JBXFDk7TgPybFLvoTpdI/AN3ou9jc1L9rPbrCNFfGv9TwnvyZmN0/CJcdQSIkwT8jqED/NqzFvyJtKaZRYsw/Svtq2xc+x79y4oui/4LqPw5mZr02Rcw/Cn3MFms6BcD5yYMsdf2+PxsAcfL90ee/PDyn7xKB1b9D1fpw8XfYv0ElC4nuLOA/8niQldKf278="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk2MzM4MDgwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5NjMzODA4MHEBYS5kAAAAAAAAAK5LofndwpM/BCK+WPTtwL+CBcpLshKCv6x1tp//NHe/gMV7I3a6wT9VuEKYyQebP5jO6/Qf48o/nl2wioGC0j94kW9WGgeRP39CF3L7d6M/42N2KcPZfz/dsLVnJkjSv9E4IebCqqw/EKwZKuj0x79ypy5ZVPiWP6+xvPotycA/fPP7XDaMrL9sBvqaI2zBP+3CNKCdD8m/CjSllKVEoz9NayHM7TK/v0DYBM6EonM/+YBsm2v2kr9WYC8yMP3Kv9chDD6WiZs/wnDHFJtltr/OU3+tnmFwvzxxVI++joQ/uqAz48miwT9G9TPIvXKEPx96QV/xOcg/Oq1TXvQtxr871qyBtmzBv6WxvVGMZ7g/B86FBMfMtT+BgMd522jLP+F77THo31M/UBxzG1Vezz8nQ8en1aesv8NISl3ee7y/gCxHNF9+qz/9WyB4ZlCgvwZGGKvZwmc/JCLWGGUW078XXcSyXsvBPz4Jv5V9XMo/+ULOBdAg0T9Owi5MvaC3Pwdj+HwDV6K/JTPsSwyJjj+O8/VPj3K6v6v1nBx6/7A/LH62wvj7w79Vb8Xwvk+xP2UD20vIx8y/h/AUarLtmT+LtTsWw+XAv2sJmBzFbLU/PZY5iPVseT9RATniPHqFv8rMGOZR7FE/nQ9731wfxT8VTFUzAmnCP7lPHqU0faq/PZMLBv39vT8pvv+iPFbAv5p0d4Zmf3+/+H9U/33Xvz+d20z+v3jAv35eXU2dU4E/FynqfDfhZT9A6mcxpzuGP0yjIz/NkbA/sqzOYoWXmr8y4jKysFGjP3gn3M3IysG/B/yLkt/1eD/6THEAQmGJv2bk1F3Byr+/+kHsl5WtjT+PzAv1MzVsPx2v6MDdJbi/uQ6NEgDix78R7wM4HO+av/OvCl39b5W/8NV8NkSJej89TVgxmMCNv3GKJZirs5C/o3Un0p8/gD9FgBzpGpLLvz3Y2SIg0bM/syIWW0W8rD94OXHhSiB+v6k+M4llE6G/t22uKVFFxr+w/O8KDFKDv5YTeosktMQ/QdyrrTVPur9CFBPaWiGav0KuCfXEdYK/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkzNTEyNDgwcQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5MzUxMjQ4MHEBYS4CAAAAAAAAAP8WegdMHNI/uQkSxvAdUT8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.13186910239523908,
                        -1.1014966527827745,
                        -1.0307824241321426
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    -0.13186910239523908,
                    -1.1014966527827745,
                    -1.0307824241321426
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 50
    }
}