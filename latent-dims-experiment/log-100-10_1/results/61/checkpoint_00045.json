{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.906515424458073,
                            0.07853574310777094,
                            -0.030411835739796958
                        ],
                        [
                            -0.09921464000073642,
                            1.0889706067300486,
                            -0.03497075725718875
                        ],
                        [
                            0.19469741138163216,
                            0.028611122218208395,
                            0.9871298744536491
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.906515424458073,
                        -0.09921464000073642,
                        0.19469741138163216
                    ],
                    [
                        0.07853574310777094,
                        1.0889706067300486,
                        0.028611122218208395
                    ],
                    [
                        -0.030411835739796958,
                        -0.03497075725718875,
                        0.9871298744536491
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.060460563149413546,
                    0.07428946498720085,
                    0.028798290508886736
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.008747014649676203,
                    0.03837554491438647
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.005856721643290628,
                        0.000348130268931518,
                        0.006915270743456853
                    ],
                    [
                        0.000348130268931518,
                        0.0025094327834229713,
                        -0.0007521236806282694
                    ],
                    [
                        0.006915270743456853,
                        -0.0007521236806282694,
                        0.01110494690149455
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkzMjI4Mzg0cQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM5MzIyODM4NHEBYS6WAAAAAAAAANwaC/JSm7i/93o1bOQI5L8GIVpAHEnIvwOrvvg5p96/3lQn8gHcsL8KYD1nNejev3rGpAsir+I/lXKI1ALs2z9Tmx6liSPrv90wn6xQpdS/BeaOqFB32L+h3UqKWxXCv//K/JRuI+U/uNfd9I4S2j+lSM2TFxXdvzKoAiZWoNG/vsSzRcFj0r9GaKSWjyjZP7vcgJboCOA/8A3/JAKxwT+We1tPA0XVv42S954ehc0/nI/x9x/3t787cbO5Szu7v03thGqv1eK/Y/kkYe8f4r9FRcQTGI/GPxF+0l/aq9C/OB4Pk9su1b8Ckaqtzjnnv5/C9dQrRs2/+0UA62Zw0r/UEobHP3ugP90zO81S8LW/00UfdRvfkD+rKEKEUJi6P+4LmJQcrcA/2ucN8tcWt7+TGso9+fjZvzij7Q9dD9E/3dfh2gBR4T+b52xEMDjcvxYx3usqm8a/pemNHRYbwL/JtwjL2P7lP/PuYj541Ky/B9gP8YTg4L8w/xGwX2XTP5Wx77fEULM/amJGTblVwT/LybAhl3fLv4Dp66KTZsm/Qkagbn2i1b/dwg+BlbjCP64DHSuQntO/MVAD+/3cyD/m0mGE5BOpP0eii4L+frg/a1TipeKGrr+w4eicZq7cv5fFGMI8p/K/TnE2Dg1utz95+WJ2iN5iP/RmVSOJ1LO/Sg/GxGFigT9FVjg6Zs7bPz9Kzlo2G9q/N5a/gH6E1z8X2YyoHJbhv/dM4qbIINW/dq4s4zIyij+MzGamMQnZP5WHUkPjtq+/xfyCDD7dub9H83SnfAbqPxm1nZZlmda/Gcau1+pvtD8wgZKSW3LjP7N19tlDI9a/Ea4OFjoD3r8UctrUnBqkP3z1sByxwMk/ff0szIJbwj/AYENC1/3fvz4/U5L8hdw/6djrJUEN4j9k3I1552ejP8qBQ4E++c6/gsM++J8n079KvrGgDQzjv7O1Kq2G3+Q/DcibNi+kYj/FAcJxuvPfv4ip9IQKjsE/k6pIRww10T+urJ77SjGIv+pEFhnHeb4/Vcsf+ubHwD/RGRyjsa3iv780GgcywOQ/S3a2qqdXyD/h3PBe39+1v6qLpth+KsU/4puMZfYotj943XvpJoLeP9zXjB//orI/AwiuOnmQrr+UeR67meCpv+hB7d2JAb0/j+72Df/hwj/Bcm5CrNG+vzVRTmhOEtO/DEeIaabd7r9JXIsFQZDIP6/gUA12Wc8/0PPxuViV9T+slDfPLSzZP5+23ZIO1tS/HVySODQkzz8dVxrxvargP9mHQzhB/Oo/vRzhV0uRzb8mHhavJtnlvyyrbWV6BL2/Nfzj86o7lL9Dq4idSVHDP4M7T1UTFdE/pi/4idbhzD/pK0ZFKN7bv/sMfsg71sE/wQMcqJ6S/j/EvOU2l6LyP4bwjxzeap+/fuIgIjTH07+KiYphWw7gvz3yYG8OvMI/tr/gRYqlxT/bKRSd1+7nP0r9U81yHuA/tG9h5T/Zp7+QO5fJPu3Yv03ZW16LoMM/B5SZ3RU0sz/Cme+0ppTUv/OBskYlSau//gAuTh5vmb/d0R2yO8mGv7DSOz86srO/ztG3So6Gwb/gsCDd2KKzvw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk1NDAxODI0cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5NTQwMTgyNHEBYS4yAAAAAAAAAHijcdHFTNq/8fWP7Fh5uz+i/TXUa3nbP7qPI1agaHU/cL+/tEmT1z/Vi8wb3LewvxcCIsfA7aK/ZZ/h5aPsvT8zSWaavpvaP8i+zaYLa8Q/5B4d3jK84L+0XjI4wLLwPy5jxUOWhue/5GGIqujc1b9j1TGsPXvhP5v4iXs+8eU/GDAFF9sC6D/ElyBcvKHaP6rNS8QX+9c/HlREcXkotr/m5L7cblnsP38cQY5PT8o/NFeAv1cZ4D9d2ucFmzDxPxaSzF2YuOi/kAkTGtvnyb8a5RhciDHjv4VWOeEBUtS/gi8XQXRv4b8AoOh2LBWqv10rSa3tEsC/cGBnq8iexD+L4T+y+S7gP4Y7RemMItM/JVwAoKTn0b+padDyfQi7v3w6So712OA/ry0ocMVWvD/lYSeht/O7v7o9TPlaWsw/Ia+BVXA0zL/x6l8J2vHoP3Z28gptndE/0sa+NTB/AsAyv+9FDpTFPxrC9G/sXOe/zoaCzgA31L8AomHNO0rXv0YBGst8jN8/WHGIqSOI378="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0MTAwNDQ4cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5NDEwMDQ0OHEBYS5kAAAAAAAAAJfRsSa+YIA/Pi6M3wIWvb8L1egPX7JuP4jGvNeEa7G/md++iH/NwT+ZAxjAyBiiP1sz2VYOfMo/BO7B69L60T8Hx+iJP2eAP3WCThht1Ii/wxM2ggt0gz8KBVgw/Q7Tv5GASsjnq6g/HQamrNpBxb9NG+mXGj2mP2lCR5EHqr4/WjIIT86StL9fVxSOyTa/P1vrBm1/Hsi/iDGVyTbNoz/cgsJZ9qy9v0YJurZYu58/ui0HkDFpfj/gWHScYFrLv/Eieftchpg/bz9xX9t0s78qrxwF0dOgP7/b8OzFvXO/tu4iLTYNxj9ScNbtI8Mtv180x+C0+MY/icxSvqWVxL8PvEu5vxK6v+dfgzqBN7c/+KG0DJ5Ctz8bkCm0CSjIPwl/bQwUCYe/eAqBvnFuyz/mpOUEoTOmv/gOQMpnnLm/KDanZxGdpT/0FApvo5mxv59k0bIP7pE/B6GmqsZF0r9VHzIH4FvAPxwiyqodeMk/kE5A4jKU0D9pjPNRyYXBPyNCPuq0fKu/Y+fUKBtfkj/d8IZKo/G4v/OA7KQ9XbA/MX1O7Ihbxb8ZEjNyOSS5P7xoxUdOFMm/U/y0Djx7pz+6G4WtCtPCv5m/kJJzmbI/ExRN2Tyejj/an+ZbTld4PwXRj4cLTYM/HVNpb/YcxT8Mg39vd0/EP3hOUJxOw6e/TwYlXs6gvT/L3V1Q6xO/vxvo71VEg5u/877ZXAXZvz8TIhgkoY7BvwLoW6l1VJs/PhrnPLP6dr9MoSyuwyiUv5pS6HEBbK4/9RizAqZTlL8kGeU1PPOMP+gRfO/aVcC/GfdcpGSOlj9X+TBZj2ysv0kYQLhZery/rWKuaDfikT/1W0aHEmuBv+iesqd4l7u/aEMH33HAxr+D6Eyu7HCkv44L8JWCWZm/jeCjD1yipz9290vP0xpZvx4oTFRgAo6/HyLlFm3Zkz+DpqiN/BnKv0IqzJAN3bA/7a50fw9Gqz/hzrncDgV2v0YE2NaLjZa/sYu1PXhnxb9Ip4T/vRmXv9Z5IDOvNsM/Jy7ej93pu7+7Gv5xMRRSv8Ii0v9nLFm/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0MjI3ODA4cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5NDIyNzgwOHEBYS4CAAAAAAAAABJR1XetS9E/xGi5J8AOhb8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.14918228075164044,
                        -1.167899106732134,
                        -0.9532094221705597
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    -0.14918228075164044,
                    -1.167899106732134,
                    -0.9532094221705597
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 45
    }
}