{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.8130803390453569,
                            0.08823581070585805,
                            -0.06237233206330204
                        ],
                        [
                            -0.2409053761053184,
                            1.1623276168370542,
                            -0.1025733304446664
                        ],
                        [
                            0.15778209344420926,
                            0.046281342513036255,
                            1.0001092565497243
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.8130803390453569,
                        -0.2409053761053184,
                        0.15778209344420926
                    ],
                    [
                        0.08823581070585805,
                        1.1623276168370542,
                        0.046281342513036255
                    ],
                    [
                        -0.06237233206330204,
                        -0.1025733304446664,
                        1.0001092565497243
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.2291587301068482,
                    0.169656848172077,
                    0.062270797832439086
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.01931427652140701,
                    0.044342976636713785
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.0014148699553654803,
                        0.0002496723377994198,
                        0.0017800577689094654
                    ],
                    [
                        0.0002496723377994198,
                        0.00073126146852448,
                        -7.958075759939565e-05
                    ],
                    [
                        0.0017800577689094654,
                        -7.958075759939565e-05,
                        0.0034862624878002624
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk1NTg5MjgwcQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM5NTU4OTI4MHEBYS6WAAAAAAAAACF6BfCOqMi/F3wbzOwn3799tWO1ZmbUv+bGY8oqGMS/l+Gr10eu1b+AcZ2VIT3Zv+7oPNid5uE/Qf4FHUwZ2j/OxgloFD/uv3I/kITCKtC/P2HynhJc2r+Tt7Tgbc+0v0B78RKFl+I/ElNYnlFF2j/BqPWlehLpv67jGkCtW8i/vLMq0Imb079KjSx3pznTPwOe1YlT7NY/Nx82xcbc0D8Yd3OZ6LLQvwLad7sa9r4/PnKb8/oRpT/pH2F4C4G2v0rld0t7196/5okXeZ/J479u5YQM+BjPP9LqiZ1w9sS/AwuOmjsN3r8j5owhjSXSv4+cBJz95ci/j/j/eGr41L9XcAMdGvPCv8F8Ybolqqm/HYWK+dNOWL/25hc3Z7igPzvy1x6tZbs//hgGfgJktb8g6161aYfWvwL8kUhPUdQ/YASKYxQk2D+DI8AjZqThv15agVQPHM2/hiTQ1bYvpr8JN1+vhq/kP9CiXwXk8aM/JfMG5Xdy4L/i81SBI9jQPxD63XUPf6k/rsBgVrO6vD/u7sUA7ES6v0qde09qtc6/boFjOot90b+KG3rtNa3TP4KtKACv3tC/oAA5TAa1zz9g1nHd0y7HPyLEUxYpu7c/DCqFoxAVqb/VZg4CeHTTv0YcjEVdmuu/3+xCFIds4T9NldUNEl65P2YCFlsiIo2//nhUgBJyVT+YsKfBlyjbP0l+tzUvpqQ/wgEuDL37uz8WcPvJkI3mv6x6wdy3Eca/eFk8AxJdjb9C/46lWXbTP9MTXZNWN8G/UB3ugsD7jj8ygNcg34bjP1hcsXQDqNO/MJMo5TdAtD+dBs+qiFDgP+7FQFQiD9K/VZsriLz54L+4+pkWWTOkv2lco4Bul8g/FRBhFvgwxD8GpipB2+rXv1T6SLjmvdc/o8L7tmHJ4j9HaoUiz9mhP1cIV+uv8cC/ipE3Wd9217+atnusbLrUv3GQT1nqTtE/c5B+59VXzb/g0zB7smjav9+Kjo/mm8Q/tVewuUmMyD/QbrgwvGHDvzyMVpW+csY/RDXjeF7GpT/gx3vza8fiv1NPT6upvNk/UrfOWUiu3D9kdTJwtFWxPyiDPHiparU/jqHixGXwyD9GU0VyYSnVP/kciRjnUIM/0kjwA7fQf79/LC9w61PDP7D1rXGp97I/rXZa2zP2zD/h4wcZhMimv/crkWqQjdS/KcBvwzFa7b940CEPnWCvv2v93YNAbMs/vksnbVUoAECTUsVH3Pj4P4gVTXeFMtS/Rc39jwjg1D9brtVaxejvP0u8SBTU59M/u6lKAcTr1r8QSaQKMOLyv4oeYYuTCMG/doxAWCEvmz8ye/JMhk7TPwOFcqR0Ac4/GrRSxjCRzD8FYti0R9fWvxR2R/ONN+E/Z1ffI1XUDkC/ZqyeG1QLQFEPxB0m5YA/OCT7JiWH2L/6KGYF+UTgv2qnFjHaWYg/XSbaOu7b0j8I4Zg7he/kP5YdttBb7tg/DIFFda2+uT/UoOuWz6Hdv3f8ho8EYsU/v2bisefotz/5NMI+1j7Uv6mtRzOND6O/UhK2AXwYnb/Ng2h/pn3JP3dQ8cw0sKy/Q2xExRSCyL8V5k8slETBvw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkzNTg0Mjg4cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5MzU4NDI4OHEBYS4yAAAAAAAAAKgeJijDNea/9u8ahUF21z8o6ecRdefoP3o478HQobw/uaX18Z4z7z9cxnRGeNKsP6bjA0FjB7K/Ond3Pqd/sL/M6UB2HzTdP/+CqOfOHcE/XH4RHN5o3L+mGaDGDXD4P21mxwZ6zO6/aRONf+Br0b80gWwFin7iP9/GLMtGu+k/9dUMapqK6j+k/CJP4o/YPyUdd7hkr9M/t2bl52nV3r8l+7UhJ5bqP2yxT9Uww8k/9qgwNrWg6D/BRQSDWPv2P+yULknwouq/FSWwuDm7uL/Lv9rseEbgvzbAJ2Ermtm/caU/7EpG77+HaT1zVGK0PwmQrAQIhdY/ySHxyn7i1z+KXqoWnXXlP+LRwRFJ/ZY/hDWj4vop27/ka1Jbi3PQv3Kz7djJSNY/XCYWuLfU1T/MziG5tvv2v5j6y6k0D8O/gkPF+Lwo0j/T+FfEt7HoP4PAy+Fd2M4/8faDD9gFE8BKjN+LY1Wyv/WDzY4PwPK/tXTknz+J3b/jw6WU8gHdv/Iy9RQ1R+A/l1Q41z+G278="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0MTI4ODAwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5NDEyODgwMHEBYS5kAAAAAAAAAOTvbGG5+oc/4BRGNieCwL+lDcqrMJLHv+n6vnvKPIc/37NSj9hOqr9QnlKoikBvv8HqqDDYRMg/cjpuUIL20T+Gdz5nR/aOP+JIq4lrY6c/8VZ0kuu5fL/0pVGnPQfav/Obf60vqZY/d0WDi24Gzr/prWlEva+GP2mxYtY5Icc/YlctIJNJiL/eHa4DE269P1hCPYlups6/8EWh2fMppj+OFBYRvCbIvy0Qq/E3FKW/W+7uWQwouL9v12HCgXShv2/Q5G00wow/WpFb8WROwb8b2J7sWkOeP71MC7WhfUm/GG4YsFbhsT++dHNpE0ReP+DUsmFbD88/+84ygu1MRT/A/Z/cHOKCP/aJ1PdyYro/Lv1CF1qDob9zr6AvrBhhP4TJ/Dk7Nnw/Dv5/DYIK0z/Dn7gEekq/v0vcFS7V9MS/9LcoaGsbvD98rA6qQploP8xOdFvkNZG/Wk6PPvVe17/wSk+rO7jHP7wTXt83j70/FJ9KcFGo0z+CMSF1GbpxP9+FSiuUX5A/92NaIOlIoj/73pM0CoSgP42A8y7mfps/B7ia97cwyL8EbuD8vfyaP7SDI9fIpdW/sEAAXyR/nb+uv1Z41RzBv6u9KuLxOqI/pOiZdhq9mj9Y9XqMmYuxP5PE/V2T2ak/G4cEVgqByT9l5Twaw1hyv26QdozUs7S/gBBBvyhfkD9VRUt6zHTCv9ci5e109nk/u1KVIUcTvz9At3Hv2a2+v1PHQYBUGXW/k7vaU6MuoT+koavHNTlaP+cdMLhF1LA/Ud4g44MvoT8Pz/ps/7B6P6jXjqo6Er2/0kCY4hNpjT8tIpOP5mRXPxi2fm1jRrm/b1k0IvfxhD+gPKTbIDaAv5go08alFa6/yCtFTLIQlb8p0WUDiNywv11XRe5IUGM/MODgfUGykL9lWyrRCp2eP6ZwMo2DRZI/20Yh+k/dmD8y7HegmwfJv8AWgjdiDq4/zBV/yEVfnT8sm85UufyJv3S/PhIHJZG/vFoSz/HIvb8UyUaGVse0vwA6LQPc/sI/b2W7JTcwkL8ebRpDV3Kbv24+OkUeFY8/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk2MTQ3MTA0cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5NjE0NzEwNHEBYS4CAAAAAAAAAInV54ybadY/UD2DoF5KkL8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.16579653156268948,
                        -0.5247674925089306,
                        -1.171661323141876
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    -0.16579653156268948,
                    -0.5247674925089306,
                    -1.171661323141876
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 100
    }
}