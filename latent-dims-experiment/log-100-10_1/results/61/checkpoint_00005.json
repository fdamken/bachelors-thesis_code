{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9702108218707288,
                            -0.004455703787685123,
                            -0.07203464145049478
                        ],
                        [
                            -0.04328120091132941,
                            1.0056171774872011,
                            -0.05016578064583214
                        ],
                        [
                            0.11320483296909067,
                            -0.05132369983562984,
                            0.9985571868058477
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.9702108218707288,
                        -0.04328120091132941,
                        0.11320483296909067
                    ],
                    [
                        -0.004455703787685123,
                        1.0056171774872011,
                        -0.05132369983562984
                    ],
                    [
                        -0.07203464145049478,
                        -0.05016578064583214,
                        0.9985571868058477
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    1.0485025717130183,
                    1.1610778995731497,
                    0.6842531061727983
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.03865130148329626,
                    0.036809339007788086
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.4496433993215927,
                        0.22264634738766748,
                        0.2791494652883246
                    ],
                    [
                        0.22264634738766748,
                        0.32518815759558,
                        0.14752725668746186
                    ],
                    [
                        0.2791494652883246,
                        0.14752725668746186,
                        0.3994812373449721
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0NDMwMTEycQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM5NDQzMDExMnEBYS6WAAAAAAAAABpOv4ov6dy/Ux4UG86M4b8v0IFpSq/gv+VGObDQ89y/bkQhpY11nD9as7YGy77Rv9RZOFFec98/wXt+AgLL4D8TH21Fqx3jv2q1qR6evN2/A2ejRXOP1r+g45N2GU69vx7N5AtvYuA/Vh5LhfVg0z/ihn2QuuHRvyhbSPGkZKW/BHd+MK151r86K5GwHfjWPw5zsZGR6b4/B24lzZhXsb/hcpz3tV/dvwTkrPAd9ZS/IxEom4xTvr9DMNellsDFv62lda7i9+G/TWw34zJp4L886qjIFyLcP+ghrLBOfte/UKEKJOM607/VUzskn6Xbv/Fub2vros+/rfrt/Jap1r+VBHD7/4bHv47O7arDfKC/v3nKUKMclj9oZtj/RpObPzwfWW79p7w/nU9rqVV7zb/BU2LAi2Lhv/aXjw2F55Q/wLRL9uvu3D+2/mtBgezcv5tjtE/uM7m/a1imjV7Iyr/uX/VZziDjP8ywKlYgJtk/U/6K50rU3r8WIJ/Sd1qev6tfrfanDrw//NpI8HdvyT94ytDFuRypPy6kybE9Ucm/5EOUq6IZ078Wbfloh2nAv6pvgWs57MY/MFpBgNjy2D9dVkrQYRuqP1lsAae98aq/nstOonVsoT+NXvUwCrjIvyYUfmZUC+e/5/ok7JO0zj/Tf/KhBjbKP6RTBwVKWJu/+TXZWd6Qzb/6abClOEzLPyzXpsNzKoq/jVoGlkQg5T/dfH0xxs6zv9PKAtyjpdW/JN3MP8lNtz+0fpcodtziP2Wrvm064L6/xjFWrIVG47+Ay7xTnvrYPwbD06hclti/hFQefj6st78TkIem7K7ZP6biMc1A+t2/FlGa9vLsw78yQC4TWiPJP2+Gv8zFmp4/OJxHtWqFxj8ErLVKZInWv2eRD3jz490/spoEpNgU4T/haC/PGB/Vv/n6VB8AuJo/MuCiT/OH1r+CBXQikbjlvwh1smzrL+E/6cgWWFNJzT+bfLPoH8vdv8cwfMiKscU/6Y05xCyV0z/lzLhHOLi/P0Kspclee7s/z6jtaHKjtj+e8uHIMPHivwPQkz+lpto/DFaUTN0XVj8eR/eR0LSrP7O68xXYydQ/UtMQvetKtj+dmafDeifIP40dsvSjgJA/yhUkHgN+or+o7voS9diUv5AFvjzf3bc/naiVT4VIxT8cIhS5cO+mv08maH4xWcS/YxWxADDc7L8F0SFtbanRv0jMO7Xt8OO/4SvGyd1a4T/dcClQACTQP1bHVKrF+su/wW080AtC0T/mPUEu54fdP5iVr8wUGN8/4Vgi7vIh0L94lCDGlJvivzmh2YlEE5u/d/45ghoTyD8UQhHsrhrbP+4CqrfCJrQ/4mfdHXDH4j+BHbW0SfDbv0adOsAgRde/13uhwQfc4z+1PxtZsKGSv1CkRecWFYI/73y4GR5lub/aHA/MAG/cv+8JaUltu9o/e9O39ScdvD/fnYh5UYzOP/vP4AMFp7o/tlz8s3why78xH2W4n67jv0fTyBf/J6w/PsmeiXYtvL+01NSK28nWv5x2+Cy+N8G/UDcqseDoqj/T59Xb1ebEv5yM3WGOd5o/kpvhVH/vvL8SXFKzma7DPw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkzNDc3NjY0cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5MzQ3NzY2NHEBYS4yAAAAAAAAAB4S9L0uM9a/pAzG7Gg6uD/ZFHqC06bSP+mnvLSrfra/1k6WaQ5xzj955+LS09CgPzN7EN9pppI/EL7+J8b9zj+hNfOeMAXWP892Ak6w4X0/Y+xazmjL2b//PIgei93nP1rsA3qnQtW/o9rZnBNzw78YIH5TW6/bP1wrPQHIIuU/u/h5QQqD3j+H10PHjmzVP+bKrnixq9A/hL72Mjhy0r+CKYCR/X7hPzBf1Mja6OA/KBDMoteOvD+4GpXFZRXjPwnF2EHsUby/9Q8/gssgy78Z8e5IzwHnv8P9DPhAHdu/a0jmDIi6yr+k0vtG6tu6vymyaXKpQ6a/nCohCuo3uj8stXCdKg/WPzQclHzcuOA/8PRCs2zw078ns8Cc1VStP2j+uYmza9M/XWpUVrGhz7+UJRACRJPIPyq1vfIAa7U/8Saz1lfiur93caTHUQzIP+Ct/BlgWtG/+JRD6XlF1r97r+wPqYjGv2TDfAJvoOG/PPq99Cf2sD/UzziRKVPGvxMbmIcbD9Y/0fOPGVAF178="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkzNDA1NDA4cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5MzQwNTQwOHEBYS5kAAAAAAAAAOe0dEm6W44/izqWhgpUvL+IUSEQ+hqUvz5Z31/L7MW/bREWh8B7xD/Y5U62T0vEP0r6S88kLsE/A2JXLOOfxD+JHCvMkIXCvxxh7X+fxre/MRn2FjlKvj85kwoj2kHPv5EWgyu0vpW/JAF9/JBMvr/1ZlJNgIqyv8inkbxKv8U/2RLzBXHesL9V76de+l/DP3/7Ag+XDrS/E6yYS+R4vb8zHn+Ej4mWPz8wBKaWdMY/5huXSGYLoD8bmQ16DXDGv6I98+mW8qa/C3cecHaebr+fWy+E38d5v5UXkh+c3cC/QlMmZnq2xT97/VghuZW0PxwSO1aNF74/D3F5c196t78gikYBByaSv+OCkhH6F7w/Pqq2EpMCxT+0gP/aso+2PyNAbauGP8q/HrEdC3dvwj/hnzR4WMKvP9ypSCNcVnA/KiIAgxzUsL8MTB0FYP+Tv28pVMLoq5e/C18H35+4xr+hmp3LHsW0P+UzLYj6u5e/5qWU4m7exj/NRGES6qu+P+EGuYI4BrG/IT06fryoyD/iXZCgvKm3v8UPkj3ZqKA/Z8mi5hnJuL8B4XAFsOqsv8MhkLXhRLy/2EPixsIsoL+WoExRdlS9v5kGKmo6xos/tIkM73CgpD8pWvC8yHjEvwsOtXF7F3S/riSlb/wIsz+Nrz5qGQjBP4XIbenSCnq/bIErr7+Hxj/bug8jKVq4v8tcVVdQtrA/cOXq4IhAsj+1W0vAOXi3vwi72dUjcLq/1drkyqpnZj8Gb2NkLnu3vzXNF1vRkKo/6F+qqKd/r7/ZHpSONpOsv30+QkPLsLy/m3QECen/vD8tScC4Q/vCv2jvR1use6O/DRmTGm0huz9EWHk3AQSHP0ZIN9YSUbm/KorXGoKix7/ofvo4M46FPxvkVLwn/WG/0ZXGZVd4lT8IQ1w2MRlpvx4zWk/DTKW/nfyr6URFsz8oAEWJVoTDv5C6VEnKW4M/EVSd7jtpm78AANAm/TqiPxgeeO/xO54/2LQzdQGcxL+1yMhTfpqgP9waeIsjG8E/DUHBcP6EwL/h/cvPkMKaP9LmsDvvTLg/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkzODA2NTYwcQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5MzgwNjU2MHEBYS4CAAAAAAAAAAVXq9Ljk8Q/+FEwdYA7sL8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        1.5009099555228913,
                        0.2377319820805954,
                        1.0185579017625397
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    1.5009099555228913,
                    0.2377319820805954,
                    1.0185579017625397
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 5
    }
}