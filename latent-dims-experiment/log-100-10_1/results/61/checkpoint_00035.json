{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.922849964652648,
                            0.06640810931629339,
                            -0.023827463416155464
                        ],
                        [
                            -0.11018026133803129,
                            1.0680724191414388,
                            -0.02267433102678275
                        ],
                        [
                            0.14519692179122948,
                            -0.010239444242387008,
                            0.9934099754066272
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.922849964652648,
                        -0.11018026133803129,
                        0.14519692179122948
                    ],
                    [
                        0.06640810931629339,
                        1.0680724191414388,
                        -0.010239444242387008
                    ],
                    [
                        -0.023827463416155464,
                        -0.02267433102678275,
                        0.9934099754066272
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.12059461079963753,
                    0.11446294253240892,
                    0.07048200179920086
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.02613777753984141,
                    0.06470488592421969
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.013025911316184614,
                        -0.0009163110511552774,
                        0.014660103276341402
                    ],
                    [
                        -0.0009163110511552774,
                        0.004799890192838552,
                        -0.004013885886647528
                    ],
                    [
                        0.014660103276341402,
                        -0.004013885886647528,
                        0.021991818253351725
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk1NDI0ODY0cQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM5NTQyNDg2NHEBYS6WAAAAAAAAANcoIoV5/8O/gSMlicMJ5b8QbgarrdfRvw3ct40hWN+/bCfd/BYce7954BPGb7nWv3QTbKAczuM/Q5EP1m2+2j+V0sV4gC7pv4nUNgqw4Na/UmphzKRR2L8jnCW0F1HNvxtElqgkHuU/8xo4Gty00j/QodBPFpPUv0Pnu1SWac6/1ayeXE9f1r/vvtskEf3YPyoQ/cXqj9g/Frg5uw6toj/3Fa3kSXzZv7edTFaH08c/8tZ/A6jdvb8ZRnzOd7HBv/kD6yT1teK/UqLaN6tO4r9fyDKr9QbSPyktGyhw3NK/v+lVY4Rd079ab6bYtobnvwUQdK5YH82/+sFhbeZp0r+yjdR5ZBrGPwiEmQXkrLW/13Vkmb6TpD+njQZYUBbDP+vsxNjnB8A/oQek4qaHtr9DchQkSITgv/RpkzfQSNE/+IZOc1xG4j/rYCdmU9vUv2CRu3bQxcC/+/1uxtBYv7+4qaZqubzlP7nw8ejITZ0/gvZk8nt84b8g743ptPPMP6Uifm7hLrA/0j9lZ0s/xj/mA4gDFu/Kv1z3lokY0sy/Zu+Ej2+E1L9sv3Mazx2wP0jb/eHWHNC/zx2EgRTRzj9zqWzMvDqxP8ROyNowzHm/c8OOrEiImz9qZWI9Ce7cv8iXvWuGZvG/4Tq56oQLzj9aI+rJndXCP4Z8JmGI6ne/bd5yPUGKvb8lcpKcXafXPz1kEPpAguG/X0+pUeon4D9cYmC/KqXXv5aOHngwPNO/+5ZHsvJbkL8orUO/qmbdP02ouAhqFL4/GBay6w7707+w3ncgQRDnP8i7mWRaz9a/PoZXKj+HsD9XklSwelbhP9VbM1EG1Ne/GDcKRfZr3L8tRVbiunCkv7othKW3A8I/rqsYWOKyxz98QTjBYYHavzB796jCy9s/+VUbcxyi4z8jNQ39tsCQv4g477pmM9K/c3uy6iWq0b9SPnwjYCrkv6uDIVwZOeI/jYI2A0TUpb8x5vSWQgPiv0btFeqShcI/OxU5aDD1zz/FHpbOQKapP2j5RAuTP8A/eynyf1UHwT8Jg0iiUTrdv47/GY4OKOI/xLqTEB1cpz+ngllrgtzIv/hh69uXp8o/45uUFqAMsz/1sZRn+SvdP9bulVZpZq4/k+IRUtgBqr+APw8T9Lq8v27nJIJkKro/hWJjdlSDyT9cqdFEY2PJv2W5YopNp9G/F5aL/Pdh779areHBcI3CPyHaiEUYWNc/fsqNezM/8z/6mX4jsk/YPxKnjclPjNm/x0qHp9nNzz8SPVvjQXfaPwIekQm2/+4/bIfTV0Yg0L8IeMpGaDfjv0d0gsey3r2/s9FZK6qsZD+3omS3aq/EP+i9fhzGPsI/5qgU/2Bk1T+Ddu+qCF7jv3qPuGD9hq2/ZV/9S22c9D99XaTJB/3fP9r4IojozJU/ZKgYS/aJ1L9pOSh9a4jav5Ro5kXMEMM/WRpKVT1JyD+BOmnCiG7nP0brYrARB9w/+4T0N/4tr7+rKNAfZ1Pbv6ncWZwjl74/KSC+311AsD943nHchRzVv1GUkvNs1a6/dHcCbwV3hD+lP5MI3di8v9qgaz+Vyau/byFBlLuWxr9AhwpjTOEbPw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkzNTg0Mjg4cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5MzU4NDI4OHEBYS4yAAAAAAAAAEoZH9kXEtS/GqE7YkiUtj8noA8Sbo3YPzuLGe6AtXS/jlILh7XS0z9VaY4X0COWP+yRYX0wbIm/x0BjvtpTvD8wWB1yQorcP06whXMVF8A/YAJ/tXZa4L+GJ49700nvP6muTjWoO+e/JfXyWr0R2L9N3bbckRnhP4/tPKRDAuc/LuYsh1sE5z8OfoTOZwvZP4M0R9csIdg/+wPGKEb8wr8nZGZi5UroP2uFSn7qK9Y/r/EDnkxM1T8CNV5zoiHxP6JOOXvRj+K/6q0E5WK/wr/AYABtOlLhv9TC/dMipda//K5KU9Eo3r+Jsdfd+8muv4u3QQQ6/cK/GSfMC/UFxT9sniXFSezdPyM0JbbLg9c/KSXIzKv10L/qnimEkqW6vznZ8W0w4t4/tVGEM+LAvT9VStDDGM1vPwWMUOSqIdQ/exp7dxA91b/2VfzIHq7oP61WdHyE5sQ/m/ZLr15R+r/GNmGwz5/GP/87W/JY9eW/nq6omkxf07+d+HpypmLTvzVpckNi6N0/ICPFawh93b8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkzMjI4Mzg0cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5MzIyODM4NHEBYS5kAAAAAAAAAEohhmVhaDi/XVQO+BcRqr/lUofpAhpRv+qwTxNqvcW/UZ+baa37uz92zeQS12GxP6dnbMh0Vco/ApD4NZ/J0T+tl0cQ3vd6P6mCfFWwIMG/FRgfWHeAoD/Rqyfc+1DWv5Jon/qtAa0/YZJjZR2jwr9rjJRlC6atv2a0OSsn9bw/02/IYw92wr+TsFe10KK+P8p/Du/mvse/0akAqk4mrb/LftNYZWu3v1oy7qmof6I/3sRtOXpCoj9J/jbHejvOv9YcsU97ZVe/e2tyBiIBsr/hojoN94yXP6VVHLyOSKe/ENhAp0vCxz87wUPxR0O0PzcVB4E8XMY/cXjHd5NYxr9xJ11EB8+sv7s1NuQuJbY/POh4WztIvD88qVsIO6HKP1F28BcAorS/7SiU5evuyj/nNGcTrIqiv/f7Py4KMbi/kTCOE5TJoj8Bzj9667O5v0jQ7/I3v2U/+GZCWmC90b9htsrVb2O+P2GczOfxT8Y/6A6eKpla0D8DualpzTzBP7O0iI63qo0/gv1wlYCjXj+SXWAfdES8vw2LZUoJyKg/wTOKsrXGwL/kUDq5tz6oP7SIhGbzRce/VzFUmKFAmj8HGLR4IFrDv88BIRmal68/1hs33XQIWD/1cELP4Fmyv5Asla0TXK0/tL3aN04kvD/CUxb/fX/FP4sBMYWG+6K/StVhy8G3wz8QTRfK0I3Av+DYJiXBqKq/X2eay1ULwD+f1Q4IlBLAv3NpIEhp/ra/AN2uWZ6VWr8J+cHHqc2mv68A3rqCU7E/SUbpnWPfl7+7AU0dGNKcv1TldFCvKr6/JeXN4k2/cz9hRUtsy0K3vwS38E1bXb6/zeOHOdStwz9m8IxJkvSTv2DRrZkBVb6/Y2mxhcQsyL9xtYsy+talv2DlTLohp1y/fOw2XVv8qj97eraV35ahv/MKnfh2226/E+yu+1elnT+h2+lwLNXIv+L0coartaw/aDzNjOQNlL/4hssDsAV3P/n02Dgv9om/p/rc4yDWxr9hjI/H4LSQvyc+m+0/2cE/parXGtH9wr/e4g2qvqNTv7J90unNZZa/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0MDM3MzQ0cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5NDAzNzM0NHEBYS4CAAAAAAAAAFgNv+RBw9A/e/oZG/AZlL8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.14011712358369954,
                        -1.1462231785456136,
                        -0.8089966430112807
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    -0.14011712358369954,
                    -1.1462231785456136,
                    -0.8089966430112807
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 35
    }
}