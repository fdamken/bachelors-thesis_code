{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9656338186101346,
                            0.000684108535287337,
                            -0.06456103316261846
                        ],
                        [
                            -0.036686974006045814,
                            1.0003898874983075,
                            -0.059059178959242266
                        ],
                        [
                            0.13187784548142273,
                            -0.049462332372996895,
                            1.006852224721909
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.9656338186101346,
                        -0.036686974006045814,
                        0.13187784548142273
                    ],
                    [
                        0.000684108535287337,
                        1.0003898874983075,
                        -0.049462332372996895
                    ],
                    [
                        -0.06456103316261846,
                        -0.059059178959242266,
                        1.006852224721909
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.7507754362260368,
                    1.0278865641870332,
                    0.3162501726722317
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.037267783970019085,
                    0.021672916740410983
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.2502606720583074,
                        0.1709078420456423,
                        0.15356738934743025
                    ],
                    [
                        0.1709078420456423,
                        0.1973334454729221,
                        0.092715158177193
                    ],
                    [
                        0.15356738934743025,
                        0.092715158177193,
                        0.14614408015604635
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkzNTQ5NDA4cQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM5MzU0OTQwOHEBYS6WAAAAAAAAAEadZreX59i/Sp/v0A/I47+R3yBPclLfv6UjocGtjN6/5ZCtcFaFrD+iaCF9TJDSvwrbkaqyGd8/E4YCo0qx4D/cII9Jxzbkv+gclv8Ewtq/iXS51vRt2b9OA/LxNZa6v8viwkEVQt8/5IqGUqo10z+iOmvsZTDVv0U9afq68rq/4wzvWWgn27/+/gUFRjPRP71I5DSxncI/a/cm7iittb/7bch0YGvfv+ZZRGnfAzU/378YfO6pwL+iAABHZKDBvzweMTbkiuG/9ahrmmnr4L9MtNYKAt7XP2P5w+JPVNS/ZrSAiNVo1r9e77wrpLTZv+BEpJuqRci/Slusy/LF179wFj/rYTm5P73pDKep4Zm/3e3jCZtahD+WBzxjp467P78ql1f70b4/o0v2QJ3Py7/l+KEiJLfhv2HjFXXJpbQ/FaCajSEz4T/3eN2Ct3/Uvzi8rN7dB7q/PAyY94YKyb/AeIz/asXjP2SXv7kVxZA/Sf3BvWxm2r9TSSnp9HzYP1tGwU/4o7c/TGlACqCFyz/Llk03lX+kv5HYDag2ZsG/rIk8+2O41b8FLxFBz/WOv+3sgvkPHsQ/C2YBhO9e2D9nKY9+NAiyP134MuOzAIy/h8Ki0YtNlz/4xejvhfnOv9bP1gaIjey/jDb/BA02xT/CSDWUGKTUPxXLWw/ZHJO/LcF6hT5uz79JA999AOjKP9wwBfKo8MW/u0S2EZL64T8/aTx8mjvXvyEcoAwS19O/09nskNAfsj/b348kgSbkP4AJ6wPpvKu/OxVK5W9n4b9xOWKW/s7eP8MAvX0oj9m/3UvHx+8itr/loaoAeujZPxQT6rUj296/aW40i2bVwb854TAZaZPNP2O2evEpGac/xlSjlbADxz+D2SlO4YTXv/DjIWhzS9w/Yd3RQIgX4j+qEGNSgfXMv7hde5t7f7M/LKcsMXmv2L9qopQLkYjkvxRSjUhc2+E/NEtSjo4TyT/OGNQeAufev7ZLsLrWcb8/WwY7A2R+1D9zM4upp6yvPzlDP9URLMA/mVOvOS3Lqz+uK+y7qcvjv8D4K8UtgOA/AsV7w8Vxqj/bf4dRGSGiv6+LMcBdhdQ/TOdWnYu2tz9GQUERCQzQP+IdI1Q8S34/zMMfm2wno79YmybWtbWGv5gdI0iaNbM/MHPEn0eHxT9XSX/etH+pv15vX2rBPtW//1WdAmZS679uYcyXEmGiv5YGIgUnc+C/IPVLWeBP5D/k+vvnxXzCP1MYxgbw1MK/SAdtt9Wdzj+0wdIpnHbfP2S1gtQxbek/T95okXAd07+0EETQ/cfhv24kiU9SLqy/ULq6JqAOxz8WtQAsta3ZP7ryG1rT+cE/aMiB9nUo4T9A6sfo/F3bvwcOR1mo2LC/tZkKRHAq5D/H1qPsDGvUvyt1zo0MgJw/rQ6bDiodw78mISyw0D7bv8op9VTrr9Q/CuxAnxnMyT9FAd4nhxvZP7octU8XkMI/cART4Nzuyr+dQ2SwMpPjv0ylEXaMIbA/yFKec7ZPv7/c39dS/2jXv1hTmFbNvbO/G73S7E3XkT8KWhHgBtO/vxblS0Q7r4y/y7vTdjGAvL9JQ42AozrGPw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAgAAAA5MDA3NDAxNnECWAMAAABjcHVxA0syTnRxBFEugAJdcQBYCAAAADkwMDc0MDE2cQFhLjIAAAAAAAAAu5YDhF78zb8JJb9tskCpP6S/cP6TdtM/yOjZYlJWpL+sn05iqdTQP25sg+6HDqw/K0xFJXbPuT9hG5euzMjJP1AXvg3So9g/6n/sqcyCsT+Se+nDv4Pev2zBsySP8ug/TS0hHDXQ2L/C262o9/zOv++AIWjGi90/eIpfdwG04j8h7rVtA+/gPw3mvdbX5NU/5uYcCoB80T91RLuZNwfTv0gJ8nbzeeU/jiMySD0C4D+aogYrlW3UP+bSBRssIuU/fFJy04U/0r+Md6CIoATIv4oqNHBES+i/60wd2GVy3r/TF9V4diLVvy+fs+z+o8O/kWENef2NdT88zvgJxYi/P9Cgiw7tZdo/+Ni89gzt3D9K6A6umszSv9a7HMtrbI0/51HKNRh01T8jZMqscl7Rvyq/MS8TUM4/wvZ4wz30xz+eM9k/gtbAvyyRpVNrwNM/xUcmeLavob/3/KrlWgTiv8wWYjpUz7S/EFlUqxih479uOlAcgfuPv0+hN77O4ry/U7V/yPuz2D+VfK+/vITWvw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0NTc1MjY0cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5NDU3NTI2NHEBYS5kAAAAAAAAAEEm97eju7G/UnzhVY3LuL8xqNBK9qWBP3dYlIHHlcK/66fM37aNxT/ud7S5xwbGP/65MV5/C8M/rEyIU9iwxj9aF2kiO528v7jbmGRuSru/QHRFEsfUwD/Mjgy+EMjRv4LaWlLbA2W/1BiuCofywL8czwva8RW2vxnDzwQCjsc/RuJYQsJ+vL9pgxTOwC3FP6ybZfihR7e/G1BY3Zhkub+jPtboHqyEP1F8+P9YT8g/v3wyqIzLkD9sqsILYfvIv+MdgV/mDp+/RHtzLuG+Nz/pRN8g7rxgv4P6U2hf7b2/DeiRGy0fyj8t40Qj/Ly4Py53Ft9/vLw/XjMZaNf5ur9zqZdSXWWivzQQzKUtNLg/wLhM9UArxD9QO+W9mKa8P7Uz1mWnXs6/QKBWvjZbxD+NwsyWnG+oP+pe3LqwIYu/l9HInPyUqb/3B5xPAK+hv0y35mvG/aK/pVCwv6qgyL/Xapu6AxOwP2Db3yRGNJk/CisfgHgOyT9uJWo9bE+8Pyh3D+OaabG/ppVeZ+G+xj+1+yw75NS+v+76KtivlaU/ZKh9GUcLmL+1w8UtaPetv/C8wEJPAr6/mU3/bD5Hlr/+C/avTZ/DvyvY2aL1EJc/bNsZOtCaiD9gnfLWlqDCv7z0adBkmEI/UbshhUkQuj9slsJO/xrAP+jdtMZ/rpC/kSR74SnNvz88YB1gysK1vwrnHlBtjKw/ii2PtwhTtD/l0SXRunC4v1w0PI0G07m/TXb2CUgPhL8dAJebqOa0v5pAtx9VYaU/4kvU9P+prb9egz14yrSnvwmA53SIxbq/GL5Ao66wvT+W3ne6VffEvzpjXqQwXaK/tE0APYX2uD+1ONWqSUaIvxEOSWfpO7q/Nl/1JpVQxr9m9CZ2XOuVP6mCqvgmwl+/57BCTPAMRj+OOK2eqK5gP/27CwhqBaC/H+tlIkuBsD/AJ3uTognFv4z7Z346LpY/mM0F6oSJWD/5m4H1XmuYP4daBuI4o5M/NRSeskWeyb9cfFlbmlGmP6wvt4dCAbs/M2bncGigwr/xJDmcQo+RPzeEf/OTErI/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkzMzk0NTI4cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5MzM5NDUyOHEBYS4CAAAAAAAAACgNATM6iMY/6yX2UfETq78="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        0.6698375612827043,
                        -0.6564380809379236,
                        0.4328970100935241
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    0.6698375612827043,
                    -0.6564380809379236,
                    0.4328970100935241
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 10
    }
}