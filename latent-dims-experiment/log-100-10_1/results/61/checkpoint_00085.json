{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.8294715711265251,
                            0.0977819458334656,
                            -0.050433454473570435
                        ],
                        [
                            -0.2070610352479748,
                            1.1627882030516579,
                            -0.0812390280463071
                        ],
                        [
                            0.1725231871738599,
                            0.05475466914313059,
                            0.984228872901027
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.8294715711265251,
                        -0.2070610352479748,
                        0.1725231871738599
                    ],
                    [
                        0.0977819458334656,
                        1.1627882030516579,
                        0.05475466914313059
                    ],
                    [
                        -0.050433454473570435,
                        -0.0812390280463071,
                        0.984228872901027
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.07475532205300153,
                    0.07045570535836429,
                    0.024494145527791705
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.013203819046617354,
                    0.013157395829379765
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.0016323495419371878,
                        0.0003410392147626118,
                        0.002055723327702208
                    ],
                    [
                        0.0003410392147626118,
                        0.0009128678789281919,
                        1.1125141616830092e-05
                    ],
                    [
                        0.002055723327702208,
                        1.1125141616830092e-05,
                        0.00394575220605109
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0MDk2ODAwcQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM5NDA5NjgwMHEBYS6WAAAAAAAAAGQpN0xZ9ci/8t8vPRNP37+vwbbGjuvSv/fF+Ls5KtC/DCXJ8qXm0b8U7+9e/+Pev44usHDhpuA/tswDL4zO3T/6Xh+Aql7vv2VOu/+qc8q/dvjdzqFq3b/EXFCj41uwvwDfSCgUo+E/wY3a5yac3T8WXs9dAUPpv5Tm5/tYvc+/aQeiltWK0b8Wfkvv8CnRPzOHKU3Z9tc/ckuQXJFs0T947T+gcIfTv7h2AokwYMA/p0kH0T0KmT9IZOvu+wbAv3Snz0dl/N2/jktvn3fw5L+pGw0/Z2HNP5lQPvCLJs6/a11deLgV2r+B1Z5vUD3Zv9/HcspgcMS/kYCRvqBC178mpJUU0Hq9v7P7ZaU03rG/wvqYuid6YL9ku5cBwWekP3MNy7qL1Lg/62Czd4XNqb/4TFZGlA3Zv/XJZ1ELGNI/cxhsvRtX2z86NBZu1ubiv6HDmPI908q/DxvxPuFcrL8lkSO46ZnlPym/u4dWsF2/52Qc7/YI4L9TLMXtNVnWP4Ip/Zm4iJo/9K6oyPBDxD9ZXps3koDEv9F6xrF7jcu/0mzm9LRl0r/TJOWIz/PVPzA8tKQ999O/wrr/OCuKyj93TS08JprPP2UPli6jNbc/VLeqo6phkr9pmzCwrXrWvwpoyUFNZPK/yz3oc5qrtj9d5jVYLjKdvx0lTdYuwba/COKRBE7XjT/NJlt/rUfZPxDVJ3PS5o8/xtfA127KtT9LdE54uIzov4a8ClpQnMW/h1+PdqnAob9/zxh4BFrTP6ZU3I7Wl7K/+QBLoPQuq7+9BAysKorlPz5ChCzDmdG/TuwMNqp0g79XaY3CcGPlP0kEbSEvSNO/ZyBCb21b4L/oWBKLQZ6zv4E4pBUWrss/4a5DjOKivj++4DCO9oDUv5G3FlCmRds/bLomZFt74j9fwytoMiq1P/SDJ87GwsW/8jj/gwxP1r+4efOmx+nWv6TCZgdhC98/Mi2NT2lkvL8990BGHljmvwnHD3JbRsQ/v6tMAKPGyz+J7QwjM0vJv4QFfpjJQsQ/OVRRI3qUtD9x1UBSd0zjv+I5SH+AENk/vH65mclu3T9VPmNEg2GEP4yeJCpC/bQ/L1XB6QuryT9q8fB7WAXWP24u4izTmJU/ALGMCkJPYb+XJFWEYX/CP5Gi0LWNZ7k/ERdi8qxlyD/pkHqpGtypv+zHH+37JdS/f4ncpFMY7r/sadQL5FPBP8LfbjSRiNM/XFP+Rjz5/D8P8Qk1vtL1PyWp28mQr9K/RmSexo0U0T9Kxr09z0TyPyyNES2Rs9Q/c0q88m9T1L96b1pUSO/zv+HjDFgyWbe/GuK/sJpPkL8+pWtN1vPWP6XfFOoafNA/GWapFUQFzz+fh/JZ20jVv20Hb9dXVeQ/KlteUx3wDEDr2uCXEzsJQAyleZAB6qi/kWsK+e7d1b/zgPC68/Tgv+gB02+E6qo/xLGofWcxzz8B5IwbCG7mP2ipkMGzkdk/WU9fuB5Iuz9llfbzN9Tev/7V7a8xIsU/tsxBGDLCuz/rfPv9P+XTv68c/J+x4qC/EYmFGrGJgL+Cum6hye/BP5HxZarERrO/N/Ss8Xz5xr++Eg8bgP67vw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkzMjM3MDI0cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5MzIzNzAyNHEBYS4yAAAAAAAAABkXolfCXeK/ciBWsx1E0T/f9AOtfJTiPw3v+UQ1NcM/1YLa2hK65j+XynnBgwx+P84HloW1abi/hrw6jQOXob/HBnLRJLzeP+efLalco7c/49YmMVfd1b8gpC719uf1P5NC+z8E7+2/VxoqnS2007+8Q/6buY3hP7JQubg8D+Y/YtmEmD2x6D+YaNnOsOTaP4AKk220kNM/41ZOkrzw1r8DhyDs3STwP4D8PSfdE8M/lXfgqGJ46j+coSCYeSn2P0c7rCWl1ui/JMByJiXRv78oxtS+fxHfv4/G0F0M7NS/lHLxenas6r/6fCBa6o6mPyQx0Cx8CsQ/WdH2QnK01D/bYkmZNwLkP33HYkuYuao/KXx8k8c427/8CuWRqFzUvw8CKDg5Vdk/0tuulpc/zD+Me+uLFIzwv1aD3Am7Rbe/ZmjhaifxzT9jnui2WvbqP1EKMgVcVMs/KasnQwRTEcDES88Db0ebv+2e2KxODvC/jaDxInqS2r9wpLXHtPbcv7CKgg9nIeI/qD15eD7w278="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0MTAwOTYwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5NDEwMDk2MHEBYS5kAAAAAAAAAEi6+s5ZypA/OkwHC9Lhyb+e0p9e0Q29v+RwY6oKmKM/NYOl70UZsD81Nh0wwy9lv7gwYx6cqcs/Nx4joxIO0z+oVEwwE6+YPzucPAjtE5C/SIIkxLq4d7+G0OBf9DPXv5Qpquv4AFI/yhR2MIcW0L90tlFboulpvxe8euwFSsQ/B83d6k5qi78UDZyteRvDP5lFomdcF8y/DZcmXpBepz+YmPViF5jFvweGW5FEHnE/k2QBafGdr7/ktHsLtgKVv94oAlW1wmE/vPek1HAjwL+258GmanWRP3xmGuzVUIA/S3zuaHujsz9unvFEbX2Tv/FD1ynqPsw/sjRp9iK7gb+mSoM7aE+nv36qiHFUKrw/yBbgFxS3iD9Nx8NMko6Rv7zuo2kRO46/jsXgYKaM0j8+7BzhX364vxaRLjrAuMK/LzwbJvoHtz/Cv+M8NYCbP9MbNm7lVJQ/mfkQTJul1b+jROLPtODEPxl12S23Tb0/q6Hq7Qf20j9FfVyqmdd3v9slhZI0HpY/+lHqNN3Ejb9tN6WLaVSAvxQp/U0GYaY/oIlfe/8Zxb/y6lx6abOYP5Zgpnz1TtS/7cIsOVhgfD/5xe9uQgPAvzaoIihJwKw/PUlDpdjDnT+vczJ9a/mlP9wlV8HO4aw/vExVKYGOxj/KIJxaAKCGv+DBXD6/xre/+1kvmrfbdr+BrDr3jRfEv5vExRTLgJ2/xRdaSP4Lwj+QZ07NzQC6vxzL615iKJ2/r+JGylrzoT/XaJ0KYzaCvwNR6uKoGaw/tTawbm79mT9iLvb6puSLP9NjRZcun7u/3WP3IlwHnT9m13uSmVugPz367q5FeL2/KtZZQsTwoz9oASYMHAeXv8KuD/OEl5k/2FT+WnKSu79CVZJp09Kqv65XA0nFiJ2/9bnoYfyHpj9ut0h/4xOdP2B+q57904W/ttimggjMoj+mGRAs8/DHvxpN/lqiPak/zGH4drv+jD/y353aAHukv+K5BVQu6XK/ROP7BBOOw7/akN0ZLl2yv1TA1xNB98E/kMTGE1dKdD+5iozg00KBv0T+m/VIFao/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk1Mjg3MjY0cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5NTI4NzI2NHEBYS4CAAAAAAAAAK7kJ0GCq9Q/UpaIXaBanL8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.20583273123248952,
                        -0.7385945653634965,
                        -1.2362604673695292
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    -0.20583273123248952,
                    -0.7385945653634965,
                    -1.2362604673695292
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 85
    }
}