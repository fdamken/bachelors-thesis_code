{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.8309181810484102,
                            0.09287383677815934,
                            -0.05190274347139117
                        ],
                        [
                            -0.18990307868086695,
                            1.1647309626028985,
                            -0.08954231295355847
                        ],
                        [
                            0.19579217853930309,
                            0.06499772826423748,
                            0.9746041460113272
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.8309181810484102,
                        -0.18990307868086695,
                        0.19579217853930309
                    ],
                    [
                        0.09287383677815934,
                        1.1647309626028985,
                        0.06499772826423748
                    ],
                    [
                        -0.05190274347139117,
                        -0.08954231295355847,
                        0.9746041460113272
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.08299338561552717,
                    0.08314933397494913,
                    0.02951499401842192
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.01579979958937838,
                    0.038601844005277997
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.00153640350207606,
                        0.00030131108685213515,
                        0.001940887304775596
                    ],
                    [
                        0.00030131108685213515,
                        0.0008207644017795834,
                        -1.678663629745003e-05
                    ],
                    [
                        0.001940887304775596,
                        -1.678663629745003e-05,
                        0.003751175369028914
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk2MzM2Mjg4cQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM5NjMzNjI4OHEBYS6WAAAAAAAAAJ8cZmONd8i/ypx1iXF0379KCAd155/Tv1QWbVlEQc6/7zldjTsT079L/84VjY7dv390kH/w5OA/XX9aEzU33D8HIZ7ZURLvv5u6REIwuNC/x4d2Gk8C2r/KuYb6lo67vxv30bttxOE/ukxW1hst3D9VfYIkUVvpv6Ot4rrhX9C/z0mykNul0L8hIbNH6hfQP095MtCmaNY/LNlhy+jg0j/bOlJfmj7Sv9CvWBNJULs/TpS2St2fpj9ELaKU77e7vzybOohgDN6/RLiRkdzu5L8eVG3ZeCrPP14ySH7C08u/oYATxHJ92r/cY567KF3Wv5flLqxDwce/MneWkjC71b9k1xmArpvCvyQE3EYdQK2/PLEO1Jy/bj9Kw/aBszKYP73YsjHEHL8/rwkrqpuTs79+kmGtAQ3Yv9YiS0PguNI/3G5m456S2j8Av9M8ipjiv4JsvJ++Y8+/3bvCLLFAk7+IVa6RR1nkP0MMA3Ujlqg/l72M8AwI4L92PgJS0yvXPyQaozpba6I/NEuHtAnUwD8tgDepIwPBv/ml66s8Hsy/4BGjwjg+0r+Aze/Fz2XVP+pJ7u0N49O/P1qaq1iRyT/UuFL5ywzBPxgh/fbKFrk/Owtl33Qen7/L1Dt8dbTUv+O081UC+fK/Ti3+YnaXyT89pd8lvKSWv4IjAikJFbO/AJH2E968oD83EFQNTwjYP8HqZxdgp5a/T85t8+xHvT+hEswsSj3pvwOtxeUnvMm/UQuHrH/IZD90/OkLupLSP16jcy4xc7q/Db1fdyRujb8fqKldWqHkP+LivSl4XdK/LwGKTynPmT/MYmjs+DfkPw2AhkLAANS/i7UlkAQD4L+3JukgWI29vzqpbTe0U8s/6VUbf9fwvj+Sxhlrh63Uv66MVizDCNs/8NbuTrsB4j/0Gi3dh2SvP/KJvw9wy8S/1d4Q58jq1r/9lsSwFhDVv3ZxM+6yx9w/jRLZz+z/ur+pkVSRVhfiv6sK/9U6O8U/I/6hWs30yT9DLedSK5nGv86XCcdCG8M/MiDHzGVqsT9VswQrRQPjv35XFtOzMtg/16HD8CU/3j9xCJZPvcOjP/zf9Ft9nLg/i0qt5pdgyT83uD3OjCnVP5qmGi+5oZ2/axaWgyaonD+btlwE/xm8PyrxoiGvdLg/RGQSH7vkyT/pl9RNcSqSvwR68z6HTtO/LaYPVFeE7r8gUcxHcHmyP8pxvCkkAMk/ST8PstHZ/j/3vj4SOs70P1NTy3ppmdG/KjafAtUhzz9cxeRjgpPyP3SaMJF4+tI/PCfwntBu0r9ryKPKxGT0v1N8AGC6arm/RXCrCGKciL9vhn65J2XWP3D7f2b0OdA/cZewckeEzz/w7nJpL1jVvwlpwkJjIOE/3wcL01ZCDkD5LgFmU/4JQEDiCeIFqpq/F2fZ+Dba1r/TNH4neBzhv9vuwIYf6qY/MG6VCiEw0D9a4B6JdgzmPxuYO7usVNk/0mTd9N2MvD9kKDk9d5vev3oa7h5mw8c/fys7TEEhtT8K6sWnmmbSv8i39/DxDaa/Flosf02Dkb+U7KuYEWzFP2yR9cv9K7W/eL5UEdqFxL9iuzL7XxvGvw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk2NzM0MzY4cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5NjczNDM2OHEBYS4yAAAAAAAAACzmVCs+ZuS/5tUjmaaA0j96OeWKIHfkP8ClwaS3rbs/Ksw3U7gn6T+h5v/EXTywPwa9z7fi57e/RgZSBKIvr7+ZsvWqN57cPzMA4H88NrI/YAV6R/Ia17+FO0M/b9H2P7F3qwWd1ey/3agtl1rU0r+bI8/vXe3gP7gUqh0wcOU/IRblG9mR6T/wyLrE7fPYPwMg8FDgF9c/8k1VoZO12b8h7GJZkLTvPyC4z2i2tME/I2/dLI2L6T+18gNX1vD1P2yGrbGg++m/VTH9TsY3ur+Z0q8Xuivgv2Uu+xWRktm/bxq432oX67/tsonuDSqsP8vApKYyisM/fTUm660g2D+Y9AXdqFbkP74LKk1QYKc/qoN/7FUU2r+6qj5gqErVvyHrTt0AcNg/NJpD2UJVzz/HiSmx6qbyv1g3u88hpbC/ZuGELUuqyj9ggTpr0oPpPwT4aCneFcc/8Uef5VZPEsBBx4HNcG2Xv+BCpFRdEfG/fUtN0jq+279rRtooNyrev/EEsdtNFeA/DlMmCGg42r8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk2Nzg2MzM2cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5Njc4NjMzNnEBYS5kAAAAAAAAAACtzLXlS4A/NBynOu2vyL8FeFNVEqS5v0v2fEg8oJA/j9DJEbEagT8c8kfdkzZwvxcY7oFPF8o/li3IaMEm0j9lgOLbLUqeP2/XqkXyxIQ/co2dJ2gkkj9AzXxDyC7XvzuYxpZo1kC/ug5iaP8mz7/JImUPjd1fPwvnQo+SnMY/0k4VXlZEij+KnutAMa7DP67FrTS2hM6/9KG1r6pfkz+bj/2tRivIv8iKUYem3mu/WehE9jqwsr+lMsGrkr2CvyxJtvYJFVc/4PxbHP+xwb8eXD2gfdttvyVjfeO03Io/jKHxS/Qzpj/pYJAmklFwP+kq5KtYk84/+fqYxbwxiT8NFEoSb3ibv7TFUaRDNrc/4zcIEGn5gz972pW9kBmSv+VLHX5vFGg/Q3dgPL4c0j8Ks66leC+9v2UGItzi28S/6GA53uR+uz9RBX2Yg02YP+on2I4EYWA/7/IxZK7S1r8K3IPeoCLGP+KDnZ5uZrw/iftQOifC0z/sw63zjlBDvwq5SJtTt5Y/FiiGu3eUkj8iayh53ByRPwMmsSdCo6A/1+c4S/5+yL9Gcwvd+hquP9/aPzMEa9S/qK7gOZqGfT+aLB6g1BLCvybM+XBs864/GEPkrS5npz8V/EMBPyiVP0zfp5GVGag/5be5LphPyT8HcZpRdjSUv1pN9OKUz7m/x7cdVi1Ulj+BppO8IlnCv7r74DqavG4/sRroD6Lywj/V8k/yvly9v/9ZaETe6ZK/HUEXH2mdpT+6oqHtWNl6v1OGMSlwjLE/oGNN1uJiRT+M6BmgW4CHv3YlMSZbJr6/2pHQEcu7jD+ix/PEzQyFv/vV4e6xI7u/a6X08WDdgz8hs3x1MNeBv6bFj6VM3l4/PhJZAbsuuL+bkQAxpCiyv1XlH+SCIYC/t3+2XWXlib+jIS56JxZ9P06JxyBXu4I/7O2gFOMmlz99hFrWcKnJv69sntzTN7A/+9cETh/0pD+A46Ig1cGPvxTeDT9BIJO/YpsAUaeLwL9up0hb89awv8KrQyJMW8M/ApMN0C+Zjj/Axtue06V+P1wmLpPfpZu/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0MDk4MjcycQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5NDA5ODI3MnEBYS4CAAAAAAAAAFdomIOc2NU/poM0AEzqi78="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.21009291388914894,
                        -0.6414877737710621,
                        -1.2370537151879413
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    -0.21009291388914894,
                    -0.6414877737710621,
                    -1.2370537151879413
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 90
    }
}