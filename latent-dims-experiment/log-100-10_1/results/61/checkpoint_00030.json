{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9447903308735741,
                            0.05710274875959704,
                            -0.026730066219617966
                        ],
                        [
                            -0.08652721032650358,
                            1.0467521806620705,
                            -0.017644516639845113
                        ],
                        [
                            0.11703075984486144,
                            -0.005479797654422691,
                            0.9881959657871876
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.9447903308735741,
                        -0.08652721032650358,
                        0.11703075984486144
                    ],
                    [
                        0.05710274875959704,
                        1.0467521806620705,
                        -0.005479797654422691
                    ],
                    [
                        -0.026730066219617966,
                        -0.017644516639845113,
                        0.9881959657871876
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.18550754595699967,
                    0.17563149761960897,
                    0.11644204272608535
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.017879856659988945,
                    0.00907562274734721
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.020284696726025973,
                        -0.0026527714727008905,
                        0.02093334810207901
                    ],
                    [
                        -0.0026527714727008905,
                        0.008061452752139875,
                        -0.008070824838080526
                    ],
                    [
                        0.02093334810207901,
                        -0.008070824838080526,
                        0.030574829179048857
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0MzMyMDAwcQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM5NDMzMjAwMHEBYS6WAAAAAAAAALbTCTQkes2/kHGZ2xeG5L/WN1kXskLJvz9jXcFtVt6/gbhEitLVoT+Q5v1rM7XUv6FIDoTf2uU/IUd2+PzR1j9/uEnZVmHpv3/d6+1cG9i/PrEWzcBm2L/tPe4CwbbNv2F8EUG9COQ/KkEgCFml0T8ndm31jJvTv8MP+uitCcq/3oFaMrdO2L/YfGBB94rUPx+GjbWB+NI//8Ab2414ij+aIJXemhPZvyUFQuBVwL0/MMR/vSokvr/jK+GTagTAv/UEEjQofOS/YWW9GuiI4L8KExtCuxDSP8AF1qDqK9O/MbkuydKz079/onqZvRXlvzjuz/UsR82/cbRFT++U0r+HnjYTQz/EP1qpYEREt7u/I88xvZpZtz8IU0uaodLFP/VvF6lmqLk//XQFscFfr78QSe+DPYLgv2iMx12Sns8/MxOKg9974j/LkH+QsDPTv8B3SyFXXsK/2X7tZeZuvL+F+dE15pzmP7sSY2tqEbY/+ShVIYhO4L/sr92SfZDRP/C5NamaiLM/RIzeyKa3xD+o+FeaPojHv0+aY6fqos+/0YmmLOGP0r9LZKMY46x2P7t0dDYPxMW/jrm3Hgyp0D/lWxxZjwK1P8B5+7IG3pq/zf2qLoizpz+hYHhJ9TnbvyezISV+bvC/CswmDQh00j+79aI9v9jIP96NRi11GVS/BLtq8+vVx78xxx/61C7UP0R0rQX76ti/bAnZEupm4D8KYn22cCrZvz2dWNGzD8+/ieYDHEeGgj/EKHAhWFjePyZOHA+rhcQ//M5pbaCg178BVpHjKzPlP++pTJvHkdW/C9J3SeOjrT/RXdxTZcjgPyiW+BF/Y92/D6Q8UJDq1r8ZbFqWONNovxKadlEHObw/zkTVNBebyj9vOrd6cL7Wv1tSYU1sd90/tVK/7omH4z8ByP4GK1auv5g0f6lVJ9G/LR34RJAN0r+/eMthsjDmv3gL1ZrCG+A/tqnLDIEgrb/1TgP0fRrjv6rLU56R+8A/h/c8rSkx0D9Q9YA6ACy6P94+BRvIy70/ErLsHHxXwj+FniB82SXev0SJXb3C/uA/VM48lmYckj/n4n7ErezJv9sUzf3Zl88/JLsGjMs5tD+pwQmLFr/ZPzxN0EpRJrk/4dwFYa+3tr/7fGyOyvu9v7qfBSIYtL0/+dci1Bxsxj+A3c8n8QrEv4FfuHqY/tK/BuFLgcoO77+gQHD/j1/DPyFopWFCmtk/cBdPSLAB8j8fikgFkgTcPw7RP43U1du//CtXSVxNzT9dUWBl0KTYP0zhZdkjNO8/pMOLjUHrz7+nPzjPU/Tivzgu0lDfbsa/UtOWbHIysT/yqJG77uDHPwr4L7Le6Kw/nD5xXG3g1T92IhO4gqHjv+eY279W4sC/R63srvIL8D+xxZQv6CXIP+/qtiUhl1G/TVK4hu9h0r+AUbiwPUfbv/B0LvjQsss/znYPweF/vz+V21fVQ13iPwPN129cIdU/BZRSQbUCtb+aaPLmy8/cv7HF9co7pMA/2oU4kHdKcj+2PpAWJ8nUvy5IcJ1jQ7q/yJ0QD6Gjlz9LuCzidcS5v8tQeSktObm/MoYbXW4Bwr9EjfBx7Te2Pw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0NDU5NDI0cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5NDQ1OTQyNHEBYS4yAAAAAAAAAJwuzXup9NS/W4DMB1kVsD8/NmD5uCvbP/bjQb5/k5G/A/heTfq31D8A5wOR4qazP5qwHa5y7YK/cV7nzFw4uz/0drWxhaPZPwLANwZll7k/rvW+DNoe4L8uB7bR/SntP+FEKdcilOe/Q7hBUvev1r94BBsYDungP95lL4g2o+U/y1frCCkA5z8wY/0tw5jaP8X13BsUBdc/BJDIDyuLxb9ANS5J1q/mP1xIoWN+ndo/esnSLQNn1D8uMLjg2q/wP9ojuO3fCOC/49WTlCVit79yxBZDydXjv6ODRIWsMtm/am2zo04l3b9bHbWzcsqmv/av1+sJv8G/UZ5weahswj/xvzgBZr3cP2OcteMJTNk/ff+tPgCG0b+UjSjei8y0v9ij2VTVGN4/XQjWMgrGuz+nTRZQRz2Dvzuzissx/9c/zXDfIiy417+4qxZdecfmP00ermaPEcU/EeDrH5vu9L9pmoflY+HHP5Ism9W/hOO/FU7Lu3LZ0b965Xk/3nXOv5AB3jYlz9w/g6KYLwTX3r8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk1NzI1NDcycQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5NTcyNTQ3MnEBYS5kAAAAAAAAAFdZW5fW+pS/GyMcPMk1pb/Sd3WFScNWvwKO8XxAPMq/wJYufe+guD9wNxhDrTO5P+rI+mYIN8g/2ss0Y1W70D8CvRq1ynWAv3//nXPgL7+/noA/D6H7pT9MY4fuCAHZv6xB+S88rqQ/8kM9NB5Kwb9d5MMRkC++v0soNWkG8b0/1MlX0k7Pyb/n1kwk5C7EPyTdMYOQd8W/6F1iyEmXur/7Vkfh3x6xv0oDxJ+o1K4/Qf69anUyoz9ZjQ158LvPv3h1IiSETm6/qrogeUwSqr8iA/vTNiQXP9BNmRCFV7u/qDAMgn6Qxj8tz3Y8VYy9P/2jc2iO8cM/JrtaJmsjx797TvsTfNBrP4juuVtaEbU/rZKP18cIxj++/M8/zPfKP0m0D4PxK8K/+Q4a05coyz8gXkuO5jCiv3NQbaqfELO/JWKAIiDRkD/VQXeyRD+7v2nYWZYQe40/GSDWwQi70b8C05Ck6Ye+PytE48iMtME/TLKBUzkizj8UGtahBvnBP7cBE4iHWaQ/ClpqWkNblT/h5vTQBfS5vzBTPCj9kKk/+w5MbvTivb967CdF3LajP9dMmPD6jMa/8KaTuu/CoD+/a4foyvHBv3Ret8c71LI/HbrmCoAckr/CPNxJTRC4v24WVAvMG7U/deHnW9KzvD8iBljkckbIP8tduyfHvaS/TuYRi5royD8xqvuBRcy+v/ZH8aT0O7q/lI5UE5prwD/Q0/Q2ZaLBv7J5ffPL08G/HAs/EAuejL/2MfNRnAqyv90YgWEFNq8/K611aFvJob9qqakYU9ynv+upptSXqsC/73K3o6c6gb9jy4c4ERC7v37TQsBWtcG/n1hPR759wz9fqz5edF19vzldQgJo68G/f8+SrltKx7/cTJrKcy6gv298MOurzLK/yN0BNBfnsD964QBy8UG8vwu7dSBOYGg/NLjg+PA0kz+Ec0f6AnTKv2gKA8UFk7E/LC1qIf6GoL9wKBSaiC2Mvy5d+J2ndZm/3p8WUoBQxb8qLjoMHrd2v+r24/rAgMM/ShWOlcF5wr8YBVj+KIx9Pw3pzpG6nXk/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk1ODk4NjU2cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5NTg5ODY1NnEBYS4CAAAAAAAAABuEEzOzwNA/VzVuf+d+fr8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.04349385940500868,
                        -1.1085740885122506,
                        -0.6136883424956452
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    -0.04349385940500868,
                    -1.1085740885122506,
                    -0.6136883424956452
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 30
    }
}