{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.8576004692959006,
                            0.0930987646440069,
                            -0.04368697133234704
                        ],
                        [
                            -0.16599381710310715,
                            1.14060454425623,
                            -0.07019308249864858
                        ],
                        [
                            0.1925821205583255,
                            0.027083883510126184,
                            0.9737429492483071
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.8576004692959006,
                        -0.16599381710310715,
                        0.1925821205583255
                    ],
                    [
                        0.0930987646440069,
                        1.14060454425623,
                        0.027083883510126184
                    ],
                    [
                        -0.04368697133234704,
                        -0.07019308249864858,
                        0.9737429492483071
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.06234300636099292,
                    0.062139618561096524,
                    0.02314249434992413
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.006355601281811687,
                    0.03241344170522706
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.0017432458172346038,
                        0.0003590264760829631,
                        0.0021994448651520837
                    ],
                    [
                        0.0003590264760829631,
                        0.001004670540664443,
                        1.4116186767276773e-06
                    ],
                    [
                        0.0021994448651520837,
                        1.4116186767276773e-06,
                        0.004183590949434324
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkzNTg2NDY0cQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM5MzU4NjQ2NHEBYS6WAAAAAAAAAAP9Ey1t/cq/ecwrKBRE3r/Ph0BSaXDSv0eC/uGL6tK/dY6YAlsIzr+XXNP7Rmnhv34Dh6i9GuA/4rTyoE673j/ti9YcaAbwv6LyJakwOtC/LrEUMStU2r/zwx6lytm8vwp6BQL0DOM/WrjqGZ0b3D+TnmEdKVHov1whFEpR8s6/u540o/uB078f8p39HYzSP0GNSIum7Nk/GfzLfgqo0D+lhMxvjU/Svypn6lnGN8E/UE3cRJRklT9CvxZPtJO8v90HkllZgt+/9Cd3Yukx5L9Jn7OGpcjLPz7srO1Bmcy/cgWGwNLV2r9vxzaQEsbYvzykSdCNMsS/T2h6lKjC17+HMsEMoAPAv7ri+6PVsLW/3tdSmqhMkT8yXO4hOfKgPzrP/ILyu70/70bzbv7VsL8LmaTlpVPXvzoKIitoxdE/t3OBP94S3j/4cPvUbWfjv4WSdA+GNc6/QAxntWPtor+5Oif1UnDkP4C7fRpXU6a/4QYVzwVn378rhB76vRPYP8Ps0QnwmKA/eh8LiWQ2xj8GF1xg5STIv6kBfo2jNMq/1eUPfu0S1L/KK3rUfDjXP8SBcAb/lNW/8EIf1iqnzD+/jc3bjCXRPyU7TZH3nrQ/MMievEE5jb8QxZjRkUfWvymMFVISdPG/8aftXNximz+0WO/V0l6nv8cumKHMOKO/+Whi35TXn7+6N2mj6ODbP4Z4W37T/qG/dd3mcJy4wT9YWOaGBeLqv3/Mj7bRAce/OAW3Pecppr8VHFF2MCrTP1rvS9sEXa2/4rdQBBllsb+/+ollU0TmPzr7SJBG69O/CnoBox2Ljj/lMUIxsYPkPzQSkxqsUNK/uXb401/L4L8E0z+kanKxv+LXDk3Rj8Y/pAg/n9kzwj+jrX9eJ4zXvzq6NkbX+Nw/p3NQgiqt4T9Qbz7O9PG3PxOFiv7mesu/J9LiosOg1L/k/fotaxHavzDH7VVOCOE/chiK4RGqvb+7ze8929vov8t5Ujk7nsM/2cWHptD8zT8hnqrBxfHKv32TsBRT6ME/Wjbm9KRzuz/XjjCH09Tjv2EyYxgT19o/6cy+W37P3D/Gy/VIjveAP71g5i6uAsA/BBXyMe/Gwz+BtnmhxqPbPzWLL68LtKM/+Wfka16DlL8SU80cZxrGPwda7YESRbc/BAT7+vWlyD8iDKP7+Euyv9if7c8TndS/hefYk86f7r/nJNK3Ms7BP7ozPZ1TatQ/iUBuAmz3/D8hnufHia/0P3BSAn5RtdS/JUsUU+pA0z9bb7D9jMzxP7djEXnpCdg//uaqPsTc1r9ZkqabDUTzvynmfi2JFcG/jmXfGI9KlT8L6P8yPP/UPxSlcNn/s8s/c/4bn7sU0j+Y1orsNY7Yv3t0/izch+Q/gBit7NxTDECxJFFjdlEIQDF+8OvxgKe/NHMmHX851r/WHsN6B6Pgv6HdJGLoprA/OdgRDapVzT9lWeQ3pfPmP3x9biAUAtw/p60kJoVosz8OMs+doLXev7JDzI2Al8M/XvZDtSO9vT83+ADRr57Uv+QT89b4l62/uGyXSJ4Njz/70l4iNPezP51RBuGibLC/z1D9OvoXyL90Qrbl3C+2vw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkzNDg2MTEycQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5MzQ4NjExMnEBYS4yAAAAAAAAAGsgQWOq2eK/kVZ8mdCKzT8Q16O994XhP8/+EnkjRb0/49OnEIyV5T+VNXiUr5ynP6cJUkh8oLK/r8x8rU1Xgj9rtQEWcdjdPyTjKmuhtrw/w/SEdKS+1b8ZmJCYK0D1P4aHFn5+IOy/zBOne0aA1L8o+3Vbl6jgP4EgQJlq1eU/r9C1ikaC6D9aGvjfqrDbP3deCpuFDdM/DaeqctzG2r8te47YCh7wPwnBPgk6QsY/MeWEEmrS6D+U9FdmBRv1P3q/w4PTlei/wH/8mUgSw79DrbFfomnfv5H4caCsyNW/NVrVAeJM6L+5CrG3WouePwj7CAZgtcE/AYvLA/Wm1D8jCfpLVtbiP1q8q+MUBrc/M6r4oPoL2b+S9bl+BinWv0pogP+KP9k/zar09hqOyj/c5rdG5oTvv7CYssMLSry/A2p3KDO2zz97OS6UAmDpP4XDJvpYW8g/M4hJq3ndEMAMNoo5V5iCP8aWrG0MRu6/ZQbIS/OG2L/Kx2TI0xTfv4Xwh8mgYeE/tEXa2l7u278="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkzNjMxMTM2cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5MzYzMTEzNnEBYS5kAAAAAAAAALFa7j+PP2a/IG8RPLoFy7/t42qZ/5K5vx+TTmI0ZWg/QeERe2BXtT9EnW7tsxpvPwIQCoOrccw/yKOUX7m70z/Q0xFG0Lw5vwawIdVYaWi/3Y+PFGdke79f+zAr2qLUv9YmTIoleLM/Wq7Rdbaq0L8TBBFiVCuHv+J0C+JBgMI/Brp2VHg9TL+0jqIhtx/FP1iW+rQNMcq/yBnU8R8Ge7+Z8o/UE5PDvxIGiimDQpi/V0JGKjoOtb9h0KEl8uWpv1vT6D0uLYM/N2h9i9n2vb9UK8dIGUN8P9Oodc+XmGm/O5ga6+PGqD/qSPpMVnuRP+FShb0pV8o/W/TNIE3Tjb/O52GKrIS4v9lE2PBkW8A/jL+clR7Sjr+zmKcWYKOOvyfbsG4wOoC/+MfJgSQW0j/H98W83HW0v7qQPr1g2MC//2hEr7Yksz9cvbun966Kv2n8ih9iU4C/xY8rxkqj1L/c9FMCLALFPxExNCCKob0/JDFkzXJr0j+1EgPJt5SSv4sFPTw9eXG/JRIrLBMaWj+oYLopHkmZP/fZHhjeQaU/Hpbbtq6Myb+aHdGgqQCkP9LcyMFyXdO/1MxUJ/HHkj9SAwOWR3TBvwy1AosowK8/LUqNqAN/T7/K1psGvJayP3JHqvHTgF2/TRpq6U9vxT9xBoFgmY2TP09o6WzoObe/3ybdPzRPhD84DKo7DwjEv5a3Us09K3y/pOG2f8zpwT8j6faHuWO6v5mJ1f+tkpa/ZYimz/0qoD//Cxrh2+OIvzghdinkPKs/lradCqlppj+Hxe8dXDmZP6AMduCQfry/u7Vlq+F4oT98jaxX6Uuev2lDKBdj18G/BMd8I5eonD8F/1Pg0ouWv1Nn04qgmpq/AaS99plYxL8vWWcBkfGyv6e8xol05Fo/v2U8k65Dl7/Eigm+A7OEvzRm8Z+KWoa/FcmBR5UDoz+sfiUtcfbHvyR67RJZMqk/bTUTFl9Xnr/2V7PJ5gGfv51cAix7JHG//9SDV67Uxb8a5kOBnAOVv7EVqSs2YcI/iAFT9VHuq78910MFxIaQv9rONc2iAoA/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0MDQxNDQwcQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5NDA0MTQ0MHEBYS4CAAAAAAAAAMi57roxqdM/hsQJLM3LnL8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.19155851962588172,
                        -0.7967998741946056,
                        -1.2111904649298764
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    -0.19155851962588172,
                    -0.7967998741946056,
                    -1.2111904649298764
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 80
    }
}