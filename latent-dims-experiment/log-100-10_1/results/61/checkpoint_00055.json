{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9071553388893234,
                            0.07797950601472678,
                            -0.029258057415771452
                        ],
                        [
                            -0.10926440814938326,
                            1.0994627832725041,
                            -0.039545554087644694
                        ],
                        [
                            0.18444229996584896,
                            0.03713169092442763,
                            0.9667649253476904
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.9071553388893234,
                        -0.10926440814938326,
                        0.18444229996584896
                    ],
                    [
                        0.07797950601472678,
                        1.0994627832725041,
                        0.03713169092442763
                    ],
                    [
                        -0.029258057415771452,
                        -0.039545554087644694,
                        0.9667649253476904
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.050177377991234014,
                    0.05879961340808026,
                    0.02143010109736582
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.0055559797816949865,
                    0.03794534022978814
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.0031311100383949464,
                        0.0005142691854623238,
                        0.003893792257514711
                    ],
                    [
                        0.0005142691854623238,
                        0.0017284419602285883,
                        -7.005179998076372e-05
                    ],
                    [
                        0.003893792257514711,
                        -7.005179998076372e-05,
                        0.00688842188492389
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk1ODEzNjY0cQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM5NTgxMzY2NHEBYS6WAAAAAAAAAOEJ78kqKb2/JAan17eh4r/zKE4IPrrSv9x8H2S2et2/FjJHTNWmtr/rEVglz1Hgv9JFIxkxUuI/lhq+2s+b3D8JsjjbeFHtvydFeOHLYtO/wuS4VHbf2b+V6fEPxk22vwqzPnIYjeU/ztn6RMec2D+tCKpuOJziv580bjEJ986/lEoM7xGn07/gH5mhZqPYP6yA/QEYlt8/rE0ELalZxT/CWt9PTWLVv8+aRe2sLs4/DRkIEiELsL+/QsdjIbi8v9fexOSYzuC/dBPqkq8c5L+fnCCvXynSPzk1ul1sStO/kBBQ4J3b1L9MKqHYduPjv4iccT2bFcm/IMqg/goV1r8qYtQ/whuqv4X6r5YOYry/Oqws4aiOnD/+t0PMney6P1tGMz9+jcE/QBwis8Tdt7874LfgEbTYv5+o9v53+sw/P8QsBnPT4T+9UJwyIK3fv0155uv2JMe/twe8VOrLtr/DukJGtPbkP1fXKtP90oa/8QeDOsbk4b+5qwV2yoDSP/FhL5F3jKA/5v/+JCyjxj9WTZYYRSTSv3KbqOTulsa/oqg0KdgY1r8loAeMaNjRPwQi/qgX9dS/1sp6YBIrxT/y390SYVyfP0uF24AsQbI/BZbBCequpb9FevCEdt3Wv2PLCwK4YfK/KebZkLIZrj84QsnNpi+Sv6FN/4XJlLa/ElC9XAjkmT9HAR4fVi7XP1tEgKICGdK/LfpOXl2J0z8H7SsE2rrkv0nT/IGvodC/CM4jBdX5nb/2FhnAdLrXP2W18WNv02O/bl+RM7Xww7/h98yd32PqP7+Avccra9e/ZVbCbdS4sD80wdKiHsviP0yjec6kA9S/yqpO7m+i378MQX8CTX+uv3GZ4sNTd8U/W7wLcdjawz/+90KYZoXav5Lga0ynNd4/O3+0Z2ob4T+WFuni7C+uPxB7EAUw9c2/q5g7xydP1L9pzlI3D6/Zv4bvPQjTpuQ/LYpNLXojmr/A9Sv/Tyjhv03y6mME98A/H4wB5H+70D+A55SoxKzAv/st3j+n6Lw/qq0QT2aHwj+lblTBASbjv5Y+CVvllOM/07/c48txzT8q5FcOi62wv/KNiAMp3sE/wy9S9YSRvT9oS63PJHPgP4KwJnDtr6Q/Eo3mgkDKcr/LXrAGrza1P8O92mQ3wbA/+YYWJbVbyT8DMaRvUmzDv0VcVstHLtC/68ic7TIy8L93yuyPhVHHP3uZKl1hfsY/izIZymo29j+9W+PAIdfeP+piDEx8zNi/0tp7J0j70D+YgohN3MviPwtZbLq6zuU/eIY/Gejpx78StWt9q33mv3CoZRbDycC/V29LqfLqkz+RyVeAMSvRP3fIFdr/QMo/rhp1MOSP0j/zVUomfeDbv2mi3SIstMk/8nhUV9hYA0A6yaR+lBr7P2hKwwHlnJC/fqiRjVCK1r+FTbpkIdHhvxlv0u/mksA/InE2s4TkyD961wzmXQjnP0cwfko5DuE/DvWKp86knL9gOy+ODCDYv9PQDC5JKcc/nNDzzU6DqD9TTEHlavXUv07AGTK1aLe/v9f9ErSamz99s5+5nql+v6f76WHvhqS/Pu+58MZXxb9CalZzatfFvw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkzNDMxMzkycQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5MzQzMTM5MnEBYS4yAAAAAAAAAKRhAXt2Ndy/MY6Q5nurvT8FL8+/umrdPw1vgzA7a6U//4Yfddo53T+XX7DfriKwvySStjV9QKO/S/7erhimuD8IRjSzdK7bPzFZP2rLfbM/epXpWo/83r+JWQ7OoyXxP8QOd/R1see/1Jx+7Kva1r+UHdlFLM7hP9DHGiVu4OY/vap8KN0c6D/zwt9qhoXcP0VetN1C59g/ltks4wblyL+g2JQqtmPtPyTNJM8Zj8c/0GgyXclf4j/PuQbBOjjyPz69Oye62ua/l1kq/Xiayr8riko3fgzjv+iS1/wgBta/EBXVMZGQ4b+Kxj+01pyjv0XuMrc4+K2/FX/iRfcNyT9jpACt6w/gP1qTBqM9V9I/aVtWO+L/1b93Iqf1tE3Hv6J/LkplQ90/4+hjgpdxwz/EnA6M9zPPv1vluqaNQ8o/ghDNv2UZxr/86tp/VrvoP4UGf0AobMk//nFUYoLJBsAXIBHtW3fEP2u8XbTNeui/632Ieyxg1r889FInZDTXv3mxpx53SN8/HCY0XMLz2b8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk2NzI1MjQ4cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5NjcyNTI0OHEBYS5kAAAAAAAAALYvPhXHZ4w/6TpkaHOFxL8vLfLqrKeRvxrCm9dMW30/asI9J8c0wD80VZy7B9yIP/70FtH+hMk/+zPOFM3s0T9N8FVvD1OdP/vgRPfcGpM/3FxgP5lziL9bjKL1aZ/Nv4B5zjV10bc/DCGrzGTRyr/YSxtjlK+Nv5+YmFbusb8/5rJ/g7Vzm79KrJOfgL7DP/AxMzwe+ce/hACsoXy8pT/ba10wEYu9vxJF4MKMh54/Kmxelwb7n780tclyPfjOv5slD8YHaUE/wDNLRKOttL+f6UmzMFSEv9o55DUCaY+/Mj6644QktD/cWIQRuVeWv1ZbmTWGYsc/kspHWg9fyr9DkxC0b1W7v3e9eC+PR7Y/ClEEshmWpT+lDL1zvqnCP/Miv8F41JG/BU2cxTYQzj91Thj0jqapv/o4Lk8c3Lq/32zVy5RRqD+685iZ2/Riv8qpsZuAi5u/12B6vNW40r8kTf2KxtjAP6/RuDfyLsg/GvMsx7en0D+2Xxfrf8i/P+/hUxtW03c/l+OmH0P6hb/aDzWAVnK7v0dSeCatXrA/vZoEuxpAxb+lq68DCPyUPyhwhlN8oc2/sIWVCO8yrT+bDwJzXPHAvxdOP/VUJLQ/1slTPQczmT/D59wvWqOEP98GCdaCBaI/HYHOF4XAxj+P9/Rf6Mq9P5eNVEr8naq/3+t1UY+Kvj9Inqp2zUzBv3nTZbUnOpW/ylLanWQXwD/GPEiGMK2/v3gDUA+Qa5O/Inrj8FMBfz8i8hKhCH+xPwxRg8zuG7E/vdhckA4cpr/ZlhJP1TSYP+nyCgPJ68C/J/jnEZkjlD/vknQfNxGXv8ZrXb3zWcK/VvBInY50pT8hSXnD/Ypmv7PtFSllZbm/gkpvsfMLzb/i8DW83Eacv6EWzUkvaZC/NLm1Yomtn78IU4vKBGd1P4OJHGNVBZi/ldjpXrLnjz/5IPB1+anKv7hTQeQPALI/RPRAErX8oz+lrTKJp3qUv0JWIjl8WJq/SMNsURkSx79nwIPFU3dpv0hTtoKpE8Q/uwER6kJJvL/0tClvheylP6STIGyS4IW/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk1NjEyODMycQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5NTYxMjgzMnEBYS4CAAAAAAAAAIPGPK68vtE/9OJhH7/xer8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.18590867606352962,
                        -1.0645814638849942,
                        -1.114043674998699
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    -0.18590867606352962,
                    -1.0645814638849942,
                    -1.114043674998699
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 55
    }
}