{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.8653090084408145,
                            0.08893145389005495,
                            -0.03788448967620001
                        ],
                        [
                            -0.15301427095027662,
                            1.1385421358564125,
                            -0.05756674916356284
                        ],
                        [
                            0.18793976015697114,
                            0.07501300005187195,
                            0.9786613274724425
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.8653090084408145,
                        -0.15301427095027662,
                        0.18793976015697114
                    ],
                    [
                        0.08893145389005495,
                        1.1385421358564125,
                        0.07501300005187195
                    ],
                    [
                        -0.03788448967620001,
                        -0.05756674916356284,
                        0.9786613274724425
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.07891224947087756,
                    0.085434970925036,
                    0.02390410507375814
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.03434363863951876,
                    0.02431427664931937
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.0020375688096250025,
                        0.00047688570392551144,
                        0.002560306677915236
                    ],
                    [
                        0.00047688570392551144,
                        0.0012667347899772974,
                        5.103938225858862e-05
                    ],
                    [
                        0.002560306677915236,
                        5.103938225858862e-05,
                        0.004817494819207013
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkzMjYwNTc2cQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM5MzI2MDU3NnEBYS6WAAAAAAAAAGKazVySgMm//vLXWVyQ3r/Z2V0dYxDTv9z2xFdHW9S/ajpoKYrazL8/HBQ0bQngv5uTrr6iE+E/cHX4eZmy3T+B6Elml+vvv5lzrUTswtG/pA/5b1hJ2r/uPQ6zyI6/v1TAUuj/guI/hGBEo95U3T9yXAMK1efnvysFjv/FrNC/qq4qE6O40r9StHaA0WrRPytEJQxxodo/kaqGJ95Szj8rGbo4z6/SvxRfiep3+8U/CjWGazTaoT9Q+m1U1d67vyjKB/aDUuG/w4HKh6DU4r+YJ4QODrDMPxYaP2XnYc+/sPoxX0uA2b9HVXlM8zPcv7HfICLbo8u/oYdKtsvr07/CW6tkGG7Bv3nSSmP/HrG/Zjlz4x63gr+HsM4RoSS0P+fpfsmrq7c/Q4uWBNd4q7+3/ctgURvYv0WN2Rl+49A/PgmbZBYA4D+XJ7N1yaniv4iSd6d8csW/WOk0FtQmu7/TbCshBLfkP31m/43EPa+//YynIRwe3791BZDUKbHVPzTGsAjFzKc/P2hyFXNcxT9YXphCJ+PJv4Om2pYwUcu/dg3Bbdb30r9FPFwCdgXWPxoWMZT1NNO/4nXzSlBjwD+00FfS1mbHP56xYyq0qrM/JqZwwDzhpb9RdbHkcLfUv92hz/oik/C/5HRTrQdhpL9EG9eeiI22v225lmdkn7O/SRfjvCPkij+FCvZVUijXP7VKVP8VKK+/ugHrP4RpxT+h996Xmjrqv5qDMs7wdsa/kmZx5ErErr8QTCEGFLTVP+sypyynO7O/xfoxSRhKq7+1WBWw2/HlPxyzR3tX0dO/eYrgHq49nr9+/yfo0EnlP4dmMJC0PdO/vCeBI7dP4L9t+D4zLniwv5InZEy0WMQ/1/VZJqO3wz8IbwT4jPHYv+lCdEeiSts/YANt/6CX4j8Q7YSqPAivP9DztZIzsMi/2No9Gsa31r96G7X5DVbYvygStXRG0+A/9RThyVNDXr+D8PmVFTjlvxsjQOTWJ8M/XXyGuWmfzT9eJG/4ewvHv0HSsylslsI/u3isgYQHuT/OjXqMeMniv4LJe8Qtp9w/QRtcYMNM2j/G4TLmsp2Qv0UTEI7mAb0/Is7cXrzKxD+CW7fMYvbbPzg5lQnbvJM/Wbu9WY2oWz9lQKmPWo3GP61anHlFeqw/x4ltnVWtyz+Kiz7lV6+3v3st6b3fPNS/2ZvyksiO7r8T8asco2fFPw4+ctNdMtA/cXbyDSYV/D/n1DTc0m3xP/lRBZcHBdW/XzsaepPr0D84iT8g8nDuP+DZ1SXOx9s/nwBkivJkz7+GjvXaO3Lwv8GDYt4IuL+/2YYu2IxIgD+COn5MPQXVPzWXHm8gmcs/Wu3B5Yp10T8yXg5E37zav3a0W+n8Edo/1I7yQuf8CEDiLrRMb2sEQDKrE5S4r6q/HY58mM7V1b826s7h/E/fvzJwJL5apLY/iRWatxg8zD9gRT68TS7nP997ZNEw1Ns/MuNkP93vuD+gCgZGIFzdv/2f+JPJtsE/lJJaeEgXvz+juV0+cy7Uvys2yQ3FwLC/wLuI9seriL9a/OxMBwm5P049vHGwhbC/jtrQWLcRxr8ooXbQuOnCvw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0NDkwODQ4cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5NDQ5MDg0OHEBYS4yAAAAAAAAABNBSICM+uK/nsI3STUNzj+NoDCAD3zgPwCpKJezvbk/LPKNnpKS4D9Re/oFEmOav9IUBRh9bbS/MIfuKQl0nz/reySOsQbdP/SQ2jW4u8E/PtzVNm5Y3L8qAvkCSyD0P+OTARkx5Oq/T/y0Z2/S1b/fxS9ltrPjPzwBEJ9QJ+Y/WE733y8a6T+MbpjzbI3YP2NTtN0F79g/6iP6pDN91786y6AF41LwP+rUM6iH1sU/OJE31Jy95z/RFjBCWJX0P6pLOBdSzum/qf7i5vBawL8s5xv+2Nbgv11iU+Cm0Ne/5ZIdb0//579W0pUE4ouuP/ay/gC1EXG/pl8rSoBT0z8nJtS8l3PiP8RJdAhv+7w/pA7W0CkR2L9XNzwJVbvXvz7jp0VpH9o//EZevE4uxj/3wYag9hfqv0iFHqnIWaE/9DuEkuNQsj/FsdJuNRPpP3SAHcwHXM8/352pdA+WDcBmP1rBO+aQP00vhaKso+y/xpW7/rkS27+L4LK27TPgv/VwYtcfz94/Zqd/p5pP278="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk2Njg2MzY4cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5NjY4NjM2OHEBYS5kAAAAAAAAAI8RgUMOcZg/9xClEBcJx78tQRlz7Bu5v3L7JBpuUls/w7jPEj6evz/7K+LuMVWBv/hvhR4plcw/0iI67hrG0z8ulzmUFghzv48aZmrYFX2/OWl+E0nFYr/lRdJW4brUv2J3alnbT5k/zmrFZoyazL/wdy1qkAqQP6uEzl1hQ8I/Pv+fraVikj+YfQhDYO3BP+1Xq7FY4cm/k7b2Qfn0pj8SihlcftvAv3bj4I1Gg3E/Tfm6r6mdrb9EC34BRTq6v14TaGWGMzm/to++expCub+lrEUB2pA5P/LWYanOsXy//t10bz6ntT9z0RntoW2ivwvsTRSH4ck/mEOgocOlt79cwL2/akW1v88iVcW7BLs/kLfA1Q7Vib9Fcon3jaucP1equd3F2aE/ucS9eF2Nzz+SeTcIwPayv2EX2Qx+PsC/ruRTkZ7TsT91PLZo0QeZv2cu5Bgyb22/b/o9a1RD1L+z+cLZ9mTDPyClJ4tU6cU/dX4MCdCL0T8+xd3GoU2mP2fjjuRmsZu/cyUwtvkFfr9fma3T0WynP424Du4zX60/XdhqpC6Hwb9hRNPifdW3P7jVK5DS49C/dxP+7/9rgb/yUMT3PcnAvyLYj0zCfbI/txPNofD4jz//GXDAYfijP2Q/UrngEUM/bkbeGmqpxT8/JCczQ+SwP2zdKOcoGrG/keL1S7ijoj8ofcBnIeDCv9Lg6z6hXZe/mK7abUXpwj8bjHje1Ym8v/yFynzqlIE/olAjnoMYlj+QiTwefYVav/WEW6txarI/VnT29numqz/EV+UbYL+PP6+A8YIBJb+/ki4mQCCshT9xRZSjLtCDv27Md1S+ybG/+z195Uzfsj9N9qVkPQONvySk/OvxjqO/ht/HBcoNxL+YCAtafqyiv7unxEkQ2aC/Vf9BQ9G8oT/BlVE/w/qxvwg5FnyqEZq/YovyfpqWnT+zGcNjmQPJv4Uu9MdJXq0/I3rWnzPVgb90dTJeP/N8PwWJObvRcom/RzS/uJlqxr+YJOpQmV96vwko+JV1SMM/aDqp7+hEtb9681LxJg2nv5nrYsnrMrc/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkzMjg4MDMycQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5MzI4ODAzMnEBYS4CAAAAAAAAAK3Cw187SdM/ASzHGYNblL8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.19032897148065359,
                        -0.9471100902790892,
                        -1.1940496833731686
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    -0.19032897148065359,
                    -0.9471100902790892,
                    -1.1940496833731686
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 70
    }
}