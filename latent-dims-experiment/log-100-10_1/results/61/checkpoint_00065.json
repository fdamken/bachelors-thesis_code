{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.8808124700375758,
                            0.08624189364452857,
                            -0.036559767680117344
                        ],
                        [
                            -0.1406404498739525,
                            1.1234874231611396,
                            -0.05405381886878615
                        ],
                        [
                            0.16732150551654873,
                            0.046673191760572705,
                            0.9737416431638644
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.8808124700375758,
                        -0.1406404498739525,
                        0.16732150551654873
                    ],
                    [
                        0.08624189364452857,
                        1.1234874231611396,
                        0.046673191760572705
                    ],
                    [
                        -0.036559767680117344,
                        -0.05405381886878615,
                        0.9737416431638644
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.06883047460751605,
                    0.0631225654033406,
                    0.022580171061038132
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.009668914790147028,
                    0.031228263451515487
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.0022338861998318915,
                        0.0005230155046143936,
                        0.00278442686390315
                    ],
                    [
                        0.0005230155046143936,
                        0.0013869611972164853,
                        7.41514387765374e-05
                    ],
                    [
                        0.00278442686390315,
                        7.41514387765374e-05,
                        0.0051858525163992475
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0MjUwOTc2cQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM5NDI1MDk3NnEBYS6WAAAAAAAAAGuRMVkTvMm/j6U+lMxO3r/RYUPwDh3Vv4DzkqoBnta/9i8tHA56yL/iEJ95X3bhv8PEdPxq/uA/5Zkgyf8X3z+kMU3ypFLvv2Zl7nOji9G/AbZXF4tc2r/E0+ccTaK8v1OQz4YXguM/qtko+D4A3D91v682v6Dmv5AuEZsroNC/O1uHwfXE0r/i/mTqjmzUPzQ1PU3Nmtw/N2DOU5ucyj+PxIyzqOTQvyaI6jQ1Vcg/thNJSSQCSr+6K/k67Ke9vwMZVlQ89+C/QsE5FipC4795wVmExmHQP4eSHSif4s2/dpAcUsso2r/VX/ywDS/av4k5UYezvMu/9klMUArb07/B4FWpWBm5vy25lxgrj7W/16zZbzxCjT/RNcSRbD+zP3bAvgjh1rY/zhjtLpzpp7+xiEBzjTjav8WaZkE1z9A/BOURmhYQ4D+thiju3orhv7NN+Bwke86/brr4ZD+fo78cBRPaaYDiP76lKwRdI7C/6BwLl5r0378CR1nYsLXXPyOs/A78jbU/egBV871UwD/nph0mJEjIv2U1VYNnGsq/6ibr8wJ+079y1h1RIrvVPxQTOGLi+9K/SqHFhNXiwD9HhcDj1c29P2hDWxSEOKk/haYvJKpJj790o33DYmTXv0FiLZC1MvG/jHWujRY2kL/pBfDgQJi3v4rjpk8vn7G/gMRe+5JXaz9U/Ern3ljYP/EeKLZNXry/XmBAf/kAyj8WSBzY/o/pv9W+bluhU8m/aD7qCnnKrL+2U3LJZe7WP1hVUgQko7W/yP3nlKNKtb8agmt6qebmP2bRqMqOgNS/F9YuAQ4kdL+wU17p+LjlPyrUeHI0Z9O/zQwn80Yx4L8rLMED/vCnv5ODEU6o4cY/CWpViUm+wD+CttraCcPXvzQghu4PWt0/CmEdgkWJ4T/gAJ/EuoqzP+PZeVQWTMy/xZdd3mDy1b9NEGY7fS7Xv/wAOLey8+E/6RJOE0oniz/BoviG9anjv1U4vsdekcM/CvLogQexzz9W/v6TFhXDv9k0vwYCHsM/R+GgccEAvT9+Q33XsWbivzXLv9KKT98/g+6hXU2y1z+L1Ve6Cs+YvxTRbrKBMLc/wlj7R6dMxj8uwUM940TdPwxgu4eijJg/NN9z8oxxc788ytAYR0PCP49HybUUyLw/VMx+9WhcxD+hzsb//HKwvzojtBpKN9S//xg/eHOE7r8azz96xX3QP4EpXeMsXMM/A0HEdAJu+T8MOGb7R4brPxDmmTBEONe/yXg3xLGD0D/9vkP4TArpPwvqnvKbwuA/rNBFFYzByr/2lkoPBDLrv15JSpoA77q/QB80Rh2gj7+C7c8c0J3XP37IEPwtdcs/dJF6TA2K0T/NtX2C66DbvzaCIEokttE/X3OpB5UPB0C6dZTYOTYCQJkwynHyzbC/v1OyRJhw1b/XsxZSGB7hvyZP/VNGZLs/J0Dj3imryT+zozYqGbfnPyiz41kdQN4/EhEbu3qIrz8OxHi1Imbdv50bwnbk9cQ/3nOkMIjMtz+BLNT5uG7Uv2d1uavizKy/3i6oAzwHjL+zXW6W4KvAP9ZbtBARf7S/pVc0AeGJwL+K7bqxD5fKvw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkzNTQzMjY0cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5MzU0MzI2NHEBYS4yAAAAAAAAAEG1sPIYTeK/MYYLCBReyj+ovKZo6pzdP2ZHhBBB87s/4vDZM3O53j8xQhdS9uOivyvJP/KSG6+/jvv9N1AFsT8fiwDA5F/bP5X5sufjt7s/H8otDuib3r/gY7bq+ezyP+v+PpEbzum/q5So+4Ks1b/P6bbGSfnhP1fyoYBimuU/YxKdgAYS6z8t2ITmOVzZP+f3bHga69k/Waca1ik/1L86UsladB/wP3y49TgUhMg/UuFPUsJ75j9fY7ol47bzP/9Q6mOBz+i/MvbQ848ixb/Z2uWBkefhv52mR1L4ute/3pOSvO/D5L/0+oeCCZqcP7sZ+O0ahqi/NkwWOEK90T+qM3LdDm3hP4Lw1dIwQcU/04Nf1pyQ2L/asblSjkHUv5IAaLyrdt4/IOHgow5MwT+sA/Xy+Hnivx8SgCgQNsE/XUc/EUMHsL+f0JzMx6PnPyuVQ8fifM0/8/dpjTdSC8DifPA4LAKzPz7YlVxXAuu/U+9U16nu2b9CM/UnxSzdv5NCYKMF6N4/MQ9AXLdE3b8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0NTY2Njg4cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5NDU2NjY4OHEBYS5kAAAAAAAAABR3n5fSd5A/TFOzOZtvxb+7UTzCgYK1v5GPglZwGTQ//+olw5A3wT90fPQfl0OTP7KZ3qqj1so/7qIdM6nE0j8o4y3yE1WTv6YwraM3Q1Y/lufeT1fbgr/xzuXJ6wzTv6QEMKvUXLY/bbqMe3oSy7/0xtEkT3KCvyZXvoDHOcI/bG/gGlhPjD9dOJbewkjCPxenCqSW7cm/fIaL30BXAD+A4rIjY+3AvxnSmu8kqZW/X1dE/MjMpb+x8Q5b3Pu8v4sJ0dgxMos/Qm/m6rR5ub+y36eLNLCWP+QWuNIKnI6/Gv1aS/gUtj8MYsUI73igvzxH0h60w8k/DmT+OoJBwb9VNmvLmu22v/IfJo2d9bg/J0jZHe+2cr9FOeBRnqe4P1WvtXyVPJI/Ag2zGK7Mzz/bEct5/WOyv+RU2cZmB8C/CzWKw8JdsT9E8pboCRSGv4zPbpstLna/m2D1J4we1L88mJ3BeK/BP/dHpuNkx8c/gaeezYCl0T8xZbSrNvGkP4YI1M0l3ZI/haInDwvTVL+DZvdet4asvx1W49oUrbA/vG9advpswb91GGMDuvm9P1vGc9YC18+/ZAMDnlD0lT/6CbxSUcDAv0b+elPU87I/OC4vXCPorD92YPXeqc6hP0exsZiPm6Y/nBZnVCxgwz+pMQlbxI20P/fUYo7JX62/SecNX9yho7+WSRxszovCv4eWOeDCGKO/14waVWpOwT/pMOduIMy9v23Vy8SY72U/DiLHsOk7kD8A0c1I2ASAv029KI4NrrM/D2UimbPxnT/fU+zbIaydP6xEWI4BJcC/dncWTNFWnz8n9BDDM9ibvwBf673Pzry/sCCcwTkUqz/BasmSgdmCv2Ph75YmFba/RY8h6qofwr83OBIcsjyev6Ph74WiT5Q/e/imPM74kb+95qxbs0GdPzuH22ZgR56/uDnjDDfKlz8Oe2FaYLfJv517h0t4F7A/dfBDpmkfhL9n+IOzNTScv0ft9P/vhZK/D4tA362fxr9O9MEkSBmaP/78tSknjMM/FYGbhDbCur8sz5HRlLOYPyYCbPH0VbM/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkzNTkxMDcycQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5MzU5MTA3MnEBYS4CAAAAAAAAAIdZURxzJNM/8e7r7vcdjb8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.18842153107502757,
                        -0.9836782904074294,
                        -1.1642271308196839
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    -0.18842153107502757,
                    -0.9836782904074294,
                    -1.1642271308196839
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 65
    }
}