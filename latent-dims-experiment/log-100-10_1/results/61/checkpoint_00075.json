{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.8558673900889455,
                            0.094678577120474,
                            -0.040295927507205315
                        ],
                        [
                            -0.16858146353981204,
                            1.1458834033771008,
                            -0.06339387194959563
                        ],
                        [
                            0.19449448488561227,
                            0.05508776489336066,
                            0.974482966301942
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.8558673900889455,
                        -0.16858146353981204,
                        0.19449448488561227
                    ],
                    [
                        0.094678577120474,
                        1.1458834033771008,
                        0.05508776489336066
                    ],
                    [
                        -0.040295927507205315,
                        -0.06339387194959563,
                        0.974482966301942
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.06966210114525259,
                    0.07199479059021038,
                    0.023655613939730598
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.006366781342203467,
                    0.009134101516715135
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.0018931247688516867,
                        0.0003951122753923231,
                        0.0023888425246914036
                    ],
                    [
                        0.0003951122753923231,
                        0.0011147947773068045,
                        2.4073926706336124e-05
                    ],
                    [
                        0.0023888425246914036,
                        2.4073926706336124e-05,
                        0.00450556356354892
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0MzkwNTYwcQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM5NDM5MDU2MHEBYS6WAAAAAAAAAFetAMfGk8u/8uCbXhzG3b/nUz90B7fTv9jMDMUEg9O/505y88utzL/merE8rtjgv5XdcpRrhuA/AwFZpNbY3T/hUB8Zdp3vv3Vs/pcnmdK/Gjd3WKvy2L9MyO/w3d7Cv1PaaDSrHOI/zB0WU4AL3j8POFEzq7Dov0KTcEXB9My/uKXnAdtt1L87n2WDhWrTP8l21zShEdo/3jHq/vd40D801ZiUEzfSv42zj/4dpMI/IakG9p35nz838yOaAqu+v3FmDfejr9+/7EpT0Mon5L8lcFSe9zTPP9mirtK/dcu/i5Ppe1Lw2r/tAyYs8HfbvxpCuduNo8m/9P06K32s1L+Yg0NaVKjDvyleBjNKT7G/9AlYGxbdYj+8HN+yrY6wPxsbWToNK74/R/7Lsk0Jsb+yTpQvMd3Wv/EHumP/PtI/PXB5aSDw3j8qu2PNoZriv2CWE4alwsu/TZVySIIHrL+gpIAXcaTjP6ltEHADGrG/Dm3HXITR3r+aVBvqmWHXP7obe4P0VZ4/pY+lQxO3xj/Ko1vKr1vLv0gBBE/Jicq/pehLUvKx078t8lIGnw/XP5zMs85cENW/0l875R1qyD+KxgqI5hfSP90b0g4F4rA/4I9nu4zbo79tXbYq+zLVv6nWAd44jvC/4FCM8VE0nL/bnA5eOlWsv84PwULLc6a/rQTjmGe7kr8gHBLX51nbP2q90VQTFKe/ig2YSsOKwz8Adm9Rc1PrvzUcJH8rc8a/bHJb4JI7p7/CsLG1DQbUP/8y0OSLyrW/yn1aNsfppb8W8ZcnaJXlPzTJdPo/99K/15RD5h+TmL97N/kfLR/lP+wFcMqpk9K/orbzQ7ia4L9YUctXIdO4v3OppLChVMY/dipBfODKwT+6O3ke+HzXv5rqVwPne9s/n3iy9clG4j//86KJTYK1P44wPkOdG8K/B4MNb7Ga2L9UX3GZZDPXvy3qNaGhvuA/bwma8vUss7+aJVWMBijpv3yZAM0kysM/C1x2F6NHzT+UZh45r1TIv8kSgebc5cI/uSPSfvSsuT8paDwGinDjv/07xAUXW9w/XEM6kWQ02z8/7Vy4ZwSXv5xQQCyLArc/1VbqrjMjyD/TdblTqFXaP2pCPVgENIk/xYXjPifKhj/pdwtWF1/DP5QshO0cFbY/sTueSig4yD86lFp3aYO2v58dfFz3NdW/v5EIMblY7r+NW3oZaWC6P3bJcbfrxdM/Huqkr5io/D80wDHfmWLzPyABkfQLjdS/PxKa4l8k0j+41LJ/iWPxP8jNN65gutk/rTqy206o1L+nn4ISHPPyv75A9tzZ68G/hOLJ20velz8CitDXylfUP0xvljylnc4/qS2eNdoT0D+zQI5rzq7Xv3/FgZvaXeI/tGxwYM6EC0AQSVSUdxUHQFHLlBijGai/52dzhQ5X1r+kFW+evYLgvybqG4fDvrU/NvicUE97yj+lgl3mOqvnPxPd9L3VUNs/ilqV5U5wtj+j06rK2r3gv3QduCRJG8I/6zdR1jJcvz/8q/pwEkHUv1wxbZyhpLC/o3c990f9Nb+Bvcvb83G5Py1xMfPIbK2/F3aS/wUkyL+qXn75ySe+vw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0MTI5NTY4cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5NDEyOTU2OHEBYS4yAAAAAAAAAOinfoPJfuK/Nw3wZ4dezD8WWMiVn8XhP8z5eQu2xLs/b8ocGJMQ4z+qtgpet7mkP704emaphrG/hAiPwsUclT9aMs++zfrfP1YICCdTvMU/14JIPh2i2b/kJWY+WKX0PxZTuOF5aeu/gI2kMY9Z1b/74XpZV4LhP9oenisI5OU/B909G7+86D9HWTkIHincP7F2ZU3pn9M/DHk6gvc+27+El5wyMl3wP4NQxnwOjcM/w1GBuIxS6D+qttSkyNP0P1C12fbsn+m/+r9qQUcsv78T4Xo91jrfvyIit1hLz9a/bGEgvjsU6L9PZD4ZZuy4P/EROaxHEL4/GQEndcjR0z8EBq5TwdbiP5nj/6v3Rbw/oSITZ/Sf2r/4/7oROl7Yvw9b2jDEm9o/zZ2EHskcyT/IbEEEI6/tv01XJm2LDqS/27ZgrCc/yD+LS3TZPjfpP9TLx2XQpss/alPL2v4mEMDABui9JbmLP+Rb3F/jW+2/8rKpAgq32b/VIx+Smirgv0XiOEKKt+A/Q9mHGCbd278="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkzNDc5ODQwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5MzQ3OTg0MHEBYS5kAAAAAAAAAM3m0pzVZ5c/3K9nne42yr8/qnYOhYW5vwCLqLtxQ6m/gz1wS97rvT9BmhoIpn17P4iPiMWxrcs/El3Vsr190z/a6IdBE2uKP86abBgnbIA/jwHV5Pu0eD/sROZxX7/Uv9e0BqWz87M/FJ+4QaBW0L9XIoMjfDyMPwUK95GrBcM/rpUm92ymnr9t6BcYRQbFP8lJIqHTqcq/QNZY9/dAoT84atFLDYjBv7zNqz6sNqW/KmwfouZKtL+NlNqmBQSwv3bCrPzFYYk/2bXm1qFOur+unyADlmGSv2k7+/rEw2W/9DmYwQYPsD+Yqjx+dh16v+SlQGPYw8o/gpLEzTNRor/dZHznXK+6v3Xh5Gsbn7w/v98E70+FgD9GFjxmD6eivxY5cH895YW/I39pRaJJ0T+jxF1RqBy1vzjfjMREO8G/2PyXdR3dsz9XVGfMAjdSP74ntx//r2u/TAKjfuXM1L9frnLtRh3EP0vBlRsKLr4/1/Nl++mb0T94jQcGbGBuP17Z1+UypZ+/CGfYVJz6sD/3ZvTKwUWaPxYSS/x8cKg/l1wcovetwL8Px49kHSSvP/L8wmIHINK//6BYAQTqiT8qk4TCEs/Bv9lIvjew168/WYsGpm3+lz9pjQRQ2SqIP0r0EB+SMIC/569CvXBMyD8uKSfk4AigP45D7AiXLbS/nDJ4GbAxi791OcASy37Dv8omQ16iBpG/eGOE3YLBvz9opELFKky7v4za+15yS6W/C6f948cJnD8Jx7GLN1GYP8PBfqUOPq8/Ie9VNC0xqD/FOS1MLuqhP4ThYzJkT72/XO/IxFXMnj8/y03rIRp3v/EoGHJ4aLi/vEFwmSpDsD+E/HZnsN6Sv3pqqHVhOG0/s6ik/Uhzwr9lq6uRMyisv9mItPe3qoy/Z74HMW6goT+scJd+JMGOv8MyO2+I44K/Ry8kK4v2oD9INEm5P3bIvx8aENrWLqs/U0yIcRCnoT9Zko56nGt9PycHri41xoC/8a+j8bP7xb+exDYGFaqjv1RIKpMGesI/e8xKgK41qb8NplpUfyKIP0U389uGFV8/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk1MDAwNTQ0cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5NTAwMDU0NHEBYS4CAAAAAAAAAFBdSXPM0tM/z7GXX9GxmL8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.17246673899012976,
                        -0.8793173615734483,
                        -1.197558458918169
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    -0.17246673899012976,
                    -0.8793173615734483,
                    -1.197558458918169
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 75
    }
}