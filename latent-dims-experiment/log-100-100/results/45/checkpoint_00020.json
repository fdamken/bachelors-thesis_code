{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            1.015983580327368,
                            -0.011359702376439119,
                            -0.004875241003402215
                        ],
                        [
                            0.03678423290146909,
                            0.9799866409620591,
                            -0.008977657939935274
                        ],
                        [
                            0.23199246420060068,
                            0.00707565323935706,
                            0.9990926505930665
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        1.015983580327368,
                        0.03678423290146909,
                        0.23199246420060068
                    ],
                    [
                        -0.011359702376439119,
                        0.9799866409620591,
                        0.00707565323935706
                    ],
                    [
                        -0.004875241003402215,
                        -0.008977657939935274,
                        0.9990926505930665
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.22668026254385457,
                    0.1396078707317622,
                    0.05605483920024523
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.0010429136061902683,
                    0.0012915249080155604
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.09680023872460405,
                        -0.020988482724665566,
                        -0.032903868292554206
                    ],
                    [
                        -0.020988482724665566,
                        0.12761072096853224,
                        0.01918953001440782
                    ],
                    [
                        -0.032903868292554206,
                        0.01918953001440782,
                        0.021633062696553296
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcwNDQwOTkycQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM3MDQ0MDk5MnEBYS6WAAAAAAAAAFcZWaW33tu/dgFcBPvT2L8/MIEnl5LlP8j6PjiPrQHAJ8hshUbDlj+NuLY3vAj/v+oBifdUZek/LeQvhw2i5D/S+mFclzflv6UmoALExNS/6HL70TOEzL/njlp6bn3fP67IVCZBXfM/CB5pFsGm4D86+NYebZrFv+tpH6juA5+/4WF5gC+p5r9RfE8amTfJP/1r0roCdb8/i+DqHn0mwz9ZyiSa8drsv/p3zwaYJ8A/kPyZ+wvTqz/+nwibLonLv2HfriEjPdC/sw19t4yv5r9PZSRBRn7iP7TZ+aBZyt+/Oc0cNYmu17/qvHEFaT/FvwjagJjrUMy/qEUNQpCt17+t+qx/Tmvhv1c45HULn8a/oz47EI8Ls78ECSS4HMLKP9qP74OsD9E/tmfR2NIW4D8GxkW9D//jv8geJjz9Y8M/2iFzi1tq3T9AMwDOz/TwvzioY+A4/7y/O1dJi2Epp7+i9TxeeErtP3dzFd53awBAk5CawNTV6T/4vHzz5YPZPyYRShpBGWs/WLXZufJawT9iylINOgHzP4Y1KgHuNry/JLvh0P9s2b+oiVR/B2XkP7rbXcEiycs/fVTmQVje1D9ICO8F9527vzFt0NUI6bm/ywd3rSHNpj/AktjSoj23v24L4EI6Ac2/dALAsh959D/jaaDqZR/0P2b7s/oqELg/Qmn4OKJApb8Phjq96nDQv/6ee+5OKsI/QzvyFfVo4D+khSUimnLkP2tudU5wFMq/V/QMQP3N1b8+99XcWqrpP+wG6JVnj+A/hHDEFJ8qz787mJPdCUXzP3wNxmXP2dC/jDo7H/jX2r86NSbkhT2SP+0TkVZLl9m/fVSBME+p1r+2mbXa487vP2XLBkE4/7E/OBaEmrQ4zD+F3nxopsvtv9e2HYhgudk/r1wOoTrD3T8y+zMgg1fxvxIbqX21t+U/fbMXXeLr7j8NXXKqDPDnP1C7CU5vs9E/kJqvX3Yd2D+iFKDoFmnZv+icvxdDasE/1OS+9UJJ3z/gZLp+F/65v9HR4AtO0XQ/YcttjzzJ0b+1gy0BMnXlvzatQhGqDuo/w3PTum916j/2gUcCS7LJv3tCYBYRQrI/pT4LqqUFoD9h+TQhOsGzv/7D1D0QzcI/iOpQqi0Mnr/EDvDjzVviv1j3BY4Iir2/9+n/3rOcXb+VmOyzuy3AP7CYqBmM+9G/cI7ZzJCc5L+z7Dkrjg/lP2uvc4Ehz8C/Tv2SRY1g4D9FHmKma1vwP93Zaw+gztC/x1BQXPcisb8Ztmgen2zZP6uwv+K20cW/Bvh3vaMs+789OXDYUWjjP6fkJsvJe8S/ZnDybOGmhj+ILsfNSJemP/dj5hQCzPO/5ZaNpdkusT9fr0q1p47+vxQ8H7IUqAbAZksPCAhV4r9o/KkFOTL8v7oTJY4jG74/H/MS1ppptb9RkNbz2ejnvwpUs3dfltw/1J5OZwpOsb/g+92vBjPVPwa8u6yaX8I/VWKlXbNkyj+nKFxoJQXOvx3GNXR8drk/M6gnDW+Hsz8Ar669POHgv3ZrIZzNhb2/kXXwoh0Mmz8E287dTZfUP3oRWU79QL8/z9JdPwdYrT/Jm2013teZvw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcyNjMyNTQ0cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM3MjYzMjU0NHEBYS4yAAAAAAAAAFpYnkpft+q/oirgfjFIAcBWq0+kA879P6tEkeasSPM/fbMj3L3z8z+19f1ZzSLIP4O+GkItl/a/VDCEX9F02L+qHKaZ30rzP8v8YSx0Rra/uHDH/DTS6r/h5QRFNbADQEDjWZOTuQDAFizYn73GtT+Dp7PRJsLXP9Deg0hRYvo/IuMNP9qK4T/yJUpH81HAP2iAT+PjH/M/un4yIWlS/D+ZnXSCrGvgP+qGidOlWfu/2LaoPaCP6D9feq3O3yIDQJ26YQWaAvW/LWuvq39N6j8b8xzG9W3+v4+BMOM2e/W/mzaeTQhM+L8XlaRCPjLnPzeYEQxzTv+/87wL9hzF3j+nknOv1GLovzKz/Lx0Fdw/WhONYKSYBMDJOvkN7y7+v3Z1ieodw/4/ZwBn0nMp8b+W1WqCMtv2v1pkH4GqGAJAbQ/hMnbQ778DzYbpVAEGQCC7B7p1Gva/dY8uAQe1A8BPqvSaXMT7vyd/Dh0WMQPAEDSsB7hNAMA33W1a9GkAwJeI4JSp/QFAx7ytwx4xAcA="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzY5NzIzNTUycQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM2OTcyMzU1MnEBYS5kAAAAAAAAAPTAWCw0g82//RZngPqev78uJ4lOiy7BvzIrS4sPB72/W7Ypy9EiyT/tjOKxiJ3BP1cYlsAM4qc/X6L+tahUvD/CaoaPhwaXP3YRmjW9ULq/MCbO6fUKuT+mv3qjBJbTv66/Dk8SBZI/qSs7tewxwL/KPzFeUZKjP5tBoH3ZvMc/wjbnNM5urz/r8mgHRcfTP6WKToIUodA/A8kxrkQTw78MI0aIHyOQP3ji/+IB9ck/lTBsneLP1j8Dgpx+eFbCv1k75w4p8bq/WB+pn73esL89QZlp99aRv/65YDf6LOO/lgLXSTjxqz8WY8n0Sg+4P0HWsJpTJrY/Ccgd7gQ/tj/q2WmnZ0nVv7pfNRT3QLC/+x8HoRJBzj9ruvyh5vjBPxbu6mVmBMq/KewHb8KF1T+6C9bguKaePwel/Ew6+KG/lMtvEtU8t7+4O4g13Ba8v2fwBQx17Km/Fyl99b2Ax79p8UMIsgyrP3hyzaEwFrW/7trnn7UbwT8R2jOxkwi3P4fJ8iQtC8G/svw+yjHfzj+0MAvut+lzP4xFykmB04S/Ykl6qesPsr9MqhcyE2nCv2SSz8MXb7C/83eOBECbeL88OjFgcMG7v4Bdjy+h854/7NcEDNMFyz9OqOwhtka+v79G5tbe7cW//SKmtcEgor9Pgyp4xCnMP+YRn7VMvrK/o0laoe71zz86ZfqvvUK2v3yK5WfX57Q/S1v28JB4zj9nsfsGxr5tP0ra4LOO0qG/tOmTNK/Bkr9EdTeuuFfFv95bwOrWnta/4sCupE/jpL+SRg+M79G1vx3A7lZjB82/kVeNJ37vuT+k3312CIrGP9nqjPa9e7G/LhjP8NYIsz/lRBAHmkCVP27lYbXgIeG/aCT2M7lO0L/xMvzUHT3CP3ZVyOzCaLa/dK5dY1QzpL9J2tHoQsejv1de7PqajtK/BNLIU111tT+42Jzhxh/Iv3xy7SXlNaA/2CKsAc/Iur+xwTYGKnfFP6KBobHcM48/yUl9ujl307+EHx+XCQCxP6IJdA00jbE/BwJk4dPawr945OFZNCq+P2waYuhFvsc/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcyMTc1Nzc2cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM3MjE3NTc3NnEBYS4CAAAAAAAAAM2z7NM9fMY/XekZxLcWrL8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        0.4209479105661979,
                        -0.19483136794755074,
                        2.4969104547095817
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    0.4209479105661979,
                    -0.19483136794755074,
                    2.4969104547095817
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 20
    }
}