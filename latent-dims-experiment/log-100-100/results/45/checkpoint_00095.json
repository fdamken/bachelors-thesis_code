{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9363123297452558,
                            -0.026946287153843382,
                            -0.02191506298942211
                        ],
                        [
                            -0.13436500102394996,
                            0.9376373044184984,
                            -0.050981605903214225
                        ],
                        [
                            0.5001665228795791,
                            0.11993745940545064,
                            1.1008558625626927
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.9363123297452558,
                        -0.13436500102394996,
                        0.5001665228795791
                    ],
                    [
                        -0.026946287153843382,
                        0.9376373044184984,
                        0.11993745940545064
                    ],
                    [
                        -0.02191506298942211,
                        -0.050981605903214225,
                        1.1008558625626927
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.033475051451458564,
                    0.012694075987077055,
                    0.0003416254406724665
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.00023352658258227166,
                    0.00011220082226367367
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.0011452386496166589,
                        0.00013038586585404494,
                        8.983961839259536e-05
                    ],
                    [
                        0.00013038586585404494,
                        0.0003126610945741598,
                        2.083018042436935e-05
                    ],
                    [
                        8.983961839259536e-05,
                        2.083018042436935e-05,
                        0.00011779597122174579
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcxMzc3ODg4cQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM3MTM3Nzg4OHEBYS6WAAAAAAAAALvcfaqPU9i/HfH9nuLr2L/Mv+DXMxzlP5hDgSRduA3A6e44cEIY7z+0qK5vCikRwMPAtIWs8PE/42Q1gcAwwz/R3D42c3jhv4U3w4ISV9S/LRoII/dG3z8Udbh5GKnoP1vwXqmFcvw/23z1jDhVEMD0domvzN8LQJW3x6sHz9O/+xAWZ1bs5r/rgvWpfFvaP4CMHQe07NA/7+jbNOCexj+3QpSRVkv+v9I6fOQV87A/ytNZpWDU4L80J5HVCSrxv4oE2DRzw5Q/CFRopX1WBcBffc6maJnVv7v5lV0K/OG/aHy7u8PJ1r9llQXOrf/kvybAZaouos6/V3A8PZjs2b/d6w+QO4gCwMc/WPvobsu/MuEUQHx2qb/tKk4KD4DgPwPLpEAf+fS/cwX2JcO/EkAMbaNXxcwNwBjRp+m9j9W/o3vqptmw/D/2nawvsmL/v831BUTEM8C/pSuS2BIqtL9/tG1PaU3+PzX4io5JygtAwQ46mgePEMArqMnsgb0NQAA62XVf44S//95IeKczzD+iCD2D41sAQKfW1rmOoL2/A1VjEK1g+L8Nvj1smujXP33kJ8eBidg/ZS2fmpMg5j8b5GO2pyWlP9OThiTe282/ecyG2Q6B3D/jvVkgRxS/P7DSlqYC0NI/jzpyrNnn8D8D1grQq1P+P9fe9Rqfr8E/k8mybtLHwL+16SavfVftv004AnYJ7ME/K4iEsVnF5z/rKbDI3ILqP00wtVhQmbG/IceTMiTkBcCu0ssdUjzTvz71gncjAtO/5RdowyM4BcBTsLQVdO7dP0jjhMBtHdG/PbNM44sd479eKNoDb56yP8tTYFw3EM6/aiw3ZSlF4r/S8JClIBYAQKRr81pVEvW/Qi8Sy0t2B0Ctzsn097oOwAJ1uiKHDNQ/GerTREd91D9GkThm2Hn+v9TrPJK5N+I/mRu8krj48j+/o54jQ2ntv/Tom7AcJdQ/S077ej/f1D82Sr0BcVfsv3M5VDWDisI/3cnK8nkp6T+0Z41WIzXrP5ViauEx+6a/mNm2y10s5r/3u8gXXH3yv3fKRmUeHuI/rtuGg4pQ0z/vTjo/7LvrvyjHOrYvX7k/hx9HArDsyj/VMYR0TRL6v/qv8D4+874/3ykMX4yp4L87dzcpPdj1v1HiCBg/eL2/IyvYosH74T/r2t6A4mbtPzTp9PjorsG/aTpOD+Gy87/0vdrXPfvgv7756M0Iuq0/eY1U6NDMuT85z469IQv/P26JVx0Xw96/8sqgp7Lt2T98AMNtsdXmP4ci/xfpfN6/ILIN0j82+b/1GBk5spTtP/PqtTLiXcy/qbsE7yNEhj8A8+hylxXiP8EyFmqgHgfAukjr1TmZEEAELeCFQ74QwD54idVb1w/AsSLdjiR85T8/mnRGjwcRwH7Nt1tusLc/WyxwTSrL4b/1fgfOdzL4v+8DcOCIf98/0ewRoH8y0L8TreYKEbDev49+jD4eAtA/jAaGbjDf1j9i4iPBJHzkv335QwYgIsc/j1wICBYZzj/B+hd+Kif6vzQ5YUVSOMq/g86fsM2Uwj86zWTJTFTwP65JWfhr1ro/oembL/rU57+egjgGVRfnvw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzYyNTY0Mzg0cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM2MjU2NDM4NHEBYS4yAAAAAAAAAHrF2iq2CMW/WYiO2WIzDsDwANbYapz9Pxlnqv7QaAFAls1mjY52EkCAL0Cj2OLiv8f0VHNaKfu/kBAUY5IU9b+vvRgNzYvMv8K0kzRB1fq/MfgGR27w579dsopyRK4IQJN4HXpJuQ/AWuUntuV++79SSeIXk3LjP4WOrcVGqhJAdIQikJkQ4j8VSaBESynNv0IaAoG5GOs/gubXlR12BEB3etQez4fwPzKaxkpg8wPAKQId6Sj42D8etC0N0qbvP1IwlsJvlf2/JLTHRqWc8z+BSCGnx0Hyv513LSPCPxHAZCWvbl0nAMBu3zLc20nXPyJf+D3ZlQLAmUiGd74ewD9Xq0pipcvZv1rbXSBPgMU/CVpGUlroBsAMf59We/0EwP6BASI50ARAMWsDOgo387/YNMyi4dj5v1pWQV3cmQdAcjTpP7wRAcB2mnkoGGkKQHpRQEc/KwvAT7CM9fcEEcDzXlGkp0sAwArvpH3ueArAo+gcACr9BMA2cy6cd7UCwKOvXj8uAAdAq6q5/zsdBcA="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzczMzA1NTY4cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM3MzMwNTU2OHEBYS5kAAAAAAAAAF1JEhBIMs6/JGF1ITuYwb9TpqB377jAv6gpwanxKcq/ayd1HDvhyj+9hYM4ziF1P6mRux+yB74/rV/Urj8Dwj+WolRRHOrBP+PdyeQyiMO/XeSo9cyUs78eIN/GEMidv7+UF7PGgLc/N95JCMgJxr8NmMrVabqFPwRhP6Jdhck/eUQr6O8YqD+VZBeE8CHXP5wCA6Z0k8Q/8fG5xS6lyb/TEU8JTcXEP7sBAPG+P2U/RC00cfuxrT9vqy8Jb3bFv9k6gVeorqW/vmTUd+4yl79YANaIDCeevxrQz8C1D+O/xFf17tMlsz+st8GlZvu4PzZhAuI1hkm/UOm5hBPx4T/txzOxtRfCv2gfAGrGqrG/aYM08JNvoD8TIyQKOSrMPzORMcJF4ca/74GY/UGvzz8BfECn6/muP4X4pwJ6Irm/0aKEgjfhQr9Hk/NwymuNvypRF+aph7C/ST5h1ntJyb9gSQXzWcjGP/N9nY4V4nE/eODowZZK3T+0tLDxlPCkv++xszstSIM/3CfdRaE40T/8F97KLvazv07aLFVz3ZY/FAA/E4Jhrb/7xA+4AIXTv4lk7SB6vri/MD5OJ9NoIL+ydCtLvAvNvx/sSKoHEnk/W6+T4yWtvz8LzKb14+qsv/TKkBJE17G/t3rrTCs7dz8UC6GFAlvYP3RA99Esqra/5R6qZ7pDqD/iMtnfFJS+v20LLqHNkaE/eod9egqJuD8zpsIVtmNyP9rs50u6Mry/i6KrRslImr8UcWsXPoObv5TMduUvAIu/2ZjBZ7v7wb/u3wWH9TS0v5fGarkOqXY/4PMEf5ACsz9mbIxbYe3IP1XwOLqYJLm/xgZpx6mDrr9enZMh5zFVv2AX7uusEsq/46VxR9QA1L8aCOxzDTzCP4uQ43273c+/jwohlCsFx78LJGnjSAJ4P+JjdHUqZMu//XH+suAWpD+bQe8s/lzTv/VgCJUv3HU/AgxCU3LVaj9HUn4T7Z/JPyKx0imRcKg/focnCFPE0b8qWSs1km7FPyIGyleb6c6/5VMpcVUl1r+MJbpLKKuPP8bTQgWqpsA/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcxNTM2NzM2cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM3MTUzNjczNnEBYS4CAAAAAAAAALapsrX7RMg/Pzgx4Chdtr8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": "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"
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.36071442983203306,
                        -0.15206015710799262,
                        2.5348624459694165
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    -0.36071442983203306,
                    -0.15206015710799262,
                    2.5348624459694165
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 95
    }
}