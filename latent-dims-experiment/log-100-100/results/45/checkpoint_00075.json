{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9194431732415055,
                            -0.011206632673875087,
                            -0.021745887304193332
                        ],
                        [
                            -0.15332532367984322,
                            0.9754189743132681,
                            -0.045864586567434654
                        ],
                        [
                            0.5281340835979256,
                            0.023224718164994457,
                            1.0844796759716795
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.9194431732415055,
                        -0.15332532367984322,
                        0.5281340835979256
                    ],
                    [
                        -0.011206632673875087,
                        0.9754189743132681,
                        0.023224718164994457
                    ],
                    [
                        -0.021745887304193332,
                        -0.045864586567434654,
                        1.0844796759716795
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.050111287841312066,
                    0.027856163886715288,
                    0.0022448476044650205
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.0006250595846831856,
                    0.0006427393064670355
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.001766531465438509,
                        -0.00023553948702027816,
                        4.292202684674784e-05
                    ],
                    [
                        -0.00023553948702027816,
                        0.0012012957839740573,
                        0.0001227925700375554
                    ],
                    [
                        4.292202684674784e-05,
                        0.0001227925700375554,
                        0.00020655348746867475
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcxMDk1OTA0cQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM3MTA5NTkwNHEBYS6WAAAAAAAAAFE12kBT69O/c/o3vCW+zL8loLL+wSXoP3+AMSnFwQ3AwhM21aP07j81A48LfwMRwIwK+A/Gq+Q/V5xNo//Q5L8fPb+yvXjiv/mwg2JkqdW/zM+b1oo51D8VGSz2qmjmPwV2ZlS8pPw/R1rChxNMEMD5nEDikDoLQN3oHbz3V9O/4oBVmkfz6L+mLPWWJlXSv2j8yNv59c0/oV1XNEWsxD8IXy6KPsP7v7dvZWGv6L0/Qwg5m2Hr17/JazUQB9Hov435EV3KvLA/1lEHCjJa9L9VLj5Crr3Qv64OShtbHu6/PBSYFQzOwr+xbP3c56Hbv1zu+77gVs2/ftVQGkPg1b9E7LIHCbgCwJJMDiDpsMu/le5LxQ6Jt7/uiEDbbj7hPyHNKVLQhPW/v8xI51itEkDJ/MN+H5IMwCj5NzgaJsM/Y0vuuHo8AEAcrw6j2wf4v5w0pUTTZ76/QondeACRnL8UGBwsScv8Pw+j0/4M3QtAXUlEaM2HEMB2Idto8joNQINl9LPJ4Kc/YTQmd+zPzT9N0EZ+aPj7P++YZ7W9HrO/LHyr9/mc8b/VbCVfZmXTP8uByBGbx9M/iTQyPP9M4z9cjn50IqGzv5NPsW/cisC/iKaOOZq3zz/bSC+2JRySP4asKYmVFtM/XkrNZ2H18D8ozncmWXT5P9v+DfHWGr4/a+8OdclXx79lfid3fEzqv49spCUDSs0/B7jVOIe55D9pNCKwcxntP+MfeCvkj5g/FAW/CmCy+r8jlGupvz7Gv6n4bfIoYdG/nD3PjNj6A8DhMEOA6RjkP6/th2hMO9O/RanOwRVC4r+bIFNe/fbSvxB0Y55Q69G/SWP9Cr1v5b8UkkqSEmr/P/ftaVWnQvW/6h8vaItkB0DdGfdJpxUOwHJLlxmu5Ng/CAN4fQUe1T8WBonlnjP7v1UgQ8Q7ruA/JWTatdvt8j8BwuY8PFLjv3Ol3LNNudQ/A/cD1sNn3D/lqGihB5XNvyH9Sm0OX8M/DuVnqLdh5j/JEuOYkMzmPxuF1Ym95py/5b5SEt3j4L9hXU/IJT/wv0eBJDionek/+w8Su/zG1j8o6swsygbqv4K80iromLk/KkXpjPTRzD/mfi1Df97zvwW5OnDL1ro/SJHEBvy03b+OSXmh/brwv9bOO7j5Dba/zfucOZSi1z9ImW/UdF3kPw0xpU0zIce/YD+ezWfk8L+eGJf0r5SZv/wFaosmOLs/WGHXClAWzD9Hwxc0CDH6P8crVAbBfNq/MxDrvbR0wD8Dsg/HOUTfP7+LVZpUn+C/qnn2f/ip+b9CqYzZXMrdP6/3TheUa8W/4wVkdo50jD8oeoaJDTzkP5zIM2d1NgfAnUAVNaCREEBgM5f8tHEQwJt2gA8H4g/AxqwPJ61V5T/iUV6JOd4QwCQGnOG+Abc/UqMKL+Y937+ou2BTwnvyv7ZougLCHuY/8OMJPjldv7+R594ahI7cv61+nsKAWsk/wqUkEZxJ1T/f7QHDCS3Zvxi1Pc8WlMY/lTOIGMlq0D8fM5rLtJ36v7H/i5GkjMO/Cl3RWlibwD+h7+6l+ifxPwA413B2sME/kM+WsV3P2r9ZKxOJlhTdvw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzc1ODQ3OTY4cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM3NTg0Nzk2OHEBYS4yAAAAAAAAALAiFwYh5di/D01Y85wUDsANxgeFYzD9PwvKZIjr1QBAqxzUV8VSEkA+m0CnVbjivyhnQrU10Pq/Js9qA/b99L9EM8z+fyDEv/BbzbPadPu/UecsIa8X6b9JtrLSyYcIQPzvXR5cGg/Ag628odaH9L+rWewwPAbiP5gWrStrjhJAxgNdchff4T+SCNM4cALVv3le7zZBlO0/t21SRo0zA0AnFfGJ1v7wPxbWsP5vbwPAz6qoNpzw4D9iqME89/LxPznFH3wHJfu/ZY7Sk7re8T8AXwdZkvD0v7rn2iZuHBHALW98YLJv/r9uhORnbQHXP8I0uq7J3QLAhlHmKkdt0D+hZwYaj2nkv3ni7j9A6ss/n7EgmlhHB8Dr2jMXU9wEwK6nq4QDVQVAj0FxYzRM87+EPbqEkkD7vygdhh4aEAZAvFei6tWNAcB+a17rrkoKQBE9cQIL6QrA3pRJZ/PzEMDforghmkkAwFnPm4JcugnA/AjgGGZiBMAnH+nCgeECwHlPfHnc7wZAimba/C1DBcA="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzc2MTY1NTM2cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM3NjE2NTUzNnEBYS5kAAAAAAAAAOHemj2/us6/ZYIYePeHwb/xUDklLtHAv0y5OrJh7si/dkgYc/fQyj961Q1LtYSdv9qV65BNH5I/Enr2wxyiwz9uAZqOp4y9P5nxF202ScS/bAyUJ/fSs79DHJ+OYo7CvyxU0QVOobc/W5EPpwr/xb8MpY69trWiP0+C4vgZdck/dEfOrI+SnD+kk4+fRUPWP8Jltk80Yr0/YA4+rm/wyL+ANZc64Mm4P7iUgvauprw/wVLzA9DUnT90CGLn+rPJv0c4mRXDuqy//2mR/vdpsL8GbHDLINKRP4GYeNakC+O/ko0inkLktz8gtsmSp2SjP6hv9fjkV6U/NHuf8PvV0D9EnNWusBPUv+R5XXb/L7G/MOPGaWtGlD8l7EMQwM/FP07iT0wNJM6/XU0xKnPfzD+xgiBDWpO5P7WlqBUt8La/AIj9SWYNpb9ksaR6A5m9v7+QXZMiZ7C/7l8ELTg5yb9EU8wMbqKyPzemKIjHPZW/L5zFbfYRwz/kJpw4LBKyv29ewPB9xaG/Ms3acVl80T99MMa7smu3v1Yb24GhRKE/53Hq27yusb9V4Brih17Lv9O7jwxuqbu/Mf9Z/KNrjD/f1qr+pPzEv9CK73NBTak/BQ57oaw+xj+rZe7xhIGkv7/Ek778nri/f/DiieI0qD+6oImAvxXZP3u01C9W17O/0vKmltRyoj/cxL1lhL/AvyzKNXIzJZc/JW9U4lDRxj8mY9k1PsiUP6Q82ZplZLS/N73sMMt9mz+rCM7DfmTHv2F/gygSPFI/GVbI239Yur/kvWSWdE6sv/hnMlvVgJI/7wMek/e1tD82l11R22LKPyS5qrYpXsC/Bev7bohHob9EyLTXq8efvx7AnVMYBc6/qACYU4pz07/0FjzdBsHAPyTQTgLdKM+/rb4O83HZwb8Ue7jL6O2Hv4cxDnigc8u/Y2PRw2FilT/ipNuEM/zIv4h790U7nqI/hbOS7WvJoz+EfU8JZxXLP2FdFwF5Rq4/OEvfNzu80r9Sa6NAdUbEP8Oi7S/ngMK/8J2WHXXl178n0V+jg+qsPwEwRNUYY8s/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcyMTkxMzI4cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM3MjE5MTMyOHEBYS4CAAAAAAAAAPzFVQy4NMg/C4jTyxxIub8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.3247410251140388,
                        -0.2581503103100407,
                        2.5326984805075687
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    -0.3247410251140388,
                    -0.2581503103100407,
                    2.5326984805075687
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 75
    }
}