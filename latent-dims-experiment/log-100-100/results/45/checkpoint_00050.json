{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9848617531970647,
                            -0.045275197698026425,
                            -0.024183989540059087
                        ],
                        [
                            0.0017665041917001825,
                            0.933085072724904,
                            -0.03572859991953348
                        ],
                        [
                            0.3014118991058167,
                            0.11485292684451683,
                            1.0690725460297883
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.9848617531970647,
                        0.0017665041917001825,
                        0.3014118991058167
                    ],
                    [
                        -0.045275197698026425,
                        0.933085072724904,
                        0.11485292684451683
                    ],
                    [
                        -0.024183989540059087,
                        -0.03572859991953348,
                        1.0690725460297883
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.0773511801140368,
                    0.05099464649379343,
                    0.010057799999117151
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.0004396261160982249,
                    0.000503533887164906
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.0055753028959123424,
                        -0.00026700478502796575,
                        -0.00040071355411606946
                    ],
                    [
                        -0.00026700478502796575,
                        0.005631263161669259,
                        0.00011672907386128806
                    ],
                    [
                        -0.00040071355411606946,
                        0.00011672907386128806,
                        0.000917190824355707
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzczNzA5NDcycQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM3MzcwOTQ3MnEBYS6WAAAAAAAAAELemwSgr9K/F4NngnVFxD8TEhVsH+rnPyxtSNH7Og7Aa23y2W6h7D/+zIQWyYUNwAT5fFZHhe8/FWApMpkq5z/deg/GLVnmv1j+G1vY7tC/tVM6Erq+rD/PJSV+4gvjP/+m1DQkOwVAZJnB0KAxAsD+XUKaJnf3P/SjODFKM8m/gcltvmIn57+hh7/0eIKwP07hpPs5Usc/4VnjCApXwT+lRP9LaMv2v9j0pyFiTMc/vx5m2dQwzL/YkrIJR0zgv17WNPtO77i/quZunVP07r//1y1MtHiDv3O/BZvtdOq/Kh5BOvFU7L+MM/2Lm33LP1pJrZzj6Mm/fm922Zb7078DfjIPaR73v4d1/6QVW8W/eupdQ1dGmr+9KLy7iljUP4rI9U0NkNC/+IysvIy7BEDX69juC9sBwAYB1HSQ1aI/DuwhRzNP4j8+ALH3BpLvvx3eJbvwsb6/cKRKT/1OLz9ePHr8eX32P3Ic2HVtSRFAfZbwAM9gA8D0MmYYgDoCQFinvsBAEbU/oAJcKyoD0z+/nuQ9DxT1P/tQ9xF1ZaC/MNlK7jsD4r+suO3PV+ngP/B3DbHBBtI/XzciL58j2j9LcYrflv7PvyFJ9Wgc47m/wP464fsmxz9HWbCEjMG1P6OoyXBlYtA/eJFwoPH+8D9qkRlJgcj5P/+uFfAkt7g/GcXndJujxr/Rhuxmahviv9QvDAdausg/4+VmIkAE4z/ofXY3vVfrP+9YbB8kN9C/MpnU1OE89L9R+A5+R4rrP7YFF0J6UdK/HhMijFKmA8C6bjj3F8viP0oV8x+yJtO/GC45BU7Y378w6X5/ubzRvz5cPM2DI9i/bpj4KHVJ5b9wRMmqMWj5P+jSXIXY7OG/d6XxuPxW+T/EvFOOuLkAwGBTsUrmfNc/7gUi2K9Q2j8MBw2Qi2T2vy4Xu7dh/eU/unf+A5Y67z9M2UFgcFXIPxUUVJErJ9M/IWyyACeH2T9kxmLV08XWv3uA7dvb18U/dpJ50EhW4z9WA+hWnwvYPygdPt4QdYA/CzN2yz8N2L+q36z7JIXuv7rgdP5G2fE/5886xgWz7j+Ts0mCLY7Zv+pujc0LM8E/dmpMJmjFxD9wvJiXi0LLvwQHe5UglcE/dNwSuDM607/MNeWbF6zov1dLPGbkiLi/k3yXRy4/0T8S42gneWvYP0dfoijaj9K/AJV1IZLn6r81gNQjbm3nPyae5tg1rLw/hD9Z+HVAyT+m+KwH2Ob1P6cVrbYezNm/BRMEhnBUsj+lfJcrXn3XP0WQwgT3Stm/OQnOb6T++r8StKZ80NzSP7TN8oVT78C/Ci261P2Rjb/bIYYt//bZP6dwgMphEwrAj+Towl+NC0Dze88yrJwIwL/onK9JLhDAPfPIqxQE4z94y05dDTUNwGiD2IIP9b4/8hvAThx00b+0bxPj0bfpv9zby5oWyuQ/OAVHl1g9vb9rN/76DRXUvwtH/GIA6Mc/aH5L5Tdh0z92kkUO4sFxP1XSocHa+sA/GEESICJcwz/1FEQnjgrwv3iMU5AqVLe/6+IOhyIIwj9qqrBzqzHnP7tbgqmUor0/4qPkHUhMz79kU/hkWHXRvw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzY5OTY4ODAwcQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM2OTk2ODgwMHEBYS4yAAAAAAAAALfhGJacCN6/Q/Pq1LElDMDDsI2J8ZD8P0scy/VAiQBAQN+y8PXNB0D0nZQvkUnfv4DZr/lq+Pq/KU6EGlrG8b9Yp8azhHbaP1MVNq7bwdO/BFNMPiiX8L+x+flaQH0HQIBOmOqePgfANYb/457fkj+kIQ9EziTgP6OKDLBQrAxADvjFIuQC4D9cpcpCMAPOv3afuFeDp/I/xkQw8tV9AUC2ECHpsZTxP/qidWjFrQLAGGOU7K0t5D8kHGxj62oCQNWgMCFJbP+/iqvpUn0k7j/ZqHqESkf3v4fqAXQj9gTAbFZyLj6A/b9Ndbs3An7kPyhqAX4UDwLAxCqyLDxY2T9HAC0+tzjnv4tzmndfjLU/f+MLr04fB8CUFCJ4oA0EwKIYhE0/VwRAxaCcSOpi9L+tVMxsR6P6v3cUNte1SQZARY6BAjOw+b++HmfAdgsJQMANSp5ORAXASgDJeAz6D8DvnCBJYa8AwK5opHK0ewfAYiEe5JrOAsCfGx06TBIDwCj2goqpRQZAGntmzTpABcA="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcyODA4Mjg4cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM3MjgwODI4OHEBYS5kAAAAAAAAAM/XF2syT82/n+Gm/Hupv7//uT8Cm0bBv5qUCeVzBMW/OmXo/b0dyT+xBc5/PPHCP/rqqkj7oKQ/+kDiQWDrwD9kSWiXuZu2PztE+es9zcW/ScZMjzgFqb8CJSo4KPvSv2nzG/bAB7s/w998dXtNxL+fPp67ebJzPzUXIX/gwcc/pO1b9kyrdD+VYfHA13bTP7JFXbic4cU/j+Jc4ydwyb8cSlSsruq7P+8A+OTAyMc/0szX82RLyD8Ymw97Ro7Rv709ZvJHB7y/h8Lsvqqcvb9f0BoPTgehv7TzHnjWnuK/Vt5PH5DkqD/OdQvkTrewPw9zARyrHro/Di3cy4Hcwz9LDnhkll7Wv4vzZHqVirC/uWN9FylLsD8m01SfZSLDP5yexl8ZNNC/ILnvRjIZ0j9MBW0lkkKnPxHEGpXvdbG/mmz024ntob9TxT7JyOOovwhLqD9fAaq/WEs/s/6Fx7/1buSRCwR2PxUd1uXY2KS/r+E9Nqilwj+oiwT1kb2Yv42FwgBDu4w/VX2Z9dzA0T97LXbeZoCqv+HiTT9bdZM/OCoKeNVFtr+TTiTGx8rJv0Ay3h505Le/UT47Y4Kojb+dOuS5cgfEv0pEBdSx/6w/E4GnpWZ7yz+rYrBNJT6mv5FuKwdUmMC/bBdnlPsfmz+/G3sEgSTYP+ugH4kfs7e/zP+Cuv8zwT8T7GjaDrq9v8+JuDa9SZE/VX9vwP3Jyz8wsxeUz52RP3RbERUcMK+/tyc5NHxQmD8XxekLIbPLvwKbZeiC3ae/PEuIdw8TtL+FVlpLVIO7vwXP35CNtqO/1ErG7KIKqz+rHklZXoDIP8jb4wZQTqe/lZV1pJCcoj9zMcxpNfaiv+u0z+BcQdq/mgRDXU6/zr+es2fMAJzAP8gbld9TU9G/56/4sHTxub90+MPdZyqrv3ETCD2LJ9e/0VR0BUxwoT9ZYUGfCXbDv0w3XoeC27k/F3vd3KknuD+1BMIQ6jLJPwsk4x6FvKY/tFqYnlA31L9Sy0a+P4q8PzU9qSWgl7S/3FYzhBfB0794+uCBKp/MP/LsoZeftso/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzgxODY2OTc2cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM4MTg2Njk3NnEBYS4CAAAAAAAAAB/JkJJ+gcY/v1252iKDtb8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.02743141651994918,
                        -0.36415093137363386,
                        2.57126808061958
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    -0.02743141651994918,
                    -0.36415093137363386,
                    2.57126808061958
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 50
    }
}