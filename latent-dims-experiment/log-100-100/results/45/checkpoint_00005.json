{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            1.0070192288079196,
                            -0.010293834562202871,
                            -0.004864168222814162
                        ],
                        [
                            -0.007410971021535909,
                            0.9809459435520452,
                            -0.007269194237139329
                        ],
                        [
                            0.055469392477827575,
                            0.013309148529143947,
                            1.0013556753610555
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        1.0070192288079196,
                        -0.007410971021535909,
                        0.055469392477827575
                    ],
                    [
                        -0.010293834562202871,
                        0.9809459435520452,
                        0.013309148529143947
                    ],
                    [
                        -0.004864168222814162,
                        -0.007269194237139329,
                        1.0013556753610555
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    1.9263102931226184,
                    1.3479315114089985,
                    1.1043691069267052
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.04847126227048466,
                    0.07589933712925989
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.5411883588444999,
                        0.0005131051653746166,
                        -0.1576801720877552
                    ],
                    [
                        0.0005131051653746166,
                        0.7113132104598237,
                        -0.03847125208216262
                    ],
                    [
                        -0.1576801720877552,
                        -0.03847125208216262,
                        0.4605235144409541
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcwNDI5NzkycQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM3MDQyOTc5MnEBYS6WAAAAAAAAAFyZ65wdTOO/H6DH3nXE3b8i8Q6BJAvZv4SH8p6JUee/tkcoRmmg3b+nxhLtkvTuv0izALgmp+Y/NVGwD4Bqzz9Vh+PzSH7hv+ZHlK3+Etu/qirjrFQD37+2pNd16ivOP7/gJAAg89w/dqxoWvUoyz+quU6emCrKv4dKQa2DxKe//EVET2Lm07+I7xv4KBrYPwZI0wvuT8A/OPuog5xAxT/nNSWq5ubkv4Y/8m8KibA/6VqHfrwdnz8a9uokBtCvv/c8WrWnU8m/r+7BD7N64b+CJdAr+rvuPxZiQlHbJta/xGPgXUdD1r/AEZkXGCSiP5oNCqaWXsu/gGRuJHCq1r9ROXaywWDivxDDrRsHgrq/2gh+6k2Kqz9Z2BvfarKAP6NryMrd0dI/PJbmBu+pxT8Tno1BCjLrvw0jZ01i07g/ENVTkTmq2T/VB+PY27nhv9eJHhUdNrW/Ux8iBSyutL+8BxUYSH3pP5aQ7S2Ivvk/EM/OgBEX5T+vnH1msaLxPyjLNrXxWHq/QRzDUCaW2z9LGvtmI3jXPzoxqKoM5L6/C6CWsrPZ179QzQS5fznXP13m4inlbcU/aPXPhirZ0j/UoNbUDobDPzV3RMyejKu/hiNt6YCVk79GKnxsB9Oev/lcZaNvbNC/FeH5pn6T6D/MJiUccbnqP7qMRe+tYqo/JdGNEeACub8oLby7QDXRv3UMtY+eY8M/WbzljONd3z8GtL7DGGjaP700naIBhsa/gaG9jb1zzr+2teyXL7fkP5gVkmppEpw/vTycVU+V278ww5gSTw7xP3O0j55Fv86/UPMezPFX2797lVCp30TMPznbU14Zye+/LMbksr+90b+UHe3Bc67ZP4AdAV/s76g/RP2tLq6PvD91/RPgouXkv0nG9dwGltA/0VdWUxwA4j+X0tYX3wfuv8F2GhOveOM/kH9oh5KV4L8VA9z1gR/Qv28BcEX1rs0/CrNu/oXy1D/boAQ2IG3iv+tNYfWPGb0/C3iklGMr1z9CM4pN9JijP5W3RDdXPaU/8WYUokpcir+1y9TsKPPmvxdXXzQHFeg/rs0SFH+t6T/AxTnUYs3mP8g9Fl4Eo7M/1yjTQYNzUr9C+tvt/zm7vy5Kog/laLQ/1blQvzCltr+mnYSRPM3av90BCXcr37u/oUVgtQrQpD9nHYkVKq2kP7LdbUObF9O/oe9HbgD/5b9iJ5rUDwzPv1FpF/PFNcG/cADEZhTk5z8s4Z0i2JnvPy6lI+znkM6/yJvzgomHx7+AQqIz/eTRP1dtyVwlKsI/GpD5hwor+b8qxjN5i/vIPw3IzEVyVcC/85TYZcXItL+9AI6Z6kCHP+r04f1r4qo/nYEtNHp13j9K44frwIrtv/ok0mLXp/2/ScT+1ytN67/oW8PYT072v7qG6zsDJrk/1NrTl0MfsD81HfBe0y/ivykEPctmVso/FmMyYVQ44L/9AgkgCr/Kv4CuzULgzsA/actMNO7CrD95c06/bazev9Nga+7CwLY/FRILfSq0db/2/xJ7wDvbv6Pn4tU0ma+/2oUMV0g8sz9b7Xi5FR/NP0DAAaQAAa8/VGrvbiiLtL8ZuC/wK+SYPw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMDg4NzU4NDMycQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTA4ODc1ODQzMnEBYS4yAAAAAAAAAJVbCJIP9/S/1BOQk43667/4V/bhL9HcP+RPFY+k9a4/BZbKK2rd7j/8Xp7jrf2NPxzQLeWRU++/26BUcLF6sr+FQLmUKw70Pyg6fFaz7NS/3/TTFFbP5b+igQo3EP3+P0jIRUIRwfu/WKdDJcyknL+qlLC0bgraP+R/jsm5AgBA/1faoB/Z5z8ulQWqtCfaP4x3IQ0X3fI/ZaXCehzB9z9la314nN3mPz17MGcxgvG/6csP47ET5D+Bj7kcJZr7P/er1eP6quK/+AYD+Glz5T/vO6Z/S/vnv7ThsHNBb/O/5ehcABse8b/57cr65g2vPxeCrSw21/G/NgU5wqDN5D/7iuWTOrXiv0u3v+kfmvk/IeQiGRWZAMDyJ+Eo7Czyvzt4Kl74g/M/7M80MhtT3L+5/X1tZRngv1552zr46/g/hbpYd9dO4L96rBLXzpj/P+N3kamcG9e/6dJaQzh//r9IiqWM1dH2v9ekwot7JPu/Te1WmN2S9r/AGwZCfNb5v+Lnf1ROJfw/5w6aIFAb9L8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzczMzAzMjY0cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM3MzMwMzI2NHEBYS5kAAAAAAAAAJ4ncmbbiNG/xjfyfPRSsL964BouArbAv9I22TTzJMG/oFr1MlTeyD8GAkPqhTbFPxTRwuprPMY/U4uKX6qQxT8hYYehNfrCv2Gs+IlmXLy/LwO8UXCksD/XwOxSZtDRv07uJrc0Epi/UHFLsoH1x788FiSXyhPBP/qvsJGWB8c/ee5c7BBBoz/gGbjR23bVP7oFU3yyA9I/HS7GdCcZyL93NdGXLHiqP6l39HNdvsg/RdhQMW4Q1T+LSE/xSp3MvxySNphdPrC/zYvXBlyet7+Hg3+ga8U5vxxn8jqBYOO/pahGZWgwxz8iybfRB2ywP2Z+j8ZM78E/IuzYfY4An7/YveX8feDXv1fzyQc2lK0/yMbgH7sGzj+za9QTY/i8P7jm74a1Ica/DVGbG6mk2z/zeu/rSNq3Py4CDIbBQZo/NV+vbAizt79alIRQfOynvz9iVoiFd42/OyhvVMMKyL8BtJZlWiymP8hH4lej0qy/L1flHOOcyD8PFIELtKe+P3boZTOVE76/YSdOik2VyD9HGATxTyiXv0fb0kNRyKG/UhqTtsQ8rb/yFtztJjzGv6kELs+m3rG/mUQikmPDlL+DEv6Ftf/Jv3E+wpXp+KU/AlwadaHwOL+Cy59ZLMnEv8llB40MXNe/Dv/WnWfD977EsF4DVizHP9zdEcNGhJa/0Ergwilq0D8MuuiBvC22v3sE2hOpusA/gLkbpEEa0j+eNtL8Jb7Dv2g2c6LkXb+/CwDy+MyNg7/T6JJiEJHEv6I2Ypjwkta/nTbmSTdcrb+Vy/8YQ8C1v9+pHO3swIy/bLPD3oGotj9ysSzvWeiyP/N99Zuzc5o//xrg+kJ7uT8cwCcAcirAP+9pGncRZ+G/veABZ0pb0b+RZZaNnBm+P80jiThJwJm/kSYsBGZ/YT/zfvnwBTiYv92vyBC1xNO/n7USCIJmtD9dkcefhInHv/99lru+UJ4/6qqK5NRetr8qDTeA3wDRPz57fxun1JU/oeI1AolW1L8y3ULe56qtP7GoW9D4eMI//pNXgpGK0r+lI2hvSOG4P+wq5/YDCMY/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzczMjg2MzY4cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM3MzI4NjM2OHEBYS4CAAAAAAAAAMKLXCu8tcU/me295fIMrL8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        2.265943875186761,
                        0.823084694359598,
                        1.534911000224285
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    2.265943875186761,
                    0.823084694359598,
                    1.534911000224285
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 5
    }
}