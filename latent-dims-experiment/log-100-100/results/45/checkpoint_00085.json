{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9278881740887603,
                            -0.022064536038028836,
                            -0.022593596361773844
                        ],
                        [
                            -0.14659178289486494,
                            0.95041658838552,
                            -0.050790866661663776
                        ],
                        [
                            0.5246823579025307,
                            0.08651150064830371,
                            1.0973500275103685
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.9278881740887603,
                        -0.14659178289486494,
                        0.5246823579025307
                    ],
                    [
                        -0.022064536038028836,
                        0.95041658838552,
                        0.08651150064830371
                    ],
                    [
                        -0.022593596361773844,
                        -0.050790866661663776,
                        1.0973500275103685
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.03231320301591529,
                    0.017167287240398198,
                    0.0007001872268436451
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.00035524949283535534,
                    0.00020070449520790133
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.0015163278478267234,
                        -5.133616937055829e-05,
                        6.482587132694562e-05
                    ],
                    [
                        -5.133616937055829e-05,
                        0.0008858819263507581,
                        7.729856936466994e-05
                    ],
                    [
                        6.482587132694562e-05,
                        7.729856936466994e-05,
                        0.0001623338691718601
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcxOTQ3MjMycQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM3MTk0NzIzMnEBYS6WAAAAAAAAAKcBUTUhN9a//2gWC1cU1L80nvnyqv/jP2rLlKkVpg3AcQB+FaI07z/BGrNcAmERwFsk8qbM++k/1EJL+hoj3r+bBcMEvUbhv6WBnlgNSNa/jFI6X0Ol1j+dUy7/itzmP0UtVmRlM/w/cXi2bXVbEMCEPOJREYwMQHi8Kne2zM6/+iPtvTJi6r+A12a3h+3AP8khyZe9JNA/gUbeInHJxj/tsvvZXCT8vw9TRg11zrg/4zT0o2f4279hhj3LNEfsv5kFkCvl7LY/9exS4NlP/78vehEfBHLTv2rVqo2N/uO/cIp4KKps079VzZZHcjnnvxeUibxkpc2/PYZlUSNX2L9axFqGeKECwL4zPGNmYM2/12rm9vnptL820by0PsTiP2WvphXtqvS/fBsl1y3HEkAF1EKIGDMOwM8mBIUfc8a/I0lVUK5x+z9t22zXQ+X8v6u1ix/pVb+/AP+zaRioqL+VwK9DVvX9P19wR9ceqwtAltPCCI6VEMBR5j7SnHkOQPV8bq09Z3a/VwlQx/z9zz+dVAz2/gL+PzfCI1R0mra/tlUXruUW+b+KhMjO6WjTP4KDvqRw/NU/RlX18lsb5T+46+bR8oLDPwWqJnLy78i/AYEjKJaP0D8OzxvSPw+EPxUG2FpU4NM/kqE5pJHy8D/KsUT/1336PyAorEMWb78/FjEkQzkYxb8/jKoZQvrsvwPreSQMDsU/TCLzpKS55j/IpFrgzyHqP5fdegRkdpi/JtFVc3MLBcCP4oKzorbRv9/AuKrQ8dO/h4dABjGvBMC7k8Ss4+nhP4Pwb5xn38+//LKADn5G5L/UFPz5+EqSv+mINUbWNNG/JeGrldw05b+D4DqLJDr/P/jTJkaM4PS/FNpKMIl/B0AEm0OKUDwPwDn3TNfUUtY/efEd+RkL0z/yDVc30cj7v0Z1stkI9eA/urQvxQ1A8z+MyjPBbvvjv8NhiQAcLtQ/8HNzPO/N2D/ayg9M6+jbv8tqTv1PmMI/h2OlfbwA6D8rzsyeqX3pP48gklHhVKm/tl1jCEgn5L+SfUaQLJjwv5qhso3OsuY/bPu+X/BU2D9VXDTfDjTnv6BciRahSLY/TOSKJpGuyz8LNgZPWvb2v/sYMRt+JLw/Ru0GvfQk4L9IcoP9fazzvxzCtiBYaLu/LZdY+1yq3T8yoqXLvNroP7PK/HUkm8O/VZDUDRei8r/kAUic1H3Wv2mwTh2Y6bs/Wj1D/N7gyD9QN3OXxUP7P/sCQlH1Itu/hRU0cSCHxT/2JR6OUfLiP4K/65wNYdy/pptMcpnU+r9LWWn84czmP3Skc08EE8m/WZDEd+O+gj8ADJOWVFPmP3pBlmFzBgfA5Pt9BrueEEBUV0VDmgcRwAicVG8rxg/AsCgZ7ayW5T8lKnVPdDwRwPkpilMNubY/5YqVwxN54b8LXbt/IhH2v0X21VPU7uE/Kn2c5JGjw7/qqF1dVf/Vv7nNrwIPX80/3FSQU3dO1T8MDxuDrCvjv5hZ44VGO8c/pd+Exd190D/Nb5JKvTj5v60M1lT0DsW/IhtPgCVQwD+HpBr8eNrxPxwCzLe6HcI/XP0ex1Rt4r8LZGV4zXfhvw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzc1MTMxOTM2cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM3NTEzMTkzNnEBYS4yAAAAAAAAAMQgvdJJudG/FIFb/oVhDsB74P4S1MX9P+rLpCcKEAFAQS74/xebEkB4gZ+1AmHgv+Rxg+mAAvu/Xg2lOMke9b99wMbP+rPKv13owaG7Fvy/+DXnSGoD6L/GCoOuOYwIQMmB9Vqw5g/A8Gg4i1X++L/n36VRk4XiP0G3Xksk0hJAI8kV3BIR4T+aBc7LmbHTv1aAxWh6++s/eWT9lZLnA0Ajk/b9eNDwP/9V4btPrQPAWYPL3un+3D/lziGfvDjwP3+9nr/JCfy/rd/AssoY8z/q6A6I3s3zv98jRA7bWhHAXyp8pwnF/r9ksoTk0tvVP/6TqV5npwLAum8NZvKRxz8kual5/UXfv/KSJg0nONE/uU3iTBQjB8Bk/BIoZN0EwHdeAIjFJQVAdWOr4qhW879dHlS3GVL7v1iHdcluVQdAl5i3OIDUAMBd1AoJoXkKQBKO9z8TagvAthDytqkaEcDAbdDRBjoAwHIKP/8+BwnA37yingu8BMBTzQbtQ9UCwIIqazd+MAdAVENqJEBNBcA="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzczMzI4NTQ0cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM3MzMyODU0NHEBYS5kAAAAAAAAAJgoKJSrS86/4b/xLRSywb+CTg73BLHAv/52Rygfoci/OIbxKBT7yj/MSEqFnSB7v9OCbZumvaY/7X6obVcnwz+GOSrrE6HAP5iJC9afYcS/HPc/1XPutL/If1DTMTqYv2PYHpoUTbc/mNN9K6Ejxr/Stq8Ji4aWP+G/u642n8k/ghcxGEb7sD++qgJiU8LWPwof3OBqLMM/K/iGR8PFyL87k0lFwtXAP0nZx5B1qKQ/5WOU6Iu1oD8ltfXuUCjHv3/5a+UMt6i/pmBk6pmpaD8oswMstyugvxzo7gMsFuO/J0MTXiPNsz8D74+S+Qa0P8VosorgJ30/GKBfgQv02j/x0hoKP1fKv/o6xq7vGrG/IJIkIa8umD8E39mb/p7JP/ccHtWCmMm/dIc5CiDgzT+iQRwKZpO1P+XFm+uFyra/TdT7TBF1kb9iYSuW3lnGv5QNEP9bu7C/153d4lRjyb9TQYhwChjCPzov2DWf8ou/txt6h+2p1T+Rh29J4vypv/D/Qvgy7oW/eqEr2rJl0T8mUFZN3WOzv7mtcLXdt6A/EuEeYsvtsL9uSrKeIZbQv3SFWiYMY7u/YLJkhv8Gcz9fAvGjIRvIv1VUGbKLOKM/rdxn0Jn5wz/g2A8Q3q2lv9gG/BaO1rK/eDuEUp/Rlb9lU/wGJwTZP0ICpPGaBbS/OTjZ46mGnz/rKaNyU5zAv1qqKcvDYJk/Qw0KbJ/kxD89XgANE3mEPwDIKhUtq7W/FcJBznfcj78TFCIBJ/W/vyQ1DHjVB4+/dZ8d2YOuvr+AhBThVPWuvzKPrTEkW3E/r8QgOcNXtD8v/UJeqj/KP9g4qx/Mxry/ATz1zE0hsL9vD6x48sttP8KG7tot3sy/yIgvAkNK1L/ANHyKFBvBP0dh7H5mAc+/UjW/G31pxL9YnommS6abv+SKoF3DA8y/5u+oZcwzkT+JoiC131LNv4ke4g70qGI/KzHNoDNInT/b4jQWNvLKP9DyrDS1ua0/vcsOASNo0b/ELRA/XBfBP/TfajbGEsu/wj1+xVxo2b8KGNSXZrKzP8RKpvTZUsY/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzc3MzgyNjI0cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM3NzM4MjYyNHEBYS4CAAAAAAAAAPoIL8LUXsg/8Fee5boBub8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.35236619653594914,
                        -0.18130484568455238,
                        2.538616271777491
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    -0.35236619653594914,
                    -0.18130484568455238,
                    2.538616271777491
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 85
    }
}