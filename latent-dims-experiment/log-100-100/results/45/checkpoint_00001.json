{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            1.0101179801591167,
                            -0.008650388829658674,
                            -0.004053147938616471
                        ],
                        [
                            -0.0005489892163261925,
                            1.0001349787990963,
                            0.00016412071929457724
                        ],
                        [
                            0.04789437898896257,
                            -0.03961513740657699,
                            0.9797263250627786
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        1.0101179801591167,
                        -0.0005489892163261925,
                        0.04789437898896257
                    ],
                    [
                        -0.008650388829658674,
                        1.0001349787990963,
                        -0.03961513740657699
                    ],
                    [
                        -0.004053147938616471,
                        0.00016412071929457724,
                        0.9797263250627786
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    1.1985961672456147,
                    1.1322599250733674,
                    1.0052962636965643
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.3332240639763586,
                    0.2730726119058515
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.875618515061384,
                        0.06333704653946293,
                        0.03467863035428964
                    ],
                    [
                        0.06333704653946293,
                        0.9278383755480324,
                        0.03370831118168027
                    ],
                    [
                        0.03467863035428964,
                        0.03370831118168027,
                        0.7974763649332346
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzczMjkzMjgwcQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM3MzI5MzI4MHEBYS6WAAAAAAAAAP2ws/AO9ty/5wRtH8Ki4b+iwrMX+zniv3dawThNbsu/oOsc2FOqqb8Y7F+Pl4XhvySN690Qkds/KvvBVuHR4T/Q/wpqi0fovx5EXN/+K96/nPPIaMuC1r8Bfgt34kWwv+PstIw4q9w/DRQIP8z31z9yU6ENpYTKv+DfNHy+bbC/r0Tm6G8bz78gc354Cu3ZP66L9yqdBrY/zjXgOC8ZQD9jCcVU+Oniv8BjGt66ZaU/VjGzF81QRj8oqog5Wk61v/SEGuOhZt+/wp30YdQx3782H9IRe93hPwgwt71audi/Lmb7I/mA0r8d7EDR63HVv6XshCaeDce/X2YTu8M82r/aqcjhjpnZv5fKH8nwPLG/aWxzvb2Vkr8EUMmKNzOmP40nzdgke8s/Uk0tY1auo7/tRXvn0Rnhv0/JtNuBJL8/LRfZwSaN1j9GKY8Nr3Dgv4cXaZ1kesS//aECPXNUxL+cAYa6vKfkPzFjvQX9OuM/mz89dNqpyr/otz9CNNuVv4BYER6CyK4/eDT/daKyzj/HDk0tTK/KPwcRs+aIL8S/L/JAEvZ51r/a7mJt28q1PzL3dOokw70/VNuOp48V0j+KH2Un4m+yv9y0K5eADJy/qp7ts0KGlT8sU7pEaHqSv43Btw2sedC/jAbN/9Bc0j8zwA5dc/DnPyCM9OQOQqI/ciUlREHgRb+9WYWEOUSvv+1CdZKPDoS/sNp6VXIu4z8pi1REvfTAP+vovdfcasy/yZZrgfxCvr9EoxqP0LrjP5rAXYjVwJG/1ROA9K165r/jSGvVVrjRP6lDInlH+tq/F+apWG1Myb92ItBWq3TYP5FFth+g2eG/zYpi57hNur8Y7x7kkHazP99f0htE060/fO/Jcsmquj+ZSlD3u1Dhv1NkbKMZT+E/NTPPi+B33T/MOkgwV5PYv4dxwHe01bO/0onnOZTa3r9Ctyqrtzvfv+RQIuSmZ+A/cKWc7nip0D/UyfMIfbrbvwHZbRZBM7w/oUf0UFQC0T945JljnFazv+tUK7L7YpO/XS+ZOsSbkr//lNizjV/pv8sNNQMR09A/12EWqAwEPr99eXHtNFPZP/qjOjrQ0sM/cafYkhBevz9z7Kr4OcDBv9Q3NJu6rLk/wsQZWB08uL8Uyvb1MUzEvwcVSfBtI7I/HOUeTx7syD8fThyWFcCeP6aFeKbCudG/baw70DYg5L/x8Sa5yxbav9N/CgJiWti/Af9JTdcK2j/p0y1jU+TgP6SroVQ6ecu/G7mr7m+6yD+pfmXcryPcP3pTHe3Ox8M/9upR2YyB479HDnUqS0Piv0dQnd+3+re/emxjIZUBsT+dD3myn43TP7Hhkb0gR7I/UdSSabPz3D/Vxt5Gewfsv9rEvAdiH+q/7v5Q7BN6zz/61eIiM4nIv/YvyYZP/nK/fz/oECFssb+wO2vHidLhv++rhplSFtg/8mA/ch5umj8qCAmYNKTivz4BQOh6Y7Q/OJwWH6+9tb/qQQXBrR3hvxwEaZa4hqI/CN50ZsL1mb8mrPUM0BnWv9U0TLk5r6i/SpLpjLOOX78wFgcxpma5P8oN/42hK6U/Sk1ktIHswb/bt9fT6uvAPw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzYyNjc2ODAwcQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM2MjY3NjgwMHEBYS4yAAAAAAAAAKzaSvOgWt+/ls+h/fyLgj9ux3NcEEjLP16Or7otK1U/pNLEWBxjxj8YDHp0uz/Kv8dbYTB3ZNS/XVyPV2Cy3D/e61jsXiztP4D/ZzLFarQ/CPbiQvNj1r8hGBDuQGXxP8jb2tbGNOi/+Qpv0Jt6xD+QcxMHZ83aP0TuP8thguo/YHowS+ac4D/X2x1mcyLKP+3soPpx8+U/VqT2vq702D/EJYv3HuzuP8yjVkFwrsq/QoD7vkmlwz8oermCfbPwPwORfGiz1Ke/30Qi1vpAwz8ttGrmskHhv1udevGNv+G/BE5/f240gL/biOG0blPGv1MWl1yQ5r+/QALQHh183z+USRVskKuZP8eWohGpDvE/6xJlOmSY8r8y4ZRYRLemPx9o2P82PeE/SW6Gtehf678H5ve5dr7gP79g20PpNs8/NKp0i4eZzL+q22Zc+3PoP6S97Td8h4e//LamNsEz5b94657KMdXhv25n7Fq7VvC/JioC5bJl2b8mkNRX70Hrv7wWU0MvaO0/EXbhQUUh178="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzYyNjA2NjU2cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM2MjYwNjY1NnEBYS5kAAAAAAAAANszIKnjM9K/mwvAEKgyub+wwx8CAj/Dv1MtTdgF9r6/LCzFROhBxz8XIonlGXnCP6vZZ+1JFcI/BckPzXOBwj8g2TLGMGO3v8NfCecFAri/Xu4zpc7itT/eUngXzwPKv3isKOImp6O/BRq7eLT8ur8TNfBNMXqDP0nJyHyw3cM/w8S8COAhnb9UEV6kkpzBP6Z8h51zMbG/A+Y7hkkbwb8BCa0fLMykP+WODjLM18Q/hJF9pldkpz841+wMaA3Gv1tMXnQTRau/2kKtCiAagz/gPck5MH2RP1NHCz+APsy/ymw4exYEwz/djeKrwDywPwthXRV52r8/2upWlqB2tL81OaEbWxyWvza1D7hux7g/P16zf9ASxD+vnd3LxwmzPzdz3ez3nci/Ki/BgTUuwT/zW1i13Au0PwHVmkX74ZU/9hjzGmDStL8E2i2H17tzv2vzzeUxxna/cCsorHnfxL+3pA/LVXK2P2+OrxlMRaa/ObfUVkTdxD9Gnssw4JO7PxM3jO0Qeqy/Izh1UdgBxz8A4LB3NQ6/P36mpTa7baI/pQF8QGNVsb/bI6U051PDv+GLXYzllLW/ZPC/bfIpob+raJy6qSS3v4EnbaMd24s/vO9phzwuiT9Wx547HcvDvz3UzY+/Wbi/RM2ULRLXhj/R7iZtJ8PAP8DMDNiftHa/UtQiF2D2wj/T03BQ31e4vzzNxMdqy4M/KGcbMoBSsj8DsKmXXZ64v8JOuvdRXLa/iL8jbE4ScT+DJc7HnN+2v84LnRHqW6o/cW86nsvusr90pJKpiXetv3E1UrE7o8G/3ipwsqrluD/E4eTyCHmuv1ehfY0jaZM/WjbQqSZ9uz+8iUv4CHK3P3erJ+jVTrq/jaj0fa4/zr/tS2IEUt6FPwbxiFkS+Zu/QkvzuX5ioz/IsNFw+2SSvwwvduN6rrO/E0tVKONNsz9OdY5bO0jDvy0R/Zk8pII//PNhwy3AnL/ZNc0Nxg+jP9HMrI1Mfp4/w4xxLRnexb8Ui7W2LxKgP/zosR3b6MI/ZWaqGjeHwr+GHAlM7yeaP1icayl987k/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzYyNTc1NDA4cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM2MjU3NTQwOHEBYS4CAAAAAAAAAE8NmJoricI/nyOtkVYxsL8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        1.5855044875037652,
                        0.613978442557355,
                        0.8888978007307762
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    1.5855044875037652,
                    0.613978442557355,
                    0.8888978007307762
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 1
    }
}