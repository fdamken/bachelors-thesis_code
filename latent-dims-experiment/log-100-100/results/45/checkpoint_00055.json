{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.97280615135787,
                            -0.03859714943030448,
                            -0.023941860676336645
                        ],
                        [
                            -0.01972193701578994,
                            0.9420617222117871,
                            -0.03577321587356562
                        ],
                        [
                            0.3050241611292915,
                            0.10348789426095,
                            1.0735463025965852
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.97280615135787,
                        -0.01972193701578994,
                        0.3050241611292915
                    ],
                    [
                        -0.03859714943030448,
                        0.9420617222117871,
                        0.10348789426095
                    ],
                    [
                        -0.023941860676336645,
                        -0.03577321587356562,
                        1.0735463025965852
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.07142232484926091,
                    0.04092579723315039,
                    0.007269330909472258
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.0003226096329271968,
                    0.0003344676845877643
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.004316169161443367,
                        -0.00045932269184759816,
                        -9.2900541458385e-05
                    ],
                    [
                        -0.00045932269184759816,
                        0.0023826637343147827,
                        -8.90505302112432e-05
                    ],
                    [
                        -9.2900541458385e-05,
                        -8.90505302112432e-05,
                        0.0005352539033243175
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcxOTIwMzUycQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM3MTkyMDM1MnEBYS6WAAAAAAAAAIgG4ma4W9G/39CseO+wgL8BGSXUKoPpPzPrlc8PGQ7AlZ12FAa77T+GDeoHHIwPwA6u+tp9ePE/8WBHqFYU17+BM/ag5Fbsv0n81isSAdC/jJ5yPJmjtD+kJdKZPYDjP7M/J6yHfAFAaVsskORLDMAYxPlLvu0AQPNCzaSCQ8q/lk9amdk96L8Yh4837hBXv0aQjN2hr8c/F4tiCEsSwz/Gs056CSX3v+LhTssqIcA/AQAJQ5+mz7+rKDnfPhPkv0oXVJZyDr2/+FPvCU/c8L9QJ5FkxYu8v7q0wyCZPeq/Pzj3l3S67L/HXkmAnJjYPwAa9W6eLsu/iFV9DWuC1L82gdKEKqH6v22QCB6M2se/azRoLXierL9zis6aih/YP+Ri+RbqvdC/BImdWTiMDUCCHiwSOqn+v92z+CYqrr8/IY2oByS14T+EohW4BjXyv1ETnbfRGb+/bXGFEu5Bkb+uqs7B+HX3Px6yxbxnqgxAbaFOTL0ZEMCJwdDZLtMHQC5L9zZa9pw/NgmSiIgi1D9jl3FxKt71P/2aCaiv5qa/cMX8wHmy5r8i8wWFxgfYP5Y/6BAuYNM/Rr/YWtg33D8lhTdJffzQv3+DgqCwlLu/0CawjLoWzT+DNe8Kl3q/P4WgYSBeO9A/9BVc2XHj8D9rjueaFzT6P4LXbLFRE7c/Rhta+ItVyb8cQSUKFRrjvx+8nIdbg8o/vBdfQGmd4z/12hrD/yPqPwL7MYpwi9e/ud+n3X5UAsCFU2qj7pzjPxut1+O5qNW/CZrnF9w7A8BC2tyIw1PbP2if0LQextO/LqjdhoZd4L/6oYOlsdfRvwgsjTBXzte/u1IiEh0V5b/+4JnGM8v6Py3ZZEX6vO2/i/6dJb/YAkDmTrW5smkGwBKcQpBcI9c/EOD5qI1b2D9+boOSJOj3v9Kk5QXYD+Y/0tcbHX5g7z9RhVBpcI/FPzSGs/c179M/1WRIzvrz2T9Y5EmR5rPWv/tOc3p89MY/1o6Nh6ni4z8Ji3gwK2LXP+XcsQA2A4O/EymF/z0I3L+IeUHKKKvtv6Ui6/v0SPI/C/VsJggP8D8/PEGAT/jYv2sxu46i08E/tuPTX6Vmxj8OZBIBmHLTvy76XGu5wLY/oX6e4LQF2L8lH6NOgXHqv+5vWsuLorO/GQqDTtT71T8HYihn+CrbP3oMp41EJNK/tmk3E+RN7b/P/GosubbkP6wxazZnSb4/xqSo/hn1yz8YjqtjqfX2P9OgT6Qh4Ni/02swfdetkD9qTjRxNQTWP0rwH63hJ9i/DQvo6nxJ/L9whs7+BPfLPwD/+/v3XsO/0dhSczk5dT8q77kT9g3fPysFq1BWrQfAt902QZZOEEDcFVpL+sQMwLc0iUBFHRDAewK2bwYW5D9pjd1avDQPwBpRIlClzMA/py5zHeTU1b88ltHKWMPpvxHy2pTuK+U/kPWZBYrK1r8bBW1GwWfUv4A/DhHc58k/J5FO7fYd1D8P5wNeaB2mv9jlK46coME/qmOzrtfJxT9GQMRiBFvyv9xzxQ9yELu/wMbXub3kvT973c64FrjoP/MT+vQZwbk/54kD1O9k0795hJYVYA3Vvw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzczNTk1NDI0cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM3MzU5NTQyNHEBYS4yAAAAAAAAAB95dO4fmdi/mPUJKwUIDcDeMilJEoL5P8lsxDa5rABArroFycAnDUDmJjsq0/Phv7ktxHrxF/u/O4cxl2NZ878RvXPXKZvMP0jE6PB86NO/5pTRRclG8L/wtCMr5NYHQA2ZSuN3EQXApcoJUeLpx7/Wa5j1cBXhP7PER0TBFBFAZGF19/go4D8ZWixAuzvav+YwsrvSefE/b8vQq0LUAUDntQQF4gjyP/9TX1nE8ALA074tnfDO4z9x8bsZGF4AQDA0Tgh1zgDA1oyS6t3h7z+G4OBNbqL2v3kcILcK0grAqvAkX1bq/b9w/MfySY7jP+1ppzrALgLAuXrZOLVv2D/QAO0DDXXlv50Ub/8+yLs/n4KQxfqAB8A1CgELZXQEwKjNWMQQgwRADro+gOaP9b8dP4z0aLr6vwGg9C7iUgZAovqMLjza/L+pKH+kM2oJQNSvuEJ/7wjALVgpmmprEMCdZqzERtAAwEnLIOaW0wfAaaSidczjAsAve60PpjoDwP4WipHGlgZABjLj85mNBcA="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcxMTAxMDg4cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM3MTEwMTA4OHEBYS5kAAAAAAAAALblJFkP0M2/7TmQ24H6wL84reE0vVfAv7NXWEj56MW/hiuS1oFDyj9LELVehJbBP1kPwyKZNHI/gfErNtSmwT9Eb6BBmUu4P2pqg0a16sW/gz1SN4ePsb9wXseizm7Sv+VrLz05vLg/f9W9X8dxxb8/K4pLLfxyv+M5Wlyk58g/A7N2lQvkj79nSe0zQfjTP2Tdzy+oq8I/vI6D4yH1yb/HlZW8NjXAP701P0uM+cM/1/RsL1uOxT9hQqrVX/vQv03JfnOCfLi/r0sVevxQvL/FsoHFdxWpv3yPVm9H6OK/WlcxPYeNtD9qzqvhXE6tPxMk/u2VBbY/8/OrHCKQxj/UPsejqgvWvxmyQNnLya2/iS1Bnn4Vrz9GBD6N7G/BP9Ln1iPMQc6/dx6yoN46zz8YAMlrASWfP1lEzF77zLK/HmucC37tob8KxtxNrXpyvzPzmbRumK6/WRV8kMKryL+QKb0Qy+VdPzfZi8DgRp2/R47r8SlZxT+iq8LW6IOlvx2fVefTVrI/77lH345V0j+QvJD9/RWuv6YsuF5gIZQ/EUGOPwERtr//MVg4gwvKv5CXVGN1D7i/2WARTXvOl78FPB122X7Cv48c0w9W6Kw/QAE/R59xyj/GUF8M4jGjv+MzeV7Ls7m/N9iCuJ4opj9RNnRWQS/YP38CXGo9jLe/h+T0AGIKuz/GBzwiEOW9v5JzOusILZ8/hWK7zhzryz8bqQwuJeGnP3USQwc1ErG/SxldXZYbnD9N/2NJvefKv8zE2PWDvKe/aq8KYiI+tL9hWPaXFpGxv8WAGdxHSJ6//zbALAagsj9q9L383pXIP5EY1rHsm7e/fttcTuXalD/kd1/ePLSHv2HABL1oYdi/qYhwAat40L8C/CLZcb7AP69lsSplMdG/557v4cZluL/BeMcXCZOiv8xhAvJecNe/+daWGgzVoT8QCf7WGIvEv9vYkwcXC7g/Hy1lJdhgtz/luK+0akjJP8xNmK6HEqc/qJhZfPEN07/qCdeVIo2/P/k/GcCDGra/p0nHPH0C1b9MiZ1JgBHMP3ue7J5kg8o/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcyNjY2OTEycQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM3MjY2NjkxMnEBYS4CAAAAAAAAAH6IzW9Cp8c/8faTIiSutb8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.1770511096752154,
                        -0.2778660049268699,
                        2.5848816711836977
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    -0.1770511096752154,
                    -0.2778660049268699,
                    2.5848816711836977
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 55
    }
}