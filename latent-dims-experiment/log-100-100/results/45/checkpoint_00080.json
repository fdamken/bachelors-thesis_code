{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9231929697597547,
                            -0.017782097087608383,
                            -0.023122329755831967
                        ],
                        [
                            -0.1521473283754847,
                            0.9605667153178148,
                            -0.0506547424217434
                        ],
                        [
                            0.5224349189651118,
                            0.05786558398827072,
                            1.0938356659208106
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.9231929697597547,
                        -0.1521473283754847,
                        0.5224349189651118
                    ],
                    [
                        -0.017782097087608383,
                        0.9605667153178148,
                        0.05786558398827072
                    ],
                    [
                        -0.023122329755831967,
                        -0.0506547424217434,
                        1.0938356659208106
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.03738693076864544,
                    0.020406017389323388,
                    0.0011626927662100187
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.00038278095821988245,
                    0.0002747454939323006
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.0016546869171982503,
                        -0.00015057358716923097,
                        5.497484916527906e-05
                    ],
                    [
                        -0.00015057358716923097,
                        0.0010465491308032024,
                        0.00010423357657107779
                    ],
                    [
                        5.497484916527906e-05,
                        0.00010423357657107779,
                        0.0001896146711413138
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzYyMzk2ODMycQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM2MjM5NjgzMnEBYS6WAAAAAAAAALox7sLYU9W/t5V8gRp50r92wUVXwIHkP+6PR+ucvA3ABMQ7SZwE7z9Dz8Cs6xYRwD36VuSJJ+Q/sG9WPF+W6b/E0PKZWcXiv4FJld82g9a/LsAE2+jM0z9vGe611iXmP4yNeBryjPw/3wMh+PBPEMCeeG1nIIELQNj5t73iBdC/368RaNq76r9z27j7OajFv6fVO9vhUs4/neY6gxkLxj+tEw/hEeH7v4m0INVei7s/zwxixMJw2b/9mFGS9/jpv800GTHxvrc/x4qkIdgz/L8VOenJSQvQv2J/jy2ni+i/YEep6ZjizL9ePbwWOUTjvwbwhOKPAs2/yW7JJtJr178qkygnXrQCwNdhQAgSecy/BpS1D721tr8Y+EjS/6fjPxSzn9c+O/W/02FR3oa1EkAWwlBLsv4MwOFqa125t6E/LJWVwBPC/j94d0iVSrL5v2Y1oeW64r2/UsdSIJgNn7/wpAIGrjL+P73m0WA61AtA4xVPAv+KEMAIjI1LX3sNQMfmegZSHRO/x75n+9AV0D8QW8uaJtb8P+VYSAUyAbW/oEduCTUV9r+sKtYbrP7TP6eN9eWjk9Q/FsHPspmm5D/hPTRp15O6P8vKw2K//MS/AVLyie/Gzz/UdSz1TzmRP8aQ2AFyxNM/VyADsfve8D93wX3QQK75P52QAvmrYsA//YSHyldGx7+tSASCAu3rvw022Yeh98g/ZPYxs6bp5T9OWeQXfBvsP+Sko6ac25I/floei/BD/b+JlzSo1hfQvy6uOTz6EdS/ci1CHHsVBMAXCc8yuzrhP8BdeSdtB9O/hQyyflnL4r/oLgmoNKvPvynCt+1t5tG/e1Qybn5w5b+JqJPruKH/P6a7TbgdLPW/oD6ECcxrB0A+w0vVPVYOwJluNTSsrtc/M3AnQW/u0j8yDQ6uWsf6v5dsCRABzuA/SXA7epsZ8z9l5KiNyMrjv0IW9YaIz9M/Y4R9r4nf2j+gMgkT0abSv0YYy4IwMcM/eINEeE8n5z9s1Bbmb1DoP7R73rAWLKW/QeIAbKa94r87FYusG1/wv59jFxOFAek/TW3D6p200T+47a1lmCzmv6tr1uzZr7c/4r2yNZoDzD/FToj6t7X1v6+uv4Lhbrk//ekxN3VW379l+yT1ZkHyv8/SIboKwLq/Q9+Idr9S2j8AHNIouk3mP2x7fYYZocS/O43x/VD08b/qBdCdXe/HvzVmB0CZjbw/BXu2SEMJyT+D4ONeozX6PyodFmOPutm/y7aoG++5vj/xvFu7LkngP0yH+g8DnOC/tpK83VXB+b8ZdvXL0kTeP+P3RWjcrMe/yOD0M8F0kT8Gl/t2SM3lPyFLEVgYLQfA8HWEnuSUEEC9PU6nY5MQwOVI1ISM3A/AZaINo5hm5T99k5UMrPIQwM5sRqeP/rQ/TcOOL5S/4L//EQ/0UwL0v/URujSvruQ/22+Qp3lhxb8CO5uIjU7Yv3cs4DwV7ss/2j0RDWDD1D9GTKvuDLDfvwntqBTntsY/bMJR0OZf0D9QhB3lyh76vziQMrA85sS/QWPiKhVFwD+T8nvolDDxP9CD7VfepcI/ojRPeLEJ4L+R7uP8tsTfvw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzY5NzAxOTIwcQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM2OTcwMTkyMHEBYS4yAAAAAAAAAEX54Gp9WtW/fenJBA8kDsBFbcRaMRL9Py/m1TDv5QBA26LvQgVhEkBPPYwR5sDgv+3doD9sF/u/bSu0u4UG9b+AEEa0NYXCv64rFATab/2/ikYIUGtG6L+okAsm9I8IQM58O/OASA/A9BjaecYo9r+J5McxuSHiPydVsMJUmxJAk4tHOhQg4T+sOe/tU3jTv4egMfnwRew/G1wnQFiVA0BOWcug6PHwP+YOejTHhAPAlTwBJM0e3z9y8aXK/HLwP9/SSzi2oPy/95tvPRgx8j9rVJyT30H0v5gZXF+CKRHAt3gqWPPH/r/2q/S7DTbWPw7og0n54QLAecexbRSlzD9AHwpLNaXhv0OdfFGgKdY/6mytt8Q2B8ArS+o6TdAEwOlRDYqFLAVAH6SVg1Em879BsiTTX0r7v68BMlhfkQZA8LMie8d2AcDnPnTI21oKQEn8iWgMBAvAwMX4vB38EMAeoWls8QwAwBkDJAT59gjAkHylp4WJBMAbYMLjTt0CwK/BqhZ0AQdAyVmUApNCBcA="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzYyNDYzNzEycQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM2MjQ2MzcxMnEBYS5kAAAAAAAAAEcveQ1yU86/f+usoRqBwb/jKMsJS9bAv4a4ufk0g8i/YLGsnBrKyj9ckVudQLGCv5jDPuhvYJM/2dPJswhswz/NbjongTW/P3OuOAVTQMS/qOtB2Nzns7+wXhwBQ4Guv82BqLIHr7c/sI/we/jyxb+ffDFh3tqeP0LrdiI9bsk/PzenkNgRqT+VSJXpP3jWP8aIe9JBosE/WWtPRKKuyL+UekEvvKa5P1RBIHA4fK4/ko5Bgbkckj+dCEwGDnXIv5Gmruy0daq/k5MHdjPxpr8IKc2h5xyCv8+y3aDtCeO/uQVgnKENtz9j50/sO3iwP7KSS/VYTJU/eA+xHezt1T9a6AHvpqzPv5e8sgHrMbG/f9s2si+glz/SRAK26aDHP5gusjqWA8u/mhoO9eNPzT/uXxlQ9EW0P0ubSARuI7a/5WND6D3Hk7/PrpHbyFfIv35jhuZoWbC/sciYVlsyyb+FijkIb4K6P+PSRFvQeJS/zr1Rsvodzz8j0e722L2rv7BQU2GK8pe/E608y7hs0T8BV3yjb320v+k1ZFY1sKE/fitmdq/fsb9aibQjTYvQvzxJ1PY337u/BqeWp7JfVb8qTdmNn4jHv6zBZV/ojac/s98o+UqLwz/X71s6Ih6kvyUIE2QwFLO/En/4KuZqk78uxBr7MSPZPw6BjFtTirO/xY5FymrdmD+1C+BaadrAv71koANAs5I/aldsZ8OXxD8KdpThTXmKP1OckF6NdrW/hEWnXQL0cT8kqqCnrc7Bv9tLEn6ipXA/yyRe7lKPvr/f3+PZZj+tvwg0KJbJanI/VfEfsTvMtj9E3n9GwH3KP5OI2RDdhMC/XutAA/acrL88Ez6zVbqLvxz0VNwvLMy/NGukpH0Q1L8O8Xt882TAP/h71gkZ5M6/EwyjbFVkwb/5qQUZEmqhv9qwX1UkDsu/wMPVdaNwkz+IgcWLvQXNv28I5DyHH5Q/I+4tdZ93qT9xxHH+SzDLP+F4oNUMsq4//+kdVzrn0b+ySNZn0H7CP1ZZ2vRKssm/t3htdH472b+B2Kq5VtuxP1a0TF+YR8o/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcwNTY2ODgwcQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM3MDU2Njg4MHEBYS4CAAAAAAAAAJwz6jXbLcg/CBgYtuZ9ub8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.3373577121434004,
                        -0.21562087860180587,
                        2.5346398463476336
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    -0.3373577121434004,
                    -0.21562087860180587,
                    2.5346398463476336
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 80
    }
}