{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.914608309251607,
                            0.004255039551728202,
                            -0.021703815285997498
                        ],
                        [
                            -0.14399060418585596,
                            1.0064959412409322,
                            -0.040311146411660524
                        ],
                        [
                            0.4570156653920745,
                            -0.04315458620656692,
                            1.0617433510368988
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.914608309251607,
                        -0.14399060418585596,
                        0.4570156653920745
                    ],
                    [
                        0.004255039551728202,
                        1.0064959412409322,
                        -0.04315458620656692
                    ],
                    [
                        -0.021703815285997498,
                        -0.040311146411660524,
                        1.0617433510368988
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.1289305166557281,
                    0.057623457869369364,
                    0.008275715616371358
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.0014584817228005705,
                    0.0020387924259476337
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.0022324753223556676,
                        -0.0005732773702471633,
                        5.581353803674194e-05
                    ],
                    [
                        -0.0005732773702471633,
                        0.001618505590034125,
                        0.00012625148663580887
                    ],
                    [
                        5.581353803674194e-05,
                        0.00012625148663580887,
                        0.00022962295898132368
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzczODY3NDI0cQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM3Mzg2NzQyNHEBYS6WAAAAAAAAADeJKNAAAtS/q8NPk4yTxr//KjGR2FDqP1yoC3cU6w3A5hgaPLJp7j9yvPgUOW0QwOJ3XK16wfc/OsMdI4Nb3z9GrlTh7wPsv9NTQjTMjtG/pPg6BRFPtD885rTips3kPwDZa+EZWv0/bEJdmX0mEMAf0mXP0LwIQIEyth2H2NW/w7MgqkJZ578beWd22JvMv1aZb+8t1Mo/iLo5DGH/wj8Wfuiiysj7vz5rFiP93b4/zy9kMHNP0b+VnA0UkmTmv26CdWEPV4m/xys9PKNh8r9RcGkw8BjNv9kzXpKo+++/afI0SGgr5r95mIuD9VTXPwiHR1X1R8+/NC91fHbf1b+Y3uW8fGsBwHtk4RQyYcq/4sbBbilYtr/mGMrBkHjePwFr/FaQQfq/8SVH4umvEUBzRv9bm0IFwCPd0W/6QMm/+qW/EZAD+T9LYtVNzP74v+3zoRl9hsC/VPocKVTBqL9LVL27OHr5PyB7TgggFgxAvkO6dV9wEMBbOuwRDpwLQJsi7bnV0q4/4pmxw4Iizz9rSD3QtEL6PzRAoQro+aO/gP5+rlYA6b/MIzCej0rUP8H4fOgE5dM//omeBpgD4D/GiUm51vLPv+Lnml+Z5rC/OE+R56b9zT/oDBg9k+TKP6zfBieQPNI/CqqeAJnQ8D8FKA17zun6P4ZwGhoSCbs/+dMVcr2ryb/dkholqljov15QSkHMVM4/X7RTRuTP4z/4fLyUiTrqP83v5l2K3aQ/YtfgaRMS/L9sleBIBE+yv5gMc4vB386/Lx+7EsZFA8DHkdcyfePcP2b5LxzNk9K/6jBKj7kr4r+v5IvaOQnRv64130TgsNW/BTkDK5GA5b8yfgb01fP9P3BxOC++8vW/NglHTxobB0At67g1iLILwD/zBtPawNg/m8AnsTf+1T/ysey77cT5v+dpsOv2IOI/sFOvX6f/8T9EzXDTTmDYv0cF1L8jr9Q/Wc4n22WR2z++2Ypc58nPvxVb2ZiN0sQ/oj2cAD225D/oZxNcsaLdPwsIRSxQh5G/o9qRrDJn4L/JF1UPLkvuv4EnyTsySe0/JaBp3jUw6T+oSeSjOq7cv5dm6KYnN8E/5YVqlca1xz/fHSAKVWbrv4RnZjypUbs/TZZwlllc2r+QQ6wT343tvw8LeN1Dc7S/0yT8DF3T1j+rZZ7zFQvjPy11L0vv0M+/WEL1SbAy778VqDiwjCHXP509TRiu1bo/Fk6JgjuTzT+S2WTv5qr5PxWfG6qqzNy/P6GGOg6gwz+okThlQNbfP+axjNS7sOG/ZTWA2IlE+b/noP6NdeTVP0lDOD3uusa/kzGMg8RPdz8CzEDRmIPiP/uGlRRiYwfAh3iu6RJ/EEBqRc48LJcPwIlqPf4mBhDAv1mmJIHG5D8+ZSGCVUQQwCOoscaUdro/9IPgq8/917/oOuB7Gp3tvzsDXJbCneg/IoX73PK5479w17t4qRHQv3x0QqLhocg/cv9/pN5O1T+UCpTiZ9/Ivyj6QhmrZ8U/2b4psiNHyz9l9QVn0175vwaDmKRvJ8C/5vW6AK/0wD9cFOSoqEvwP2HNUQGmq8I//PqfwWcJ1r+HY+B482fcvw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzY5NzEyODAwcQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM2OTcxMjgwMHEBYS4yAAAAAAAAAOoxciVPkNW/mmhMYESbDcBJpboPlz74P/AmqOpwTAFAoapG6BfPEUBA/5mNuiblv4XNW1DCYPq/IlvXoMS29L857BLLm2Cjv6BU/+Ss5uK/XYwbiDCa7L9toXM8BTAIQDpcq7yxwgrAlsJEyzvS9L+tx+4nmcXiP8osrT9tOhJAM9GuVaV44j8tpsel+QPUv/REidktdPA/1XoL6TfQAkAh8FsTz87xPyNmFzm3EgPA6hBvUtgk4z8Jtd/WVln0P3f5LmERBADAZaWCDPg28T/v0UZpOib2v1A4mSC4nRDA77A4g9Tu/b/Clv6JZxvcPzkmJ5/lfALA9ujWK4kf0j+i5dah8ovlv5z2FHb4e8s/b5ikiU9qB8ApTJ/8M7QEwNypGQ774QRAF4HwBnnp87+T33KRcdH6v9Hwf04eHAVAPMp/RcMrAcB4oXuTpOgJQLcYuXNQYwrAWLYlZtO1EMAG5LHJEAcBwGAIhgGTEwjAgIjADkyiA8ADtwE3IQcDwKQGU7va2wZAshx19hZJBcA="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcyNDYyMDQ4cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM3MjQ2MjA0OHEBYS5kAAAAAAAAALP+mAWrX8+/aQLEVLJtwr8ZGfBfdAC/v2/bWpj0aci/f8nDT7K2yz96RByLpCyUPwYDRCQObog/hps6IuQkxT+Td/sKbAXAP5lM8mq3jsW/5AnVM0wGs79929fOZpPJv2o1ekzY1bU/6e0SDHPixr+KNpY7TFGiP+MBjtXUWso/ZmgJLDHFgr8FW9St/onVP33uf2bBk7o/MJ82EUKvyr+f7+8GMerDPyVOlHKTUsU/aqO7AmAcuD97CDrr2evNv2t2rPNV66y/RS7mRvBuu7+OmgpJyeejv054o40TReO/uuvAAfIFsT8Djs9EkaahPzu91XDPsrA/pHoRioHUzT/etVxl1FXXvy/hwTxd2Ky/MfdvOqaYjD/PXFUJMjPDP2X/DIp7Lc+/TR8CvuubzT/mLfv0J8iiP7MWt7mBGre/Uk60ea0yg793zJSaXJavv3ONtEyYMrK/Kt+vCfMeyr8ruANf6migP1Z9NsbEG1m/lMaYcofHxT+WHH49CK+yv1Y3mbO3JrI/ytc4m2xy0j/OhGpTTiKyv+JUpXZKxJo/ZrcCj9H8tr+zrZ1N7iXLv+CDS+kvuLm/DJGXoPr5n7/6s9jFViXCv7TuhJxnR60/4LzrL9t6yT+U0Fl8lpCXv5X1grX8BLq/9noJ3248vj+HpLj3b5nYP+3Exi6J4bW/wuLtirRBuj9zTTeoyo2/v50FvqJf86A/i301EXqryj8PbnWaNNCmP0inrQx+Z7O/H7fFmOl5db/ILGXKgZ3Iv6AtW0SU6ZS/ognVFY1dtb8VrPsNRMWvv9P41xN1zHw/GTnM0d/Arj8NeLs/PGrJP03X9Otw6cC/sXNGjkblnL80j6uBp/eVP8xm7N11o9O/jhcfrGKN0b9vgQ/0o2y+P+ZPmdYgAM6/jwHzrJpvur+DpN+wUzOjvy8KK1BPgtK/shhZSeNeeL8YTjppkMfFv2vdOJLmVac/kSvA9mGyoj+xXq33xxzKP2zljrr8Y6o/aCPXFAtE0r+xIwdEO1XBP/BYTN9jI8O/mulWU24i1b9nBFGJrZTBP2s0jNZSTss/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcyMzY4MTYwcQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM3MjM2ODE2MHEBYS4CAAAAAAAAAHxPAelyGsk/aUSPqN5Wt78="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.3027151380727152,
                        -0.3050008749925902,
                        2.5442892757186417
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    -0.3027151380727152,
                    -0.3050008749925902,
                    2.5442892757186417
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 65
    }
}