{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            1.0168068137314157,
                            -0.012098342914032719,
                            -0.004894856142045204
                        ],
                        [
                            0.03847630626102262,
                            0.9786210266152667,
                            -0.009117701991007712
                        ],
                        [
                            0.19732549316902437,
                            0.017249802698151736,
                            0.9978609899811285
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        1.0168068137314157,
                        0.03847630626102262,
                        0.19732549316902437
                    ],
                    [
                        -0.012098342914032719,
                        0.9786210266152667,
                        0.017249802698151736
                    ],
                    [
                        -0.004894856142045204,
                        -0.009117701991007712,
                        0.9978609899811285
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.679424450865747,
                    0.3266675108907238,
                    0.09382413352862154
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.0034261747838681914,
                    0.0033786625637141584
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.2922847657109622,
                        -0.008861710702693482,
                        -0.09047161439446949
                    ],
                    [
                        -0.008861710702693482,
                        0.24245838087010657,
                        0.01668013742234875
                    ],
                    [
                        -0.09047161439446949,
                        0.01668013742234875,
                        0.0607623538067239
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcyMjg2MDQ4cQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM3MjI4NjA0OHEBYS6WAAAAAAAAAMdICaZEU+K/dW/D7Cg53b+wzTpU+xrkP8iQjC8hPfK/1s5H4feQ0794Vkk7PXf4vwWBdKNW7+U/Tk98Xdbuzj/VL3Y2ndjovzJP9y8ogdq/GoMz+q0K2L+uKiIkj5fMPyJ03eEtwOw/QE3XR9BAxz+7/qNs4aGEP778w9NS6a6/oZt0D+yH7b94WZqcds3LPy5MYAzRGsE/wqbCe9cqwj9nhfNa647ov6wmI44eSbY/5y5hw/spsD82eK6d3PS/v2g4dU75O8+/5D+2YwzE5b+mBh4/AlDkP5qEOHkjsOC/5Yo7Y99Y2b95vPDiWT7Iv1NBMZE+W8u/b/zQHqUC178PDKojUCLkv9Pp4IdKGcO/CwbMp91/nL86xblTNfzAP8PbjMuv+tE/w1Ejbp9S3z8qnim+djbZv+um/YFk3cM/6lnzAdxh2z/rpiPGEHXqv6k3HDeyx7i/DNZi1uwBob/FTZRCI4bsP9z1kpjlifM/fN5Iiinn0T+r94QrThTtP1OOWWgnHY0/loHQh73swj8kLO2g5YnvP2i5vCXD9ru/2NtN/ep/2b/xB3nBdevlP1a8MtPFKss/s2ScZQhe1D8EVLenTxO3vxi+0BVZmqa/V2QTVTDQc7+BOCLhE+Okv6JbeT5PyN2/JgnWvhtg7T9V4ish5KDxP7Y6YGaJirU/tcg2azJfUT8/MlDySO7Jv1JMKjhlb8E/xEYgqv983z/eDw5Mm7XgPwLNKrzq6si/dZRUgQ++078popN2eWDkP+nTWp4iHtI/CitJZO1X4b/GkbYpLr/yP8SKgExj7NC/MSfk31Nw2r8BofD7Xu++P2jU0eYOvdq/EGPJ70yU17/iDI8muHnwP/+EzSylnq4/AikCMWXJxz+qeCBAiDHpv/6F1/JJ4tg/131ZT6+D3D+kawGMgXnvv8ardtBf+eU/jupICEuN7j99lJP5moPmPwTDzyjMzss/7g9y3Oyj2T+eMh6M9PTlv7KgCXRtTcA/fCTvBSAR3T8EitTiw964v/3uHjIw1FE/yhPdmm+E0L9lxm2lZ5Lmv+oxK9N/AOs/8+EizqtW6T9Z5gsqy7XaPzO72NGgc7w/G4E4hZBvtL898oUdC5vHv35zQe65fMg/iYBb2k/ho78KHj+8CLDcv4/0rkHPvL2/CfWKOwHCn79+kOxN35WnP8vKs1mnXtK/pu7Fc5Zx5L8DC3y7stDdP71WS2SgHsG/hcalEM773j+1//z+/VbxP52RKcZR5NC/U2p86kFrfD9Ig7N5cGrYPxRnsRrnMKM/oz0yK0sb+b+F1kETaDbePy0P+Jt15MO/KcyiZTC/sT/8sbkfB5WlP7gFiSP819O/7R5CtiY0vj+7SUOXQ6H0v1LeT1mzt/2/ohgf9V6R7b+ANDTb5Iz7vxAklASvkr4/coHy0oHwnr8CXDNxJu3lv3A6TYUCLOE/Ag9qH9rHmL8DwQ1M1RrYP6aONBgYi8I/cNS40W2Kxj9g1of8A1rQvzjHShUta7Y/SMyuBtw7tD+V5o4zYBjdv5rYG4hocLa/ZJOGzW2bcL8io1eYggfRP7qtJMbjBsE/f+5OuMPoj7/LFIYQd0yovw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzY5NjM1MTA0cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM2OTYzNTEwNHEBYS4yAAAAAAAAAOfMDOwi0+i/loFkY8Im+79X7AKXkCf8P36nJoa+q+Y/J9TLd0wk9T832Oce5RLNPzq7IExH1/W/N7VcN6faxL8CpZBRSZnzPyPCeUqwwru/UmDgLsbh6b+Zp1n0BPkCQNAneQD41P+/lNBDJO5usz8P4qaTvmzYP8l93lXzigBALRE+SC694T8O88kYTGbOP8lX4b5EYfM/KPq1FLR8+z8k9Ja/NKTUP1o/Ilzjtfm/FA39v91s5z9rAe98BMgBQBcc/heclvO/uu/DbxxS6D/bNQaaAyb5v9UItcacTvS/kax2dG4+979eG2CjD4XmP/2S6lbYc/6/xuGM/mbY3T/OMO19EVbpv7/d8cg1K/Y/nLjgz+mLA8BJTUecuq/6v4xdtYN8+Pw/9AzZY6Ws778PfAITdjXyv77eIgn/RABA150Bjuta8r/mTJjcIKUEQDkKUiXgV+i/u+OBHw3mAsAwnmcVXu/6vyM8O7n1lgHAemj9dQ5R/r+RAY8Gp2v/v+KO4qs+nwFAH/apGoOt/78="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzc0NDg3MDcycQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM3NDQ4NzA3MnEBYS5kAAAAAAAAAMUg68eIF86/jzEl7Pifv79TFmE6s0bBvzAsQbidP7q/IYeUBiopyT8+o6w4gmXCP76/xCIbqqo/guoY40/cuj/0ixOdE9yQvzYFcubEvbq/mFlbKohNpT9QBBs1x2zSv+rsWzfIbma/oFsQxnFAwr+tCmKd4oGvP0rdzGZbvcc/02oTnq5nnz/H0UbQMDvSP6CZMAAfOM8/Q+2/DgUsxL/T5n8rziaeP6uGOQ4tPsk/J1ZKZ5WY1j8jf9GuYpXDv89yhBp44rq/SPo6wHWUub/6XeXjtSGCPwqwcj5fw+K/Scg2XkAZqD96GqQnB9m5P0RfEVmHnLU/ySpO6hKMrD8/T70uLivWv7JrId0Omq+/sGt4TgQ10T93WcTgScfBP669zLBZ+Me/TDzoDorL2D/ByRAKGqWrPyFnsYmLCpO/N1hH0+h3uL8HXeu3siS2v6pN3+KI7qm/jPMeFz2Bx78HSOodGpepP0sGLdz3hbW/mW+gzhC6xD+DxebCH2DEP2G6QarttMC/CK1dkLNWzD8+P5EEjYyIP/iVtQAuEnS/jO717tJXs7/exCMfdhHBv2NgElBfxbG/Uw9j2m9plL+oX+yEGT3Av3Vzik/WgpQ/DwPn+r+YyD8QN/5Y1fG8v1nMmCpwJMu/xvQ76X0yk7/0j61sSVTQPxeSi/Gw07C/SoVyDhIHzz95VgXmBZy3vyNyXdBYzqc/HF0DSfCjzj8T/v9QAleXv+vFYDxlPpa/XPL1l4HnfL+5mi6Mj4zCvxGgYgnujde/l/c0hpu5q7+Fl8xGKTe3v7gwgTikz8m/uWxcIu0MvD/1dS55qHvGP2tZ5Q2dD52/EH+HE7cCpj9BJK1skRiyP03Biy9+7eG/zR45Z7+Ryr+hyS9FSaXBPyvh/HqwS5W/XO2+ptDNeL/lEjdgNOOZv6NMtgk/IdG/Pt0QWtZOsz+p++t5hJTFv9Z4azlI7JI/ug2+eHpBtr+ne49E0iPGP30kyUEj/5Q/gw8GjxcK0L+hylCKXbesPyW4RyieA6Y/0xas/tPTyr/e1H8KhSq+P5VbKOLK1sU/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzc2NTQwMTkycQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM3NjU0MDE5MnEBYS4CAAAAAAAAAMxQWPO8fMY/FYL0O1LJrr8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        1.1522394939222567,
                        0.1637255133338424,
                        2.345530301995801
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    1.1522394939222567,
                    0.1637255133338424,
                    2.345530301995801
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 15
    }
}