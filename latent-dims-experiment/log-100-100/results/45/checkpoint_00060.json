{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9639867589222809,
                            -0.031337303195500064,
                            -0.02409074161396937
                        ],
                        [
                            -0.03569438878597598,
                            0.9515866880859913,
                            -0.03718463152452681
                        ],
                        [
                            0.32817782909444965,
                            0.08105497540096537,
                            1.0724727737704212
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.9639867589222809,
                        -0.03569438878597598,
                        0.32817782909444965
                    ],
                    [
                        -0.031337303195500064,
                        0.9515866880859913,
                        0.08105497540096537
                    ],
                    [
                        -0.02409074161396937,
                        -0.03718463152452681,
                        1.0724727737704212
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.056423330072263154,
                    0.03337280122771577,
                    0.005081111682844158
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.0002437380151131947,
                    0.0002318689448625264
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.0027714276267586657,
                        -0.0005666228293699505,
                        6.0878860238089416e-05
                    ],
                    [
                        -0.0005666228293699505,
                        0.002009539729721427,
                        3.305313399826204e-05
                    ],
                    [
                        6.0878860238089416e-05,
                        3.305313399826204e-05,
                        0.0002846605817552472
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzc1OTAwNzY4cQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM3NTkwMDc2OHEBYS6WAAAAAAAAADEiPzaTOdK/Szt3RZtZvr/RrkEKoGnqP2x7ZB/zIw7AJaIJefKK7T/ByKdNm00PwPHLWxTe6fA/x3EBCboByb+7hJmes3Tuv5jqYKLSL9G/F53PBsNYtj9knWQPiIPkP5RqeM/kYwFAmYIvr72pDcAkVKPgCjADQGWHfM/Xj8q/uDY4is+C6b/eG40CmIOyv4Bp252NNcg/sqzNElrWxD92zf6noMv5v/0hq5lxC70/Kq5rxkOY0b9bY6xc+9Hlv4T+aCLAMbC/CEk7OfQc8b/8Pk3bW6bOv2H3jZia6um/JyZaadqg7b+DfrtUpJTdPwEvmJGBc8y/wjRbrSeJ1L81pdNkNOoAwO7VlFMb0cq/I/fCGKOEuL/tEtScqATbP/O/JjTxdeS/QDIhhyvWEkCrfnaq4Y4DwDAyutRsDMW/NAaC33Ur5z/kgp5kXXzzvzrEmIzsQsC/sjmkjqh2n78VQaJXKMn4PzSqNzCoYgxAX55gNqZKEMCV/guc8qEJQF+DzyaPUqw/LRHv/KFn0T/V6c2Indv4P1bdcXSFXri/riHVFGB9478OlcLWHbLYP+Db/XdOxdQ/Q+aIz82G3j/MTNyExZnFv1+wYHIG37G/1RI2yS2tzj8qEp3OFqTLPxaoPAIl89A/qgcmhyj/8D9UOS/Vzgb6P8QFTJXLNLY/bQ/sRs56yL8ZpLhJ93Xkvw2zkGAa9cw/JWy0eYMo5D+dG17pohToP9O264gyarG/WlfWsYWcBcC2SU8VBO7sP4+fgmoAvta/Ooj9x3oJA8A0dz3ZW1faP9rJ0AbVQtS/7hRqyvTV4L8vsW+NkZPRvxVW2RZdDdi/2rrj5d8U5b9wwIZ25JL7P39LrqSlovS/3liS0tAdBEDgR7ZvUZcIwM6fktQhJtc/xtRBzIsj1z9qFukq7WT5vy5irEzxAuY/ZycGbmuy7z8xWRwR4sWZPydd3YkLeNQ/aHu/Dpid2j9ZSoxZ25DVv0QGNH9z+cc/XeeHkMqI5D8BMpuAj9vVP+SI0VMRsoi/mDvGOmcZ379mEAEycZbuv5lXY2eUd/E/VsG+Ua7L6T9VnLxBBtrVv8R4mMh5ucE/gMgx07gQyD+N5lZlpE/bv1PKukIV67E/rNj036cK279gO4zFT3HrvxWoDuN116u/bL0YOLvM1j8wjx5pz2TePxNLJdlYLdK/hyAEAkDf7r8xkY4GJl/iP0L+8wow2r0/mUiaz10wzD84rT/bHAX5P4y/qcDmOdm/uFhSbwDCqD/2JwuSkS/UP6bZwPwgadi/UqFEtYek/L9Bdq6TlQfIP60LgwnveMW/CJy2yKgakT/te5XVHKniP4vjK+zQdAfA1ntKud11EEAvTCZli+UOwEHixUcMIBDAxk5bSZn94z+lEmX+mhoPwB5qM9IM1r8/xn01pbK22L9a7RIVH9fqv4cg2dy+keY/pKdSkKb/3b9T06ZPipfSv2hHL7MQSss/6CLBozpi1T9eU0E5LFa2v0y97KKsTMM/zq/GGWzSyT+JzFJSmyz1v5N0aMgcEb6/pNEZLP1pvD9DxlTEXQLsP6/lDvDaq7o/3EVkA1Ex1r9LcHWHoZLWvw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzczMzg5OTIwcQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM3MzM4OTkyMHEBYS4yAAAAAAAAAA523i/T5NW/9/sM+tPmDMCH9Y89TDT4P+koNCNDAAFAP2T6n4ZqD0Avv7AbfFrivxO9xxkJNfu/341j/Uj387/Gp+PA6+h3v7bQeNcmgtK/1weWkOsr8L/ukAlC4w8IQOTZZrcXUQnA7vWA0O2W178ntUIcAOThP5ls2foHuRFAve2ZSiQN4j+Xg9mVT7ncvyb3rNZD6vA/c4qSiMZcAkANxlHtyPvxP/nGFqu6PAPAMjq4FkpN4z/iyOedV6kCQHkHqhNdYQDAvgCXZlw78D+Mo33Q54P2v0T6BAUC9QzAwcF7lkIG/r8+1zoPLIDiP6vVD3X+QgLAxxv2diUO1z81bGlOErLlv7RiQoOA8cI/ZcxVYam0B8BZ4OlW2o0EwPZGp4fhzwRAQZhSrjW49b+gPVPSCXX6vx0BjeDPGAZAEELYaVy1/b/sJa5Jp6AJQLzuFSGqFArAtJ/pXNxjEMD7ijEYoAYBwD8j15XiBwjAzt8MEcH1AsCiOl4gdGMDwDsnqVIC4wZAKeppIkaVBcA="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzYyNDU5MTY4cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM2MjQ1OTE2OHEBYS5kAAAAAAAAAONGzKgJ/c2/OGHqD6Dhwb9PYvy26ru+v+jQMkZLnMa/oFTqCqAqyz/BRpXwxiCtPzYz507vIDI/K/s2dMMRwz9x8OGgDwW7PzsQQ/nQ/MW/3z6qlm5Rs78fOmvhhGfQv3RBHtb87bY/Cgkvn69Yxr9qq3reO+2Ov69ftJDCzsk/+wrij+ZtZD8NtYca1FDUP9nKtQjxRMA/WZUYed4Xy79t/hiQ4iXDP1D/hat1U8Q/e+dqfDwZwD8AAyV4o4fQv9/muAPbw7O/ejQtDP7EvL+2YPL1OxKrv6sRbfwOIuO/wVYoqjB7sj/SuFwrBm+mPyujOl4vwrY/V1/pEHWQyz9XSNg81QbZv5Ek/Jf35am/IbN6SDaZoj9qZBOgaw3DP5kDX+Xpqc+/Yikf0ulB0D+PuqR0RFOVP4b0YDwkT7S/buVPhff4j797sOYpzXeLv1lHAcNzGrG/LDzWxOCSyb/d/9kl36aSP95tEDKzyJO/wteBmpMmxz9cdjrQewGkv1yAbtghxr8/9ekHvMj90j/McFOv1Dywv4WCXIjpCpY/NGYNnW09tr+SNTyzW53Kv+f6ua3Xibi/punup2w1nb+hs1Ec06fAv1rj5ylWH6s/CF8v4jmyyT9Y2ic7cmigvw8eknXJbre/bF0KuprFoj/N9NXo2U3YP9r8sIwlEre/0FuIfYxvwD/OGKVscl++v6DjzeffnIU/a8tKbB2iyz9wrrbF/OenP2w8IyBlUrG/KmiKnsWmkD9HlmG/frrJv4zGRoiKD4i/HoRW5t64tL8pQM/JxHyxv5hA+Yytjpe/eMwXE0jotT/JYvIhENPIP/tuD/yIib2/y3XC9g80hT/j3AQfBLdbv33i3PSlgta/LFa9KRpR0b+pLjjIEpnAP+3G7hqOL9C/T7vieL1tuL++BjhZW5Chv44/9Zhga9e/y76yeQ3eiz+cVtcM++jEv/6E0Y2iL7Y/jBqBWX53tj/QQ+TZm4XJP4F6akNMB6g/eDhG8zvg0r+C2k5OC0DAP7kRvSiThMK/D1YFNu4d1b+JZT2v13DIP0l4SIQKXso/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzc1MTcxMzYwcQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM3NTE3MTM2MHEBYS4CAAAAAAAAAO+vJ6Rgjsg/ow79bIYotr8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.25678462778838035,
                        -0.29379198833011083,
                        2.55536350129974
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    -0.25678462778838035,
                    -0.29379198833011083,
                    2.55536350129974
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 60
    }
}