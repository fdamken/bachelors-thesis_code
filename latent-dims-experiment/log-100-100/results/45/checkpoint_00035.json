{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            1.0170594327582962,
                            -0.012429959700136061,
                            -0.004531649173078307
                        ],
                        [
                            0.041937000184921684,
                            0.9776652091230951,
                            -0.008451285350395974
                        ],
                        [
                            0.19351935979555815,
                            -0.0008538779008808969,
                            0.9985903775444931
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        1.0170594327582962,
                        0.041937000184921684,
                        0.19351935979555815
                    ],
                    [
                        -0.012429959700136061,
                        0.9776652091230951,
                        -0.0008538779008808969
                    ],
                    [
                        -0.004531649173078307,
                        -0.008451285350395974,
                        0.9985903775444931
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.1518818600922599,
                    0.22637302788543257,
                    0.06751823469716409
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.004170476991399483,
                    0.0180166693939658
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.008878644536103784,
                        0.001597397205219099,
                        -0.0014134229859018577
                    ],
                    [
                        0.001597397205219099,
                        0.018037741816405703,
                        0.0027097290097005677
                    ],
                    [
                        -0.0014134229859018577,
                        0.0027097290097005677,
                        0.003138801091301602
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzc3NDM3MTUycQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM3NzQzNzE1MnEBYS6WAAAAAAAAAGF7Ju2aidm/5UOXkOgTwr++6wBPQ7ziP41IsvFILg7AO5yHO5+93z+nz3euFYEEwHekNpEXDuM/LvN70zhO4T+ZuQIFlizmv+4lmsXZpde/4Y9W5dR6rb+/PYp6AsTcP7cwDUA2TAFAAbG2VJRO2D8y65N7aI2uv2m5b/Yrq6i/xZMxvZlO8b/PX+H3H7DWP4mN8Jpypsc/xXaOVey0wT9Ibbj2Evbyv+E8zd6XBck/qMkLrm1UsL+c1EkGXxnUv/opWDFaKdC/wbNrOCN56b9TyJhSs3TiP7/LWndHUfG/Iwsiocqb479wKvJXDibpv0I4J9Z6rsy/Gj3fDNtT17/q86GPq1nrv38SroRi/cW/pRAXPPgWsj+RMm4c+VTUP8P1kipbItQ/WCMLGr9J4j93Wqcfmw/vv4QqrObOncU/qpKaptHW4z9zGs9Kl4Tyv5Gz9HzuJ76/KpNm3RNuib+P0nnySoTyP6ZQhAD15Q1A/AP2JKPX5T8f8lUIZQjbP1j96xKGVKs//i45GJSSzj9DSJtAx4P0P+LtB02SKsK/Bg6wgvGx3b8Dph1TCM3rP8nkSK7iDtA/fxQbjRkf1z93LEOe8oLOvzN2ZmqeL8C//utGjuaFsD8Rr1t+BQKuv7PM9Q8dwbg/T7B8nuqL8T+5bUvXobP5PxmZzeLW978/hGiloLMHwL+8+SkGjnvfvxqpBi88lsQ/cxK62g4w4j824xdQbwrvPyGU1r3JTdC/Onob8dOr2r+7XCMvo7rwP1HbIxzuQeM/8wirOf6j8r9I80TSpez0P7xJc2FLqtK/ETih7SqP3L/0sAjghn2+vz3MxBJhc9m/LY46u37z5L8VtQe/W9z2P2NfZLcAMLg/rjRBSs4P0z/42c2rl9Tzv7zS4/N9atc/k4glNKRw3T9NjtKbFg70v4JRTljIR+Y/I4VsXVZM7z+JcQEF90XdP6rsngXSj9E/xSS88LDY2T8DEvhC5xvWv/VBBrxiN8U/WcNPuK7U4j+42/so1rqlP1L5Xko3KJI/EMVSpLeO078SvN7RsG7tv9sPmz5dqek//olqa8K+5z9oay7YWsqwv+njWX9OccA/MUGIuAjUtz+F0mFhkTvIv97p5h5SQsU/uYdTbTLvvb9j5HI6QyfnvwJzbbBRj8C/sUNMCwqbtT/pUOx+ABXNPyM8z/Lpc9O/VVNyNn9k5r/5Yhp/m9foP/NMEEJFqK4/REtNCoGhwj+GCc/Lo+zzP9nYSgBJKdG/erjFktBowb8ioQdvAFnaP3q8P3Zpr8m/eo7YmSqC+L+o5qG2Xf3gP641Rhh8F8S/ExohMP7OpD/5+VO1tMbGP51wkVHtXQHA4iq8qVIZt7/pmGX98J3wvwZoASKlChDAwfPnwWsXzr9n9rQidWoBwGIj0pusPbw/SjHCn4mBxr/6Xas9cXfpv+tt8B+LN+M/5o7mw4Iiwj+/JAhni8vMPwytARVT38g/IIkPtkvBzj9q2U2yxC2Qv4Afrq0NOcI/RbDWW1/zuT9lyoH1RRvkvxn2IYo1Uq6/hdhJXSN7wj/Z3q0/KPjiP1TK2kSXqcM/6gWGfFzTpL9wDE4aOrK0vw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcxOTM4NDAwcQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM3MTkzODQwMHEBYS4yAAAAAAAAAFxyJ0g09uu/x61pTK1uBsDTQsxOZwv9P+nQPkluCvw/gfGZ/mGr9j8zvuy1oq/PPyEB1UCKj/m/hx3Q4iqJ6b/PF6KJegbyP5YGmECfo+a/mcWLcr9b7r8Q6HOgAjEGQJDKAVn3aQHAFAQVm2xmuT8ZwIisxAjaP5BQa4BcVvs/w0p7rW+I3T+6B3YXpwS1P62FZLCBh/I/wqaBiwQCAEDCfH116pPyP0PyHwCnbwDA1czqyfH15T92UU6AzPgDQACrxjpHffS/05AyCPfg7D/yyaGhKp/5vzHlYrUDNPe/VnliuOth+79qUs4OZJznP0+qsQzjOQHAS74uLliz4D8HK7nZEXHrv3dfW9p8DNw/JS3lNoP7BcDcPDU4fa4BwFF4dH71yAFAF1V7Z1U687+Na0Xyodz5vxAAUxriCgVA44v86ATf878jfw8Qw3IHQKt30JdkeeK/3Ge/fdMtB8AaV3yhMAz9v0+YQpuVBAXA3wigeYvQAcDN6ddNyeMBwNa+mnNIcgRAQEM85/krA8A="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzc1ODQyMDE2cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM3NTg0MjAxNnEBYS5kAAAAAAAAACvnIZ37Tc2/XhsXzY4zvr/AypL6473Bv9Xc+T+de8C/ytO/2CplyD+hcv4GdxPDP4xHToLgrpc/bhDp4elbvj+5mazpMYWzP+DQUgiu0Li/3SlLV70+qz8TUzwz7+7Tv7RjJGHZYbk/gpMNOsbIwr8w1lgoi7uSPyCvgTf9Bsc/k4aiZm6Urj+LQuDglf3TPyBOGsPrn8c/+Bph9pgcxb/p4kTQJXKBv9EdSZYwTcw//BkoZhvj0z+noGGfXkrRv2JMf+itYLy/BPCy/epwoL/KgcF/PvN0v7/1lXplxOK/Z2yudpuAtj/0SWrf9p2yPwgzLrOyCL0/vueAiCsptj/wwl0WPEjTv1P997IOyLG/40j7/LSvwD9XXqHnmobAPytXDiPMfMq/xjiPDa4o0D8cM5VQWOyQPz8UaMp+Aaa/IJZMeGyAsL/Ytqb0zmyvv8mCL7GSFae/sQ9+GwjLxr/1EXAIN6mkPyvHDIM+ubG/tzoe2aR+tz8aZDcKpt2kPzOzFoQIwrS/pbAAqXla0D/SwCBtzrNaP3jTKalBX3I/h+xd6ZaQtb807BDndM/EvyM9zG/GMrS/pn8q8nJEcT8C4h2NPNSqvyP7EC7ALak/l0fyf+9nyj+M8iznWz+6v9r1tC1V0ci/QxvAp8uBp7/4GXggqlnTP9Evh6hX/rm/4dY6940fxT/JNs/d1gK6v0ScIsMxK6G/F5uxmrImzT/6Dy5nLWR4P7Shp0zKlai/ezvXde0sjb8Wg4r4fZzIvyKxcZaFC9K/TIWscPRtRD9HEy24I4S5v5+aRfWw+MO/+PGlLoUcqT+t+vc9cODCP2drgK+JdrS/nh7Nh3Fauj8xJ+ZLiEmyv2GdmuWI49+/IjzLQzz00b89jDwyci/AP/1qEKE4SMG/Ki8x9Shftb9btlgIJ+apv6++GNE0kta/wad9tbE/lz9ySasoJz3Dv79qy6WU564/pPztQHTWlj945scEP1fHPwFi/Gh/m54/D/yHFXCb078qcTyCXYWtP5eeL0BSSrg/NQGqVH23xL/ZoOOO7QfEP+8XMeuDtck/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcyODg3MjAwcQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM3Mjg4NzIwMHEBYS4CAAAAAAAAACjCx/qHxsU/2/d1JcDLsb8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        0.1479953408034851,
                        -0.28115196467555625,
                        2.580161199326032
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    0.1479953408034851,
                    -0.28115196467555625,
                    2.580161199326032
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 35
    }
}