{
  "artifacts": [
    "checkpoint_00001.json",
    "checkpoint_00005.json",
    "checkpoint_00010.json",
    "checkpoint_00015.json",
    "checkpoint_00020.json",
    "checkpoint_00025.json",
    "checkpoint_00030.json",
    "checkpoint_00035.json",
    "checkpoint_00040.json",
    "checkpoint_00045.json",
    "checkpoint_00050.json",
    "checkpoint_00055.json",
    "checkpoint_00060.json",
    "checkpoint_00065.json",
    "checkpoint_00070.json",
    "checkpoint_00075.json",
    "checkpoint_00080.json",
    "checkpoint_00085.json",
    "checkpoint_00090.json",
    "checkpoint_00095.json",
    "checkpoint_00100.json"
  ],
  "command": "main",
  "experiment": {
    "base_dir": "/home/fabian/bachelor-thesis/code/src",
    "dependencies": [
      "jsonpickle==1.4.1",
      "neptune-contrib==0+unknown",
      "numpy==1.19.1",
      "sacred==0.8.1",
      "scipy==1.5.2",
      "torch==1.6.0"
    ],
    "mainfile": "experiment_pendulum_damped.py",
    "name": "pendulum_damped",
    "repositories": [
      {
        "commit": "f7eed01aaffdebea72569d3e30d15e0240c2b504",
        "dirty": false,
        "url": "ssh://github-fdamken/fdamken/bachelors-thesis_code.git"
      },
      {
        "commit": "f7eed01aaffdebea72569d3e30d15e0240c2b504",
        "dirty": false,
        "url": "ssh://github-fdamken/fdamken/bachelors-thesis_code.git"
      },
      {
        "commit": "f7eed01aaffdebea72569d3e30d15e0240c2b504",
        "dirty": false,
        "url": "ssh://github-fdamken/fdamken/bachelors-thesis_code.git"
      },
      {
        "commit": "f7eed01aaffdebea72569d3e30d15e0240c2b504",
        "dirty": false,
        "url": "ssh://github-fdamken/fdamken/bachelors-thesis_code.git"
      }
    ],
    "sources": [
      [
        "__init__.py",
        "_sources/__init___d41d8cd98f00b204e9800998ecf8427e.py"
      ],
      [
        "em.py",
        "_sources/em_42219c3660e0d4213b9d85f7c4f7b37e.py"
      ],
      [
        "experiment_pendulum_damped.py",
        "_sources/experiment_pendulum_damped_70e127f1d9ac784a69ad73a74e3306ea.py"
      ],
      [
        "util.py",
        "_sources/util_584d431d1c7c3cb4f42650f6fda305c5.py"
      ]
    ]
  },
  "heartbeat": "2020-08-11T20:31:21.335669",
  "host": {
    "ENV": {},
    "cpu": "Intel(R) Core(TM) i5-4690 CPU @ 3.50GHz",
    "gpus": {
      "driver_version": "450.51.06",
      "gpus": [
        {
          "model": "GeForce GTX 970",
          "persistence_mode": true,
          "total_memory": 4041
        }
      ]
    },
    "hostname": "H97-D3H",
    "os": [
      "Linux",
      "Linux-4.15.0-112-generic-x86_64-with-Ubuntu-18.04-bionic"
    ],
    "python_version": "3.7.8"
  },
  "meta": {
    "command": "main",
    "options": {
      "--beat-interval": null,
      "--capture": null,
      "--comment": null,
      "--debug": false,
      "--enforce_clean": false,
      "--file_storage": null,
      "--force": false,
      "--help": false,
      "--loglevel": null,
      "--mongo_db": null,
      "--name": null,
      "--pdb": false,
      "--print-config": false,
      "--priority": null,
      "--queue": false,
      "--s3": null,
      "--sql": null,
      "--tiny_db": null,
      "--unobserved": false,
      "COMMAND": null,
      "UPDATE": [
        "max_iterations=100",
        "g_optimization_max_iterations=100",
        "latent_dim=3"
      ],
      "help": false,
      "with": true
    }
  },
  "resources": [],
  "result": {
    "estimations": {
      "A": {
        "base": {
          "dtype": "float64",
          "py/object": "numpy.ndarray",
          "values": [
            [
              0.9397952277273636,
              -0.028816850836567147,
              -0.02174442575387517
            ],
            [
              -0.12834558200863552,
              0.9326001635139284,
              -0.051145712493892624
            ],
            [
              0.4890651501128853,
              0.13229030132885677,
              1.1018174302282613
            ]
          ]
        },
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "shape": [
          3,
          3
        ],
        "strides": [
          8,
          24
        ],
        "values": [
          [
            0.9397952277273636,
            -0.12834558200863552,
            0.4890651501128853
          ],
          [
            -0.028816850836567147,
            0.9326001635139284,
            0.13229030132885677
          ],
          [
            -0.02174442575387517,
            -0.051145712493892624,
            1.1018174302282613
          ]
        ]
      },
      "Q": {
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "values": [
          0.03549252072941649,
          0.011920818772805998,
          0.00027550054475690346
        ]
      },
      "R": {
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "values": [
          0.0002347177843839745,
          0.00012130878357925213
        ]
      },
      "V0": {
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "values": [
          [
            0.0009526698781825438,
            9.528104913147234e-05,
            8.46420298042938e-05
          ],
          [
            9.528104913147234e-05,
            0.00024123194498277406,
            1.8536845227068444e-05
          ],
          [
            8.46420298042938e-05,
            1.8536845227068444e-05,
            9.965384774446306e-05
          ]
        ]
      },
      "g_params": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          {
            "_metadata": {
              "py/reduce": [
                {
                  "py/type": "collections.OrderedDict"
                },
                {
                  "py/tuple": []
                },
                null,
                null,
                {
                  "py/tuple": [
                    {
                      "py/tuple": [
                        "",
                        {
                          "version": 1
                        }
                      ]
                    },
                    {
                      "py/tuple": [
                        "_pipe",
                        {
                          "version": 1
                        }
                      ]
                    },
                    {
                      "py/tuple": [
                        "_pipe._pipe",
                        {
                          "version": 1
                        }
                      ]
                    },
                    {
                      "py/tuple": [
                        "_pipe._pipe.0",
                        {
                          "version": 1
                        }
                      ]
                    },
                    {
                      "py/tuple": [
                        "_pipe._pipe.1",
                        {
                          "version": 1
                        }
                      ]
                    },
                    {
                      "py/tuple": [
                        "_pipe._pipe.2",
                        {
                          "version": 1
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          },
          null,
          {
            "py/tuple": [
              {
                "py/tuple": [
                  "_pipe._pipe.0.weight",
                  {
                    "py/reduce": [
                      {
                        "py/function": "torch._utils._rebuild_tensor_v2"
                      },
                      {
                        "py/tuple": [
                          {
                            "py/reduce": [
                              {
                                "py/function": "torch.storage._load_from_bytes"
                              },
                              {
                                "py/tuple": [
                                  {
                                    "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzc2MzUxOTA0cQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM3NjM1MTkwNHEBYS6WAAAAAAAAAPEf/3TBVti/rcpH3BH62r/ToHGcw5DlPz9sFc19VRDAgAEDvB9t6T8hkW/4SQUKwDw4xkvPKPI/6RMk6XSbiT+BeWRLjPLCvyMeocZeatW/FR2j4HpQ4T/FZXTHHdDoP7/YVesALRBASNTHrOR2AMDoSzxt3g/lP21MHpsMWtC/0wmIOWer578TUN0X11nkP3/5Z51y09A/PYPg2XDgxT/LbehiJ2X/v8T1+QphWqw/6LwkiVGy4b8mSg0+vmjyv2+yWmxBVqe/0XMVcuhrCMDnO/mOg1TLv+XjGLb6ZuK/0+Emdoa21b+XbZ2IOLrgv6quA4cSw86/XCUbGqt02b8mbUSv440CwGSmwiw698u/Yd3h4VIcn7/Dvk4alV3kPwuyCeyE3AbA4xeM+P3cCkCnktDnrcb9vyZ5kNNR07+/DOe9PGdaAEBxT1WQYUv7v8Z3IzZ407+/Lxe4Myz0tb9m9f+hOsX+P7yPrnBkQRdAo2ZFY0BHAMAI3lLB5UvqP2VWt0VsI5m/5zX61ZLazD+W6J+5Z+cAQLtyVJJMOMC/0Sj7hITo9b/5TfnkqAXYP6+t6l5kh9c/t20+LxAY5j+sR3f9YEqsv+q/7vI7oci/dEj4p/fT4z+lT596JnPJP/le4LPLB9I/nfwy6ESP8D98IuW97V//P6FO3USvs8E/8Qnc/nSTwL8cJXoWUhrtv7jrN9u8HcM/EHvSNcmh5z+zwI92SsbtP+ATZMfbF7e/DAat3eAwA8C6R3SNIgrRv2AkXuN2atC/EkClumoqBcCQ0cU9hILOP67ad5jvPMy/aNUeoQ025L9hWwdlH8rCP+BdUj22As+/Lhu95Pe24r+TPL2XX4IAQFIjqYPJjwfAg7LYcleF9z+ljQXDalX5v6m/ZUVk79M/VEhP3jSC1D/h90cX0z7/v9HkGPpeUeI/XYBePLMI8z9u2pLSI8jyv3o7TykkEdM/VPEomzbi0z9aadCNTofwv5oPdpRh+cI/SLcore6v6T/06MipAqzrP+gNDG5puqa/uRl8JpQT579rkLaGOV/zv3r6mW/Txt8/QB5VK9/ouD+F2CxtHJbqv4YSjkERz7k/a+Ewk+WpzD9TSRHqJ8f7v+q6oqXNAb8/TNL6wVjz4L8jKJSskJ72v0h0yUqZT7y/Y+WNQ5EY4z8TsUyK5jbvPxMPWkwZkMC/qXlEkCoc9L/fa8rFfPHivxMeF+6SybI/+EK8ddBlsz8WARFsJSYAQFoR0z39a9+/H4HjhBEf3T/jgzs18TboP17duStXDty/NB30X2m3+b9lNt87UmjwP9kPyPhD4ci/og6vG5AelT/ptqRuvFLmP/gGdQoZHRLA8wssa5l7BUBn13wcAYr/v6NIDuzXPBHA84MpMVuQ4D9fF2VRAyQKwGgiJ6ILDLg/zCzbOd8K4r9NRGRUFd34v/b2oYZOkOA/iuuTwd2e1799wLQC/9Xgv35SxvkJetA/6w6vm5+I1z+JnaN5a2bkv+kG9MIX3MY/p6O4CXqRyz/drhLaGF/6v+1A02AUqci/GzhSmGBRwD9HRz+JeYbwPxneRjmN1Lg/pzmSX2XX57/DhRsB92jovw=="
                                  }
                                ]
                              }
                            ]
                          },
                          0,
                          {
                            "py/tuple": [
                              50,
                              3
                            ]
                          },
                          {
                            "py/tuple": [
                              3,
                              1
                            ]
                          },
                          false,
                          {
                            "py/reduce": [
                              {
                                "py/type": "collections.OrderedDict"
                              },
                              {
                                "py/tuple": []
                              },
                              null,
                              null,
                              {
                                "py/tuple": []
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "py/tuple": [
                  "_pipe._pipe.0.bias",
                  {
                    "py/reduce": [
                      {
                        "py/function": "torch._utils._rebuild_tensor_v2"
                      },
                      {
                        "py/tuple": [
                          {
                            "py/reduce": [
                              {
                                "py/function": "torch.storage._load_from_bytes"
                              },
                              {
                                "py/tuple": [
                                  {
                                    "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzc2NjEwMDE2cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM3NjYxMDAxNnEBYS4yAAAAAAAAALbiNv/gN8K/a5Fsvwi8CMA/M9GK9O8BQDJvQNKpUwFAyJyqyO2SAEB89XLcio3hv1oabu8AOvu/AzK1Gtsd9b9aH5/Hsw+mv9kOen5Kr/q/cDerFsEm6L8cwOlaRs0IQAhTR1IBXQLA63XulfKv979CstaKryfjPwdh/9FzXQBA0W4uzuPp4T95uqv5//fPv4Dbcb3zcOk/YiZKnWX9BECiJDUZWpjwP6MEaNko+APAkdTfgNwS2T9tuZWJ8hDwP+PHxvhU2ADASI1D6rD08z9kqUAUlNzxv8bT2LUINQPAvCCPQypfAMDasHyM3RHXP9L+xZkqlALA+NP8z4lwuT/G1wP1u+rXv/FSjgySUM4/0YRq2lH9BsA/PeqVKAkFwLjPk0hLtQRARUwXGbkr87/LBRYUd3P5v8+tudKQ4AdAYwoRmlfDAMCmoR+LI8YKQOoNaQtYp/e/+S01p1T6DMCuIiOf3VYAwJQhAXC7kwrAaPkg2aEjBcAtfB3T0MYCwMWoyMAUHwdAucS6NktEBcA="
                                  }
                                ]
                              }
                            ]
                          },
                          0,
                          {
                            "py/tuple": [
                              50
                            ]
                          },
                          {
                            "py/tuple": [
                              1
                            ]
                          },
                          false,
                          {
                            "py/reduce": [
                              {
                                "py/type": "collections.OrderedDict"
                              },
                              {
                                "py/tuple": []
                              },
                              null,
                              null,
                              {
                                "py/tuple": []
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "py/tuple": [
                  "_pipe._pipe.2.weight",
                  {
                    "py/reduce": [
                      {
                        "py/function": "torch._utils._rebuild_tensor_v2"
                      },
                      {
                        "py/tuple": [
                          {
                            "py/reduce": [
                              {
                                "py/function": "torch.storage._load_from_bytes"
                              },
                              {
                                "py/tuple": [
                                  {
                                    "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcxOTQ1OTUycQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM3MTk0NTk1MnEBYS5kAAAAAAAAAMiS8RLa186/gHASW7ncwb8MzqFRq1bAv/XpN3l+Ocu/hTRRwLklyz+CKgJCOG2TP2ChNJWZjLs/gkWok188wT9hKZzbfTfCPyOgxUYcX8O/KXbmOhC/tL+ErnQs6hGOvz7sxT/K97Y/6kJRSkZOxr816KThq7CjPw278ozcyck/3FRx+rROrD+983Y3+eLWPwgMmwQm1MM/pwsnv+1Vyr8946CK4tXDP5i4C9jBH3k/AVqQXwYFsz+OxNlM6DnFvy8HphOC/aW/gm7g+nTZkD/47J64wwagv/LcSE/VIOO/9EpGlBnOtD/yjilmV0m4P+bIj+FohYg/0liK2D2U4z9uYYuv4hvCv9xVgpORI7C/RU9eYkSAmz98AklLOTTMP5b13KQW0cW/Xf4Dt71A0D8zhA5pAMaVP+ct2Knmxbq/vA0CYbWTdr9Nox/6/VaGv/89Y1qmELG/NEf+D/qNyb+acyeolNrHP7pPceGDHYI/jlsIPp8n4D813R+Lfr2qv1xfoUr4Row/+zU8bUvv0D//2sN4XHG1v5zBQQAk5pM/PnoU3h34rL+yQas76AjUv/dLHLmnALi/Lguxu4obhD990rEfRqbOv6Uu5M/1wXO/v1qKBKBJvD/AAoEYiFysvymttFHTXLC/E6rmsJ8cdz9uclyQjSvYPxisv4MAaLe/UN+G3LSMnT+EwJdwQ9a9v1Bu34DoT5o/ghgjuVwOsz8j1fM1Ihb2vjVhkHWiG7+/O4LGGCfUZb/EWZStuu+Jv3t7Dd8xXhs/gMyASgrUwr/yqUNTe8i1v9/9y6/ZO4S/ri/v31bXtT/mgmdxd47IP3MoXx4wrbK/nG/IoOTyrb8rh3mZ+9iQv79o2cz0zcm/xl4WQrQA1L+tb8kIOP/CP2oL/GC6KNC/SkrPbJpMyL+q/4g2udKRP8pWfVp0ncu/6OU0gHBDlz96hj7frIHVv0hekjf0c3s/eFZAFnH1Lr/Ih88pA0HJP97+XH/p9KY/sILAZLBL0r8/MpajnRHKP+EoSoiq5NC/QuIBf+7X1L+/kV0wksGIP2i0PyH8G70/"
                                  }
                                ]
                              }
                            ]
                          },
                          0,
                          {
                            "py/tuple": [
                              2,
                              50
                            ]
                          },
                          {
                            "py/tuple": [
                              50,
                              1
                            ]
                          },
                          false,
                          {
                            "py/reduce": [
                              {
                                "py/type": "collections.OrderedDict"
                              },
                              {
                                "py/tuple": []
                              },
                              null,
                              null,
                              {
                                "py/tuple": []
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "py/tuple": [
                  "_pipe._pipe.2.bias",
                  {
                    "py/reduce": [
                      {
                        "py/function": "torch._utils._rebuild_tensor_v2"
                      },
                      {
                        "py/tuple": [
                          {
                            "py/reduce": [
                              {
                                "py/function": "torch.storage._load_from_bytes"
                              },
                              {
                                "py/tuple": [
                                  {
                                    "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcyNjI1NjMycQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM3MjYyNTYzMnEBYS4CAAAAAAAAABunT+95icg/R032ClWftb8="
                                  }
                                ]
                              }
                            ]
                          },
                          0,
                          {
                            "py/tuple": [
                              2
                            ]
                          },
                          {
                            "py/tuple": [
                              1
                            ]
                          },
                          false,
                          {
                            "py/reduce": [
                              {
                                "py/type": "collections.OrderedDict"
                              },
                              {
                                "py/tuple": []
                              },
                              null,
                              null,
                              {
                                "py/tuple": []
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "latents": {
        "byteorder": "<",
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "shape": [
          1,
          3,
          500
        ],
        "values": ""
      },
      "m0": {
        "base": {
          "dtype": "float64",
          "py/object": "numpy.ndarray",
          "values": [
            -0.3572091532543164,
            -0.1400542389462199,
            2.5279422979000095
          ]
        },
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "shape": [
          3
        ],
        "values": [
          -0.3572091532543164,
          -0.1400542389462199,
          2.5279422979000095
        ]
      }
    },
    "input": {
      "observations": {
        "byteorder": "<",
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "shape": [
          1,
          500,
          2
        ],
        "values": ""
      },
      "observations_noisy": {
        "byteorder": "<",
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "shape": [
          1,
          500,
          2
        ],
        "values": ""
      }
    },
    "iterations": 100,
    "log_likelihood": {
      "dtype": "float64",
      "py/object": "numpy.float64",
      "value": 5620.591130894265
    }
  },
  "start_time": "2020-08-11T20:12:13.194834",
  "status": "COMPLETED",
  "stop_time": "2020-08-11T20:31:21.334027"
}