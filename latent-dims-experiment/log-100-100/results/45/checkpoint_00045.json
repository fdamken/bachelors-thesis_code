{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9920816831927184,
                            -0.05089883135664128,
                            -0.023966407574914885
                        ],
                        [
                            0.01234485928069072,
                            0.9274764433261453,
                            -0.03442630955042634
                        ],
                        [
                            0.26748118144978356,
                            0.13328570278114704,
                            1.0669334207197965
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.9920816831927184,
                        0.01234485928069072,
                        0.26748118144978356
                    ],
                    [
                        -0.05089883135664128,
                        0.9274764433261453,
                        0.13328570278114704
                    ],
                    [
                        -0.023966407574914885,
                        -0.03442630955042634,
                        1.0669334207197965
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.12724177455664884,
                    0.08304014190658647,
                    0.018398296500200088
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.0005412093706363521,
                    0.0006105298106684245
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.006840391594706561,
                        0.0004912383478886673,
                        -0.0008562842593080322
                    ],
                    [
                        0.0004912383478886673,
                        0.009009066118951359,
                        0.0006777243130671184
                    ],
                    [
                        -0.0008562842593080322,
                        0.0006777243130671184,
                        0.001860641938852936
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzY5NjE5MDQwcQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM2OTYxOTA0MHEBYS6WAAAAAAAAADm/5ffMU8u/+Gd8ax5qwT9aFFDQcmjoP70Csx/XLQ7AknK4P9RN6T8C77qFABIKwDhSQS8PffQ/GsxUd33t6j99Tv1PrYrmv1/TXfRFkdK/iniWUspupz8c1+dGc9nhP3JgXmvJXgZAxgsMTLvm87/gHGuhmKjvPzhHjpsKq8a/Cyo9vcFm5r9DtUHwO/CzP1ztBI2f38Y/jtwdCVWOwD/xBxROekf2v3cLQ8kN+cA/I0ap1Fsnvr/ec/rhUlvhv+kNvFZo4rm/CHIM0HDg778Uvs28hVG5P4ZLtSbRuuq/JbfzlhTz67/o1qLYHLTLP9DS2gh9SM6/OEmYHBbN1r8DL0oYekL5vzpmZD5MUcW/lUeh2QT+hr8UlnWzEKnTP75waGAkXNK/afzh154L9j93ejKnXj8AwEEsTCY3gbU/6qLeJ5ee5D/ZuWxbN2/sv8f6MfqzLr+/OUhRME+Wfb9Ii+MXosn1PwKUKatFxBJAspXXozkO779dN5hxvZD6P0/iYEaYMLU/voh0tfPR0j8MVbEKlHj0P8oEJBV+jcG/EcxRWp0a4b8ktJTURNLZP8+4M5WMa9E/g0LsJJVj2D/ruAN5Yx/Rv7ElRIR1DLu/MNf2dn9PwT/HxRL8zSK2Pw59hLKtRdA/xjBLPFzT8D8dVk9wdTv5P1VcatMKWLQ/hKWZAvahxL8A57dRwQzhv2XisiC92cY/MGWwDch44j9qQsqY/ufsP5SLPr3fh6o/8NaAGHxv8b9urTv1Z8jxPxj1GAElaZQ/sY9yPyBsAcDufknZaqHpP1NNCZXVhNO/OCHN9muJ37/MmfUAenTFv05vIZfel9i/aA4+Pc3A5b9z+KwGGoP4P+k76vO2h8S/w6Kiuqew4D/JKtGG31f5v9Bpjv9qx9c/LdTBw9OV2z9YuYsE0rv0v7oOMSDk+eU/X3jO7pof7z9ENf3cv6DAPzEo9pBPy9I/UMxbF1KL2D86AcC+xzjZvyAumTq68cQ/V57UE/K04j8jLKXF2dfXPz7cqx19moc/pHwv8utg1r+iTa2EBWjuv88zClgQUvI/AstXhBXv5z8Kezh+/njbv7hX0HOiJ78/p0VogY+xwT9ePOPAFGHJv25q9asa6cA/v/lWXJOFz781ovrw+rnov3vV0Qor87q/GI/Bhj7oxz/2bi6dMbXWPyRUClQxFtK/G9s1MBzp6r90lLLgSvHnP0LxReREY7k/JDV6R/U0xj+q4JAiyWH1Pz2E69m5JNq/kSpvTlfzrz8+vxN9IajTP4v4e0r309S/sXGKf1DN+r/yl+52Wu/dP+sXQ9E2CcC/uh4blou3mL/nr35KETLVP59swg8LFQ7A8qtq8DKcAUALOFFvzBYEwFxQNNikKxDAcEIg4XY63j/S9kDsI1oJwGCE15drScA/Wo7CVWG1y7+bPtp7Xinpvy0BtSD+KuU/HG/jE5aAsr/B8R3lGdLRvxvayplT/Mg/xhC02zv/0j+I6XM+foiYvy87RWdoZsA/LHJclXdhwj+wHaWM+Kfuvx8TmfEytLO/c3L/k2GLwT9tYkOaLkPlP9shCusRgsA/ZxVuLsFmxr9V5khb9wjNvw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzczODEwNDY0cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM3MzgxMDQ2NHEBYS4yAAAAAAAAAELaGFTwKOC/LMfVk3oNCsAWhzYEYVH8P5d5VjVlHgBAxrNuIjLdA0C2oshbU/zZv2FtNy1d3/q/KH59WALy8b+qYpKqRsriP5IoZazjQs2/cEPoC9/177+rLTTsGS0HQA1WpTgldQXAo25S8b68vD+1ynsW91DfPy+wjEtLqAdAW+tKF1mR3T/9+L5KWT7Uv3Z/x54uDfI/V9kThzVVAUC/oaqJDV7xP2l5alfGCALABwQEs+i+5D+H6jfrVZ4EQJl2tMJea/y/R2fiKuJX7z9kU8ntGI73vz4elQB0XQDAXeRcYb5G/b9kD3BvLHHkP78MflXb1AHAJT7WLbDd2T8Xsv+cBnHovyiBoDJoz7E/O2TmncEJB8BBRXZhZBgDwAUqiCVNcwNA3yqHei+09L/sekkA4YD6v1FvxD/tdAVAmqo+A/5J9r+zapDSr8kIQOLlhnUOoADAC1Xx7iWrDcAGDs1mjzv/v3gCFRMh/gbAtZTV//2AAsBORxt1nQkDwKkJ2KSPAgZASPhk1xPRBMA="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcyNzI3MjY0cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM3MjcyNzI2NHEBYS5kAAAAAAAAALEagzDJB8+/zsUP5a5QwL/Mm7XaNovAvy374KnKQMS/XP9UEK+ZyT/4NF7U8FvAP5gA6bSUWqg/rOaRip/mwD+e56aq2yC4P3i6Icf+KMS/Mh0mN1NpnL8JxE4QNzDTv4yvMyjfD7o/t8brcgrPxL/Xa0VRaRGOv2pJO2bRPcg/lmw1uhVcmT/KRVlb0uPTP/hYQ/+c/Mc/t10L4sInx7+0tzw5nAm5P/Ide1JvWcY/6N3MUQF0yz+QJQg2TVDRv1vry9QBCrq/g6lcWySGvr/Kojba/Gadv4n0PbbSveK/5wch3R5xpT+gogvFB2+0P2Nn6Nhi7bI/Dq1b+Rjwwj+34+ThakXXv85s/hDlCa2/LfsOTrqPsD/bDjMO3x7APxEfUREnis2/DhxEdHPy0D+Jjb/VhrSnPwHmtqdTB7O/mMC7QMo8pb+2KmQs4ge1v6bXoNoi8au/Bpz7me8ByL8d3JyAml6Qv6LvXsU0rqG/dYtNl/cWwD8Oorgbu6iVv3JFqspkpJU/m/tcY/yJ0T8Fkzo7obONvzUyEMFqW40/L7Q+VZSBtr+9SIz9sSbHv+qqlT+Lsra/dwo8LFswib/KXn8HEsTDv4HqV0RsAK0/XEy+egbWyz84iGi8S1yqv/iwzFZJJsC/QJBuYPlAhb99/aemBtjXP6M1aLd117i/amtZMI3ewD/NfI9kJYi8v9poAZYUf5w/4NTH4W66yz9APQxM866fP5kwDBsHu62/64pkh+C7hj/mnJ7/GjPMv1oW3SMmV7O/lnsYESnhsr9vRmk4tue7v1XQlUg50KW/qaBS9LZKrz+6KaexaefHPzgKiKuxGaq/7+IZzmeNqD//dGG/T66Yv9YRyA1lVty/GFAIJvkfz78A8chYl2TAP7BlqErdedG/HzvmQb3hur96izT+ge+qvxVXPOsIs9e/xDhaQdLCnz+iYsOBhaPBv6+r2EM2r68/skYNKYmxtT+X9e1U9ZnIP7kcgC+yWKQ/Y7QtsqID1b96Az2kSCW1PzB9o5NBA62/yBEyu/e10r9v6XQaAh/JP+R1BCdqRcs/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzYyNjA3NDU2cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM2MjYwNzQ1NnEBYS4CAAAAAAAAAIMbTXlv/cY/ErsHYzlRtL8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        0.08257672616164805,
                        -0.3554775443306822,
                        2.597646939460631
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    0.08257672616164805,
                    -0.3554775443306822,
                    2.597646939460631
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 45
    }
}