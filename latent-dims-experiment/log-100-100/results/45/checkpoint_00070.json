{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9123179233096284,
                            -0.0027951270552675316,
                            -0.021780886029507444
                        ],
                        [
                            -0.15815748798439438,
                            0.993173594433355,
                            -0.04361217339335399
                        ],
                        [
                            0.5376771838233186,
                            -0.016129894467643992,
                            1.0743321836392883
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.9123179233096284,
                        -0.15815748798439438,
                        0.5376771838233186
                    ],
                    [
                        -0.0027951270552675316,
                        0.993173594433355,
                        -0.016129894467643992
                    ],
                    [
                        -0.021780886029507444,
                        -0.04361217339335399,
                        1.0743321836392883
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.07568552132917779,
                    0.04115976008678971,
                    0.003842604967663913
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.0007517583597928024,
                    0.0009323553819074845
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.0018911852496222015,
                        -0.00032082149757059475,
                        4.6025583817277393e-05
                    ],
                    [
                        -0.00032082149757059475,
                        0.0013323566326746417,
                        0.0001345103461074526
                    ],
                    [
                        4.6025583817277393e-05,
                        0.0001345103461074526,
                        0.0002217535040314189
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzc2MzQ5MjgwcQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM3NjM0OTI4MHEBYS6WAAAAAAAAAKxdK9b4P9a/cdLYn+v5xr/+UjxpxTvnP/Sbqe2E0w3AAeNOhkm77j96LzqGJ8MQwJ5B1MVIXOk/5c93fYxq2b+32d7e4X7lv1q8BMWQq9S/+APeZlJYyT+tNUYZb/rlP9yGfO3P6vw/+HroygQ/EMANkR5qClkKQFAwfYZfTdO/HvEXDHvh6L83sj116fTWv7VRMy26t8w/YTcwsYKAwj8Og2Hk8Sb8v/JwZH4/W8Y/48fxkX3z1b9tw+8ZVSjlvwCF6Hlqnac/XEpCpfOu9b+Pis/3fKnPv6FwWIq4zu+/LQQmz0Di2b+zL/PajT2uP1z2YGeXi8y/TpOAiJZc1b/5v0UJ4MICwI3ZOrz42su/v6fjVVnitL8wUnZOC+rePy6tRLt3Qva//7jUe5WREkD09d9WiBgLwN7XqV2LFMg/jQBdHu75/z8pfO1RxsT3v3o3AWZAWr6/gTHfchdRpL/1Df8uBCT8P3LB4n9k9gtA3/YA0eF9EMDrF6p4CoUMQAa5oMFYNqA/usW8hel70T+6bepFwhv7P+f6b2kiSqO/ZisU4Baa7b+TIvgLwRPWP6xNaMX/dNM/ePL+X/IR4T/vIeDHbMm9vxr4BJAEoLi/cFu2988W0D9pBf0nJG2vP7/tVJOea9I/qdbvL4QK8T86EWAGf6L6Py2pHZGgXr8/CXX2FRPFyr9ktEiH+xDqv9JtVtsYys0/FROO971v5D+B2E0jh7btP2mOZN4IF6s/QricJr+y+r+rtN3hIrfCv0uLzV8R1de//dUQuhjeAsB3uRWN9VvgP+/+OUKmCtO/YMich2Y+4r8B6UkxpvvXv3T7WsFGkdO/W8Vob+XZ5b92WQEu5KD/P7sDKj5NhvW/dy9Jl61LB0AIuJ6XEkQNwDtzxopW39g/i4lusGNt1T9SeApfz8D6v593WjLdjeA/lKfWTnLr8j/4VPbIhGndvzlxhFEFotQ/gEO7KWP/2z8YgAffSR/Ov9LZFIYaq8M/aAE5dsC45T8OI1gLR3XjP/JJ7oHh256/vYLap1ic4L86K7VbVznvv6sf8uecWek/PzG0SX8I4D8Z6eYRmTvsv/rT53CgAr0/6S7eLo1CzD9Str7DBX/xv/pR1a2vL70/aK25+DIE3L8AVKE79TDvv3+cmEueZbe/Emydk3PT1z/ueV3GHW3jP+76H9O8Fcu/xh6UOsA28L8cGoO2oVbDP3aEW2EnBb4/RaRdmqQ7yz+JjMvlbZf6P4ohGXoj3dy/XlNjcwf6yD9xVw2sdSzeP6zzYE8JPuG/iODeZmeE+b+X1Mfnku3cPw2lMjy6Gse/iZjoihOxgD8M6H7QhCDjP/c5h3lrTQfAkjVRpqGIEEDdfbBRuR4QwI0pABUj9A/AkYT8Ktoa5T+aXh1zmJwQwNS5rbdNhLY/i/HG2Q5Z3L/+hRrhqDrxvx7/e1oJ9uY/2fXeDV4tyL+0XS6EOZfYv7sSkJfztcc/9h8NIYog1T/aJP4KI5DVv+79TBYKAMY/gVv6WwSdzz+HuLXYI1b7v/iJxl8rUcG/wiboJ0ezwT/TnB/FGRXyP+5cOgeO3L8/V/nP/VkC2L/Qwvbk6wfcvw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcxODUxMzYwcQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM3MTg1MTM2MHEBYS4yAAAAAAAAAGv9r7uAX9q/qlcZzo3gDcAos4rAhpv7P4EOPLiuqwBAzl3c3UskEkCftQhEVR/jv8KGLzR2a/q/MqbyqPQo9L+94TVJezW7v+a+jreZavG/17PqJ4Sg6r8kFy0oVksIQJnLovJodQ7AwVkcb72j9L/bc2bhsmniP7Xj5fFmaRJAMtE21CC/4D8vD/AznmnSv5R+6Y0mKvA/kMf/9/b9AkAbMMKOMSnxP/e5wQ2yHQPAHs6/yCq94T/moi+58HPyP16GCNCDjP2/Yi2JqPqM8T8BclAo7Yn1v4DCPfMw8RDAszKjWtAI/r+7ddP4GSvYP5l9ufIkvALAu6WLd1yo0T8U6ecDitvkvw5Brx+Y3KW/xKk6amRUB8BDYXlnatUEwGnYalGwJAVAUiOS950p879gyr9bvtL6v/CgOiwYRAVAA+bArBx+AcDptJkSaw0KQCyh7dGlpQrAwmJr/2XZEMDw2OAaeoAAwDAK1NM6mQnAEIN/0Q04BMALiDwQFeMCwDl98RPlzwZALzTma4A7BcA="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzY5NjU1MzI4cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM2OTY1NTMyOHEBYS5kAAAAAAAAACVR3s5muc6/LEMRvgEIwb8hD5/wQD3Bv27Q/Rr0Mci/+ggRuQFRyj/MxtTiDZR8v6g7yn7BtaA/kOSaSBsMxT8VwOU4ilHAP8vOoj/A0cO/OTzDCiJss78WWaKES6PGvxvV33k5obg/xj0pxc94xb8eKpcM2HuWP+ZB2z4k9cg/3U9RU6GPlT882JIHVMvVPzyxghMMT7U/YlH/PQdwyr8iak08AWjCP3nEHODORMI/1hu2aACMsT+/o0QzrofLv8bQf8423qm/q7aOzrN9r799Oll9wRWKP6bI9men6+K/eUaeZjqStT8RnzlzjVKgPwmzoDcliao/x+A1ShWS0D/1WJYnG5LVvxm5cvPcWrK//28Tb2d6mT/gqqKnQz/EPxiZGLpWiM+/iLux2uptzT9QDLSdZCiuP0HCu5nuH7a/q1LzqFNrlb+Jcxr1RH+3v4wgnj5uzq6/zh/9ckK5yL9/xLBNjgapPwTobNvDVJe/rH7ccPoowz+WhNoYtjmzv5xQRbUn2KC/wLrbn/k50j+AEtZT2bOyv6aDp1M2EZ8/RcEcxiOUtr98VRR278HKvzAOjOBqy7q/JK1nOIjijj/tAmz1BNfEv5NzSnQfeas/88nJvgCayD/uLvC3G3OXv/dAGGvuSry/zgSgkTbQrz90tYi1Pt7YP/QZt+xNxbS/KcztthEorz+D7bvPglDAv1aBedB85JE/w0c22CKwyT9xKvuuFNuZP6zDHw9UxrW/p05UsjDQkz+C3KddanDIv5mJ97Nu+2c/atDg8Gsmt7+WvbdgeJSwv30eowBv4oM/Ya4+hAAPsz8dv1u72fPJP4tJKl2ZUsG/YJb8GX1Ckb8mdkqzWySgv1GIauw7dtK/iX42UfsB0r88gvsw8I69Py0P7WE0LM2/Y/0YvX0fvL8+hyPieMSjvxmHOwoLes6/8wHB4ZBZlD+qFwgM/uTFv+Ms3NSoX6g/or5IQHk2rj/opU1zZabKP0kAEKlyiqw/hXpdDD3s0b/beMLrq7zBPycVR2uRdMK/LwkCF72U1781b6mAjFmwPy4DVcLoJss/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzc2NzE5MjAwcQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM3NjcxOTIwMHEBYS4CAAAAAAAAAOeLTlLCtMc/e9bPnxlquL8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -0.31591165227210494,
                        -0.2965618941774056,
                        2.540710514680157
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    -0.31591165227210494,
                    -0.2965618941774056,
                    2.540710514680157
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 70
    }
}