{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            1.004589454094737,
                            -0.05334357623141416,
                            -0.02051661404533496
                        ],
                        [
                            0.0313017119683344,
                            0.9221659786031855,
                            -0.029901983143105545
                        ],
                        [
                            0.23225800942175415,
                            0.12434703504497616,
                            1.050458544543778
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        1.004589454094737,
                        0.0313017119683344,
                        0.23225800942175415
                    ],
                    [
                        -0.05334357623141416,
                        0.9221659786031855,
                        0.12434703504497616
                    ],
                    [
                        -0.02051661404533496,
                        -0.029901983143105545,
                        1.050458544543778
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.21119050332041783,
                    0.2577430296591054,
                    0.06493268588103625
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.0029405171719063218,
                    0.0060232152866533965
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.007776405902529662,
                        0.0008329339920567641,
                        -0.0013813705791218545
                    ],
                    [
                        0.0008329339920567641,
                        0.012833360737215013,
                        0.0017911215224996058
                    ],
                    [
                        -0.0013813705791218545,
                        0.0017911215224996058,
                        0.0028142928028715986
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzczOTc2NjcycQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM3Mzk3NjY3MnEBYS6WAAAAAAAAAFUViVZDfsy/31bqJapgyj/5XgdoTbzmP5tNHyZ3Fw7AKC0/qBNO6D+UGcvuF/oIwOe7HvbwkvA/Hd5U6dgT4D9ePEgignbmv14RSOiyBdO/RlDp7OMNpD+CtOIHZKPgP0KvTMyNcAJASp+gQjLP3L8kEQoIZQXkP/vaXsqgv8m/KY2NCcGv4r+qWmqkVSHLPxq1Ej0nc8Y/DoKQZQyIwT/Fg8aBRi30v31ui/wiMcU/hr4sfWLkor/TwlIEnWXcvx43Hj5Gp8i/RzRkucfH67/vxnPLesnCP2xj7Glujuq/+EjizYP567+Uogr/+PunPzO8Wqt+xc2/XIjIyeLn1r/jf856jBvwv3oToUyGccW/zAUJCCMygb8l6yA9sEvTP6+7IU2wcNA/H+LKUyAm5D+urKJsXmP4v0VFdq9UQsk/7ejPn/uh4z8AR17FDTfovwfgYSV7/b6/nMxj97D6gb8hotgSGHv0P4qCqtnSNg1AVUHPInBTzL9BcH/COOnzPzF4Lum5nq4/FZmOaJU60D+z3ZF8mMH0P8qlD6lXqMS/5BQP+4w63b+22MLL5DDcP4auaqqlBdE/xWiyT7SF1z+nZ9L5pBTQv/TlApp557e/1jrqg0lCrT9L1ujQj4qlP9AL0F72SdE/rCKrncgv8T9/VO+Xrg73P3QPZ+WOp7k/PJ0ymEHPwr+zwNA5KzzgvyT4XeF8HcU/zdRAjBIV4j9Fzv76omfuP+9dD5llZ72/Hqjeyv/q4r+znaZ9X/bxP/E+KoS6B9g/zpHkEZ4B8r8vX814FZPwP/mxb74jEtO/CzI/z/ox3r8sBL7kZgapv/H3xsqI39m/ZSmaNtVo5b830oEay/L2P7XrYasXfaM/ZRF15aXa2D+jHmt6cVz2vxcRaPA8WNg/Q/sSHkaa3D90IubR0Unzv33sR6j1J+Y/ED52hRJv7z9PhUR3aNHCP+QkZtONgNI/JGSUW5IR2T99iiMGDmXbv4fZFnY/G8U/5o/0t3L34T+0iZJdisLTP1fsC3JIoYc/U+z4u6YD1b9ggWnVPB7uvwQYhShkc+0/NF75d7p43T+CUE4G02riv0NRJ1FMYb4/0+WRdFbpuj87ksjccfbFv7KUy/pIXMk/pCaaYbKcyL//Ve1Tx7Pmvx93EmrL1MK/A0buwXHAtT/N7RYs/5DQP0NqR2bD3NG/eVLqx0Mi579FF5gwUITsP2ZAhLou/bM/MqvcwRk9xD/JXG2kSIP0P4s5DEPC6tW/uMklBNjopL9aFkFRfqPUPzfx7L/0G9e/J333TbZP+b9VrErf5z/eP7dX/IpMyL2/Y3DHIeNYor8SRf4zdHzOPwTsSVK8sAfAHpIol5YY7z/9qhnImwIAwFllkg0vGxDAV2IC2KT72T+klCtiAm4HwCZ/9D4JfL8/un8qpFAizL9fIuH1YCjpvyYmKy3P2uM/HR6A0L90yj9t9/lqLPnSv/7WCMvlm8Y/afyu+tHp0D9qJQGiwl2tv1bjiWiDn78/81tIl2b/vj9dJ8brN/Tnv0wqBqiYuLK/f6B+S3EUwz9qwqeylLHiP/54/MFbycE/P22jLEPZtr/YIyfMVf/Avw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcyODQ4ODY0cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM3Mjg0ODg2NHEBYS4yAAAAAAAAAJ6D1Ayx8uK/ABbwUa6QCcDdeb/1mFL9P4pBMfsyQv8/ysy1V4LdAEARTKA/gJnQvyl7qTHrivq/wZhlN5908L814eUn3wnnP76scKTny8+/PZT9Mgxt7790g+lpfOwGQMswRXK3zQDAEoc4MqZU0D+pBKou8h3cP7ky3z/0QQRAFQgkFn9m3j8u6ZvafdrPv/FzTbyNvPI/GJ6Y+tr3AEBOCsD/Q8bvP+xuMnfGkwHAELMxc+BR5T+RiDJT3DsFQDHEua8H1vi/QIvSFNGz7T+lIXpr1Mn4v/ywWNbyuPq/mdskrWxF/L+U1Ak49sDlPwtDld1htAHA+DtlZtHi3T/QO/lultXov3OuSXikQpE/2n8Mld3EBsDmUqnNglkCwBqp8mfGugJAwnjzhk7d87+Cq2gw9kz6v20tPESrCQVAuV8p7b6B9b+LJBeBnVgIQOuGzVDuyvi///oualWaDMB+wBcEvJb+v0RVTCmg7wbAc5+ddlZwAsA0PHlyO74CwMGk6JT2ZQVAXVbyT2AvBMA="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzc1ODc4NDMycQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM3NTg3ODQzMnEBYS5kAAAAAAAAANVeDJ81LM6/8WVCnE5xv794mnVWPQ/Bvy72qdao6cK/KYeJmakByT9hPRG7iQTBP5Lg4mlh0LA/aX1gPYPJvj+UpIzbo0+3P+E7yYz/O8K/F1/KGjzchz/dJFb23JvUv7P7B9nsP7s/Dw4c8D1BxL8nl4TjeaV4P4sImdfJpcc/eRqXE2LmnT9cZgDqEhzUPwL/Wb2Vb8o/SZu86ez3xb8zIx0LoxWxP7pWlaX01sw/S1wraoTJzz8Hc1D7UJzRvzPto3KsIru/hztVfSDVtL93PCFLRT6VP5MyiF05mOK/vIb4rjyZnz8Wvsd5n2W2Pza9l2uIjcE/1Y/LR6ZfuT84mY6Lpv3Vv9SSIGx9V6+/yFvs8T/ltT9y13W7pbPBPwkbV1MvrMu/JRkBtUiL0D87+Od5siKqP9Tk6Rk2y6+//rXcwGEnsL/zLCDGuTy7v6CEVIAEkam/WgwNA+hpx7/71As5Sb1svxIbI1FiwKm/QN3S0Ziquz+KyULca2iev1TEckzcMI+//lZJsvzL0D/sTXTiG5uGvzTy7wnRunc/xcjL+xShtL8ledWcT9XGv2fKupXQgrS/kCNp6fhEgL+Hkflc0v3Dv7jRM+tngKw/xcZH67MTzT959DbF4UCxv5oh8A6+B8S/QJCtbUXqoL8kRHFmF0zXP78hrG10Aru/s1tDb/HeyD9Qcws0ZVi6vwmcrLi3Z5w/OtolOFHqzD+QSGCkq8miP6zkQ7Vspay/VpkefaBqmj+X5U7Mx27Mv5sh5F3uIcO/q2HY0GmxsL/EHmXzY9i5v+HX1mj6z7u/yGvTeYb0nL+52bTvxs7GP/C7RAqgj4K/6MmUYkyItj89b68sJIqQv53FPbmxbNy/2U0JFQye0b8+bOJtrjXBPych4mhjEtm/571Ohy31u7/aXnoZ6X2qv0G6Q6ZCyte/CX9pa7vgh786GcvgjTvBv0k2dn/5Oa8/9jXMxtgGtz83MNwxFYLHP7g+9EBj8p8/CMbc5xWo1b8aHyTtZQm1PxHsMsFXAaO/tuDl6pvK0b8+bzASnVzKP+jK+FXkE8s/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzY5ODk3Mzc2cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM2OTg5NzM3NnEBYS4CAAAAAAAAAPF7XuJnZcY/lpKEG3khsr8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        0.12181921831821713,
                        -0.31789091758719407,
                        2.5947189423529555
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    0.12181921831821713,
                    -0.31789091758719407,
                    2.5947189423529555
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 40
    }
}