{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            1.017848289805342,
                            -0.011991724855483808,
                            -0.004719962777837342
                        ],
                        [
                            0.04036897855960902,
                            0.9789598657223715,
                            -0.00868226882391866
                        ],
                        [
                            0.23282255922825787,
                            0.010054642731125748,
                            0.9986149577265522
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        1.017848289805342,
                        0.04036897855960902,
                        0.23282255922825787
                    ],
                    [
                        -0.011991724855483808,
                        0.9789598657223715,
                        0.010054642731125748
                    ],
                    [
                        -0.004719962777837342,
                        -0.00868226882391866,
                        0.9986149577265522
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.08090057109626297,
                    0.07475896517303819,
                    0.040566563822187006
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.0004762092333548935,
                    0.0005834429853407528
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.012489042945719099,
                        -2.7651319316777945e-05,
                        -0.002676775077325666
                    ],
                    [
                        -2.7651319316777945e-05,
                        0.02892366932114762,
                        0.00446745605758081
                    ],
                    [
                        -0.002676775077325666,
                        0.00446745605758081,
                        0.004032852877441151
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzczNzcyNTEycQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM3Mzc3MjUxMnEBYS6WAAAAAAAAAIf9Y76Kwd2/nXJ8M9DX2L/vYKqDnNviP74CJqYplw3ARJG5c6Mj3z++zWkIjv0DwPvnbf/csuQ/59tsWNLl2z+702og4dHkv0OAmzT589i/FT6+jq5zsb9U7N4BJezbP6rQy4oXxwFAPvukWoRryz8UTvVjAmexP+Ij6IQYabS/rcPFGDIz8r/dA1AVF7HVP1oZtNgOcMI/bwx3PzTkwz9DaukPbgX0v5xs/+RtncU/VcqDjbp4s7/feGLDrszRv7zwL4YFS9C/WnG/bj+s6b93UW4z6oXdP7gl1nt/TfG/BzwKMpaV079L1bzjCkfpv9SymjbkBsy/pmIixEze17/RPlKRybTkvwJfJkLx5sS/7P+u71SSiT+4X/3WWUHSP0qe+EA7ctI/zq7lofJL4T+ZZJFMd4fqv+W6lSexv8Q/PVbiBQfY4j9bdtna5PXxvxLyGopc+72/5qsB8+QPpr+0rHRC9XPwP9e3KY2ARw9A/z41U0YB4T9flq10IAjiP2WINN+HTaI/sCug3vXQyT9mgLPOU3b0P8WrGSCDDMG/nr2ccz6o278AXmnA5/3oP6cP4dAJn84/4hlPUniG1T+BDTcjcGbNv6US9EgvBru/c2lQctm0tD9oifeFb4Siv+h+6yDRyKy/Ds/PMz1q8z/ZvYIeoh/3P0+3hzpLZbs/J3NAfcpKu7+bx8cEOhjcvxSyWWfLhcM/5siqwkaJ4T/2CPIp4UTrPx9VeiYbINC/UOD8hKWh2b8uxeT5vnTvP+byIX6a9OU/5Q03dF3m4L8hjglItyb0P4VmO7Qv69G/vXIYUhpu279RuLOWX77Av9IMVgZxQN2/Pdm6Hfwo479+JqfE64P0P1XH09GEI7U/bHCaXDuQ0D8f1QY3irHyvxLaBrv+otg/e2M3zMnp3T+wgS7yUzbzv1Kt/KJ93+U/uLX78LBE7z+HZlJSjM7nP1lNQNq9MtI/lAqVNuH31z/NH73iFxDcv28uBrpR6cM/CeFWMIOf4T+NlM43FiewP1XWy3ZPRow/3xg7GuqO0r8frIC+9Ivqv+CUQL3GQOo/lKIanWxy6T9Y7S3zUvZ9P6zw2HYQ5Ls/8n7cdeA1tj+tgxJHNAjEvzQa6HdPE8c/ffQUPKRPvL9qVQu4BBvlvzyJxn0KP8C/zZYWMFiAsj9c+H9muQLJP3FKGZ+emNK/9mrT3Nv85L9pSz3AcnflP1ccc2IEj8S/eH9YIvRV2z8zqcow0Q3wPzf9K1+8rdO/J8vNfDIwyL9hjLjaT4bXP9/cDdLpPsO/4dJ7Okht+L+5+Z0vGbLiP/K4WfOhtL+/WIVogb5eub8o31i3gUO0P139OQItQgXA1XEMzxH+4j/54tdi9IP/v7ogOWmrIBDApbf8N1tgyb+e+lOlEVkBwADTA2SX4b0/tW7pj+N+sr+xf3UcwRnpv9BzTYgJiOM/gJb77Zdd07/5vxSrdXjTP14aRx0UPMc/4nZwqcyG0D9pvMDpvhe8v4WumYSXHr0/MTldtixwvD+NXIA21Cjlv4+rgoLZT7u/HczIMT9nwT8GVOFAMGbeP0qWE+I8fMM/h/IjwPNAhb8GgFIRdXquvw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzc1NTc0MDQ4cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM3NTU3NDA0OHEBYS4yAAAAAAAAADWAfyZ9KOy/5e0gq37kBcAvuf5r0j/9P6N3XR/E8vc/Px1mM4KJ+D9Z9wJDdm3TP22iR5MduPi/hrV/Ofej5L9jnjGeygLyP9dCqD/grea/NVlBOfye7L/mN4Lb23AFQOulT2CodgHANeTM20XQuT/n2eAzm8zUP0/r9lpQgf0/uPjkvDC/3z/oq1ZjHk+wP2sGVmJq1fI/W2k0V9oj/z/if7mNZf7uP4hsuryHR/+/0ZrlYFpk6T8Q/8VttPcDQGgdO5vwC/W/4TYoxIMI7D9r8J6Bqfn6v5GahSe7QPa/I9AyU77j+b9pfy78OvPnP/muDCATsADAIvcoEybd4D/NIhbQcN3qv0fRC7D1TeE/RQXysUKkBcAHyEhowqUAwO/458v4/gBAVA/TIgcy8r/JEXBQ5pz6v4yF2sGczwNALzBLP/XN8b9RcJJNAVAHQIkk2lHpxve/nc/Et7gTB8CwgIWJHJf8v7Kn4ZdB/APASXgrxaGEAcArhpoDZ2kBwFr42nLFZwNA5hZtRSuKAsA="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcyNzY0MzIwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM3Mjc2NDMyMHEBYS5kAAAAAAAAAFXgfozCFM6/RQxFHGsTvr/yMJOGV9vBv9jTwBCV17+/tYBj3qJVyD/ZI4JBOB/DP3jNgzWI2aM/IxCRP3U4vj+UpC4mmuyyPw3cFYrNsLi/CU7XD7NXoT9oP8UnHrTTv/Bn51buKKU/BRl3FWL9wr9cSyaHFbtov5A2Vxn59sY/viWwAxiWsj8ZkXgrbYrUP1BS49jKv8c/U15yp0EUxb/Dxj5Oea1YP+Rq5lkZIs0/zckXkGUa1z/onFD5rKjLv3XT0Y/1gLy/PpfnpKdqpL+jFO8SNGCqv3W3JvJhseK/ime9bVY2pT/bnuM2jrq1P5tdEUT8ObU/3o4NcTWdsD8dNtcBhHPSvwkEijRO9LG/5MlxnulHvD/l/9EANn/AP/odz0CfVcq/5tiyl+HC0D+LxFMspxKHPyvzcZqutp+/HcF1xrywsb+3QcIUsRCwv4EdNDdW1aa/SUIeQ/a6xr+UspurrCSxP5eyGgb8XbK/6ZsZIYSQwj8KbNkeYt+yP4ErmZGyiL6/epBFlL9P0D8FppLnXLN7v+8rKnjtJHO/81/KSORTs7/KEkrsjeLEvxGxVfbM4LG/hBtevXyEgz8IhvrkWp22vzrAdYAQ2qc/wy5U4iX5yT8ygOHRHpe8v60jLXIMG8O/yCXfvweDob8IzoYJjRfPP4exB3DlPLW/30ZQrBh5yT+d7eLYAKu3v+wErL0Qz7c/+DK3ejgxzD8tVVfzYdRev0w4H8pa0qK/c6mlH4EglL+IG2BxccnIvxZwCTqFXNW/vQ5GuSSZcj+PDVRoMCy3v56+YGBnLsK/yva2SH3Vtj9DWl/s+L7DP9NEc22kq5a/gYGixY/4tz9aAmcmNs+xP1yOkAQlE+G/D1LnTmcx0L/pHZyIgmnBP6Kt22cAab6/lqMAYVNPtr8d9RKXs9ejv6KTRZZ6+tK/90W8TNoSrT8e7FTYHdnHv8F6K9+bw6w/YcIL7A3vmj9P9cKtOivGP69AeKFzOpU/HOO3DGgZ1L+1LjT4sg6vP9cZy2vVtcE/UOWqTGgrwL9UItEGkdbCP45jh9KwY8g/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzcyNTk2MjU2cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM3MjU5NjI1NnEBYS4CAAAAAAAAAExcXSJ2tsU/tmK2Zvrmrr8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        0.13979756238732746,
                        -0.2206322734166442,
                        2.5945392076252474
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    0.13979756238732746,
                    -0.2206322734166442,
                    2.5945392076252474
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 30
    }
}