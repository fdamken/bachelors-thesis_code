{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.998260484666323,
                            0.0002273649633363232
                        ],
                        [
                            -0.014091091755099866,
                            1.0000578687370114
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2,
                    2
                ],
                "strides": [
                    8,
                    16
                ],
                "values": [
                    [
                        0.998260484666323,
                        -0.014091091755099866
                    ],
                    [
                        0.0002273649633363232,
                        1.0000578687370114
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.8332069273627474,
                    0.34610046504516473
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.0012941245895326575,
                    0.0011366691172816558
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.008476517551258667,
                        -0.001798626892419719
                    ],
                    [
                        -0.001798626892419719,
                        0.0008174664173097312
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzMyMzg2NDAwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTMzMjM4NjQwMHEBYS5kAAAAAAAAAP86nf4An8G/ElokGLYI5L97w6BQMxi6P+c0Ry8P1u2/r46N6ESH3D8jx+OV/jTjP6R9G+7rA+I/YMn157KPAkBuQm9xpErKvzdHXZwczOG/C+/3fcUO1799+DmGFL7Rv9t6U47jkeg/JYbdbEsK1b/724yfTNLDv48RTPBv/7I/JESeQ64k4L+zLcQsUC3iP4zBB8c0guK/qOejC3887L80P4No2SrRv7QMuM0BQXs/Ev+OSHe9Ub/Ree9SdEPVvzJVM7ZlyrC/F2UQT79QnD8uydCU9cX7P9YtrgAmZuS/4gEGxLbewL9YdJ2n/F6AP5++PLkfBdy/oBELkcPx27+d/Vy6XWYFwBAPHx/ru/s/n/FhcSYz4j/q4u4JNWH8P2uTonIVH9s/ytQGwh375L+UZjRvVjPiv87A5sIaEPQ/XdoNLMHmCECV1QgkU2j3P0mWiJkD8M6/evB/UbpTmj9E/c5RG1vqPzUvTJ0Mstq/uDd3bzQp4j+tqxtLSrbrPwY6MzEHWMo/cLT3njoMtL9AWcNQEv2MP+u+s8nhMuw/gKuZw8oPtb9U0AY9Ypvhv1z0d+ihqto/0C//61in4D/BC8WjftrUv8DT9ZS8psa/qUR1wJXZx7/RMVSFhBPjP93T9E27LwHA5Fm/WO+G9D+u/FUq3grQv9wxsQ5MleU/DulMyUO2w7+iKn+i/PusP6viDqUeAKw/S4q5aTC66D+vkGZD7tS+P892fDPOEfK/nHRi/zW3zL+nJ36ei8DsPxmFzp9+I+y/pGvYUltLyT9K1lVGo2T1P8i1QvkwqvE/D8nk0QJNA8C8tyn810f9P6WSf5BEpdW/1JGa7BRdyr/1pY/qajHHP3Zs2JyLQuU/QI1v6Z1/pz+vJ06Heovqv9y7/Hr4aglAjOg1E8V4+j8fxjtd0nO/v+OYc5m5s7c/B80PpkGczr+6E42swPGvPzoyIECL1d8/tGmhJnoc3j+OJkjlEbjTv2v3vYVtEsO/ccSb6w6O6T+Qj99Zg83YvxrBS6hxq8S/TAwXnaJU6D94R0za9lHQv8qrr9lOQbI/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzM3NzA2NjU2cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTMzNzcwNjY1NnEBYS4yAAAAAAAAAIeNu9bzIALA8EJncju9/j8Hs0pQyQi/P3X0gvrVyvK/xu3l03Tc4j/8x6SjyGoGwPNZpVHKQO6/4l2nMockCcAo9GQCFYDUPzE3FW9Ppvs/2V1onkzlDsDcUfLc/CMKwAo+yhdZ6gzAyWbZhZ/OCsC9p8nwWPYOwL8x0dBLBfu/xv4ZS/GgE0CCfcoHKbLrP149E5ilMvw/JbgHQuKt/L/mcWHy9UoOwJM6Gf5RYgvAUkYVO0wm1r/YyCVsFuTgv+2UYUuYFQ5AbRGit0r4AEAK2+Vt3N0MwDU02V50pA1AB1J9P26ZDsDUnn5XdQ76v4FoVD6NoAtAtXlyEAwunz/5lk2jmBoMwNMcnaFd4ek/ltI+d3oAi7+S1lUWC/XPP/rOWSWi3fY/5q6DxfHEBMA1xYPrjdQAQG9beWhuKhDAPabTnNnk8D+P15Ev5akFQA5b/PxUNxXAnfEs8fMICcCM0dXAIGcQwF5SgA2A0uA/rfHGnN3cC8B15iXLS03xP3VVpmTqUvC/9NF3PK8JEcA="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzM3MTcwNTI4cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTMzNzE3MDUyOHEBYS5kAAAAAAAAAOnO9N/WwtC/6ZJEd0pXtD8Y942meBqov+K9lywVx50/pr0RB61w0b8vxU4zdO7HP+DxJRC2Vbq/wLdB/Pkwwz/xgJ4grXexP8c/7Y0oHK2/MbvggCmeUz8XkbyjimTVPyco+TbZGOm/naJGBfYk0b8kyrwkSevIP0NXlSA/2Mg/YbYCM3SR0T8rxARNVuy0P3Ya/7ajy6E/b9G3FqpZYj956sk7ZqnCv+JOqfpIItU/haSu9rsDsL+2X0Bnxru2v5guHKLFBc2/b2CTNMFhtD/j24UPDSnSv9ISCxdiwcS/HwCo1O5Qxj9h0OiTAyPUv5u38IUuz8c/4TPds2Llyb8c3dGhVZDBP3acBCpJfts/P/eLHPHaxT86rTUKb5C9v0qN6wOVRsY/aQW4jIDJzb99XsdZZM+JP3jm3nNZbbw/tI04qDeUuz9I1YQBm63IP4GimsAjM9S/bg2Yj9Y9zb/RUfI+hDquP7wYGKPWA9K/gi+XlxIYtz+zVzZIq/+CvzcOSlgF8M6/iCJdl/Sllj/2U2KTuRXEP08Zn/pgPsC/IQoZ3qJ4ib/8liYjp36gv7BlBr5a0ss/87F6KiveYr+OuiXNKlTLP/iE3KQrFbK/tf405YPavb+dqXgViYXQPzLbEuFRKcM/TssNcdi44r+kqD1sIh7mv4LT2nXVCKa/crLH8BqC1r9CWkPky5K6v3j1wGJSkq6/p2AQwSlUsr+eXif4tpi/P1NiB2Bq/66/WQYkqTWNuz9+jB5ZzRexPzLSujDbDbY/aU3e/sRpvb9iQ401Z12Ov9kHOoSzLc0/ifJwmRzmvr/B3NttTg29v5hgbZygObM/Sg8YrHmZzr+uMR676TSrP5CATopyprK/Tm1HygXKub9Dl6bABwC4vyPIQ7LHFci/zTAxyKZwuz9c38vLkBe9v+sofgW68cM/s/+TJM2LrD9DupY3W3a5Pw2159xziLq/R2nWu95WnD88V587IJyxP6OfJ+PQ6N6//vXKpVVRtj/bHENqLceHP3hWKBT8YIo/OBN11jv1yD9bgfzI1kCkP402jYYAdrs/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzQwNjMxODQwcQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM0MDYzMTg0MHEBYS4CAAAAAAAAAKamD2B36bM/9clSKrApiz8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    2,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -3.038719443578908,
                        4.0422908496533605
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2
                ],
                "values": [
                    -3.038719443578908,
                    4.0422908496533605
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 70
    }
}