{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            1.0062105807535329,
                            -0.006515892215103661
                        ],
                        [
                            0.013097243267136778,
                            0.992486680483516
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2,
                    2
                ],
                "strides": [
                    8,
                    16
                ],
                "values": [
                    [
                        1.0062105807535329,
                        0.013097243267136778
                    ],
                    [
                        -0.006515892215103661,
                        0.992486680483516
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.9972079115164353,
                    0.7676170133871963
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.012815726024909964,
                    0.004617938376668576
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.005937357487075801,
                        -0.0013604812445269232
                    ],
                    [
                        -0.0013604812445269232,
                        0.0005797451166458245
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzM3MTkzNjMycQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTMzNzE5MzYzMnEBYS5kAAAAAAAAAHVSX9F45cS/4ZIUyqyL5b/Qz6902//EP+7MS43a2+W/ceQIBuE/5z8dZ1Es8JLvP/rJB9thTuw/L3rn3Vt//z+dDH+OZW3Nv6uJQ6VCmOS/VG77jwnm2r+ZoneKkMXXvwz1Wbzi3uA/J8dHG2i85L8VgKcLmvLFvwiOoSwKj5e/Q0roMOvj5b91df6McOjrP7r7tDY/qNm/UQjMa9mK6r8/uIKbgE3Wv5UtTvtM6Jk/n0yLIpBaqz9nYKQCqDrdv9Ygb0ul/LS/Spf+Nd1znr9PIrFuwYAHQHYgZ2xkggPAWspwyyG3vL/rBEYphqh2P5GhAEH2ueK/2/4xiLHB6b+F1SswwxsGwLFF4wEGzQFAaEJgfExB4T8gDOscxO36P7p/yvsXkdo/q7sBStth3r/3GBC586zzvyO7AjDIuvQ/FUDKPf/rEUCVg9EbkBABwNdSzSzz6s2/p2TXA53TuD+J38eiE5H1Pzn8rS0Y9PW/QEzNUQRL8D8LNXNIs1H0P8PKumWKmso/u/AaszjQtb/EbyYb33WEv/qB5WxZNOA/KvjzRpLssb8JFYSYLPzwv1JoH/k1988/H+0rJTHVwz8HLAWw7JHavwpmkZO9QJ4/FpXz+tbAyr/hkLfo0ELnPyTnr7lvPAfA5g2DpiMVBECP02TrqHfSv9AuFN31F+s/MBMbtX8U1b+VUhz3gWrTv0G8m2EVEqk/Zqtb3eWi5T/5Yk89NBWpP+IMAKUHbuu/cj6dc4miu7/tOt3HhoHxP5Q/eWbyVADAw0TgixQDA0CyMVUcGJUIQNNMMZD9ggHATxsBxSU2B8DaEBrPD8wGQOETCcG4acm/crSxVzx9xD+3U0wqzXnNPz5m3xZkkOs/FadK8xgRtD8s+89au+XuvwEpw8te4hJAMXxwbFZr/b8Z9HBUEsvDv/FERggN5NM/2Aii/4Nl0L87MYOHkZThP7ne3oz8390/vbJAZRkQ5T91mwaVGkjVv7+8RF1iGdu/+9zZIgTF7T8fZpfGyWnUv1Px+7FvjcC/FPzfhjLj5j94FhnuLlHQv6mgao228t0/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzQxNjUxNTUycQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM0MTY1MTU1MnEBYS4yAAAAAAAAAFrMVMm3DQTA+Q3qv0rHAUDZvwQMoDXkvzeEqjxQifS/IF3nwobg4j/wEvtnCRwIwMZd14hTid0/i5HG4yTxDMAMIxGgGqbWv7tAgSOmp/0/o12qM4ZBEMCAfK2b4JAMwKNTnz2W1g7AhIKNuSdZEsDgqBdaFQURwMYh1we7NwLAFVDz4mWJFEDgvQzO38LiP9DslJvwPwJA9hzeSWH/+r+CGeGgAuQQwFS2X473fg7AdbgpO2dw0b+9pdhcjvb0v+u37eRHVRFABvJ+xLvPA0DK8wt+rmIMwBSUbP6KbBFAWHLP7PvFEMCKnG3lGV39v3bdlIgX/RBAk/OdPPTFyT8jynv1ScwOwJZHQDc5S+0/J9e5AqhawT+vlGWmynXQv8rjMlPVlwtAxg5TtJvhEMDJcHzqDIIFQD/0fhg9DxPApG913hz08j8nt8KtjSgIQEY+9z4JeBzArrps8wL+CMCyT8ZJZSwTwC9ghhvl0c4/QKHt7f7ND8AW7h8QYkwIQEpR9ue4K/q/7R7IdQcXE8A="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzQwMjUyMTkycQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM0MDI1MjE5MnEBYS5kAAAAAAAAAIcRkNuUs8y/xvGijaCCuj9eAJPcZ/e2vw5Q0QHjFZa/bd2UIZT/yb+bfCd7mEKyP5W4jeXr7b2/y3iaBloatj/2CIloMUO1P9vMSJctkp2/OKnnLpcsoT/uJvgBy5DTPyGdQW4h5+S/g5oF0Awb0r8ZdDbkche8v/3OvImfj8c/okRz/4qH0j93oUCPHYmpPyAwZpMCJna/iw2v+f5asD9W9zwix5XEv0N4EC0Lvdc/ROoUHPXbs7+M2fsI/+u/v/I6AEx0L9G/ZH0Gvmkmqz/Ser+BJ2DOv3FMfbeYJse/Fkh+KCSVyT+G0m1SWvXUvyuC0h5cu8k/ZZuU6gecyb9EGQ8MDpbBP/9J+lUr5Nc/pSHzJtr2tj9ROoftLLq5v5WTTepsc8g/Y1AIfyy7z7+dIOjzHkmcPx80SvDq+MM/kas/KFHVuD+jSJpV6lDKP04t3Dx+KdW/802zszUCzL+Gk52604CMvzpbv9Sjq8a/F+bY96TJxT/XrDEHzQGmPwh27mz3Dc2/3Ns/X9qaeT//TK4oUD3GP9JhbNQ3hLO/kgAUWTj9nL/f4gokzDyzv5q9k2yFA9E/HI484Rk9ub90mWsNYJ7IPw4M6UAAb8O/1AmPuVBUuL953sx97j7KP8Q9IZh2vMA/6L2vZdJ24r/cKD3ZWSDhv0Uulj6ah7C/onUG+iuv4L+OAgqJG0arv4xUinzyi6O/Pp/JaeYmuL8/m3UmyB2+P7XmAqSWQqu/1m+cRWEJtj+LyFX84Li0P73V68cphbA/OB2P6Ir1s7/DfBx8E3ZqvyXQSLek6MU/v7GmSVK9p7//3BZklrZoP1GqUzBZv6w/4ISaFu9Fyr+bJp3QpB2zPxBsVtGNMWW/umjn1+jnv785tdXWliLAv5bQQKFqzMK/5Wie21IUvT9iRXOG/HK0v01trjkpJME//H5ihRbJsz+Qbu7mvZe4P9utBP+kUL6/rxxYXz5nsT/QpjbptwGoP5qe8RENAti/Nz2bJATxwD+k0SvBiqCTPwQUbRZWTIe/cOzPwW8/xz9xOeIOmX+eP9iOVTN1Xr4/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzM1MjE4MjcycQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTMzNTIxODI3MnEBYS4CAAAAAAAAAHIF0pHSwbc/Zr/L8MvQoT8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    2,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -2.9328262951081703,
                        4.556062410988553
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2
                ],
                "values": [
                    -2.9328262951081703,
                    4.556062410988553
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 95
    }
}