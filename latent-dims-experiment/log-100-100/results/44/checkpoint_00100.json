{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            1.0015075094010415,
                            -0.0044502544295021386
                        ],
                        [
                            0.001202482160554125,
                            0.9981894995104096
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2,
                    2
                ],
                "strides": [
                    8,
                    16
                ],
                "values": [
                    [
                        1.0015075094010415,
                        0.001202482160554125
                    ],
                    [
                        -0.0044502544295021386,
                        0.9981894995104096
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.7862156393232276,
                    1.1222888821822765
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.04626826409953537,
                    0.007680643905241595
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.005740853804057977,
                        -0.0012967397955758742
                    ],
                    [
                        -0.0012967397955758742,
                        0.000557704624597477
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzM2MjU0MjQwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTMzNjI1NDI0MHEBYS5kAAAAAAAAAKuur0Pv/sC/C2/0beWS4L9Zx1OL2QDIP9UVrZRYQua/5SjblkVs7j+uAF0Kr0zoP20AtiDE0Os/I9PXBVpMAEAM52tpVW3Nvz7S+S7jD+a/qMzzFJMO2r8BGY4SXUjZv9TWxPi9Z+I/RPd6Xbz52b/rt24FQhHGvyIr9HRO9qO/firHN+8B5L+M9QSLA4XeP2LR5Efe+tm/8f5kA0Mr6b+BjTHy0CLcv/qKqaJd1po/lWyUfoDNrz+DmELFztPcv/kiPAqtMLW/ytLBs6vQsb/yLcGmJFMGQOa6sGkdKQbAhD8zWYwyub+4MPlS/BKgP4pWan99i+O/Wkskfjjq57/mkKhXWdQEwHua1IvfIgRA1oxWk/wd3j/ALm41JXv7P1E+3+s70+U/hmozugtA27+t2LtEBazov9ta+imGM+I//KQQRvwpEEAUmXLsVskEwHWoMGXNo9C/Q2SPNilprD9h1OQOzzPkP2gkZlUl+9+/6I8qrf1+7T/EfX/0CZf1P7L7iFto9tA/NZHl39i1u79tDsCKvGSJv1b6OaOlW90/z4/Mp10xwr+XHUVRS9Trv+bw1Ic9Lcg/4SYyZvSozj9Xnl6gzXHkvyBGle4Mlqu/Oq/EaN3Kzb/R47r96m7nPy7SmZWyIgbAE9sT6TS6BkAvuMj8VsfSvyt1QGpXmOs/BZJ5TQ461L/X34pBwHPUv61cZMEFT5A/J1vXj1/V6j/gS6QPV4+CP5iytLxbw+q/2iKxP5mbwL/aEfwjBOPzP6nexTr1Mva/QWi3UHgrB0C9mlJsptIFQDE+mJLKBAPA4EnYC2UyBsCXSECGXaMJQPLHTA+Fds2/KGwkLI3ivz9Zl4JKGLvMPxfllB8EI+4/gripbNKGpT+wOON9wNH0v2zgyFy4nBFAPg5Z7jxJAsBwyzvDDQzLv+acj6QcOto/be5//fF+1L8uuYLrhE3iPyqeOvMXx9c/Eb+3etPM5z9Lu64sKgfXvxss1v+iUd2/0rNvU7Ag7j97gN0mXP/Mv0YBrJl8Dsi/2JHKy3AK7D/J8xcuBUbTv8EEelVrkeE/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzMyNzYxMzc2cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTMzMjc2MTM3NnEBYS4yAAAAAAAAAK5YuXmK5gTAahZ5VYa2A0AXiuQggFTnvz32wt3fqee/T4vFP+l01T+FokqDQpIJwKtzyGl1uPM/iB2YuCd3DcCexWefh7v5v2iyfaGj7v0/Gro4SW1pEMBcsTe52aoMwH1xFHPPlA/Azw7D0RUCE8BQ7lO3eWMRwLyaqFK0GgPA7Ft35t8LFUAIByRdZVPpP5Bi3X6p3AJAhzil0MGrB8DZb0O3u1sSwD/hvRkVqw/ATuGSRSao9D94U6A6cOr6v7dHHCvldhFAQ/Qz7+JIBUCTBnvz5c8LwCfcX4Fh5xFAyfETvtOMD8DEfVYjafT5vxg4d7ojpxFAjlbISlKtzD8YB9X7KJwPwAg/cNH4k+k/IJvMkMWL1D9Sv+H6ROekP8ob6hS5/AFAIJPScTVdEcCzQeLIQBkHQASCA9muRhPAymUoNDa99T+IOARf29QFQOaQmGCUuh3ANVjMRN8tBsDBZAIt4NETwJFKATfye+I/SR03v+lSEMC2TsXWhdYIQMyDw2PcP/S/+xcS6FbWE8A="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzQzNDQ5MjQ4cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM0MzQ0OTI0OHEBYS5kAAAAAAAAAAcTkCXfjNG/qgAW3+diwD95AsbxNvHIP3MaBnfaArW/ui5x76m1xr8UrcYCc7GiP7fD7C7PTsO/h1OCEQRl27+dEgJh3ku+P1uSkU+Jlaw/tvU/L+HAwD/qcyrQFtHYP3JnEb38rOK/pd5/g2pp1L910o5DkzPTP/19jejDvsU/SXbtsujV1D+vnmsFG1u3P8Ng43QDEZq/JHyvbygWuT8hXdiIgjLJvyW61cIl5d0/FyAUCdgMvb+K7KZVT02+v6M6UW2PQdi/N4MLz9Sokj/x1c0zTXjQv2IwuStRZMm/B/XGFign0T+5fJGhWmnXv+wBx4UXWM4/KYbTXEC7zr8BaHAWi2LKP+CKPBv42to/MbIHOaExpj/zo5TB19K5v9qzO2NCEM0/oEz68vMr0r/TleKKvkuwP/20jPk/dNE/gt0y0+rzxD9LrfnTsc7BP+s0VPDbd9e/WyCaho9q0L8IXg5F8U6vv6E8kmosPMK/g2n6w/6szz9O3jqpuAaQPz2WgLWRtM2/C07vPuGioL+KbTtqHHHFP/9IWprPHrK/1JpOMUQkiL+2bXE1X2+2vwmESFCxqNA/CqrLuR+Pwb/8NPvHKRDJPwTk8l1IYsq/DwIa7PYnub+6LUrQp8HDP9psgT+7o8E/lknolLtR4b8crX0xfpzfv2Yx7zGFdq+/DqWFw0qW5r/o1QjGmkuHv2iTx8ehJKW/FJHXVo0Utr9ftjVhipe+P40bJ0j7/6y/2M0k67jVtj+tBYof3kO1P+B1/353UrE/sLM0QOcrjL8hiUFUf3QEP5Qy2E3Ft8Q/KyPivc5Ppr+yolg/w3GwP/0uM4rzH64//8Lgbs+Dyb+DfP4qTVGyP1XhZ/juLGU/vk46s4S9tr9ajbwz5nO+v3c8zpW9LsK/ExgdP2JgvD9hbkcOjj+1v/MwfwxVisE/BjjD3778sj+g9ZIP+sy3P6SPI6vVa7y/T6lQkfgLqz+wUXI0Z5qpP+YQSDLik9W/E9+94B5Awz/m0TWb9RONv4iJL1GwcJG/5+UMjHlwxz8/NtBR1QaiP0wgvQ2cMsE/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzM5NzMyNTc2cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTMzOTczMjU3NnEBYS4CAAAAAAAAANPo3a+kfcA/TUGPpRw4oD8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    2,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -3.051432909070848,
                        4.601936698478029
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2
                ],
                "values": [
                    -3.051432909070848,
                    4.601936698478029
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 100
    }
}