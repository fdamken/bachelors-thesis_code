{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.961484084499764,
                            -0.0059810149618743005
                        ],
                        [
                            0.22938824981162348,
                            1.0280425364031778
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2,
                    2
                ],
                "strides": [
                    8,
                    16
                ],
                "values": [
                    [
                        0.961484084499764,
                        0.22938824981162348
                    ],
                    [
                        -0.0059810149618743005,
                        1.0280425364031778
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.48198168353879367,
                    0.25341386712741637
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.0046728507021034605,
                    0.0016684124659669237
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.25907959620966015,
                        -0.029443958135358828
                    ],
                    [
                        -0.029443958135358828,
                        0.20614546089719513
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzM3Njc5MzkycQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTMzNzY3OTM5MnEBYS5kAAAAAAAAABf7AHusVs+/X30pJ57d0792XVjuGKm0P821ftZ0n/C/M5ZZ7vjYsb+Gv93EEJq/P0swtNw8iOI/kp2oMIlD/D+y8JDASXm3v5Dz/5BHKdy/5xQBh3bYtL/DOzaAwkiwv0UWmzZGIbU/IYK91FAShr9bxXAHEZnCv3qr3ZoxGLM/xBk9cALD4b80A9enMVjdP60OItiuDck/nLL2hV3Fs78OosiBQaHTv6OQWgIDPpU/PV1mKGyOaL+o6DBIH33FvxN7gBC7eLK/dh0NsLZEoz+RY6HTjM7WP1etTEPATue/dNQRuFJ6ub9CAmTpfvNyv21w2qkAHrm/HQVoUzmPn7+1/9E5ZjzDvzpaIEEdGsY/+zeXU+9t4z/73R6EulYDQIxWOPoh0tc/rgC7U/Eq7L+QHSi9B4Tzvzc3cRs5jOE/J6WCUN8TEEC6hbg9YzPxP41BVcOIM8S/9PJRaX+mNL8n1oBDAgn8P8SL+lkDnPG/ypS9OlDHoL9gIemjQ7zDvxmJJqHRSsM/8rQ0krIfkT+WWm0/KMepPygBcHun4ME/RE4tzCTB0b/y+lOXWC3uv9vpzwha08g/QYxnq0oRqD8faI/MdSDMv/AcMw2eJKC/0vpBNTe5tL+arvyi6QDEP0EhNJISZti/rhsKDXRo6D/npFYeMRzBv049VqvtS94/HR0OHqKww7+jLcfwQPbPP3nHSDXUZaw/+acnaLRS/D8aSLKnx+3CPxNp2+c5a+e/2Jq0Dnu8uL9dcRQxEvfnP73QQV6+9sG/C/SPz/Ikpz8tCClXLHkFQLpDL1ifIOw/vycrq5WotL+btVXvkWe2v4ZS/X9h3s6/vDB2JhuMm7/MF8hoKkm7P3cAznFS5dE/cH88PC90sT+HgPj3ce/Vv1jx+JkelQ9AXPujUbP6/j/tazOSz+ywv1sFZGi61cM/nhQukq6Bzb8c6VD8CS+WvxiaVUr1YLo//9+621/lk78JHmWu307Bv5JlKv3DPIo/jqePvH1p3z+VEScULDbtvxth0bhCpr+/g6uyRBrs0D+nEWWazdrmv2NBMlfeeeI/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzM5OTU1Mjk2cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTMzOTk1NTI5NnEBYS4yAAAAAAAAAOZO3XksRgLAmO1CkANw6j9VWyhaHuTnv8wzb5ardP2/V361+Q/44z+HLp7UsQ29vwqhnjHhnsM/AdxQCNrX9L8R4K3BNY/YP/ZW8FFL3Pc/f5OKG6I2AcC3XfEiqncAwC2h+iWjOQbAV3pbO0Tp9L9fE6t+mpsFwBjDRW5hm+K/5+GRG/6SAECf1iMX0fTDv2FG7MS3c/M/5TW95o5LrT+lfKu32OQRwAJo7bNM/wHAQh3bbfql+r8PxfwnwBz6v2Gp/UznSwFA+YiyL8UG/j/NRwZDKiwAwNP1tzuKEv0/PdiCQh1GAcDucQQ8EUD6v5ceDdyp7PM/c2fAbbK0qz/RButDLyj3v3dMV5CYN+g/yNosHdHy6b+/R1KSv/DfP65Kt3CGEOo/tec+Qo88BMBHH6yREWjeP5Amy65DCgLAy3CEI8SF9D86qMA1Kaf8P+f1hapVQhXA6V6Kuwa9A8ANJYm/0DcBwJBUEdFbaeS/BxjP59Aj8r/JhlSN0VO+v0loqJLPZ/C/TdTjfJQt+b8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzMzMTE1NjgwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTMzMzExNTY4MHEBYS5kAAAAAAAAACQOzto/RJ2/7276FNKHuD9baFY3GWLLvx0Dug/Dvb6/rVAf5cVlwD/YurIyvEbEP6Itgz2VJ6C/xRkI1dkryj/5q6NjpimJP30KdxEAJ8W/VMOZbrdClL97hJfcCUutP4ZWCFif1My/ZoP5aJ8zyL8ib9apIYTUP/rBPvad/cM/C+uwdUwFzj+O6rPra9O/P3Uq3OOWgLS/OrH48XXysr+sR1m3GAeuv0PO1qMgpNQ/m4a9dXu/j7+4japvxGTAP8CHXlQoSc2/Yskg3QHiwr92/RaCSWS0v5eOlbmJHMC/NsiIv5Cjvj/UXYuqxZPJv87JZWdV1Ls/EVObSoNG0L/IeSTBYm/LP7dIMfOdGb4/aIcTqqcZwT8JiLSK3yGSv6zqQ6isx7w/J+j3XbObwr+31PtyjtK0P88eiJS4crE/wOy7IM9foL8m4/Ao3cnBP7Joo1YYKc2/KdXhZft+4b/XD1zfn8KnPzXGkI34OMi/eRhfJWmGxT+vrsnzqeCzPxsXYwB7PtG/stuqTWu/mL9XRVlPLmPHPzDZEIRIR7S/1yjnj0Tnwr+fso0A4d+jv3w/hX8Skrk/reQ8NrkUtD95FijzP3PKP/sYtczaZ6c/I0PFgwNZw7//veDTAxSBPzkCbQLgD70/ECAB5a9147/Wv5CChIDYv5sDpHWd0qG/d9j6gHt5ur8iYTZ/PCuyPyo5GqDbb7C/XHI2MN5csj8lz3OapHPBP+f+5XOS7bK/Szl28lPBvj/ECW6h+lesPxBpLLW9dME/ahuGnZuE0L/aFvlfHgKwv/UppwnMCM4/qG7Vb8pUwj8Q2eMwd0rLvznpPjIDDcQ/3Oakc001zb+VntntbdilP4gxBbS5JKW/f09lxiW3pb/30DNYfCmnvxokzAr4TcC/1wrw2poAwT8/TANlYPTCv8GP/m7au8U/m13tzmuLrz8HZN77LhLAPyIPBaJSm8C/rxQFWU3Fcr8M5dtg+NS0P2mptBE6ANK/nBu0NcIFtT9dtwIvwgCsv9RFDaOdgbc/A2wS1WPzyT8FILo4v5evPyW9pegIdrU/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzM0MzM0MzA0cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTMzNDMzNDMwNHEBYS4CAAAAAAAAAGiwPa1H+Ji/Pzi7YhZveT8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    2,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -2.1755837281040615,
                        0.36449773459453083
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2
                ],
                "values": [
                    -2.1755837281040615,
                    0.36449773459453083
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 10
    }
}