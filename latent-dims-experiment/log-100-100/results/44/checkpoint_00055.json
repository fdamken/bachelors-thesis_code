{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9980297428876095,
                            0.00033290859044079915
                        ],
                        [
                            -0.015239939146777733,
                            1.0004436984813574
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2,
                    2
                ],
                "strides": [
                    8,
                    16
                ],
                "values": [
                    [
                        0.9980297428876095,
                        -0.015239939146777733
                    ],
                    [
                        0.00033290859044079915,
                        1.0004436984813574
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.8198472118646257,
                    0.3219441985635925
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.0012709475384053803,
                    0.0009925084994582675
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.012231487463800761,
                        -0.0014688365862518538
                    ],
                    [
                        -0.0014688365862518538,
                        0.0010149057024122499
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzM2MzIzMjMycQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTMzNjMyMzIzMnEBYS5kAAAAAAAAANCYu1+kT8G/RqOl1Fo65L9bRCkHrCrCP5+ySHxh3O+/6TjJvkhC1T+cnv1z6pXXP3htawO86OM/LIAbc2kbAkDtK5mgGObKv6kUGDW2KOK/Kx909CEJzb+UccrVCWfGvwJTaHdKAs8/GxSoppA80L9yfJYD6KbEv0DOWR4p+7E/0ATSvyOsyb94A/IE+DHNP8o13BbrBO2/xGvGE8635b/lCnC3qMnLv8OAspuTepO/BhoOatEtnL/a676qfm3Ov0vRHX1Xxq6/s6SwCv13oT/BAutKryLpPzSEcp3ghcS/ODIj34mcwL8rx3e/MnSYP+sk1+levdW/W6iyXIN42L/jvA2TJgcDwCKIVKrt8P8/+GCf+hVZ5D+hvGB2w3f+P7kzwstiXdk/yU0wsxHm4b+iHgKE2iDhv4PBM1/+r/M/WtmNSfn+CEAaxgsVmwT5P8QWWm9DoMe/Mcxd3WaGrj/4EqhH3jzSP+ElELnawcy/OfEoQKtj1T/QGKFTHtfgP8fs4I2mn8c/9gsusVqvs78OJZqvkiBwP4UGYJvxbuo/bZYA9/qxsL8YIkhsE6ndv3zBhb1CR9c/VcHNfzFH4D/me2iT9FvOv3t0lEf79sK/qucbQKypyr8atdKW7tPiP99BXWPQROa/ezboCJOd0z/aS1NfX6TPv3TiXUx7d+Q/oeNHNKFyxL/jZLfaiRyzP1bTkP/Vtac/3X3yG4KC5T/MhjVhyDPGP7Kxvl4ZXfC/iR4oJU31yL/86hI4XKvpPzo7aQHyjfG/2SmhJ9t/+D/M3jPu1Ev1P41qLXgnjvU/LnLJsg/iAcD5X9mia+YBQH7K5NKdr9C/UCwlCoeSy7+3dASCwQDEPzBDRizcgOI/SleyW2tFuD/OaidT+Zfpv9qF6n+1EARA5CUDsh/aA0Bk3kJqNeW6vwRSGTjl6Js/xN5J6FiszL/6mXuSAwykv/6ZaYEyYdw/GBnqtwMn4j+e/P1mNVLNv1RbtJ722cC/6gHSacgo2j+52v7KXtWqv0tol7z0q8S/evPdM3pC5T9utRJj0/nLv/ug2rt7OIG/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzQzOTg5MzI4cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM0Mzk4OTMyOHEBYS4yAAAAAAAAABSMhz0dCwLAD6ufA1au9j9bPYOCDnGnP7D60iwlHfW/7mgCBX+Y6D8B4ShSfWMDwI21Bk8BMeW/Pp/zfwf/BcDHRE7GRS3KP6GpP3/GdPo/jqOTSCqHDcD27re4a3IIwHnY9bg20gvAIs2uIU/jBMDpn23qzqsMwD+V658AFf+/BIO4f3MVE0Devn+J7yfmP9vaVQbp6Pw/kW6MSb4w/L/BEBPSnlkSwCq80LfEYwrArf7e/dUQwj8ZaVJvbETqvxfEc9gfdgtAIs9MQkNxAUDXtzTuKr0LwJcOJq+W0wdAHVb6RwX8CcCmaALJvfD8v8Zt7CthqQFAdfq68Ntjoj9tEZmk0z8IwIqNPVPxFe8/2zoKbrax17+7NLQT7iTfPytXiKKg0AFAOJMpzR84BsBuFDHowtIGQEbsa9JD+QvADwxYh4q58D/s6OlEG2gCQIGsq6/9kxTAW0bqBRPZB8CwK3J5G/4LwIkr+E1vius/xdCW3+tHCMAU6clvt9XyPyMDcGUNT/C/jDYOaXXaDsA="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzM4ODgzNzQ0cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTMzODg4Mzc0NHEBYS5kAAAAAAAAACMkgpHEDc+/p703t78vwT+HMh5aA7+ovyTCMlsKW6U/9dxYDMe/zb9kII3mG2HIP/dPeJWIcbu/O3xxPXrDwz9FZwQgt3yyPzC2GRkmX6+/S458SGLRYD9TJxWrmWHSP6OvLdRqP+q/8im2ldxr0b+xjbcj1pDPP6471QRrF8g/WbTEIlnY0T/kQ1sRmd+2PxHtH7cJspU/WbErqqF+Zb/+DYXvGDfDvxA3jJaoodU/jDbIgaUnsb+4TuHdmqOlvx1cLDi5Msu/Qq4hnJRxpT9fFwkxU9vWv70qaqNf2sS/T0wjUKdrxj8iwn6yMlXSv356lnT5XMg/f1A4ObRWy7/kfPM26eXFP3G0zzcmg9k/i8aqLvtYyz9uSbn6g27EvwOOpHe30cY//XhRlglyzr/ejtGtAVaRP/8YxClgc7w/n3MD5CDuxD/oJhNc/zvCP9sYBkwjetS/97+L+ghqzr/XojXFrt6jP+VrjNj5H9K/ByanwMPntz/JYcG1576Fv2eJ7rVdpNO/1VI5P8sMZr/J8KLpSdbBP3QbTfTwfba/ydN15IAstL95uMDs4iehv3/c3jjtTcw/n40DOOVNkT+Eosg+X/TNP0BVMNtZUa6/KEjuXJB7vr/c+n1+9pzQP3ghkm1QB8M/qz1tRD7B4r+Jh5msgtPjv/HJqMscPZe/rb6fWpDU1b8c5YeXPg2sv0+HaLNffrS/GP+g/7IksL/m9ScJkd3BP1OYv68b7a2/og4MkxFiwD9qm6ClGc20PwqxLKkKf7s/ih9mzbxLx79s0VIfMih+v47FTIJFdMg/QcZuic7xvL8MCAJ42AbBv5MZo4CY/7Y/4bNUrXely78/K+OxhsqgP6BLS50p8MC/1KBlsiF7s78wOQfH54auvwDcRIRIvsS/ec4mhnd9oD/3fSfKn1LBv1p94fR1ucY/R1DkAGAhoj8CYyBLBQm9P3sW4yqSVMK/Mm4j9+04pb8x0Ric2NG2P3TBsN8G0eC/GL4YzlGGuj/LekvGsb6mv8/3lL/1eJw/pCpw8F6ZyT+IRpbnKQuOP94S9iepI7s/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzMzNzkzMDg4cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTMzMzc5MzA4OHEBYS4CAAAAAAAAANCyFx8LBbU/zv/VywcAfb8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    2,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -4.5465762529047,
                        3.691879116530863
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2
                ],
                "values": [
                    -4.5465762529047,
                    3.691879116530863
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 55
    }
}