{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9981880190029815,
                            0.0002862203739477802
                        ],
                        [
                            -0.014258123232076234,
                            1.0003015370125672
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2,
                    2
                ],
                "strides": [
                    8,
                    16
                ],
                "values": [
                    [
                        0.9981880190029815,
                        -0.014258123232076234
                    ],
                    [
                        0.0002862203739477802,
                        1.0003015370125672
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.8341024648062213,
                    0.3348046049557849
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.001608585948604741,
                    0.0010831601663476818
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.019402481915030023,
                        -0.00208722057564259
                    ],
                    [
                        -0.00208722057564259,
                        0.0016628132572833465
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzM1MjEwNjU2cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTMzNTIxMDY1NnEBYS5kAAAAAAAAABrWWKc3cMC/UPPn/mSs4b8YtaEz6ATAP4AuVE4E0u2/WGDmYR3TwT+Y0gXIIgi4P7Jn3IJvkOQ/M3ShN2gzAkAInAJoty/Jv2VbuZ7CmOC/voVm1r0tyL+FlHBHMPvLv5MUMdmkTdk/uYT1rQkz4b+d9x6ICxLBv4S5vts6fbE/w/Iurcm74L9MK5yT5UfnPxxifcRiN86/VpLtV7PC2L8tSzvmcpDNv5h2UcWf4mI/XwRdQx58kb+FaIg12j/Rv2FZrNmBHq6/4EJnG6YCoj90GubupxP5P5TkTNTyNfS/dzu7c00twL/AsiXkael4P5p5wPn2oMu/iwBi2dD6z7/TVLV21lb/v78DHlvbKPc/vg4Lkk+O5T/BWoOHquH+P7gHRVdnfdk/YgRt/TYY4b+hh1wmeYHhv+nEhFCkj/I/ewBoI8cFF0A8cJV6/++kP/r/UqYCFce/pRZh1Hp8qT+do9TST7TfPw6vBa7NteW/Pfy73fXFwT9eZc2YxHawP1x6V1px4Mc/qT7swZ5JuL/OyvE2tNRuPzNFRK5wzuY/Ir6YyarSrr8AXH8XZYPjv3CUSGITCdA/O+atBfo8yz/Amztjo4HMvzKeQf17q3O/0cHplzgyxb/kkrYxU/vZP0/ymWWvcPe/KE21GrD98T+cEObx9ZTNvx7+Tsu/0eM/di5xgxRhwL8lggGI7f66P59XryIZn6c/fgpfk38s5T/6bfVyGqjEP2C5iE3f9e6/UUjiTv5Qyb8aPN/v2UjpP4sXRSnp0PW/eLabHc/y9D+sTJcTBUkUQCuqucgzhum/Gcz2Xv3iA8CKZzai/yX8P1LQ9t+mqtC//SgrlggXw7/SNw7EtTrCP3tLCAtULuA/hevjvqrGuD8H7ygDngPyvz2FuC6tzhZAhCog1cKs5z/DLZC+36e6v9wLvfb4dJ0/xztilwUS0L9LBlh34Di/v0w3qHJPac4/zkhjfoQ+0j/3rWPz9P/Lv+DAnVvXk8K/42fw/MR43j846rEJ9mjGP5VUcWdGKsS/VeJCUw8v5D+CfqKtS6bNv4cNbHwVrpy/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzM2NTExMjY0cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTMzNjUxMTI2NHEBYS4yAAAAAAAAACOOM6KmnQLA6X2s5fWL9j+z6chxtSzVvwyWbOmmF/K/Sclvn9bJ5j/9nHO/vHgAwLr6rxiQ+82/BSq7kGDuAsB02/tkhM/Gv1cRf4lMygFAwPtbyGLGCsDdhV2iAT4HwEngJO4lCwvAfBP5RUZqB8DZN6pOBCULwBn3g4nsIP2/x7IYe30bDkD5MVzX8OfZP7RUfqkV9Ps/Y38WTAxQ+r8ZM+e70rgYwOfokro7YwjAHONJxVRF1z9PKRb0MJn0vxC77qjPfwhAwRpyr4c0AUBpjDGyrWsKwGEL+Sw5uQdAYgvQC3a5B8CJViQoJ8X+v1r8D6hW4QJAcwnaDZ4Lyz+JgC7JFWMGwJswfw8KsOw/O/NHwhBS4r+OCrEATEbeP+e4dVIbUP4/xXJbGparE8D0HUin5e4BQE7Oj5gV5AnADCpnVI8b8j/ULyRizQgAQGmwCM07JxzAy3+12PrrBsBeMcDV214JwJqAxIB8hug/2vp9E5QoBcDhnGOY7gjxP5OE/Lueouu/bT6xeEI0DMA="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzM3NjU4MzM2cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTMzNzY1ODMzNnEBYS5kAAAAAAAAAA/ocdiQ382/1dVK5kMIwz/JwqobJjGMvxL27js8c6s/Teuf/6b3yb8cfbfbrufGP7rLLDlqsLu/9HFYfgZCyD9u76VS5VS4P8dgL3qUBLW/KNAbj6NSnj+XY9W8WVTSP8fQ0OhOzeu/gy7Fd3c/0b8lO8WBJu/TP2KebFYEKsc/9vCp1mph0D/Gw3QDz5e8P5tp21zw5GY/lr7BTzZdjr/uthr5+jHCv0eM3husF9c/Lj2K/Qr+tr967zOo9lGRvzdrYvaZRc6/enqKb0iDmj+JkHy5+tzYv7nQLLC2HcO/Op7xtkFkyT9rXnkuRV/Ov0ESESFWE8g/5VtpQcGVzb+9LSfwD53JP0FoZxiN6dg//eBzg/LOzz+A8Ml867TIv6FXnKNuncY/p3aS8edLzb++R9kYeaaSPxnpQX6Pab0/0efhhQthxz+OGYNQ2iC6P6wK/ZCm7NO/rGef/fxn0L+cA2XD3NOwP5yotITxGNC/kpbYlhqZuT8rExhUfPZyPwHukuyDaNS/10kzwEKjmT8DU/FelmDCP0nwWfdHKLK/jU9TVhpttr8bSKlVk0Ouv0JOHedl4MU/B3FN340vpj83nm/gFvbNP/T6gkBVJpy/lLd534aExL/KRurVgKHQP4O+qM5pfMI/3yJ1lWiY4r+cdmH4YrXjv9v8DrVdcJi/Y8B3EVqM07+Ul6xJdqZjP3BuN7G9K7S/N1uszhjztL/u2NwpnKTDP8rlGRxIGrS/li/4ABHpwD+wqDnp3LG2P8aZpIzr/8I/ZfrmckQSyr/5ObpqsnGPvzIwNEkxhco/X1p07kzmvr/hYmDE3XjEvw7TsGyj5rw/m6PTY3gByL8VK9YN7UahP+BPEnINNMa/ADAk1hqNs7/4mF6cJHavv8zNbXxYYMO/NJsppuOoMb/7JuY4zczDvyr98jJBRMc/TV+RxVjAoT/plD5M8QvBP4Hy9FyIHsC/36ukjFY4s7+XanJwxuW3P7QDmUP7TeG/GWCsJ/UPuj+LjrY8N/Gtv6+MPTiP3Kk/6k2ECO8BzT/pT0xKYqaev/h7sfQB+bk/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzM0NjMwOTQ0cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTMzNDYzMDk0NHEBYS4CAAAAAAAAAHU5ulavRK4/E+cFmcqdd78="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    2,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -4.992853622906559,
                        3.3457919787068042
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2
                ],
                "values": [
                    -4.992853622906559,
                    3.3457919787068042
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 45
    }
}