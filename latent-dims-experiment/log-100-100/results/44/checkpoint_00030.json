{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9988491042337594,
                            7.573123811445355e-06
                        ],
                        [
                            -0.010663330645126267,
                            0.999445396740232
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2,
                    2
                ],
                "strides": [
                    8,
                    16
                ],
                "values": [
                    [
                        0.9988491042337594,
                        -0.010663330645126267
                    ],
                    [
                        7.573123811445355e-06,
                        0.999445396740232
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.9646230698311198,
                    0.3692076598376433
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.002613266294469213,
                    0.001152428508731191
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.06107978122609037,
                        -0.01472456317922699
                    ],
                    [
                        -0.01472456317922699,
                        0.007723000816031167
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzQyNjE5MjMycQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM0MjYxOTIzMnEBYS5kAAAAAAAAAHjTw73rhr6/2wkHkLLV2r9J7eU2D2nCP99ftaMLT/G/RFHEL7xvvj/muyI88oCxP84mSpNSNeg/qS0MEnC4AUAqR+i6f7LAvyrzc2d25tK/68ur2mtkyb9i1/JVTy7Fv1y9/prWudQ/Aidwk6PEoL9rMNyv6nO8vyT3sbjyO6A/M3J0hCZP479H/gIVPgnWP5SM5hXuFtO/YSIjT2Bzt788egPvptnJvxOGYUmrc7S/ee3iV4jDmL+g4tH70NbKv1D5T8k4Fqq/YDPzY21koD9P+fKzJMDEP2EOWHbZS74/cwfA4KO3vr8awX06t1mqP+BgI87G5si/yUo2kFI8wb8Fuj+2d43Nv7brfpTMo8u/COBnrbX75z8EnhAYUW/+PxeaTA/eN+E/wf9ppZwb478ZJX29yNDlvyb8Lv40d/A/7jQzXJoFF0ALeE/xxB6lPy16g9iYMMW/5Oj8478plT8m/YBvPD33P54wrWjxQ/q/1M20frESxj+Qg/BINR+Wv2y+14ED78M/N5EiaOnymr+xAL1L6YmYP52hyulcg+M/C3jQKvT8r7+5Py3X5xjav9xgaU145so/etgakgy4uT+8GNX41dbDv2ouyJjZFpm/BnXvTneMuL8ohcvuXgGuP+A7LF1LwMW/T0kOqun2wr/hMrCgbh7Hv2SnVHJ9SuI/uvAL3iN+wr94gAF10gC7P6tLsvtSSKM/M5YL6DEL4T+I0DQG0E/BPyFXMw9Dheq/Y6hYvAR0xb+wQA8uBGfmP0/bg5cs+9G/IO3uoF+xoT/LssIAbEkUQAIc/wbMhum/C3giGWjd2b9wknY1o5rYP20N8Po41MW/uIqIrsc8pb+VpEObIsvAP4KmIDRz/dc/svAnoLtdwj/RDPuB3yfov9/GoslnxxZAWwoxtu8h6D9yCBFWMHOyv7mm2BGInG4/x8Gsct1Txr+hcP9TBs+ov3bIaWr4Ssk/V6nnu2RKyz/TAGAojX/JvxnQQB8vt8e/RS6XdnHo6T+mgtPiAwSrv/oruzCgYcG/iu1tQvbw3z90sbcwytvJv1pFGnLjobK/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzQzNDUyODk2cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM0MzQ1Mjg5NnEBYS4yAAAAAAAAAIu6A1LYmgPAaD0cUiy77T89kAqGq3Hkv/Tgv4vPiu+/FY1T3Zkj5z/c1J66wq3xv2FLDjkZSs6/2kB/Rpb1/r8Wjp+Vhaqwv8nepWTo4ABAItLgc9vdB8Do0zMInJcEwNpPvwP3dQnALxXESXi48r9Y0ltVN04IwHvb55hvBfS/KExzB6jiAkAUR890z0CMP3Bhq1e0I/I/TKrMhn6v8r/1XjdNuLgYwKiSOfd/gQXAH51MYJLb5r+wlcKj8CX0vwiRuEVLkwVABkiXDimlAEBtCDO7FQ8IwJgyl0JeNwNAGaxQmMNCBcCNPOFhvEUAwH1FtiCVQOw/ayWwflTx4T+v2B8Zr3kCwJo0QQoL0Os/KRLkiira8r8ydWMUGSfwP3N+K7sEEuk/uoJC8cerE8DkPt3opZ+oP6RmUvBOLAfAe5jTWDtv8j8RIV2HOrD6P6MuunPwIhzA7WTOiKEWBsA+gzaFQUYGwCcatfPet9U/xrhHfER2/r99OF2l3ufYP4KSzVn9SOu/uXxP/pSrCcA="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzQwMTMyMDAwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM0MDEzMjAwMHEBYS5kAAAAAAAAALXTFI1vw86/A5NhR2eXwz+Fv4K131WKvwqqSnFT3Kk/ZtBOf+TJwL9ulIPKukzGP5zdVAPbG7u/hXBD1A5Eyz8I2JDSKrm3PwvI2m6Oz7W/mF4wK7LAlj8uB3X0H7nRP+Q1arMGR+i/WcCWxawT0b9SgoVgWzfXP9sx7GK1pcY/1oaU4dEv0D/bp2kP1sC+P9wv8eAtanG/RBcmn78IoL9RZYkQLc7Bv+V/muTj5dc//mbj1LJPtr/UlPxWS+SRvxFdaEJZN9C/bVtmu1Kqi79RFjEaHKbWvxG7Oqj6AMK/wfxPNoJJyz8d3hQWjKPOv/RdwPMCz8c/fdLXiuhJ07/7PXARZArNP93jRwSaBNo/P6zANlcw0j+EhOm9yKjOv+FgLLfIPsY//SQBCRrozL8lyks5/RaPP5gfzVenSsA/htxI8pR80D+kTa81nzi6PwFitJy/utO/FPeQhUCL0b+v2+Ics7WzP24/HSJjR9C/k5UVz8d1tz9m7puY/QtnP7WR78kxJNO/uL5klbtSiz9qR8qf8CjKPyIRTbYATaG/wkrlJ9gdub/+Htf1x06yv+uWaCiT2MQ/yNa9HpgNpz/z+zpBCujNP+6gfke6U5y/ZEpH8Sc2xL9q6QiklfPQP/oqzYIuSbs/pSp+irbd4r/wrFIymtvWvwQX6U59qpu/C2RlPYT10r+JOD6gb1CZP/uIsgv1MrO/oFVh5JTCs7/dp49LF1HCP76pYGKQ3La/N6vweQ1swD+tMh1+VYyuP7sx1pNygsI/BQv+fmuyyr+Eqb/e5zhpP9w19EcBmMw/1dw4md4tsb+CQxOfsarCv8S10YLur7g/Oo3EmhA/yr9yUZVHPguiP9VOrmNPl8W/aJKO0zqftr9fBqOtMz2xv2bZZGafnL2/Vvq9v6/5nr+4FIgQcl/Dv8B466s9x8Y/aAmG2uHToz+8WjwMt2+9P3hd1SkkBs+//z2QtJukr7/lYWNiv+u2P8VLvEYFHeS/8QjAaw/dtT9K8CX3dpatv7wYL5Clv6M/cEt8h4P5zD+TmOfQRzmov6ukaGT9WbA/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzM4MDIwMzIwcQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTMzODAyMDMyMHEBYS4CAAAAAAAAAIXYdLR3taw/mk9V4Gb1X78="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    2,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -2.7848114075708255,
                        2.094051015547472
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2
                ],
                "values": [
                    -2.7848114075708255,
                    2.094051015547472
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 30
    }
}