{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.998039041915086,
                            0.0003176814181579316
                        ],
                        [
                            -0.015181862517863081,
                            1.0002474223831004
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2,
                    2
                ],
                "strides": [
                    8,
                    16
                ],
                "values": [
                    [
                        0.998039041915086,
                        -0.015181862517863081
                    ],
                    [
                        0.0003176814181579316,
                        1.0002474223831004
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.843184597981545,
                    0.3576029499846976
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.0013076395942771342,
                    0.001226802837040168
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.010080336159569825,
                        -0.0017928378684466395
                    ],
                    [
                        -0.0017928378684466395,
                        0.0008454306920402388
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzM1NzUyMTYwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTMzNTc1MjE2MHEBYS5kAAAAAAAAAJTS/pp3rMC/0FGBE3CX479W+jT+Z/e7P5rPNYvzWfC/8WgunEpU2z9hW0h/mfPgP0NqujPQ8OI/T+f8evdnAkCkFovuGQXKv2KzxVcHv+G/M1d9l30F078TSp7U89fJv8Yf6XwgI+M/aDkJByLoxr/QVT8/PSLEvzJidqJNPrQ/73XWNwWN3L/tUpwsntrRP7f1wwKXlOa/Wzkz8fYD6b+LRIfuKRzQv0ggLDJOu36/RfWC9SLEcr/HcINhylvUvzRYb6bqmbC/5E59KFCBmT8Eig+zWR30P4Yi/Uo+EM2/MSv/eU1iwL/FysP7m8iBP0GUK+S/dti//X8BWZR0zr/HOvzTFNkDwEvqC67CGP4/VWYAS6Kf4j+G3gx3RNn8P/dcYjBy1to/0EnyYlst479lusAPGvrhvxmHNvLN0/M/tecXLJZKBkAGclnLmyH+P8woB23syc2/kUeKlm23kL9A0PRR7yTjP3IbfOawPta/5jJRdCj23z/wnp0eRPnnPyMARSChysk/8Zeyc0P0ub9zizyx8C57P9v40yMjSew/iSGnjIzXs78F+lXrJUrjv1do0tRL79o/J510S6au3z+hIYo/6XvVvyM2EzKAAsy/iYnIeQNbyL9furZtZCTjPw3yt0DHOPe/5Scu2F4e6D/cFVHrwInPv+fUmibdGOU/bOsCZRf0xL9XmPhOuAu0P9WxMtSNq6g/j8ImOQGe5z/+hvQLnOa+P92vL49EHfK//stbM7Zcy79JMe6vrkTsP3LE44NJC+C/ti2jyaWLsb+IH+4zxPz2PychC/C1ufI/Or758TM7+7+m0l9uuSP9P/p0PYfi5ta/cVZLmVtnyb9Ws3p3vPPEP6+1THift+Q/TQ8Zd9/vrj/Ii1DauHfpv7SaL4tMdAdAcu76ltZF/z9ltZbp+QrAvy1EWlcXQbg/iXsbmzXAzb/GIuoQl66tP7Q9GTDLF9o/UMsDA7PU2z+lk5vkbfDOv3K5SI0igaG/1wjD/yjk4z+D2rDlK1/Gv6V9QDO51sO/MrIdlN9z5z9U4QVyYI/Pv7QhtZRc/KM/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzM2Mjg1NjMycQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTMzNjI4NTYzMnEBYS4yAAAAAAAAACetbKQYCgLAwR4oCEO7/D8rvnQXxA7IPwDFeEP1oPK/e2MN1q685T/jSTd7nWgGwL0vJd3trey/El0tfz0HCMA4wFBZKIPJP/o9UhYVXf4/PH3Gk8vZDsBYf5dfCPMJwNmjoPi5hQzAWCH7B5YEB8BJ9Dk+MzMOwGr9AUmIWf2/UPv3a1BFE0CXW1XvhvfpP7JavBEqbv0/E1hD5LUr+79A85/NgqcNwKvu+1H3QgvA9/DQ9LKqzL9DlGp6oo7fv53lCexVFA1AEgUegBwMAUDSLIGY11EMwNIxF+54zAxABhKJzY4GDcBNyUWbJMT6v+hpu+MgbgZAWPaS7Y0Rsj/d+UuW/MMKwKtCKooyv+o/kQKA1hYYtb+zG4OTrHrIP+KPkYKgl/E/Fc2BMhuOBMC4cfAfgHT5P6FFnd172g7A+L47dbAZ8T/soSclua4EQD23qMQBHRXAKjB1kcyrCMDwNlzARi0PwCEBjzBDZOc/jyPkU3hZC8ARpUwUD4/yP9BaV5xCKPC//l0+UuZ7EMA="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzMyNDkwOTYwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTMzMjQ5MDk2MHEBYS5kAAAAAAAAAHxYXQOsqs+/13kRu8hPuD/V9smlYkSrv3JJdXkosKw/e2oRR/QK0L+sTbguQ3/IP1gIfkUmU7q/rbVgPjAPwj+fK4tYZZKxPyNqO0hSmLC/swwFD93ddD9Qhd5HFBnUPyYOzgfan+q/R0ppHzkk0b8XS+jezeTJP/ORK5rDksk/LNS8SLeQ0T8t0oWWdeC0P8thRdxNZqE/sWjjcbB/oT+XKqqHAajCv8rpXA+eeNU/P7wD6UgHsL/kuvqKYNWqvxn87vLWO8u/KAtRCSinsj+bhNj4Xe7Tv8R5I6CDUcW/Aps/w4fExj8SBhe/+NDTv2TLw7G0zcc/dHZOjoLJy7/pkpcOZlHDP+odu8CkjNo/sfZxW9W7xz/yN6vYbUrAv/IYxpKuR8Y/B5eK/qzjzb9GBfYfx7eJP5y6s5XzW70/DXWN0HYzuz/7ge07KLbHP9+YwONnMtS/xcXzrCnSzL+bgqtblmilP771jllwdNK/2Pn7CFovuD8EzhSU3cSBv0RdeOivs9C/ez4gPDQ5bD+E/UYVLMzCPziLjk42tra/dOJZYw6snr8XtoWz9RKrv1BFLdFrkM0/XluKIKvXbz9ARHXfVGXMP2po3UAhdrC/wbU00jABwL8CE3JHy1PRP+qK0xgdCsQ/2CDTJmUy47/MbyWYpbrlv5lNSPOXxqG/PB0m7JQO1789kyL+sUu4v4YhPh1IarG/SVQkl57Hsr+dRwrbxBvCPy/7twUpM6i/PvJ5qHSuvT/MgtVD+2WyP6lMbBDxLbg/vVmYrtQUwb9NZNGVzK+RvyP1KxKa4Mw/lruchqEAwb/XmrCkj2y+vxLwpDkjTbQ/jffNI9q+y79oR+bkq/KmP3mGuxyUErS/MA/XaJxwt79nWkNio0y1v09arFo9Q8a/LRTdu6qitj/NT1k10za/v4zBJ8SgJMU/veM1TY9JqD+PdwSE2H26P+CS3fdchr2/KIJwC8vRcz8kuO9aQb2zP/rC4I1OEt+/IwZkR5KEtz97VC2SZqR0vyU/019gEZM/ougvsIEZyj91GjQTd0yLP4TWs3J557w/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzMzMTI4OTkycQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTMzMzEyODk5MnEBYS4CAAAAAAAAABYW+LaD5rM/ZCrLlnFBdD8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    2,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -3.684537649298581,
                        3.9793463791228696
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2
                ],
                "values": [
                    -3.684537649298581,
                    3.9793463791228696
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 65
    }
}