{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9982872390826336,
                            0.00015208985449257972
                        ],
                        [
                            -0.013773833434740528,
                            0.9995818329039544
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2,
                    2
                ],
                "strides": [
                    8,
                    16
                ],
                "values": [
                    [
                        0.9982872390826336,
                        -0.013773833434740528
                    ],
                    [
                        0.00015208985449257972,
                        0.9995818329039544
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    1.024384991712831,
                    0.4025174637452197
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.0019245212709229236,
                    0.0019866623492646907
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.006492909322656004,
                        -0.0015863676150225103
                    ],
                    [
                        -0.0015863676150225103,
                        0.0006749996484280985
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzM2Mjk2MDk2cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTMzNjI5NjA5NnEBYS5kAAAAAAAAAO4P2F2BKsO/c1Ob9vdx5r8JvKmd39PDP66/vVStqOa/rzgqnd8v6D+poiOKbMDuPwinP9WVluI/Es0cEQo3AkBDD8Jy+FfNv5Ao0K2v2OO/1Lc/sKC+2b+VDinyjJrdv8HhC5Fa9ug/R2AXKjpl4r/LxUM34x7Iv1uvafmAILY/5vJgUx7JAMCdQpDvyIHyP6Nl2w/q89m/1Yaco6N/6r9xPCDJmkjWv3ZfwCw2s8C/RGCCdUISrT91dzgHtSfev7EJVQqZzbO/FVfuO9zTdb9qviGXjpYHQDS8sG/+swDA6oCP+kRdwL/VlZNHqGl8v1vvpuxujeK/Ni9ByCCi6r8R/mJbx0AGwDk9wdrTDf8/+zdwkYVL4T9mi/IgwhT7PwwHMgM1GNc/5CD51ctk3b/bdufXpRL6v3MN+qyvEgBA6bTbhHiQFEBI07fZpF33v/lxVJsw7Mu/MfvfJsBrsD/z+oV1PEAFQM6+/Qugufy/Z8gbLFfk8T+3GzqHAv3yPyTXlMOGrc0/JR+n6uuWub+1x+4wX+CJv/SuQIDS3ew/RsPrRgteub86NPXLFC7qv+D6aEoezNI/+6/gsjwSvD/SFq2YQY/Sv5tF7emITLu/+ZQGsr7Byb+kbsPotAPnPyWqkfnURwfAcBAOL1ejAUDxSUzlQkLQvwsjhyECD+w/PdxlaFua179c70pGk7fVv2ix1g0H7LI/f5DPFGH46z9ZlRZU/AqgP4BHM9qhFvG/ApzO9TjUu79cjI1qkXXxP6ebM9JxNADA3ZIj3EjkAUCpy/r4sIYLQO9aqI00I/2/F0LoOvMvB8DHNxrB2fMEQHiBNoTa+NG/b9lc6sdbcT+sDMntMjXLP10PlqCYX+s/S2uFxIdKoj/wgO1HDdzqv6vqzwgKXRRAs3qMYYoD8b+ivJsj2BrCvySOhibm+cM/G/LOJi6U0L9b+HRnPWPaP8oUQ2B8L9w/pLEa9Q0y5T86u0hf9dXZv1678S2QBNu//xCOGwO16T8A4N5qbYDYvzqIfuvdC8G/0DCwb97B4j+YoTBAlDrQv+T+XHqj+Ng/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzM5OTQ1MTIwcQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTMzOTk0NTEyMHEBYS4yAAAAAAAAAOpF2UPS3wLAV2PJW0APAUDIjeQERPLiv/ERHMH5bvS/43rKmsqi4D8jCl/SYX8HwKshEzkefNI/xwb2zwgRDMAO3hGZ+BzCPwEREXWfVP4/EOATinUXEMBApVMW5EAMwICI0H5xYw7AhfLLFEPREcAmK3OhTN0QwDy/DmD1PwHAGHdvcSAgFEAmGel9FVviPwdG0FzbRAJAzLpSKWda7L+wewhsfB8NwDBo92ReyQ3AF0f/ivMX7L/Os5HTlNLzvwepch8LxxBAa1Be1FASAEDbkdLBQdsMwMlVzUt/ERFAxj5HngP0EMDwaSo2YSD9v5A7I+wykBBAX29YkRA2wT/6ptnwxvENwGlWa52wxew/4Q4EZayFrz9V15sZoXNYP1oZsBn5BgtAgsAzxT33D8CP3MikKe0EQFsqXlosfxLAbCBGr2Ge7z8C1tV0K60IQExbnBsyTBrAMviCyvG9CcDqsNuPtjUTwGXAHRqZ0NA/An6YmhwYDsB6GhANMs4GQNyi6a5Z/Pq/UHxUkS4OE8A="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzM3MTkzNjMycQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTMzNzE5MzYzMnEBYS5kAAAAAAAAANwV0rsEH82/XTGZk34Ztz9ac072gymwv2XS09vXCqc/isTkUeY0z79mfBNkovjHPztuqP+ASrq/mJtlQt+4wj+Q2Zxhs2qxPyOzXPpIl5y/GiootUJcgz/n23+6QSXSP5cSBBUnuua/59RLyVUj0b/tt31OR7W2P2o3S9+6SMk/uYC5+NOP0T+LILOLS8yyP3Mchl0f8Je/fX2PPNn9qD9kEOYUWabCv91CwfSpCNU/DvVEokH6r7/3ITzr2AO8v6kkLk5dssq/dh4RQwvCrz/xpz0mC6vQv1j4N6GXP8W/ulVfP/zgxj/5qOJ6Dl/Tv+b2XhHuy8c/bzalmc0bxb+Scse2KQO+P7GCpnsupNg/L4OQBhM6wD+wH0hluQy8v+Iz2tz+g8Y/e+SVcb7Lzb9Fq5cQXZuJP9wjtPUQGb0/N9UseOb0sj8OuKPs21vQP7mzIjbHMdS/TUOE7watzb+GSPkB2u5pvypoh6fI4tK/s8rN989KuD/Od2tq1fyPP7fK0vVOwMu/6haa5DEwiD/1rrotErnEP6HT+qEEKrS/wjVr7Igldb/kQrw7UVCuv55LK9YDjtA/w+LChQXQjL9DvEyQ2fbIP1fjmRkHf7S/JrsjZjgbub/LfH/jAdnQP+EpNx0sMMI/DQ9BN52p4r/iCic/5PLiv/Xr1fRega+/6yRf6IXY3b/26JQrLGy8v/q64ATIGaW/JWJFiL7stb9OpJzrj82/PxcR+Yjrzay/YPWcCUzQtj9130kdzJquP2RwkuAPTLE/lPGySOMrwL+0wBsbpOOMP0WjbALSPsc/3BBmthAds7+wlmM9yV65v5NC/f9mkLA/jLiSiwR9yr/77XEMulayPxn+NXySDYC/P1dqknbAwr+p7dv/NwC+v0uW36qfWsW/EuivtOFuvz8NEJ5K5zm1v/T0wpueh8E/Sk03wSsCsz+3/PKbyNi1P/dSOiYV372/i9Lsykpjsz+/PYtxjY+pP1Nym3Cz4dq/zEuVHr6KvT955mVxKbCfP/ECxSfDujE/7YXznyNLxz9wjKcEequePzMZO6sYgro/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzM4MzE3NDcycQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTMzODMxNzQ3MnEBYS4CAAAAAAAAAF/y6nb24rM/li91aPZCoD8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    2,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -2.595743229799477,
                        4.408283559719659
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2
                ],
                "values": [
                    -2.595743229799477,
                    4.408283559719659
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 90
    }
}