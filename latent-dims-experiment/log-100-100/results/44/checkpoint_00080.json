{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9991636094010944,
                            -0.000292536489165983
                        ],
                        [
                            -0.008901460210028495,
                            0.9981750427850926
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2,
                    2
                ],
                "strides": [
                    8,
                    16
                ],
                "values": [
                    [
                        0.9991636094010944,
                        -0.008901460210028495
                    ],
                    [
                        -0.000292536489165983,
                        0.9981750427850926
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    1.1637790765438811,
                    0.4884775689356475
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.003210523197582006,
                    0.0028010602526507
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.006917836678344891,
                        -0.0017408654466652962
                    ],
                    [
                        -0.0017408654466652962,
                        0.0007832708434634128
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzM4OTQ2NjU2cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTMzODk0NjY1NnEBYS5kAAAAAAAAACZyr8QFtsG/2D9VNbLL5L98vRx8QR63P7JwDcbSheC/+TfphA8b5T8RnBuykefmP0R6e3cysuI/0Abzcq85AkA95uR+C+rLvzuiifsan+K/zuATBhOj2r/EggqWkl3Vv+kdIQissus/oPAPlW9lz78nHFikhN/Pv9VBxX1Io8I/7yGC4PNI678uUoIz33nSP9S6QM/+g+K/Z0KCKt+F7L+j7XmkVOPTv/HLtOyNxoG/bL4t4lO6qj/pN6M41YrbvzjolZ/ywLK/5og7rYeydD8p1wopOAkEQI3eCeejqPO/Q/V9lQP0wb+y8npMJqg8v9dc5D5wE+C/0lCpV3iC6b//R14GXzwFwG/nTjA85Po/3gtMLr0i4j9u2SjZy4P7P9kAURQ4hec/YF9aEsmN2b8NoidqMjzsv9cfbq6vEeM/hjFcUygrEUDCoJQFgwPAP8ZQPt67gMy/RRVVB9kFvj9g24133W7vPzBjFIfyr9K/S+JD8DuT6z9gx4IFXlbrP+/tfHtyz84/T6kB6R8vtb/ZVxTb6YqHvwp5row09+o/fowO69Rct7/SUDWXQx/qvxPF3oLKF9Q/UnqswyKJzj+n8SC0wGPVvyMqdEltvc6/FdJS4PtMy7+YFBZzdmXqP7+OE2ET1gXA39KdzsKV/T/4vHVYf5TOv2MzZUsg+eo/VF9UgpR41b+UkTYNQyOsP7O19HdqNbA/47WH5BAW6D+Qfo6sGJ2nPy1ydMqys/G/24GJze8Gw7/FQ9SZI4XwP7Mto8iFFtu/tPTFGL0hsj/2lqNIDlAEQGgDGdxESdS/C5PFVXYwBsBl1M/auWkCQOiA7cZOgdG/JnojSm/JpD9ha/hm0QbIP2zCVlk3K+g/PPcbvLNWoz+pgGknp+Ttv9cUA8oEig1AwnP4cEqg7T8Xi4GfYuTHv1BF0BJKTso/pktxF2pyyL8ecc8YjmfWP0znmFnUQN0/1VQvxNmX4T+rA+6iZcrWvxZ6eCEMV9e/zpWFr/y27z8C0WquY9jLvwTVc2r1qcK/TgKbCrjA5D8YpZStPnfRv3JulptsS80/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzQyNTEzNDQwcQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM0MjUxMzQ0MHEBYS4yAAAAAAAAAFvFVYrnWQLADDhgg583AUBdlKkTFhDOvy753x3FHPS/aULfb0Jf4D+YBbewiPQGwJHBkkKHqMK/ZYgznY1WCsCMmrM8cn7Yvx+lXQossfc/d7Qe+PgzEMAJG5MhCDYLwOX/QlaSbg3A0rxLwgRCEMDlEh3pcWgQwAJs9jAzEvm/KN9bowyPE0B38HA0NIznP2rxAn5k3vo/qTregK5vAMCQKmK/g9MGwAwpFg33Bw3AnijbC+xG3T++bpYzixrovzZ0Nnk79g9ATx3jyj+LAEBoGETthFgMwCJ2CP+7pRBA0mXid4+TEMDMjhiTIdvyvzMpwokJaw9A9jjRqbd5yD/Ju/u2wT0LwB36lElb6ek/bESLWwz60z9XueyC9THOPzi9dCstz/c/wgDDV+T5CcDJPwA+SVEDQAzaDY1kDRLAPODFjVcp8T8RwrpanysGQBDumnENmBTAUea34n5XCMAJ3kS9krESwFDZfqmil9c/KUvVp4ycDcD0u/az6ir/Px26kMrETfK/oB8SzxQ3EsA="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzM2NTE0NDgwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTMzNjUxNDQ4MHEBYS5kAAAAAAAAAFQwLwXBysq/nrhieEOwtT/iLwvCMpKwvx3D6pbGj6k/DuixL+id0r/LNcN5SCvIP7X5rwGBsLi/NGQhsutgwz/BhBoudaavPy+diMzdd5+/1WjHwy2ahz++yvR90v/RPwlr8shhfum/9Vc6fBq80L+gPEXfBhC7PyoG/K07UMk/n/+nq5go0T+2MbgPa8+uP8cO5m/qu56/syVksFMUpj9pM8B64tfBvwvMbcM8UtU/BUAyFLjHrL8GcAVqvtK7vx7w9esrJsu/L2TPN1SdsD87PZn3ysfRvxSTGKkNgcW/mCzuUsIjxz/hD6bS6+DSv8v4O3d3/cY/0CNwxhD4wr9BJV8mFqq+P6e33CCv1dk/aRxej5qRxT+R0/7vDe29v7Cmcfb/tcU/olKJ10f9zL/H79Dc5md5P0FwdzNC670/NNStxMYhtz+2ADN+T7LQPzSu1+qLytO/SEtbeAVhzb8340OaSTuYP/527jtiCtO/NXqN0ImWuD/NpbUxbvRVv6TXT5C5C8u/cJhwOA1Xoj+jDQ4fkFTCPyArgWiRw7e/vZt+ryj2Y79Ymuh6GCKyv+d3bMB8GMw/4HzkVoDegr/no6Dyae7IP266Ixzop7C/701bVwkJub/JKWE1LIDQP0G3z+NVCcQ/ZF5yLVmW47+TVOisA7zmv857iAVSoK+/Ekz9OTfk4L+wXLrw++W8v4hTLvTU+qS/mAFfsC0Eub8fkVzRrzi+P34TxTKdeKy/GtA0gdLAtj/q0OY3CKizPwzUP06LOrE/VA/ZRs4wv79xZGdq92Zrvybf0KZEmsc/GivmIsodtr9/m4MzGNy8vyY3gLUCDrQ/xx+CMiI3zb++K8uUM2ayP1BzTVol2Jm/s+fH9pUowb+R1kKrT0G5vzfrGVzorcW//LuTEhGivT9+q36p+ym1v66PgNfhf8E/r6qQSaURsz8Bngzti3q6P5WXwBQYQsC/7vB8Nu42rj8Ko8demnCpPyNpBeA8EN6/ReLywcO/vj96tAmYBvGiPxBe4kpIiIY/1OeV1xaoxj8WIMTGauOZP4YITYTO97w/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzMyMjA0OTI4cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTMzMjIwNDkyOHEBYS4CAAAAAAAAABncpEIJRrI/SnIneelhoD8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    2,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -2.366267921533352,
                        4.12578472667926
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2
                ],
                "values": [
                    -2.366267921533352,
                    4.12578472667926
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 80
    }
}