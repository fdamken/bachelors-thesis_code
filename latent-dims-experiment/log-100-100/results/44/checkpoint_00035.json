{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9982682437777709,
                            0.00027478504405107246
                        ],
                        [
                            -0.013886422262367908,
                            1.0003425434256958
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2,
                    2
                ],
                "strides": [
                    8,
                    16
                ],
                "values": [
                    [
                        0.9982682437777709,
                        -0.013886422262367908
                    ],
                    [
                        0.00027478504405107246,
                        1.0003425434256958
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.8136414994531402,
                    0.3194143487900094
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.0014121057207867125,
                    0.0008783690496562712
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.04102972628279389,
                        -0.0089060120617237
                    ],
                    [
                        -0.0089060120617237,
                        0.004476633589989731
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzQwMTMyMDAwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM0MDEzMjAwMHEBYS5kAAAAAAAAANFfkzbLcr6/Y7UUmQKC3b/UyPIbpLPAP2o546PbBvC/B4IZCL9kxD/Nmgg49pO+PyMi2lDBkeY/xnL63fveAUC0XRBvaEXCvzf2GBCGvte/dVfJSDUYzr8Kokor2ZfNv8ivRAGmttM/XQrf5db71b9QSFKhUoTAv47gLRtLaq0/2NvE30wT37/k4ms5297ZP9pWRznInca/cI1nKjc1yr+Fjom8I2DMv1c39gh8GbC/3tTuPdRjlL9Ji9wpgpDMv6fe64TjhKu/z0ZeBJUZnj/FPD1Nw3TJP8zb6qSCh2G/0cYokyRDwr8Xda0LVKG3P/ff01v8usu/p1EIT41b1L//FFJtNyXlv48AD67NzMs/vbZ6VEEm5z+pH/863pb+P0Dh61vONOA/C08OPHE84L88cGTiMNTjv8EidLBvPPE/SeLdvpIFF0Cxqb3VlCGlPzQtc73+F8W/LoB06q+ThT+lGDyudnvqP9oP96G0lOa/CM/o9ft/wD9humARmW+9P8Z6tTpBxMM/B6wzx2Vlpr/3Hn5IqQaBP5pdrfHSr+Q/sKAhZhaWrb9NndFRuiHjvzHeD44zV9E/VohLiiUAyz+YSLQK8sXFvwOi/gaRJpG/UDrowwJ5wL8IuyWHfonHP6Q7sAHFzMO/VEhI6t6Ewb/gu5nZN2jIv0QHzRGkzuM/CU+bIGbaw79xKKSGmyzBP+mymOefb6U/Cr0KTy5p5T83zA2feV/BP5OucHB+xuu/53DZqzErxr++TfUd3WTnPynNDqpIdOC/xBAUhSHg2D+hyjaF0EgUQC/fzycQg+m/eZLHZhmW8L8IR4Qu7Y3vP8K+SDLza8i/f+VMUDO9m7/7/MIfS+fAP3RALVPpC9s/ZxfPVGujsj9fMXtk+KDnv/4MaaJ3xxZANfKwuCMh6D+3c1bHnVu0v6+33eo+fmk/zfRmmr/qx78vOlLISfGdvyq3/WptEc4/qZA665LczT8sR/GuqUPRv//TUQoCUNO/Vx/RYpuc5D8evHf+KWyOP8snSp2fGsK/ZjFDtin04T8XbSw9Bs/Lv/0enRONX66/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzMyNDgxNjk2cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTMzMjQ4MTY5NnEBYS4yAAAAAAAAANuRtMWlaAPA6tkMzcfU8D8gMwtXU3Dcv1hwY2zSEfG/CJJTfjLb5D/leQp9bvb3v2yM/iKX3cm/e5jr7uEKAMChqBDtPqXRv9RpRhgPXwJAeQfaC2PzCMDaiiNtdYIFwJW+qAY8AwrARvJgzV779b80vtZCgtYIwMI3S7IQbfa/z2+RAI5RBUDvokVYUBS9P56V9qTymPg/5lLJ8yfr9b9SqAtUtLgYwIBtSo2+eQbAXQmExjS+xD+Rd2F5tYzzv0cRsWPxXwZAn8NXSeSwAEAvAWUxIpYIwP1se/7t+ARAkV7fphedBsBTy9x58DcAwI+rKSUjme4/6gm5RiTA1z+owSGRsgcDwJGpRI+boeo/6YU7dKpa8L9QVBupysrrP6zRHyFhiO4/yiARd3erE8BcyfhguBHsPw20Xcm0ogjAQ8Q105wh8j8jybwhlhz+P1kxx4n5IhzAW/AN9CFOBsDOaLTjHs0HwGve0OPw0N8/swbWwo4DAcDzPOILp5DmP2EGtJwVFuq/rAIVQhDbCsA="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzQxNjE3MTg0cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM0MTYxNzE4NHEBYS5kAAAAAAAAABH2QlALFM+/RGJdsJXJxD+WKDlz5eaCv04CbZ3Ifa8/KpYBdrkiwb+KnDxa/pzFP+bc8nxMWbq/wflAMIGsyj/GxmY1m/62P49xJGr9f7a/W8LrZklvlD9HUq2nwsfSP+MN+RvcU+i/kCsXbGfj0L9ptkyilazWP/aSjsS7AMY/rWLfvgQE0D8bTcZqn9i9PzimsnCwNEK/g/Y9iPSWoL+EQiW6HnfBvwhJme4iw9c/HOOYoBahtb+kM0Di4hWOv+p3yxtBENC/EHst+sIrgj/p4DCU73nXvxN9xf5nd8G/w0wwBdD8yj/dhFtZqUHOv0VCN0nSYMc/GLdq6sg80b/SROeJ00bMP7R4IsLGcdk/oJ9Q80Z80D/a2eLOL7DLv5mQOy4l48U/QQKdsguRzL+nsIffQ5+JP1NJReYvJMA/Ppf3Ski6yT9Yp40W5cC7P6NQgnE4j9O/0ahIVXcx0r/v+2it/56zPyYEalVHz8+/uKyLhqhqtj+KZvA7p+Z2P1KEleOPUNS/ORh1Cgfjiz/lhPJy+KjFP8TEZuGXL7G/wWtouM3mtL+HXJU0IkGyv54tGwWWicE/AoadAm4qpj9K0rnhMWXNPxP24XrBU5S//HLcMuTWw7+YMSratBXRP6BACYMT370/4Q6mGF6X4r8lWOCAs17ev/thYIlvlJ6/1O4lnWFz0r8/fSBvy3lyP6VJNG4pmbK/L4TDvAh1tr/wQDT4K57EP3ks9Ma1P7G/fqA55r4fwD9TZqJuqheyP7kRNsNNNsI/VlAgQ2MIy7+YDekT+QV3v+VQ2RLdfcs/XuLoq8hQs78A49SbZFvBv9otBJlenrs/G6/srRSRyr9ijYxwNfajPzBR9toS+ca/FdMbEKAItb96Mot0xEWrv4nnXpfdB8G/R9vAK4xVmr/3nOONFATDvw5uNBjvesY/TM5GYqXlpD8iNLKaYv2/P+Kvy+4FzMm/klfTjPhfsL9xTPU6IlO2PyZDJn3xXOK/kHo0oAvytz/viIl6gE6kv47LtBDGm5o/QtV1+0OuzD88d7VdnKuWv6PsOYHQrLI/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzMzNDE1MDA4cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTMzMzQxNTAwOHEBYS4CAAAAAAAAABZA5Fo+Was/1HrA7IvHOD8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    2,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -3.6642136408585313,
                        2.6754241966760755
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2
                ],
                "values": [
                    -3.6642136408585313,
                    2.6754241966760755
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 35
    }
}