{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            1.0028352384601544,
                            -0.003099899673643284
                        ],
                        [
                            0.014859281714086719,
                            0.9950516069166151
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2,
                    2
                ],
                "strides": [
                    8,
                    16
                ],
                "values": [
                    [
                        1.0028352384601544,
                        0.014859281714086719
                    ],
                    [
                        -0.003099899673643284,
                        0.9950516069166151
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    1.059296130492699,
                    0.4307943412326083
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.04831560746768264,
                    0.010629110088230278
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.11849508534937492,
                        -0.005073507558569723
                    ],
                    [
                        -0.005073507558569723,
                        0.022523096341501958
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzMyMTk2ODMycQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTMzMjE5NjgzMnEBYS5kAAAAAAAAAEi4QROqJsu/utEFzjiV0r/vPQ+z7CrEP0NbpK4M2vC/PUggoD5Ctj8Eo40aN+rMPwyCzhu4Ous/mMrkQrxfAUAdFeSAIILRv/0wy9pzPNq/mURQ2f/b07+Btg6jYeG5vwgPrrvBds0/TVFuVvIJrT/ENEwE8nDDv5XryDP1Xqg/G6ANhZaF4b97NyB9eonePyMXtNojObG/B/P8h6O81r+i3LEwQ+fNv2kxVDI4IaI///cQD19ghr8369TXvfzJv31iYgkQp7K/h8xgc+V5jT9ybbCtmWXkP9DN51t2ht8/6P9n+0Syvb+iqttJdwibP3Jyre1UNr2/+cx6Tx/usT+5eXYbWTjiv5luvGQeCty/XE/lSc8i6j8v/WRSoIIAQPVYUV73xt4/26FkN2o+6r/ccXULWM/nvx2qPK9+HOs/I/PJXIXFFkD95E3j8rrFP1yPulQ0Q8W/65cUVyODwD+iR8cJB/HxP+WH48CX5v+/ziqtGiOwpD96hOr7tyDBv+kEfpGOjMM/m8eTb43ltj9aNsFYP0WmP8PwwASdLcA/IdqWIBeVwr/FGQIVCJzgv/TnCDHQ5sk/pKRBzTXEor/Z3rTAT1TEv1JR+UZBGcS/gRZZ31D5pb8zIK6mLD6VPxCx8Ur2h+O/zu8e7R1f3b/3MNGKQ/vBvyt5eJFXHOI/lny3lw3mxL+azN5MuwPTP3Ty/hRmetQ/IeHse9aW7T906A4TGPnBPzm0CdK6yue/jOnyvtwxx7+5IonImDPkP8PP8xiS9M+/bGA5cc9Nwb+h0KcqFo4TQHmbbhXUj+S/YYg4SXOHwr+2sPVL1mnCP3PYeAocvs6/eZ2NnpzHpz9LLuh973rCP5sislXuvNc/uBYF9eJJvD+rCojtNrrjv9cqdgAsHRZAcvowv+AU8D99Sl/59mSwv4ddTVtabJo/77P4GecMy79yi4o5hVdvP0AREjPqndU/QMh7fc5v1D+Bhlr8YEu/vwA/3v+rj7O/vs27GST95T+pgeqRqY7ov4npgxoRE7a/EsRC7dAt1j+5HcV4m3nQv7lzPDvNUKA/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzQxMzczMzQ0cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM0MTM3MzM0NHEBYS4yAAAAAAAAACdy9KsvRQPALjM6nXnK7z90w4UGr+nwv5ieuFc/QPG/VLYc2ZTT7D9iMVOwRUPNv1gUTzr2dri/sYs8Eg5D+r9GboILSfniP4Tx1XcMgf8/B/uUycLyA8Au4JYNKPkBwJuhfSO9rQfA5iDWe1zZ7b/aJCLe0hkHwPZisa4AuOi//pbh/pQfB0C509+OfFrbvyZP5g8/Se8/UUUbIoxe87/RXDFWCXkYwCbF7Q/HowTA6Gh60vOQ279pzoumf4T4v0YxfKwskwNATRVpRCRzAEAkB7wHo+8EwAYt24J+AAFAKq7NQ0yBA8D7Ft2IbK7+v5S/nscShek/BkPn2Vp41T9R7RQ49mj+v0TYzdWGmfI/dwRiAvpx478iQgem0vrtP0hK/FWC5uU/cbgN85cTE8Dx7Pvs9bfDP95M9w7vSgTApL1Ae8Mp9z9wBIKWRrT4P4K1qU9VgBvAI/HQQiYVBcCgMWgF66EDwKsIv/seA9S/uXEP5WAo+L82so+Qrca1vyIJUwfPAfG/H4DpXvbIBcA="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzM5NjY0Mjg4cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTMzOTY2NDI4OHEBYS5kAAAAAAAAAA1avKZs8Ww/CkjFwYvfwz/aJ/pKhNu5v6Mr+7EVvbm/j07AHFeDmb/B+k2jEwrHPzQ6Rh+ZC7K/IJJknUTEzD//U15DGXysP60jFh4/Opy/PxP2bK1SsT+j2M+0pK7KP/sJCWSJl92/Kbx68bVvzb86TOhJclnUPyKLN4ET+sY/Nvgn9rasyz+FyAwiw4e2P8sr+qd2zpW/nFOAux6sor9VujrTIje6v0DgKG5sgtg//TsLgpy3qr+NaVoyanOQP0nPFew6Tsu/KKXmYEv9lz+J4zHNjyvVv4gISkxEPse/rOWzTg0wzD+2Lh7Y1j7Qvw0z6NFcBsM/gaCsN3UQ1L8nfNoZcbzJP7OzSq9TSN0/ZmS12AfUzz9O3S91497Lv8jfM6y068M/8AYWYn41yL9OiC0R4uGYv7iGSxBAE8Y/XZdLy8olxD/9Lr42Q6y2P3pJPslxYdG/7p008ZV10r8BKAJdIojAPy9FBcQyZs2/oGAJXmH9wz9cHz4OFf2jP4Ncria319G/xeqjvnCtrz8923T2CxqyPywPlzA9SJq/VYu1idsbs7+w720ydkPBvy2IGYqcyLY/cZKgOeSulj+ERbpev+TNP+spYhx0UYs/MXE+nWXvxr9nU0rPBf7RP8ENieif2rk/4RJN+Q0k4L+3tvqnki3ev4rEtAoSF3q/Nnobb9AtyL9iI2wQkTKjPyvxpMAsgbi/nF2mJHzkZr9gfRQu5EHEP+Uo41JIHrq/y9gEoxsTwz8TDSyCxYemP7TnpNHqNMU/Cq5dziNfyL9hPxjjVSa0v1d8lnFuI8s/nH0jtGVrtz/nT03ji8jDv9J/XOSQBr8/zEojdkqwvr9H3IxlRmKNP8KpZFblr6a/KO9KUN+3sb80mcqcylu2v5/XZARoWbe/Wm6yj4ZXiz8C6+hux1vGv4s+/tRLbsk/1/pXineltT8Xy25h9929P8bRwKi08MG/ojWBdrRxVT/Zho+02zm8P4jWD/G4w+G/MY5oIEvQsz/CLxDi/7Sdv3NI0k3RMbQ/yPNxL/Wszz8TrZe0eCFnP9mQ796dNKw/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzM4NTgxMDI0cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTMzODU4MTAyNHEBYS4CAAAAAAAAAOVQiTES1pM/Bjuntsc3l78="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    2,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -3.1010836675156526,
                        1.1724995134908889
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    2
                ],
                "values": [
                    -3.1010836675156526,
                    1.1724995134908889
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 20
    }
}