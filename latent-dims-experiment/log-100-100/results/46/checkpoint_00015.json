{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9905405849773633,
                            -0.001222302375403484,
                            -0.006521011594411499,
                            -0.005529919319202546
                        ],
                        [
                            -0.03447400860607525,
                            0.9805748910812223,
                            -0.031502658944220635,
                            -0.018314248708300125
                        ],
                        [
                            0.037288526857784755,
                            0.02347090758620281,
                            1.0199101173127885,
                            0.007835808715624105
                        ],
                        [
                            0.0147637623514127,
                            0.00135904945658765,
                            -0.0058697272010965924,
                            0.9948508254650849
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4,
                    4
                ],
                "strides": [
                    8,
                    32
                ],
                "values": [
                    [
                        0.9905405849773633,
                        -0.03447400860607525,
                        0.037288526857784755,
                        0.0147637623514127
                    ],
                    [
                        -0.001222302375403484,
                        0.9805748910812223,
                        0.02347090758620281,
                        0.00135904945658765
                    ],
                    [
                        -0.006521011594411499,
                        -0.031502658944220635,
                        1.0199101173127885,
                        -0.0058697272010965924
                    ],
                    [
                        -0.005529919319202546,
                        -0.018314248708300125,
                        0.007835808715624105,
                        0.9948508254650849
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.8720178804668283,
                    0.22667515039386113,
                    0.45854397367398847,
                    1.46235875541631
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.020057351195857335,
                    0.01216220124222201
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.2757273777149365,
                        -0.03705112181385317,
                        0.02031199295229591,
                        0.023731803723265443
                    ],
                    [
                        -0.03705112181385317,
                        0.11523528191791499,
                        0.030428020283199686,
                        -0.03594364507052461
                    ],
                    [
                        0.02031199295229591,
                        0.030428020283199686,
                        0.19073891119254682,
                        -0.042776817281486856
                    ],
                    [
                        0.023731803723265443,
                        -0.03594364507052461,
                        -0.042776817281486856,
                        0.05861347163359909
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg3NjYyODk2cQJYAwAAAGNwdXEDS8hOdHEEUS6AAl1xAFgKAAAAMTM4NzY2Mjg5NnEBYS7IAAAAAAAAAB9UhmcVmNa/s0ZbUKaz5b8Ysv7G0d/Zv++p5yv7rMe/+ISs4yjsyz8QcOBJAYzhPy2iWw+XlOc/bvl0Hr8Eyz/v7shhhV/Tv59FEr1aGa6/gNhE++hM579VP7RuCV7Avy85U9165tk/f4P11l2K4T+ETTdQIHT7vzn7nKJuYNY/F3hEhkBdqb+wXTSJ8zOxP61QhtBwkne/9gma+9Jepr9/O5exdMS4v7DRqJsPOJ+/vy6LexZ83j+cTcDlYPqpP75EB2leX9C/+Xi/SW7A5L+kMs74vhLUP/PYBLQLwac/Fj3lTN75yT/UFsRSTn3avzd1YYY+bsM/uSYlKKhI37+lPUTx1iDBv93ddAtl4tS/c4e0yu7Qtz+538/Jz7VVv0pwtYxCSsM/38t5VfOU1j+s1I18qIH3vxrEq6JBy8a/AfHlORE8zT+TMLNwQSvNvx9Ju9sBRuy/GwAJN/Xz1r/jl/KVH2PhPw3BZKaLqNg/7z6tURkEwr9mM9vkerfcv4tZZg4hKdW/U7WmSCrT2L95znsVWo+zP5qSoBXa7KC/HxAYVFvn479W9g8ahHDQPx1IJZpxwcO/mIaRFaZS2z8DWGzJbT62vys8lEBxeru/xruh3PbOuz8/XPQ5pgi2v15wN//+G+y/8d/el4qR+D9OpftkmyPgv5hvhSsGptq/qvXEN07fyb8pLKAtpAnEv0Dr70x4zsi/xvGO93tb2D/jjdtrzHO5v41HAv5XzOS/kq/6/GvDzr/Q/NjZwurWP+/AhdYqnfK/UmBe6Afowz/B6ASGb3/jvzjAgJzArPO/jibScJTCtD88eyT0n5nWv/mLCtk37N2/IXrDaYpE2b+RLVzuAujLP4gCDftVP6q/UB3C1a/Xs7+RvDLWlKfYv84FFLxb1ro/eqnNS6nm6j9JXFdBddHCv2Qs4Ew0KtS/joNZUN4W279rujxAg9zhv2jen1grv+Q/6lNPRdV1vz8lMhuHaGXzv6+Ia8gHwt0/l98WurEIuL/b9WZBVivzv6qnPqwzh8q/Dpw8DXlWxr8BIlZ+S8Ptv62xcH60m8c/IFveu8HKxb/JmYnWQ4HZvwZKHVQUILk/enkTBbPbqr9SYVQWIni2vzTgVA9oEsO/ZgZdf5M+3z+PN8o6Vb7Dv8FZJJVsv9q/MyDBMO5j3z//vo+X+Unvv2/8rM9VZuy/VgTdLINv4b9QWsUBdZLhvx8zCIrYEtO/Pjo6UT+S1z9FZAtKEf7uPz0f8wTP9/K/uKQTZz7B4z/7wQBNsXzqP5/FWuZT4tg/+OWOKy/d0b/S2bo4+UfZv6DwPGJPddO/xCUXyJMi6z/OrG3zSWbvP4xst2ZNJtm/Dop3CQxztz/93yXgvrrVv37GS2um6N6/JQ9rOONX6T+6uTEZaobTP/6Uu6XEmeg/p2zjvzfX6b9FVAaJmYzlv5SJ+HnAUfE/TFCaKZfLvT9c56nvX/LZP2Wvr6+2KdM//PRucctyor+szQTOin7yv1eqeiO+Q2+/buppFeYL7L+iA+iHsm/8v+R5mRiI7LK/+jRXqoFWPD/9nA9nPj/mv5JfJT8u2K0/cOAxVqExuL8VLh2of5/fP3/AMYkrLNw/bl6pLNkT1L9P0n6Hj8rAPzSO/kXlc8E/MYDD9yjE17/+VJxk8hrHv3uuLN2yDdE/xzOBsPDVzz9qvY0sTQG3v9gSPDX8ucY/ezLY7eWhpj/cUvPxj8TuPwlcKixNGuQ/AE5VROGRxT8vf/V4o17XP7797DjxTuM/Ttq0yj+u4D9VPWSg7KnTP5wdJXuo+8C/a3iUjZXN379DKCd73nqbvweiAmJ3PdI/J5B9jpr6zj8CaBVyai/JPzGyXCbLnOO/USnCAYCJw7+7P+YB55revw9LDPHK6uC/+LBNmpzM1L9Zan0u0x+9P9TJo0cy3uA/iHe8+UGP778dpwN40O/OP9tbhZafHPE/CEuRf8VJ6b+LMmyQifjcP/jE9dJvpd2/w3QIrU7P3D/r7q33RO3RPysip8tfpcs/w9t9M8hisT+uODDooESwvzcGoyp1Kbs/qmmR9hhwwz+lz+PqDXjiP88kUXM559S/fBYrwQUD8j+R/aEjGQvyv9kc9W+fhuI//p0DnRwL5z8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            4
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            4,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzc0NDU4MTEycQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM3NDQ1ODExMnEBYS4yAAAAAAAAABBKOawT/O8/TgY2MiGWdj8fjLZG8jPWv98YTbgPLPa/RJs8ErThBUDIO99qxbEEQIuzCvkltQBA8v3MQ8ZT8T8IPQzvrh33P6KsM77VcwHAbraEadIl978HJgqOgbTzv/m6Gh4bLABAkmlF5B1L0L96LQ0Z9GACQPpSl0Vgcuo/o7tuhzL2wT8YvIPyJ8bAvwFPsv+0xuO/TCXVtjGB5b9hqnqHQkDiP8D3LPgLr9W/eoE7xUksBkAfaBXex5X9vzLXBmu9Hea/iBUenKeo6z8Tont2ZcL6PzkIPRCg5fq/1rjf4Yh/7j8mTZxvBJfpP3BjCrqFisW/IxsRV7KG6r/rTn2mg0noP7pMughwsu0/bp6Mvf3g9j/VXaTT66/0v6ryrNcpDPi/RJwB5cw88z/ba8RG0SryvxW+aWMVBPM/RGP8DdsU8b9IfrjD/LaHv63dzRF2EZ8/95osSGduAcCCzSOTU6W5P6twKvhlX+M/GTL9oFAW9D8sGkI8EnIBwIbH270IavA/K5lBed8e9D8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkzMTEwMDE2cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5MzExMDAxNnEBYS5kAAAAAAAAAIN6WWyvn7u/1jVvT+9MqD9bLjvpmDbAP/y2PVBrzam/Jlik2Q6507+CBqlyXKTYv9Q04WTX/aG/gg4yCOW3zL90Hs69He7Rv6x5KPnYd62/nRNcnTN9xj+sdk+SKEKtv0etujO20MQ/En9jKX46xj9oW7MZ9R2qv3M+uZdGoc2/LfesHGiuiT+SKQ6pxb3QP1wJR22MRMi/bJqeJo6bkL9qANg++WfIv7gbmTSC0s2/6Q5gNvWGxL/OzRKlgOXIvyByPeYZbrq/xMtNoyjVxb9lggjeYyi4PztlYdkeLdK/jOSb+/X2rD+EYTaPU028P8iLCiUyUcY/pqFGgkvHmj9g49dP8v3Tvz0YVHopEsA/eMLdFwtq1b/Piq1w3qmzv6ZxbogD/76/Z9xcszLIiL9JAqFqNwnZP9XwPQMHm82/Em11R8U1wr/yoIcHWLDCP9ys/fn3tc4/gsD5wEEj0D9x/9tIY1fEv5rFPbpBu7c/K/rjQes/uz+viueEDLe9v5rQ75Z+mKc/p67qXeaNxj8sE9Ca0tnFv0gIxEjdasA/IMXx/9E8sr8Lw5hAke+Yv2Ii6XwlI72/KvbOFXT6sb9hS6uTGQK3P1AIIeSaub6/vNKD4mSPyj/0x/bqHk+qP30leuSNeLe/0mNatZZoqr8Y9wfwMv24P/uXdmlencA/FCvp/rJCz7/58BKbJK6tv9XsW3KJgcG/G1EJEcfgwz++OSC7c4O7PxTCMZZCK8i/HfucxfJfrj/438VMe5LDPw6YHwbrTMu/MabB/05ap79kjdrMv3q3P5shnx9XdsU/H1C3ktvvm792iDAoVvTJP8Ffk8QJurG/3KsD7Nfjkj9H29aCQw6zPx59xXUhu9G/hDV+tg42sD9StLKuK4CjPwKrX1W5UsC/c2czrQS9uz9tStgLsXu5P0VQKX4OnMS/O6bZCl/c1b+gcl4HnyXBP3eReQ+4abw/PH61BlbPzD9UChDb18qmv3wRJ9/Xv7Y/uHr+MDdj0L/BPIOYnMRpv2xMQOcjiLY/wNBaqxdfrz/9iado6+PJv4jQcs6bq74/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg2MDI1MDQwcQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM4NjAyNTA0MHEBYS4CAAAAAAAAAEpmi4NPEMA/f4eOLssqwb8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    4,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        5.870781448803597,
                        -3.6318297057726654,
                        1.321444426599563,
                        6.358776048223407
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4
                ],
                "values": [
                    5.870781448803597,
                    -3.6318297057726654,
                    1.321444426599563,
                    6.358776048223407
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 15
    }
}