{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            1.0138520181299184,
                            -0.005419269372803898,
                            0.017478966712749202,
                            -0.06247597974482019
                        ],
                        [
                            -0.014707961416425658,
                            1.0020131311465346,
                            -0.12046156828119399,
                            0.11029204765183796
                        ],
                        [
                            -0.039265992323958866,
                            0.022876108924225598,
                            0.9886269093851031,
                            0.179026303562193
                        ],
                        [
                            0.017237967540106112,
                            -0.001681552420380428,
                            -0.004828815015400071,
                            0.9729752241032505
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4,
                    4
                ],
                "strides": [
                    8,
                    32
                ],
                "values": [
                    [
                        1.0138520181299184,
                        -0.014707961416425658,
                        -0.039265992323958866,
                        0.017237967540106112
                    ],
                    [
                        -0.005419269372803898,
                        1.0020131311465346,
                        0.022876108924225598,
                        -0.001681552420380428
                    ],
                    [
                        0.017478966712749202,
                        -0.12046156828119399,
                        0.9886269093851031,
                        -0.004828815015400071
                    ],
                    [
                        -0.06247597974482019,
                        0.11029204765183796,
                        0.179026303562193,
                        0.9729752241032505
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    1.1211868301285934,
                    0.1002995952322874,
                    0.11616084108967031,
                    0.6598479719907194
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.005150224268705642,
                    0.0023400637509552098
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.03476398848032858,
                        -0.00838024881926458,
                        0.0039658028748768,
                        0.006861692498610239
                    ],
                    [
                        -0.00838024881926458,
                        0.017335210568894865,
                        0.001781090640918137,
                        -0.009058971941705352
                    ],
                    [
                        0.0039658028748768,
                        0.001781090640918137,
                        0.019860193356864286,
                        -0.004616776031927117
                    ],
                    [
                        0.006861692498610239,
                        -0.009058971941705352,
                        -0.004616776031927117,
                        0.023967511969409827
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            4
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            4,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzc0OTA0MjI0cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM3NDkwNDIyNHEBYS4yAAAAAAAAAI+Rw6QzeQJAnCoZaHNl5T/0XzgPDc/qv/qlR8R2n/i/DKqYI14aC0Bf4na0SNoGQE89bUjCiQBAJb1wyiVLAkBpkv7GMcIAQMlU8C0DuvS/9tRvAw3G97+XNIkHCKnvvygLiB0qQgNAf1jpgluEA8D9yzqCY0sGQEdWmOkpwPI/0mcYD3Hdyj8O3q2uFby2v6DjNtT09+y/7ikuSszZyj/H6zuyYLTRv6GCxhByD8u/T/o+I5BUBEBomYRKCnD+vyDNG7rWjPK/Xr2yjH8Q6T9/NzKwKt36P2ZkeZUEUP+/yCRDAWhX9z+9VbaZwgnrP9Q3wwWZ5NQ/ohZi8a5/+L9dhYz3ir/uP6lEM1X//+w/lumxs4k0AUBLjOT/hD/0vwKPwRD7m/6/ft2xNkE99z+Ca53KPvPxv9/Gc9O1LNI/cHN9LC+jAcDR9qt47h/WPylCZWwtu9Q/3PyKK9IwBsATmgLwcuvRvxb2W/8VLvA/zJjDmtx+/L+5QtdjwIH3v0AAbUBFZPk/e0BJszgb1T8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg3MDUzNjQ4cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM4NzA1MzY0OHEBYS5kAAAAAAAAACBxI9XL28i/fr5JbhBOtj/N8nC1dHyEPxmpytQ7q3A/QeE9UVVz1L9GBYa/ygjivyRrVHq6op8/ANxUUFVxx7+DlzUJBxPWv+LNvHw33c2/oQR+z0SJ2D/qPyayaOa6v7Mu67dOYqw/ShgHOXjJxD9do7ODL5TFv9jb0RKcMsC/Cg8vpsJCwz9XukGTKMbDP1QArmOKE9G/sXVbaB4/4780g2OjUs/Pv28EH83lVM+/4NSwKR1Xyb+2cTFOPXzSvwmlsyYcwrW/m6sjHuyo0L/AjvnF5wOcv2xcNEU9cdG/2o0Lq7AXrT8DOfPQsznKP3YFMYrv0ci/yHRormSmzj95xieACDO5v9YwY6znUpW/YGR1D8GdyL/aiYY9UV+iv2Q4FSrst8O/Pl0BUs5Wp7+d6NRegmKfv/g3GRiAZMG/pwwuBSsJtD+99cVAwVLHPwhcYjxPBtE/7xZJT3kn1D9//loZ813Av27uRMG/6sc/4WghzdLrxT/YZMG+DtuHv3RuK8/YCb0/+Y1ynOpc0D+eKn6P6FG8v3F1MJkwiL0/wLQ8ayK+ur/n1UZRBbu2vxNZoLKPRsi/y9t0p/A2rT8gEhEVHOzEPwRKNTRrGYw/YS2GmDGIwj/vmAKJ4m+6P3ED19fmnde/nsXCuNV+ub93sGQmEEjQP8EFg1XvAMM/CFw35xL1vL+L2K5Rp2ewvyA/v7YAO86/Xvefz1A+wL8cu55tVMa1P3RqaZQqT9O/JtnoemSvsD9aOornGXvEP5Xx+XTM37q/AJaUPJ9ApL+vuSLog4a/P35cofAAiLY/JhIu60Y41D9/nhD8LlbLP1ewZsozGMm/uW+TQzthiT/WmZ1cVyC/P4TSCwIuq9G/BnSb0gJDsD85r8gPeOutv9IGbMWDzdG/5SkpJOKpqD/TKrtOtOy1P0ABV7iVbbK/Z4HOw103vL8OPD5rEdbDP/AemjIsVMc/hTxvv62FxD/SIRp3PzrDv60KI/nyOMs/+LXhpzh7vb957aAeZzaHv4EQxy2iV68/xbj4XkJstD+vZOvfJiKyv3pLqkes5Lo/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg1MjI0MjU2cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM4NTIyNDI1NnEBYS4CAAAAAAAAAL0TLfJdI8w/pPPTI0Xxwb8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    4,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        7.04803652397584,
                        -5.874231607173618,
                        2.2840081381494404,
                        7.814142103688973
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4
                ],
                "values": [
                    7.04803652397584,
                    -5.874231607173618,
                    2.2840081381494404,
                    7.814142103688973
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 60
    }
}