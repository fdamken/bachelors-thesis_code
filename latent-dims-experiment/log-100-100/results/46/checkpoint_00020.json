{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9946704667913423,
                            -0.003308059445782653,
                            -0.006250485812526791,
                            -0.003304569477919642
                        ],
                        [
                            -0.01718027722949047,
                            0.9804697740874628,
                            -0.031226934113676923,
                            -0.014754457807834914
                        ],
                        [
                            0.024649060030843495,
                            0.0302021169966062,
                            1.024499471986427,
                            0.0029848021318577794
                        ],
                        [
                            0.01762347213018636,
                            0.007629756665759442,
                            -0.002825807106405604,
                            0.9934501167298461
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4,
                    4
                ],
                "strides": [
                    8,
                    32
                ],
                "values": [
                    [
                        0.9946704667913423,
                        -0.01718027722949047,
                        0.024649060030843495,
                        0.01762347213018636
                    ],
                    [
                        -0.003308059445782653,
                        0.9804697740874628,
                        0.0302021169966062,
                        0.007629756665759442
                    ],
                    [
                        -0.006250485812526791,
                        -0.031226934113676923,
                        1.024499471986427,
                        -0.002825807106405604
                    ],
                    [
                        -0.003304569477919642,
                        -0.014754457807834914,
                        0.0029848021318577794,
                        0.9934501167298461
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.8676008731966656,
                    0.2678414717814017,
                    0.4578311482918232,
                    1.8585771919087692
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.010823018954464714,
                    0.008283799925028574
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.14202908236610057,
                        -0.02804767187089041,
                        0.01670727284655449,
                        0.010137113902317196
                    ],
                    [
                        -0.02804767187089041,
                        0.08439075197678392,
                        0.003064361425094475,
                        -0.026440694882978732
                    ],
                    [
                        0.01670727284655449,
                        0.003064361425094475,
                        0.1012309043689974,
                        -0.024252925233531286
                    ],
                    [
                        0.010137113902317196,
                        -0.026440694882978732,
                        -0.024252925233531286,
                        0.04843869760259878
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            4
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            4,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkwOTU1ODcycQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5MDk1NTg3MnEBYS4yAAAAAAAAALz3JfPrS+0/3Qcbbpgnsz/yD6//pozZvwR9R1lYZvq/huCFmxhxBkCmDqbY1JEFQJUfZV5Lzf8/KkvE3qcR8z8s7f3vO8r2P9xFvpYPuADAtvmZqWro9r+EoCUfM3DzvzUE9FL3pv8/LqyuzivZ1r8+yyOWUzUDQF2krGs5DOo/CPDq4uCc0T9U9O61mQnOPxyoO/kbeuK/4F+iL+we5r/pvb7lKZnTP2fK0iSxNdy/vi3MxtMkCUCKQK2WyJX9vxxA47hz7ea/Wwkj0qNk6D8CWyk7xu35P14S3UcXqfy/ay5WWeXF8j9hfC2/miDqP0IiZ/yPt7y/f0P3NGir6792WnHFcNbsPyBiXOvHvO0/lCIkpkmk9z+5y/JtKx/1vzdkptmY5/u/X7KUbcfD8T/TikCo317yv+Es47YvNPQ/mb5Jc6ML8r8xC7OyhPyZPw87+g2x8KI/6E6XD/f8AsDJTRboguazP6mCRKwKZuM/YuBOeQpe8D+S/alljJQCwPovJJ9y3/E/OG/XQsKd7j8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk2NjI5Mzc2cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5NjYyOTM3NnEBYS5kAAAAAAAAAGAu75egysO/bxRJqIb7h7/NYFUAZuXBP1MNVRVxO8O/2LYNgUMx0L8o/z2Qa8LXv/AZF0v7MVG/EjA+rwJdwb9fMwleNpzKv4l9VuYw5rG/4PSsflFdyj8Yc/MfTbaxv48L0Fdb+cE/W3DHTha9uz+eRdJ0IiCgvxlzoL2rc8+/9cZ0EPDVjz/8s7JKt4DRPz5t22SglMW/PPrf7TmMlT/Dc0yp2IfTvxt94f2Alsa/DhI2Efk3zb8jB/rK5bfKv3ghoKdaGae/qSbhsTvwvr+Q7tvv/G20P3OciRMEgca/wQdYVpYQqD9FmnEQFfK/P+uYcIx/8cU/w27IpZrVwD9x6jUSz7TRv3JSO6CO5ME/LHW8Tvg40b/X0guSqYqhv3LhmQUC+LG/aKNbqyeeqb/vpJ6nDjPRPxqg/aA/WNC/vWz9APxyZz8SrV2b/E64P1pPFGzQ/M0/txdQEMuqzD/PbelhUIq3vyU6DAYMYLs/eHTDULeGtj+aQSnd9jO4v6wC/vebkqU/1JsgJ8XSxz+6XSbFd4a/v/V7rfW4WL4/t7a6G1KDu79DUU7dmDuov+AsdDiA6b6/QaKCh+xesL/Z3XiIO+C+P5bBVi+smbq/rcGWBIc4uD9snGVJ31iQP3sqIQs8G7u/+SsgrL5Lt79IS88jlurEP3wx5U6NNrQ/GxKf8V880b+p570xlK6pv6FqbZh91bC/NfENwOCDwj/rLSjXpUC1P+wed/Vwtcq/P5Kwm7JKrD8ZLLe8ks6/P75wh380/cq/LqFslr5ao7//sNZgLs+5P12QqP5e2LI/+4IguUk5lr9nebKO+3nKPz3WhohTIr6/PVqW8pjKhT8comvujlCwPxhSr8hm18+/QjW8vWbPrT8nXruKNgGfPzfKOCxlibi/HlTxz9X8vT/lPtM/YfKzP/bIYjoNgsu/U6rRQkTi079JF+ogQgzJP4wW8bl0hsY/OcH2yjQ3yT8bXDnAztKXv8fuK9vrDbo/cN1nyw5zwL8s5HTLaG+GvzWb7JvTQas/FHZ/UJZosT/QMDsg0Pi+v5JGJ1MqILw/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk1NzM0NzIwcQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5NTczNDcyMHEBYS4CAAAAAAAAAEijcqm04sE/zsjjSK8qwr8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    4,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        6.085755936400205,
                        -3.684970845199739,
                        1.2856946157782805,
                        6.6021821574034005
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4
                ],
                "values": [
                    6.085755936400205,
                    -3.684970845199739,
                    1.2856946157782805,
                    6.6021821574034005
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 20
    }
}