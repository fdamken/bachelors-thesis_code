{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            1.01347976697428,
                            0.0006268867160750245,
                            0.026879583489439,
                            -0.08241139638043846
                        ],
                        [
                            0.026283057705345298,
                            0.9834639712046227,
                            -0.0930023330846426,
                            0.1227424031265062
                        ],
                        [
                            -0.05247956434664683,
                            0.018770411955610296,
                            0.9915829998108063,
                            0.14507549299451533
                        ],
                        [
                            0.013914962192417986,
                            -0.001984658278521951,
                            -0.009079119609505573,
                            0.99131926178965
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4,
                    4
                ],
                "strides": [
                    8,
                    32
                ],
                "values": [
                    [
                        1.01347976697428,
                        0.026283057705345298,
                        -0.05247956434664683,
                        0.013914962192417986
                    ],
                    [
                        0.0006268867160750245,
                        0.9834639712046227,
                        0.018770411955610296,
                        -0.001984658278521951
                    ],
                    [
                        0.026879583489439,
                        -0.0930023330846426,
                        0.9915829998108063,
                        -0.009079119609505573
                    ],
                    [
                        -0.08241139638043846,
                        0.1227424031265062,
                        0.14507549299451533,
                        0.99131926178965
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.659288391510453,
                    0.0466373165189887,
                    0.09506989556630033,
                    0.5335283459747212
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.0027889842815948212,
                    0.0023330257714138155
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.020344093267404162,
                        -0.0047316108959023495,
                        0.003810288287393604,
                        0.006208850822389422
                    ],
                    [
                        -0.0047316108959023495,
                        0.010750157549345829,
                        -0.001257813451228884,
                        -0.005116092330503363
                    ],
                    [
                        0.003810288287393604,
                        -0.001257813451228884,
                        0.006117980955008484,
                        8.535032428369504e-06
                    ],
                    [
                        0.006208850822389422,
                        -0.005116092330503363,
                        8.535032428369504e-06,
                        0.018175044720806
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            4
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            4,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzc0NTY5NjAwcQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM3NDU2OTYwMHEBYS4yAAAAAAAAALvUf0PDgwJAo3sCtFVn6T/DZaj1CJ/tvxXglZs3C/S/P2fw8fbfCkD7DBI/GAMGQMizn3BwTP0/263zS/OzAkC9JO5da+YBQICYQVHhCvK/BVyfHmX/9L+u0YHN5t7wv1Bmysv6mwJAWyDhDWZlBMCzjcLs5okEQJ4M7+hh2vE/151ZsEPL0D9IEktte67Wv4B+BHG4IvC/B/ipsrnG3j8tc5G7u+vQv0GPpMBQHZe/e+Mj8RV9BUClnZ/A5zoAwLR3mgLvhOm/5+9D8Ht75D9Zo+cqnEr7P9Hh2cx7Lv+/ISVul2g59z9S/X3MKPLrP6jG5luOKOU/NOEB+XYU+L/zGJx2YsHrP+9d7Q089+4/uK1MH4pzAkAXH4V9Wiz2v1vg+/PyDPO/2dCLHwo3+D+gU3kxDsbwvx5c+cfTa+I/al9MmjPGAcDRCCvghDOxv1cb2rrOStA/JUPsH6FrBcB6oVLzTwOsP9UnhyvaF+4/pySLI0QGAcBjpXyIq8AAwEoX5yQ02PA/cWR8R7GU3T8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk1OTQyODMycQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5NTk0MjgzMnEBYS5kAAAAAAAAAAy9fAvCpM6/svazo8gUvj807rUu/c6TvwFsQ6nyobK/trBog3Nr078QmacqBzHivyymPB5fTLM/3DUnJONauL/FNwD9ur/Zvz02KrO0jMC/uLYRRX6o1j8fTyuJ4wbFv8JZ63ub4rU/KYNKYE+cxT/qaS47QwCpvwzuWoLZ1rc/hre10+3DxT9rAW6sg0jLP77v9SNDBdO/JWnjm5x4479V8pfLtJvQvwlzr9raace/xnf1jxH80b/Ixl1b4G3UvxMmsMT6l72/x50AFXye0b8ei22br224v7M/CT/eYdO/cXboanhtjT+gHrIH/BrOP8yRPD10n8O/CQtk75ECuj8n8d1E+JG6v+zzU+1OI7G/5HcG12Q9z78v+wqnnyuhP5nP11wxLcG/+Wj7Dax+oT8nOh7YZhi3v9Tm8fIC3rq/8G8O4Gi5uz/ZnDmEkHXLP/xSAvtNCdI/6NFYe3mT1D9UZqlzjlnGvwRSdGjWk8s/wTr0z4nXwj/unqm7H7KWP2HQcOEgwaw/Q/i0AGJL0j8K0XscNaK9vzyzCiL4g78/TRyx++urvL950qor9iuvv0Fu7ltBn66/wtCXP9UPw7+jXMT2DN7GPzscnLfO1aE/vZMMAaAjxT+Jduean5zLP9I77IYyltO/Ak+K7oMZu78U6/dyWYLRPyl2KyUtbcM//cRFBOuEzb8pqaRR4XW3v4CdxOxRdsy/m+SLlthRlb/ko0B38cmzP4lgemTbNNq/6O0AQyklpD+d9i0njVTDP2GpDuilObm/3tWXP1c4qL+fG8sQt3q9P5CUJvfIOMI/oZJ4yzuZ0T9n2Q8Ys1XKP8RUbHmlpcq/4FatnVWZlD8glJ2tPfTAPyFivqe/S9C/4AI+0eoWwD8BApX29pW1v+7A3dOWQMa/Ur2GD5fgnT9wHlt185WtP7kixQDLbce/rf1FUA3rv79rIbtUQ7nEP1UtOGngfcY/tEJsoGA7xT8oaRBr3JnAv18mGNMaYNU/vi4ZwHdhvb9R4WfsUypgv5THXHzCNp8/bp3ALTgyuD+5VKq54vyzv6KVej0dr7w/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg0NzEyODAwcQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM4NDcxMjgwMHEBYS4CAAAAAAAAAFdEcQZdA9A/st5lX2HzwL8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    4,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        7.097061337730497,
                        -6.0732651169108625,
                        2.3918142325554315,
                        8.130750716809356
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4
                ],
                "values": [
                    7.097061337730497,
                    -6.0732651169108625,
                    2.3918142325554315,
                    8.130750716809356
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 85
    }
}