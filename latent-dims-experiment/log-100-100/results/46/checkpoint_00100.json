{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            1.007605311647109,
                            -0.003811204759715514,
                            0.02568584530388114,
                            -0.09948493368960305
                        ],
                        [
                            0.01284623893169439,
                            0.9936155235054769,
                            -0.06750678379859384,
                            0.048769447067955024
                        ],
                        [
                            -0.026125018778329307,
                            0.023513949889243088,
                            0.9828833611123521,
                            0.22447399306573274
                        ],
                        [
                            0.005047684296378109,
                            -2.8956518157345476e-05,
                            -0.005928470738518042,
                            0.992234638313976
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4,
                    4
                ],
                "strides": [
                    8,
                    32
                ],
                "values": [
                    [
                        1.007605311647109,
                        0.01284623893169439,
                        -0.026125018778329307,
                        0.005047684296378109
                    ],
                    [
                        -0.003811204759715514,
                        0.9936155235054769,
                        0.023513949889243088,
                        -2.8956518157345476e-05
                    ],
                    [
                        0.02568584530388114,
                        -0.06750678379859384,
                        0.9828833611123521,
                        -0.005928470738518042
                    ],
                    [
                        -0.09948493368960305,
                        0.048769447067955024,
                        0.22447399306573274,
                        0.992234638313976
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.30964636362313136,
                    0.014915998844891604,
                    0.02209737273600793,
                    0.3060897967868199
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.0013649326752529305,
                    0.0009487316984881886
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.01460755076037401,
                        -0.0030357100715932006,
                        0.0015693968573788908,
                        0.005143897013233811
                    ],
                    [
                        -0.0030357100715932006,
                        0.008134968730921344,
                        -0.0006952590698396932,
                        -0.0035077768959865807
                    ],
                    [
                        0.0015693968573788908,
                        -0.0006952590698396932,
                        0.0022880338929933686,
                        -0.0005221461917912507
                    ],
                    [
                        0.005143897013233811,
                        -0.0035077768959865807,
                        -0.0005221461917912507,
                        0.0149990647753242
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            4
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            4,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkyMjczMjQ4cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5MjI3MzI0OHEBYS4yAAAAAAAAAM30lDJS8wJAoseficWr6z+pHK3V+OjxvycA/C9Z/vO/Emw7TZ0ZC0DA5hLf0BMFQB/oUHW0dfw/gHvAvZIEAkAbdlYx48kBQA6Jw+PbtPK/QJWNbWRN9b9Lx++4HP3wvxLOgdxZbwJA3EBSczlJBMDLYqg4LKEEQIlfC5756fE/lJf5MPcM1T/foJyPsffQv9IztWAM/PG/Dybv9C9A3D/M8BDN6tLRv3OZa5HRWqo/ZUmWoWquBkAs+I7aH+QAwOotjwrrp++/L5TOrpfn5T9hBIgkfnX6P7DZpIOal/+/ZU+p0Ix79j/yvHkK3NzsPxiJHXmhXec/v6ti6djv9r8FesTSujPuP781rHLbzPA/p31BLHfhAkB3FOxBYET6v1U3F3WP1fC/u0T+T5xd+T/a1nwIf2ftv30vU5azA+Y/ALwD7BaqAsBPHAN62TKqvwerJn0Mg9A/LRwIrTMGBcCZt8qlivnKP2AKxCw+3/E/fMGvrjBMAcDf5D0b98ABwB8NBGQVku8/WekqQMF5wb8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg0NTk5Mjk2cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM4NDU5OTI5NnEBYS5kAAAAAAAAAKmlqR4RN9C//PlI+br3wD/6txc12Zyhv08MUR6bJry/k35O70bF0b/DlwxruQ3hvwDjEv6xs7M/rqwcSAbRsL/ODKRnkwTbv8R7Lo0MacO/q/WvXEqY1D/rgc8cv6rGvwp4CrFJvrw/kR8Lh78SyT8YrqPvcMmwvy+X15EBLb0/xUun1Jx4xT86pQF9B8jQP1YzrXfu+9O/wfBNVT/f37+rFOYSCfXQv0DjEYLBqcO/XDi8Flpm07+zRRWvi2TVv9XpKwMgucC/rHAkubmL0b8wwfTHazW7v6G5O/dBWNS/0RInaBu1nD/jjZBXKQTQP5xJmJsl0rW/R6gxiRP/iD/+/31EVAXAvz4VMk3nM6m/bQCqmjLdyr8FJDUSa12Mv8wHLlCVl5C/OzKqRehEqj9v+UDzvVe9v5ItwVGd4ba/Vko3DC2dwD848rUh1WjNP0/HWQkTOtI/scQBrr+T1D+NjI+quxLJv0nVxg8tgc0/80M4Vs3YwD/0GOBQEFd7PyrV/ykkwqA/Hv+l/ntvyj+66assAY69v04pCVeqRcA/bhq4h0izvb+Tu065SHC0v/Jemgto+6I/aHEOxTv8wr+BcwwkTmnEP+wWxc2wlKA/NHLooouXwz8tPgGQCgnIP71VieN4zdO/N4zW9GF9uL8xISDkueXOPxq10lN9v74/au4ZizE90r+50DUnsu28v4Bk4jSI7si/SC+SuuGDpb/2bzjrlMKyPzkDYuxGBNi/fn9aJhMxmz9N+RkNYzTCP0MRkSNY4ry/aSOnVxBHqr9WyTttb3O8P7gIjkEqzsE/vg0ln0hFxj9gpW6latHJPyBiWW0ZmMq/NhzMzce2mD9nLB/QHDO+P+42y+pa3tC/YSOfcM+mwD/kfnhf+Yy8v0TWa3nRe8W/850s2KiHjz9P3eazrv2RPzcSyJIshMy/MVeWPAfGur/scNQdRCHFPxlEgGeiBsc/wWuIOKJTxD/bzxJK0SC+v/bD9srmvtQ/qH80cGWdu7+p7GKaPcFgP81Fs7l22Yc/1+C+OXIpuz9T+H9tq2umv2ehEotz86c/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg3NjY3MDcycQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM4NzY2NzA3MnEBYS4CAAAAAAAAAIu/KFoI+tA/xAZiGbNvwL8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    4,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        6.650095695658894,
                        -5.7709739134927425,
                        2.1713970055392404,
                        8.040495897590882
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4
                ],
                "values": [
                    6.650095695658894,
                    -5.7709739134927425,
                    2.1713970055392404,
                    8.040495897590882
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 100
    }
}