{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            1.0089112440730175,
                            -0.005080996088199897,
                            0.014394505671526378,
                            -0.039594025355024265
                        ],
                        [
                            -0.011529981837223462,
                            1.0104525744633068,
                            -0.11078927328071493,
                            0.00019565180791090333
                        ],
                        [
                            -0.02720053664633262,
                            0.021491432694987832,
                            0.9873369344281832,
                            0.16818758256615005
                        ],
                        [
                            0.013040375851721625,
                            -7.4156885565005325e-06,
                            -0.009325364339231252,
                            0.9727298310186153
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4,
                    4
                ],
                "strides": [
                    8,
                    32
                ],
                "values": [
                    [
                        1.0089112440730175,
                        -0.011529981837223462,
                        -0.02720053664633262,
                        0.013040375851721625
                    ],
                    [
                        -0.005080996088199897,
                        1.0104525744633068,
                        0.021491432694987832,
                        -7.4156885565005325e-06
                    ],
                    [
                        0.014394505671526378,
                        -0.11078927328071493,
                        0.9873369344281832,
                        -0.009325364339231252
                    ],
                    [
                        -0.039594025355024265,
                        0.00019565180791090333,
                        0.16818758256615005,
                        0.9727298310186153
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    1.5361766869207856,
                    0.17235998653516932,
                    0.24041608270497541,
                    0.8273412757437678
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.004728869065758772,
                    0.003151123013699419
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.05515488301960403,
                        -0.016752153032463468,
                        0.0003616895954241528,
                        0.007339575905938034
                    ],
                    [
                        -0.016752153032463468,
                        0.03070140647907138,
                        0.006278536322678718,
                        -0.012017854913949577
                    ],
                    [
                        0.0003616895954241528,
                        0.006278536322678718,
                        0.045067108300773207,
                        -0.009735850549564162
                    ],
                    [
                        0.007339575905938034,
                        -0.012017854913949577,
                        -0.009735850549564162,
                        0.030602185900285406
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzc1NDU4MjI0cQJYAwAAAGNwdXEDS8hOdHEEUS6AAl1xAFgKAAAAMTM3NTQ1ODIyNHEBYS7IAAAAAAAAAMcNVO3UcsO/6EqJD9I/5L9FRsSOKwmzv0hRz7RNbbW/eDlc5UY88D8ZBwe93+bTvxE5zGSMiOo/k0iw90cE5T+Q3EtlJXHavyEgnxR3tpQ/CFtzklEb8b8z4tnamS/Qv/HwubN+naw/QkQQN/mB8z/YolOKrV32v6hgqv9Chdo/Y4R+HRfvwb/UYPdDMLrRv45tya+ROsK/JKjKzqUQqb9N236F2l7Dv/7kUvv26t+/nolnV/sO2T+aIXpO7xvVP4YVODnyCNK/UoyeHAscvL8AQ9Ue0PrZP4p0ehfD0Lg/kILj2UfNyz+bYosF6bvCv4HoNnpPv9k/oZdxqOpu0b+OOmvYm+3JvwPS0ak1X92/Om1+/51Wtj/yQ/R8goW4v1TtGcY0Zr8/xuz7qLSyur/YkXK3qA30v+UD7cJ5FdO/4zltasAnwz+i5LRttufrP2buAC5X9+e/vYMitYAP4b+GmXDBBWXgP1NaNk5oOuI/Y0eE7rEIzD8beZdETYvNvx0Wwph8Y8i/c+YsOCUE2b+E6fkY8PfFP5KvKKjso5C/kSZyAKuI1L9+bRFtoJ/Wv5S5iX6OCMm/hjPadQHUyj+0Y4ns57LEv6iwVvpytNq/10vc7Mzzzj8LDmIJPvHMPxQSnBJ2adG/0LijPTqu+D+QNLl+RgLhv78JHwWhONW/ZAoii8kG0b/s0BXPT6HTv27kwRnIYrQ/juWH6ZIg1T/To+DXQ6u7P91XWac+Eu6/2K3lVnM57z9IEY3cQx/mPwBntsFimvC/R59aXu7auT8wxSJRvvHwv7HQm+k5AvC/78V8NyMWrz/BR8NkGhrkP3xKhFSHCuC/HvNP5+Ho2b9I4YrC9GjSP5IXcjgi8ds/qeMuXch+v79EEGU97hHGvzNR0OFztas/1bdfIsFv1z8w1TkFeEfiPxHE+YcPK62/Xdeasy7h0b8doSDju+vhvzxz9iDuXrs/BZBAhFQGxr9zJ5vmXz/0v6LS4jwc4Nw/y7V/0hzexr80EmbIlcfyv60S6kTBXdC/SNevxSmg1r/Z40HkfIvtvwhg2xK7McU/I8y41RMYy79s1hm8FJXhvxdq9+XK188/qoiWkHPpt7/+nppl86xyP4XtIJ9LLeK/dv9JO7B36D8LIPaHa03Rv3jajdsx++e/ksb2s1q43j9VyL2GUtbsv3He9IBU8eK/yBICGjc02b+qgHjsB5rdv5dxm5Lnj8i/xpEqaJv24j8iEz/5hCLwP6mIed8UGvK/QrvTPmHR5T8AvfYJO5PrP+KLbP5JRtI/gDHy6rxD178vXcTem/TqvzrrOJJEY66/dFpYcVHhzD8U1DqWPyDjP2TYN15TJ82/pqILwWG1vz/ZkEh6PPnSv0SZbnX2Xeu/dk9zASqn3D8WIqiqyla+vyBlyEBo498/VLqRTKg1vr/7cEcDM2jnv6qUPL3dAfk/+giid74NLj+MkUALHonFP2RKjZo1OcG/psl3H3HWqz9P2y28tp/hv+Qvt5MPCOY/659uoGeo8r8D+ND1D1v8v40ftONox+a/VTkt2jOPzT/XAYrQ5TT5v9d7YVNKWOG/uQ1+ap/ovr8cHgnTML/qP3UGowV5J9O/SgAgCynnxb/5RGy4MWzXP637cgpBtsk/QfwjyEefxb+LWmpHdlvHvzcQtlJH/LQ/pvrjJzmWqT+BNYLvV4XbP2Wt8l5CI6Q/uo3c9s5czz+fVnMwZiXnP3ak9JKPOc8/KeTNT01gvz9a/r8K9nv3PzPIoF7kKLK/1/4dCP0w5z8mEd7fe5ThPxce0X+JbdC/kaDOsSfv1r/aYv8gtq+DP4UHsbDhTtE/4/Vl8X0/yT+/hoizi2HSPxJUUjoLusu/x8OPFYAt3b8YUnn4wUvWv2K2bLbp+OO/CX8nFqWIyb+ERHtXPfGYv4fmhu4pM+w/+4aiGptw5b+Y4ntBL0LoP/5SEUezeOk/QtvoW5PD3b98hNfz14nQv6dcwjKFReG/VlQKPxBS1z+KuUH0sxHrP4KTFPQ+CdG/bt1YKt4o7j/IeSy2LV7mPw3c7B8j3+Q/rfv1zN2d27/haPH79LcAQBXjfwrkxdk/uv4q/9Pj5z+zzDspNSvgvypHOE/7Te4/3CXG/IkY5z8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            4
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            4,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk4NTA1OTIwcQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5ODUwNTkyMHEBYS4yAAAAAAAAAGjTKzRubAFA8YnKzyVk5T/Fprw0tY7kv8YXL2jl1/u/0EtQJ6J8CkCbgwb8LLQGQKbAkxKP+QBA/+hM8uBCAUCtV0+h6AcBQIgqNlRXffS/RrvB06F3+r+SyZPB8JHxvw1JoOp0UANAIKKFXGVlAcCkTigeuigFQN3EjhuY9+8/+O+epprnyj+dF6iHOq1iv3IdLdvr9+y/pjo7cXpg1L9ODWRgSGTLv2Aot7PntNK/MCAhmdxuA0DxpJ43CnD+v10Ad3q0o+S/qXhakPiH5z8JYehjLE77P/Zof7WDT/+/t33z8ShF+D8uM24YyAnrPzAaoCP3NuI/ZieOmXXO+L+MBRuoyQjuP88lV898cec/Eem4ddJw/j/DFb8BqZjyv2nmJnhHm/6/E5ZymxDc8z9Cyzdlnvnxv6em+vi66NI/FFBBH5kYAcAagmYNWxfWP8jmev9gB9U/86XvZdXHBcBZMH/DFE3av3w0/MeKMPA/j0hibXXA9r9hyKgDU5n3v1QO4XokZPk/J/Hf40Di0T8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg2NTAwOTYwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM4NjUwMDk2MHEBYS5kAAAAAAAAAAcYpgVHJca/BAxKilRltj+V19/TU8KDP/8U/Ri1AYq/PYeyP3k6178MeJmGDinjv/7bQWrkXm4/OpWGcG9uyb+DRf6M/KXXv6PSnEGWYLq/9/COv0UK2D/A8eHzkW21vyjrEtc9/Zw/JjexSfWxxj+ONOODyLu/v0N6zCovwMS/KBVIrPUdxD+Soa6oHxK9P4cTrmpbGdG/4bqL4cEs47+jNSMuKwfRv5pbHUUHjM2/bUTWcLb/xb/thDFVDoLSv4gW/lkj+rW/JPnOA7zC0L/0LAOKeKWnv1NvNEwOd9G/QdiY5Zmevj+WX/PeVUXKP9rpjYbm78K/nOVjpvt1zz+psWk3edG3v9dssxZ1MJ4/zVpLhOey0b/XFrhUSDuyv4FeFTiOw8O/1XNDsFB2vb9FijZQ/8dNP8taC6t+T8G/ma6pgYFFtj+DHMZOY17HP+8tgXHQ0tI/+7NfG3Zv1j/rPHegE1fEv6IURc9h9sc/iBJRX+QJxz8NnL7e7SCHv2G8K+scIb0/XVtyo7ti0D8alKRihBO8v/6RHEOM/r0/Xlk5FX40u78ZP2YL7k2zv+mUMJMKAsK/nma2leHMqj+BDWJ52iDIP0S44sjn2ZS/CSqxjmaioD85PRNPgjuzP44zdalzANi/j09yRszavb8uxP/FScHRPysJ1VUw1MQ/PGYhWgU/zb8HjwNYmz9sP5T8ThrX3c6/6blmMNX9uL+NnrLD+E+1P/05Mpa+MdW/WsIBRGvsuT+hi0Ss+kLIP0Eo9RCi/ba/Js9skFYtpb/4GZYb/BO/P0SnCnivfL8/wDOPJMC00z8zkBonARvLPxYp6WCEKL+/MFT0khgUjT/AO8/1Mo7CP4Nnwmkh4sq/ZZT1lfMVmT9YX806vpmqv306Ip60d9W//mJQ6tf4sz/5Dc+kWHa1P+1FS5IND6i/pefUchgVwr8Y7YIPtRXEPyO8I58ECcQ/7EpllNvAxD+VQRYioxvBv/OUA1iz3Ms/9RoWuAv8tb9bBkDPiYODv9w5lvcP8bU/AtvkCJ7itD/0R/81y6uxv9ijmPEHW7s/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg3NzgzNzc2cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM4Nzc4Mzc3NnEBYS4CAAAAAAAAAP07LQAAL8w/Q+bdThe2wb8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    4,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        6.675312618647097,
                        -5.103537698935171,
                        1.632456161823612,
                        7.247012608136102
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4
                ],
                "values": [
                    6.675312618647097,
                    -5.103537698935171,
                    1.632456161823612,
                    7.247012608136102
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 45
    }
}