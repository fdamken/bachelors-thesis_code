{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            1.016656329280358,
                            -0.0017888556867946444,
                            0.026906599543856196,
                            -0.07864735118069875
                        ],
                        [
                            0.011471319594181042,
                            0.988315523980664,
                            -0.07183220962468294,
                            0.04218570345770039
                        ],
                        [
                            -0.05279092846009758,
                            0.02396450948675295,
                            0.9835841393881598,
                            0.18282947695471033
                        ],
                        [
                            0.007016795534407439,
                            -0.0007874918524747783,
                            -0.0066503228250758195,
                            0.9915184738330943
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4,
                    4
                ],
                "strides": [
                    8,
                    32
                ],
                "values": [
                    [
                        1.016656329280358,
                        0.011471319594181042,
                        -0.05279092846009758,
                        0.007016795534407439
                    ],
                    [
                        -0.0017888556867946444,
                        0.988315523980664,
                        0.02396450948675295,
                        -0.0007874918524747783
                    ],
                    [
                        0.026906599543856196,
                        -0.07183220962468294,
                        0.9835841393881598,
                        -0.0066503228250758195
                    ],
                    [
                        -0.07864735118069875,
                        0.04218570345770039,
                        0.18282947695471033,
                        0.9915184738330943
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.4293155892788155,
                    0.023069931992150253,
                    0.03489975502035562,
                    0.38600610492353
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.0019514901253533026,
                    0.0012721975133133015
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.01716435493648305,
                        -0.003916627724549926,
                        0.0026828588736158565,
                        0.0054521703914574005
                    ],
                    [
                        -0.003916627724549926,
                        0.009229575975304272,
                        -0.001210529326527876,
                        -0.004156122345698066
                    ],
                    [
                        0.0026828588736158565,
                        -0.001210529326527876,
                        0.0032787434639853785,
                        -0.0001686075822462385
                    ],
                    [
                        0.0054521703914574005,
                        -0.004156122345698066,
                        -0.0001686075822462385,
                        0.016504746243256818
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            4
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            4,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzc1MjMxNjAwcQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM3NTIzMTYwMHEBYS4yAAAAAAAAAOx95uAPpQJATZGlLYu06j8rOlRUaKbxv5xzKEjDGvS/5Lcok9sQC0AwhkDfK0YFQFHOSOy8wPw/5iiVvXt0AkCrZQ+2hgQCQLE3W8IwmfK/IL5sVOgn9b9QzX/UoR/xv6YUC533gwJAS7cxzqv3A8CDdRwvb4QEQLuGoBc00/E/+2y1RSeO1T/+LjEFyQ3Rv6KCBhm5nPG/Doend0nC2z8ppdky7v/Qv9tsLJqJVpk/4eefsTGWBkD/tGi0o6IAwHpWh6OoXuq/9xpT71VV5T/1PlgTbdP6Pxuh3VULsQDAYHtCvDJ19j/5tayd34LsPyy+9jmV1OY/JSKTtpb+979nvOOV2ufsP5R8EhgRo/A/tehcqleqAkA8uSQS3eX4v/UJw7cSXfK/rtfh6YX4+D9wrOWH1Erwv7PZ1taOO+Y/xxuPHeeTAsCk+GdlmiKov9BFAod+SdE/WFADOwoRBcAkUba3n//GP/zHIsaXxvE/QToD5sYaAcCHgQIeYgYBwHcDwZFuNfA/uUMuBVp3ub8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk1Njc4NzIwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5NTY3ODcyMHEBYS5kAAAAAAAAAGqF5nP+KtC/ZmUQ0XLZvj/uPinkpeGWv0vhfLhQ7b2/AAcrQeFI07/8GIKQFZbhv+pJ+BcY/bU/v1X0PpimtL+TkKGzYufav+yAHVmmt6q/FKn2YHtC1T9yTRtxj2XGv2e6HMJhdbw/w0Hx1Hs/yD+16xPUNZSqv5FQMbl3OsI/yz+u61SAxT8QIz/Qk9/QP+/PTK9tNtO/SbiB0pZz4L/f9DhkU/XQvxw13begzcO/7u3uO05A07+/4bTmCp/Uv8lRWRE7XL6/YqGGa0vT0b9ce9LUg2a6v3RQYMoIk9O/kaMZkTb0lz9SVGAeUX3OP+iW2lxDd6S/PqeUPHa7rz9W/M7frtG+v76SaLIwF6+/wF3r8cYeyb9jRaQCHPSIvyasntUxIri/0UGXl3s5rD+dBpgczpi8v5Xo+bTp+Lm/V7mP9BedwD/3EqhUreLLP4O/cwkXctI/yKuaAnT70z+hrQ77XzvJv2cNBn8r9ss/SWKCzT9lwz+VgSz42EGRP0efAsHXw7c/MR3o/hVEzz//V+G4VMe8vzAo40sofMA/1BhscUQgvr9Fdd1O96+zv4JvcGtkC3q/mhWhR0jow78T3FvdhcDEP9HKsRu0CJs/jcTbtTUExD9g4Pz7QWTQP2YfaEyDP9S/HraiZ4tQub9VrSEQHLvPP7WFiAvoCMI/V3EdsZrm0b9NvuLmfgy5vw48GdweVsm/Ldh0jAfnm7/fcYQBmVWyP9fJQFMLwti/eUjMOl8Zmj87m1TMfSrCP2tT/7gUHLy/8h4PKwghq7/8/PD6dga8P4kzUv6JccI/u2djRPYcyD8Y9jHdhpvJPwyxQzNNgcq/aBCcdLdqmj9J/WSed869P4kQmx8sv8+/hYPcWnwFwT9rB0x67TG9v1cyxZwzUsW/m7gxvw0TcT/8+X0Sp1ajP24aeVNhGcy/Ks9JsQFYu78epy2JBFrFP8Ql6EYMVcY/NB/hRjWaxD9G8VP1ZBq9v3jQPd9y6tQ/NdZaeEx9u79hruLQumBuP09riJiqQpo/A4WyuIwvuz9T4prsybmhv3wxCHDrRbU/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk1NzY0NDY0cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5NTc2NDQ2NHEBYS4CAAAAAAAAAKdayJGHNNA/+weIJDU5wL8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    4,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        6.863698812032931,
                        -5.929952844921791,
                        2.2763963995890086,
                        8.10325832735119
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4
                ],
                "values": [
                    6.863698812032931,
                    -5.929952844921791,
                    2.2763963995890086,
                    8.10325832735119
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 95
    }
}