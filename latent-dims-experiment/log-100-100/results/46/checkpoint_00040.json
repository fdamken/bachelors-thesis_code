{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            1.0035319505675724,
                            -0.00590271515620284,
                            0.013190161914705711,
                            -0.029730910684225745
                        ],
                        [
                            0.023258709436067875,
                            1.0125564847394308,
                            -0.10272843854478787,
                            -0.06290029312863388
                        ],
                        [
                            -0.019100277002121746,
                            0.024559953068039778,
                            0.9877651606579153,
                            0.15516169196417443
                        ],
                        [
                            0.014254149793826495,
                            0.0002956437805748593,
                            -0.008124691481853725,
                            0.9707630565441333
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4,
                    4
                ],
                "strides": [
                    8,
                    32
                ],
                "values": [
                    [
                        1.0035319505675724,
                        0.023258709436067875,
                        -0.019100277002121746,
                        0.014254149793826495
                    ],
                    [
                        -0.00590271515620284,
                        1.0125564847394308,
                        0.024559953068039778,
                        0.0002956437805748593
                    ],
                    [
                        0.013190161914705711,
                        -0.10272843854478787,
                        0.9877651606579153,
                        -0.008124691481853725
                    ],
                    [
                        -0.029730910684225745,
                        -0.06290029312863388,
                        0.15516169196417443,
                        0.9707630565441333
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    1.7088444070967068,
                    0.2377341053643231,
                    0.38499628829595167,
                    0.9846496372972429
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.006150436542520765,
                    0.004409469560629418
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.06606879030061918,
                        -0.015943334702171796,
                        0.004375872077311271,
                        0.005652422714703675
                    ],
                    [
                        -0.015943334702171796,
                        0.03888208354500122,
                        0.011094859125556411,
                        -0.01579063122581914
                    ],
                    [
                        0.004375872077311271,
                        0.011094859125556411,
                        0.05825215612959411,
                        -0.013742501607396207
                    ],
                    [
                        0.005652422714703675,
                        -0.01579063122581914,
                        -0.013742501607396207,
                        0.03471353917738895
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            4
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            4,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkzMTU0NzIwcQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5MzE1NDcyMHEBYS4yAAAAAAAAABRaUwj1HAFAiMPusu9h5T/4HCQ+3kPqv0RMAOK6Zfy/2UacbmFhCkCstrds288GQG0N9o/0VAFATGXaHbqnAUCx5nb1qLIAQJUlWju4LfS/PCLGnaIK+7/AlhEXF4Dxv8tBvj23RQNABlAGN9bJAMBVjZeUlhgFQIVrkCW0Ve8/yiWzX/WozT/NRF4JnPGXP+ckh+CnNOy/cCI4uU1B27/ox1vnjJ3Hv9tZ/W5lHNi/XLO3f7B+A0Dfr9uaO7T9v2pbOX1fOeC/Fmgmq/Zl5j9Ah+UrpJj7P5DXoTTyp/6/GhrZWbkl+T/YlZOx4gnrP5aLIJjJw+Q/ns+LfoSl+b91YBSNTsbtP1KrQmwrHuY/8jrDB7Xq/D/k9mJKL1zyv5kiScB6gf6/hB2SWUMW8z8ZRWbfsiTxv8kyIoUquNU/3PRAroHnAMAyV8ZckCbUP/NNjpZQStQ/A2HCka0JBcAiBhQSlbPdv3uhqc3JKO0/qv1bbveJ9b8AUez39UH4v4ERUPbYV/k/GrC9AAvIzz8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDA2NDU4OTc2cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTQwNjQ1ODk3NnEBYS5kAAAAAAAAAJyaZ5Sed8W/S0HWXoYCtj+N5eZ/NNmGP6FkUv1K+5C/rtKOyEGt17+cqLrC4uDjvypIQYo5bYI/R6mwTEWuzL+mvV7kZsTXv7/PbQiOiLe/hpxrkXti2D8Xs/bEzceyv6mYKOCYm5I/YeHOzG35xT9idPh/T5S5v+D50f4r6sa/nUtL4njnxD/rLQ3FJmC7P+gh0d+nANG/JCOp4RHn4b+vGQLMWUXSv4YG9/fSKM2/tYakNkJMxb+CY/0FZWnSv76lgy3157W/vzsmZBOP0b8cSfBIrk2hv39+V8FaXtG/LjRpfQ5Jwj92ejnJ7hPKP8pyarWVl72/+zvqFSSCzz/4IVMXlEm4v7Jjci7GgqA/LIidAACRz786Wcdq602wv1h5WyInksO/OCnI5UjHwL8BiM9DdYKDPwxtiogsgcG/8YgqSmWmtj+YOQw5/CzHP/Rpqwd6sdM/avHVAtFj1j/dBx9waznEv7L/NN5wx8c/2fu7XwXHxz9urak3XzeKv6Txt79Ovrw/AhLqL5tJ0D86GMoWf1O+vy6w6MLH3b4/uOKczi8UvL8f2Hx7bEG1v8mqIzYgWMG/XbFZst/ypj/nEPuhy9vJP25KkucnIZ+/H30TKNdVmz/McjhHIBWxP1q1Y9FF9Nm/Z4FC2mnKvb+ZlUTuLr/RPwb7CG0EuMU/N7AN4i8U0L/GLtE3+ROZP24Tx51oYtC/cKa0eRfyu7/GgeZDvXC0P90TariD1ta/oJlxWVM3uz+YYiooyH3JP1iCfdsfLre/R7AbfpXrpr87b2mPKoa+P9+Hkg2tc78/LgttI5fPzz97hTRnY6vKP2m2HAgVU76/MqOqSPoGkj+4Wi/TcojBP5PV3l2e68q/wvEs7zxilj86T+V5dd6xv3+XMm5w29W/lUF/5zVZtz+d8QIlHZe0P/3PCjwZ/Zu/3pUZGMVFxL8a4AaVYIXEP3cl7RLQj8Q/QVxLVHkwxT/xNLlJshfCv1mmEuOiqc4/tcuMwll4t78C1uHzlj95v/ahb0Xizrg/p6rOiNnBtT93KzO2j8ywv4CRvp+xRLw/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg3MDM0NjU2cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM4NzAzNDY1NnEBYS4CAAAAAAAAAFFVc+qY/cs/fNX3jnlGwb8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    4,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        6.499001657801019,
                        -4.840213461492403,
                        1.5088830229954417,
                        7.120047611415955
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4
                ],
                "values": [
                    6.499001657801019,
                    -4.840213461492403,
                    1.5088830229954417,
                    7.120047611415955
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 40
    }
}