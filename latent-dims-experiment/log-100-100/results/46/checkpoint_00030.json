{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            1.002020977515997,
                            0.00012432240391378806,
                            0.008017089287573206,
                            -0.01722327678290359
                        ],
                        [
                            0.04377247769737938,
                            0.9898960218104605,
                            -0.0523817937815459,
                            -0.11243815819096623
                        ],
                        [
                            -0.021780776454174415,
                            0.009109051217190392,
                            1.0012573528697946,
                            0.12149212624917312
                        ],
                        [
                            0.017735390563251435,
                            0.0020864444919715406,
                            -0.004888317634774728,
                            0.9735683680882881
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4,
                    4
                ],
                "strides": [
                    8,
                    32
                ],
                "values": [
                    [
                        1.002020977515997,
                        0.04377247769737938,
                        -0.021780776454174415,
                        0.017735390563251435
                    ],
                    [
                        0.00012432240391378806,
                        0.9898960218104605,
                        0.009109051217190392,
                        0.0020864444919715406
                    ],
                    [
                        0.008017089287573206,
                        -0.0523817937815459,
                        1.0012573528697946,
                        -0.004888317634774728
                    ],
                    [
                        -0.01722327678290359,
                        -0.11243815819096623,
                        0.12149212624917312,
                        0.9735683680882881
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    2.0643491814228407,
                    0.5195197309480799,
                    0.9933928860066704,
                    3.1241910934408814
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.024407519375035918,
                    0.022537648477554625
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.08427640804585224,
                        -0.02790009906181723,
                        0.006456215634354834,
                        0.013467829385874097
                    ],
                    [
                        -0.02790009906181723,
                        0.06176994317561224,
                        0.008828733846888426,
                        -0.025397886600661224
                    ],
                    [
                        0.006456215634354834,
                        0.008828733846888426,
                        0.07036227393887673,
                        -0.016807923372438083
                    ],
                    [
                        0.013467829385874097,
                        -0.025397886600661224,
                        -0.016807923372438083,
                        0.042313404225609474
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            4
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            4,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkyNjYzOTM2cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5MjY2MzkzNnEBYS4yAAAAAAAAAPj5ZH9MMv4/knsfgqiT4T+bA0spTFrZv/YQw81nHPu/j2xBfbPLCUCHIMS5ccIGQAyj8a2Ym/8/veIuipSwAUDFZL1MbiUBQDxE56N3fvS/s8RrrDFQ+r8FORCRqjTjv/OWZxeGFwNAeqZDMjo1+b+bIde3XccEQEMLbkIyw+o/NxnzPr/a0D94ivOTieCxP+aFlIY2L+W/SBJJhMeo2b8BOkLlS5LAv+c9hHY9p7S/z/qaKJUHBkA13+qJUrT9v2Ztcv/pk9m/udnMoE3w6T9muNvm+vX8P3Ci9JGO4vy/GIU5C4K1+D9xxL7IZSHqP22SwzpOFtI/8QCgjPyq+b/NjGIsV7vsP9OiukjvB+k/3fcPrQ6B+T+Pu6xI/4Txv4OPWfpleva/red2KpJM8T/TqlLpRp3yv3tetYc+seA/LiH84+pS+78AZ5HTd2jDv/qXHBlEY9I/7DZ0TGlqBMDeBKLV+4jCv6rfiw1KNeo/HMLvT36c7L8R0mrc7xQAwCBArMN+yfY/wWdYqD48tz8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5OTUyMDQ4cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM4OTk1MjA0OHEBYS5kAAAAAAAAAB2/ygeUgca/TqlcdrFErT8dJ1u4jXSkP/J4yR8/M6S/K8vZ1/gR27+MTVyHxTniv52TfECXdp0/EffEta6L0r8NE17/0YvZvx8TCemhOsq/pIg5LSAl2T9YsenMH8i4v7tQkzheUJo/tQ/x67vRwT8yuByBcHevvwU9dffXo9C/+09/UW/2wD+/pEDaFUzGPwlQN51BVs6/tH+RFxB22r8pFKK7AFzWv9XqT3Z8CM2/1shXi9Plxr/UjRKdWZHQv7HmzJan9ba/5wVhWBBs0b+UIDmvrXmkv5k7Cvf+C8+/E/yKLm3mxj8N5WP312PGP7fDjtnX7ps/27J5OGTZ0D/NDFq5L/a9v8vrhik6+WQ/7rvP/63Fx7/cfHRtYM+0v1PseLoRyb+/JfkXIwKFvb/0OGeGJxihP/hsAv+cAcO/1iOlU2+2tT9n70wqjajDP0dH5mfvMdc/vkSUhQHM0T/jNKAGtEnDv4VyETrKGMQ/0JhL2xbSxT/zGe8KD06lvwqjFhwhXrU/G9gCjh/jzD//OzYEkRrAv8OZlM2C074/7GYfx5UKvL/e1h254TXRv/DlOkPXTr2//Gxqixaklz9RFGoUownKP90NlvWHSqi/dFDQNCPxoj/QDFsyN6mxP94uyRB2l9u/hCuVsdG2u7/W2WfTzdLRP06DWa5uOsc/bl0nH3K40b/sLepq2uqvvx8x4OK0A8+//7VtFIxBwr96ysCR/Iq0P6MyofFmMda/Avo09FVzvD/RyTzJbhnKP6YGvU/6Nbu/BoVykwvXpr+GlCRePJS+PwwGLrv/+ME/Aqw14cChsj+gSeWesLHKP4o60noRfbO/cVlYc+bdkT/WH/q1EqK7P9RVCNxKdc2/mtlGZBaieD/jPCX+bT2/v1lGomN2p9C/yJ3Y8z8OuD8pSs9oYaC0P1YKpBa1dIe/NldO6iCZx78pB0mCXrTEP2IXvd8vyMU/Krf/1V5YxT9xHZwUQRq7v+3esrsSf9A/H3ln7HB3ub8Rsgip2vt5v+YATaGu48A/s5cgnJq3tT8zSYqr1Nawv3UMa6psOrw/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkwOTYwNDY0cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5MDk2MDQ2NHEBYS4CAAAAAAAAAEmznRiCTcg/1yKiCZxLwb8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    4,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        6.015947923524644,
                        -4.130552569143907,
                        1.5034040198641727,
                        6.786730375216045
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4
                ],
                "values": [
                    6.015947923524644,
                    -4.130552569143907,
                    1.5034040198641727,
                    6.786730375216045
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 30
    }
}