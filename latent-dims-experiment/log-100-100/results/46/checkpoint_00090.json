{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            1.0176240120820161,
                            0.001503702216601963,
                            0.026495382495220973,
                            -0.08542350392895262
                        ],
                        [
                            0.01956683867445834,
                            0.9818851987270667,
                            -0.07942082376133856,
                            0.1039029582578072
                        ],
                        [
                            -0.06105038488205881,
                            0.018501941994610013,
                            0.9866214181989502,
                            0.1570134938968039
                        ],
                        [
                            0.011723043742496001,
                            -0.0014735742492550422,
                            -0.007174230965473249,
                            0.9934472761168512
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4,
                    4
                ],
                "strides": [
                    8,
                    32
                ],
                "values": [
                    [
                        1.0176240120820161,
                        0.01956683867445834,
                        -0.06105038488205881,
                        0.011723043742496001
                    ],
                    [
                        0.001503702216601963,
                        0.9818851987270667,
                        0.018501941994610013,
                        -0.0014735742492550422
                    ],
                    [
                        0.026495382495220973,
                        -0.07942082376133856,
                        0.9866214181989502,
                        -0.007174230965473249
                    ],
                    [
                        -0.08542350392895262,
                        0.1039029582578072,
                        0.1570134938968039,
                        0.9934472761168512
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.612338235725547,
                    0.03400763699467066,
                    0.06216590918356559,
                    0.46011129415765284
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.0029158621543137996,
                    0.002521427916516416
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.0185866793629188,
                        -0.004484732054656604,
                        0.0032643131848466567,
                        0.005852929582829347
                    ],
                    [
                        -0.004484732054656604,
                        0.009974560029547774,
                        -0.001532841035102095,
                        -0.004614667138106654
                    ],
                    [
                        0.0032643131848466567,
                        -0.001532841035102095,
                        0.00446521333993477,
                        0.00016732609130443166
                    ],
                    [
                        0.005852929582829347,
                        -0.004614667138106654,
                        0.00016732609130443166,
                        0.017206623750283256
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            4
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            4,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg0NzQwMDAwcQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM4NDc0MDAwMHEBYS4yAAAAAAAAABiFv+KlTwJAWOA7f4oB6j+ymKptr+Xwv+bmAbnMN/S/C2tJA1ErC0Dt+kmIP5AFQO19LI4oaPw/1xrWKUiPAkCZzzJaufUBQOY3lHfiLPK/NaOP3G879b8aUy/kuK/wv2xTKjfHcgJAu312Ai0yBMDGFRMafmkEQNHOCm+F9fE/IqaJzFy10T+LB0aKm9PRv75IVOKoZ/G/F9AhSYos3D/PXf38HJXQv9dRVAaeaFu/ByGZUPg/BkCoKyTu34YAwIb55w34Q+2/1p6frMBH5T9yduR49hD7PzcY9XOPgwDAtcAoSLZn9j9bKReiHXLsP173++RA++U/SiwPB7DH97/KI6gXigTsP0mDsZ1AWvA/ncK5Pvg6AkA93FQCGIP4v+3vYDTQw/K/eqFaFUl7+D9RlR0kjB3wv5FQADT10eM/wlOlnyk+AsCV4KD1lhOBv/ERqe1mc9A/H3GVwbweBcBjUCs/BSW9PwwlhKPLl/E/nJIYyhVHAcBKgmKzMLkAwLZDd9baF/E/Zs+xSMaAvb8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk1OTA2MDY0cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5NTkwNjA2NHEBYS5kAAAAAAAAAGz2XSib5M+/eMg83Zhovj9du9oUPh6VvykwBsHuWrm/q2LiQaI9078ngyOJtcjhvwSSzfyrfLQ/lKgzqUbXt7/kGry7wn3av1oLRmBOlru/7QsY9+UY1T+oIMIikPDFvwjozyaJurg/mrPtYv92xj+kKEP13BWnvzWTU4Ly5cE/3e/nq091xT957f/9DInNPyDpVzI3GtO/S4AksNiT4b8kqw4q2sHQv1fVW69/j8W/xlwMP6bt0r/U+r9p1ILUv2uFOP7K672/tZPoaiGr0b+fvb/l8eG4v0Bqa03SdtO/nxIdSP8llT9Bh3Yk5ETOP5jdm7dLXru/DTvHNXtesz/ksVAxyNy8v+t7KUHIMrG/dCIfttbVzr9TleMzbe+Iv461qHshe76/LDt/21LYpj8c1EXpnAe6vwcnL6KDaLq/+MB1LzULvz+CUcHa/6vLPw1dHD3nP9I/XRR9mJ240z8g4habVP3Hv88/HIW+vcs/HPau8/6jwz9mHOqoGbCXP5c7ZvI40qs/fkjRjNCo0T+UbMKYsHm8v+uUWuHiHMA/MgBbnLlhvb/EENIlEh60v6h+YXBhRa2/uoNShdiPyL8timy4tnPGP/Bo5gEnMIU/lijXCKucxT9EdRHrX2HPPz792wSlQNO/6KrtHxKVu78kQYRqRy/RP6yjdyVx98M/G8s62KCD0L+TKlbGYCW+v5JCW1K08su/DYgDmaGTh79vopXWIxSzP2iwX56Ib9u/kGWO4XAunT8hxjlm+/DCP4QSvhsSzLi/BdDsgPKjqb/RGCBw6cS8P4C3ji0hdcM/S0DGxrWzzj9/h7pHzPrJP9yE9hRN7su/nE5XIIxwlz8i0cJYlMC/P+SDcrkbus+/yYUH8YqGwT+7zwaFyirAv8Q5PzJOVMS/JNb1wpm6Zb+j89p/6pSsPzESVmZl1su/QHgdNQNUv7/+y5RDtAbFP3pKN7mqzcU/Z0si82RqxT/w4C7wlru+v8J/uOgVE9c/TCyhxUdVvb9LmfO6gD1KP54gzgPWXpw/KqzvkkUGuj+dycvCwP2xvz39nPM2Vb0/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkwMzk4OTYwcQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5MDM5ODk2MHEBYS4CAAAAAAAAAHF00xRRGNA/PZ8Qj3qYwL8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    4,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        6.998885914590688,
                        -6.024787340946421,
                        2.350549501474832,
                        8.128606129514093
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4
                ],
                "values": [
                    6.998885914590688,
                    -6.024787340946421,
                    2.350549501474832,
                    8.128606129514093
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 90
    }
}