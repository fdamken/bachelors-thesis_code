{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            1.0097897574622012,
                            -0.0008502647679881446,
                            0.024285751493165596,
                            -0.07725075472448605
                        ],
                        [
                            0.022481779326532694,
                            0.9840529398102059,
                            -0.0924834468006062,
                            0.11432629909144504
                        ],
                        [
                            -0.03581775670194537,
                            0.021861121529010118,
                            0.997642399596209,
                            0.13370698796781597
                        ],
                        [
                            0.013027894012928004,
                            -0.0025780272419353464,
                            -0.010031668904323929,
                            0.9886532408422853
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4,
                    4
                ],
                "strides": [
                    8,
                    32
                ],
                "values": [
                    [
                        1.0097897574622012,
                        0.022481779326532694,
                        -0.03581775670194537,
                        0.013027894012928004
                    ],
                    [
                        -0.0008502647679881446,
                        0.9840529398102059,
                        0.021861121529010118,
                        -0.0025780272419353464
                    ],
                    [
                        0.024285751493165596,
                        -0.0924834468006062,
                        0.997642399596209,
                        -0.010031668904323929
                    ],
                    [
                        -0.07725075472448605,
                        0.11432629909144504,
                        0.13370698796781597,
                        0.9886532408422853
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.76767636198557,
                    0.059059363714924276,
                    0.10397338556151248,
                    0.5969878031576159
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.006276309160601158,
                    0.003664460913591029
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.02208547083657919,
                        -0.004851454269704902,
                        0.004240597071525798,
                        0.0063422334170795125
                    ],
                    [
                        -0.004851454269704902,
                        0.01161677196218136,
                        -0.0007265520980901385,
                        -0.005521345937360422
                    ],
                    [
                        0.004240597071525798,
                        -0.0007265520980901385,
                        0.008112852960340255,
                        -0.0006106770228555547
                    ],
                    [
                        0.0063422334170795125,
                        -0.005521345937360422,
                        -0.0006106770228555547,
                        0.019051934230787992
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            4
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            4,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg0NTUyNTc2cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM4NDU1MjU3NnEBYS4yAAAAAAAAAPeBoztcNgNACRmZs4Be6T+VVJgDoujivwNoXo06tPK/ZPcpaK34CkCVV8E0ITwGQG2XhJWabv4/qa0Jmpu6AkAJegNE4w4CQIM4HqdszvG/cO2Yiq9X9L/zBjaiUknxv2ZWX+oOJwNA2Efs7YwGBMDidpr4RL0EQHCY1ujzwfE/Egvk09Qr0D9ZTvYDt2HYv3Yh8ei/IvC/Ar5hwUSr4D9ZAg9O/h/Rv4fSHWu4852/pOuQrr3UBEAa7zNvJDsAwECwlTf2Cei/y1DUU+Bw4z/574jLKTr7P6G8DDyZzf2/7shg1apR+D8Zf4N3G/DrP/0hzp3zieQ/o0NBZL11+L/I6l173Y7rPwUhWGwhu/A/G624JczrAkBCD4ewNoD2v+Xh3papQPW/Hl6Ahkbf9z/bmKZxcOPwv1R8rZGzxOE/Us1AcRtpAsA73Rp9INC+v4jj6/iI+NE/JYfcdc88BcDXXPno1buhvyc/ozqBtOw/nV50qpSyAMDrjRjqsDgAwF5N8gYvmu8/qzO7mI6T3T8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDAwNDk1ODcycQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTQwMDQ5NTg3MnEBYS5kAAAAAAAAAN5H/6ukNs2/xkkz5j1jvT/xtuPqxAiRvwG6D0QkSZk/oC30wC4p078xKPg/n2Div0fkNGo2dLM/BzuY9rwzur9mqLMU8SjZvzheBCU5NsC/z7ziFh0m1z8U/6f3Ch3Ev4JzOJsdBbU/nOKbdgB5xT/oqw2YLaWmv5o13CpBbq4/uv6Idspaxj8Ve4TcEh3MP1XElXTg2NK/t0RuZ0qZ478xXydc0oTQv9pEF4CGrMi/JBpz1QQd0b8Vm/2rfUHUv0E4Lwdw5ry/2hpmH74i0b+ZyKp1RQS8v+/9oo57NdO/5udmiEgQlj9txvGoNsLNPyGMVnIjh8S/88cmwmpAtz/m4maTare9vwqcKJeKkra/vC+G6HoM0r+sgjBsdMksv8J/Zqb1psS/0IgMC905qz92dAbTi8e0vxQoX1azqru/fOplA0HvuT+U3vxSPRjLPyhGRzKKzdE//w17jCLL1D88tAAR5yzFv77VAAoRO8s/eWFYnLL+wT+Bt2ny5u+SP2otk7aaRq4/1sxUUf8e0j9PbzDF1/W+vxNsHCS4zb4/jpnlXq71u79s8Hvnxnijv0h2rjBdirm/fQ8VrtXpvb+wOwfQorLGP3kRrQVG8qY/ySLcj+CtxD91KSeAIAjMP2tP0/h7NNW/a3zHihmEur/4qzlG5YbRPwRkj4qgEMM/j9G7wrzjyr8+b9MNW/Ozv7YwK8wZPMy/KOubNw7Jm7886y51MYC0Pz8p2/FCu9m/NKqrh5grqD/unTSV4KHDPyy5ycxL7rm/Tke7Q9fLpr/flrkO9zC+P6L3Xq+nYcE/pHM6QHgC0z9dgrIY07DKPzC5Oyzcwci/cjn0pVXAkT/baBPqjYLAPzie+a0KaNK/I8N0IgvyvT//ZiW6LOK7v/2iODtZo8S/QjxwmSSwpD9w0XSJOcusP9WaIxWPncW/X9ENKArBv79d2nJjbmbEP1R978RN9MY/aUkhZ9/wxD/xL6tyKFnBv5jLzj0B0dM/rsBEfpA1vL+H9v/KKXlzvxnA6dti850/Qt3R+a/stT83XHifIb2xv5VOjD/d+Ls/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkyNTQxMTY4cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5MjU0MTE2OHEBYS4CAAAAAAAAANoxIq70rc8/dAFdXoFOwb8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    4,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        7.144035180963336,
                        -6.091615327665696,
                        2.421147528537968,
                        8.111812208238037
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4
                ],
                "values": [
                    7.144035180963336,
                    -6.091615327665696,
                    2.421147528537968,
                    8.111812208238037
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 80
    }
}