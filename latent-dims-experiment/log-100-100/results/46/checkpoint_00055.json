{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            1.0079614357300064,
                            -0.006961395860765299,
                            0.016805684461210623,
                            -0.056496167715882235
                        ],
                        [
                            -0.00828549967439174,
                            1.0121291582691394,
                            -0.12065044637392378,
                            0.09134552349244432
                        ],
                        [
                            -0.021867858893614076,
                            0.025928649428873858,
                            0.9858406366462723,
                            0.17902446301710642
                        ],
                        [
                            0.013862041005086546,
                            -0.0016099689514047113,
                            -0.006592656777697633,
                            0.9729065346849979
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4,
                    4
                ],
                "strides": [
                    8,
                    32
                ],
                "values": [
                    [
                        1.0079614357300064,
                        -0.00828549967439174,
                        -0.021867858893614076,
                        0.013862041005086546
                    ],
                    [
                        -0.006961395860765299,
                        1.0121291582691394,
                        0.025928649428873858,
                        -0.0016099689514047113
                    ],
                    [
                        0.016805684461210623,
                        -0.12065044637392378,
                        0.9858406366462723,
                        -0.006592656777697633
                    ],
                    [
                        -0.056496167715882235,
                        0.09134552349244432,
                        0.17902446301710642,
                        0.9729065346849979
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    1.2057345914407138,
                    0.12334190483532162,
                    0.12835793416763522,
                    0.7800760026323611
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.0042805082423528805,
                    0.00229487904141115
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.04014296224853098,
                        -0.011293954559405961,
                        0.002723555043884218,
                        0.007123148311769967
                    ],
                    [
                        -0.011293954559405961,
                        0.02046459018103519,
                        0.0026616476806733402,
                        -0.009833323283011453
                    ],
                    [
                        0.002723555043884218,
                        0.0026616476806733402,
                        0.02526061441303007,
                        -0.005330981579952265
                    ],
                    [
                        0.007123148311769967,
                        -0.009833323283011453,
                        -0.005330981579952265,
                        0.02542455122305398
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            4
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            4,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDEyMDU4MDQ4cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTQxMjA1ODA0OHEBYS4yAAAAAAAAAOHs9yl4VAJAvLdA4MNk5T/3UUSjSdbqv36P1nqj/fm/+pHujb83C0C2Qyqi/MYGQIU4bmFRvABAj+vsjOmuAUDo7YPHBv4AQNchwR4+m/S/OpqONGqH+L/gbSgNJVTtvzCt8f9uHwNAk1H5A5rRA8B4+3/4B8EFQCHiK4UUPPE/NDEKYejIxz+XILqPhvOwv9tHlCjx9+y/B+GqicAupb/HOa2YFM3Qv8q8djd62dG/TMGhZMEhBEC64tE6CnD+v1TvlhEH7PC/dMnigyK/6D9il374NEv7P8+i1tbST/+/isguAhxe9z+9VbaZwgnrP0CcRQqzwtg/G8AZX1di+L9pIspqc9jtP55nRtfU7Oo/x2QEcyWGAEAwjcRhO7Pzvwy19i7Jm/6/T1L0UOID9j8cAh+zA5rxv8Rz7c7fc90/2MNbUQ/OAcA+w3bYkQvWPxgEh+JMf9Q/HsaRdSkoBsB7X22x7+vRvxzfg4tALvA/MNKAVvFT+7+pgekJ/4H3v1UrTTM5ZPk/tg90KDsZ1T8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDA5NDQyNzM2cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTQwOTQ0MjczNnEBYS5kAAAAAAAAAJ7Cq9Ml4ca/r2E8Lqgatj/tw9u1theGP/ehM7T9Sne/0K7QkVQV1r+vtB3ExR3iv4hzY1a+PI0/VW7LgDBax7+KGtoTPeHUvyjsEXb2Hsi/Y9iiF0yS2T9ySq2UzUm6v5aN2wQmhac/KlBUeuHGxj/m38a8FmjEv7XmTY2APsK/cYu2frtEwz/RlQ8qckrDP/6oqlOwBtG/NSTEujkL4r/bG3gtGpbQvzzWxFI1582/eksV/6Snxr9iGi4+Y2/Sv72WpuazjrW/y/8vNIFV0L8LHL/Va1ykvwUFMTVjZNG/fw0grjwRtD9jiuyw/x/KP4/vbsRk/Ma/ZtAwLSdlzT9FuzzP7TK4v/KAFk5HW0q/dKVHWYT/xL9Gzpr2hrGiv4GJDgo4nsO/UMh3ONCEtr/+kWov4UiOv5YurzhqeMG/YZ0u2b1qtj8RSL8gDTnHPxUs2SHI6tE/YsET46OQ1D/keo0knHfDvxdBPqEL0cc/lJGInTKxxT8RJyy/UHaJv/8QHo9w1rw/dTZvjBBQ0D8rY6TUT6q8vw6dfCQbI70/LtyI9gxZur8pZBUTv/a2vwYN0UDMHse/d/g6sVwFpj8uPqFK9y/HP/R7hbp4iFQ/Y60AIr8xvT9Z/pd1bHa4P1PIb4ZhPde/z7kDBnlhvr8TZUVkDVvRP11Cn0ERXcI/ZkUSAphTu787XxLBkHyrvzotjHo5ts6/F9K/BOeyvb9lk1LiaSu2P3lk64lixtK/tHg2LjhXsT88uak8MHDEP8LbhwICwLq/beUsU3R2o7+XJtdcmeu/P3fdVVMl9LI/2v/9Jtz61D+cimq2uYjLP+I3gRyrE8a/fK30nY84hj9jfwHYGh7EP1I42iS+xc6/qWd5fs1ooj9+uxZTi/WuvwAWufrFOtS/4Damw76Wpz8fA2/DyVG2P/1PTWGqPK6/K866rMVzwL9xdKCm+qXDPx21esMIvcY/f1AVBSNTxD8W7KD5WnfCv1ccX9IyX8g/ukWErtb9vL/Grz/EEl+Kv0QbLii0vrE/o+BE6iwHtD/4PJ9UPIeyvy1z9tKWf7o/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg1MjU4MzA0cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM4NTI1ODMwNHEBYS4CAAAAAAAAAP9lJtKpCcw/2eAt3s8jwr8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    4,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        6.949420785555018,
                        -5.662779069114043,
                        2.1803649453619314,
                        7.673715496712408
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4
                ],
                "values": [
                    6.949420785555018,
                    -5.662779069114043,
                    2.1803649453619314,
                    7.673715496712408
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 55
    }
}