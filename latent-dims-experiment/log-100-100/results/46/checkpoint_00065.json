{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            1.008786871918756,
                            -0.004512707651429594,
                            0.016764109087603295,
                            -0.06304954851518976
                        ],
                        [
                            0.009748133249765664,
                            0.9946670106141816,
                            -0.11597118013281589,
                            0.12011123808866404
                        ],
                        [
                            -0.02658220975392677,
                            0.021197547332566957,
                            0.9944236779564163,
                            0.15523102120020754
                        ],
                        [
                            0.014395246862747901,
                            -0.0016088324589659956,
                            -0.004432394508379381,
                            0.9778204491837373
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4,
                    4
                ],
                "strides": [
                    8,
                    32
                ],
                "values": [
                    [
                        1.008786871918756,
                        0.009748133249765664,
                        -0.02658220975392677,
                        0.014395246862747901
                    ],
                    [
                        -0.004512707651429594,
                        0.9946670106141816,
                        0.021197547332566957,
                        -0.0016088324589659956
                    ],
                    [
                        0.016764109087603295,
                        -0.11597118013281589,
                        0.9944236779564163,
                        -0.004432394508379381
                    ],
                    [
                        -0.06304954851518976,
                        0.12011123808866404,
                        0.15523102120020754,
                        0.9778204491837373
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.983880054098106,
                    0.07122046195995527,
                    0.1004418144053299,
                    0.5512652420944498
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.0048784345104850215,
                    0.0025146169685775705
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.028953877954606355,
                        -0.0062041816278153306,
                        0.0056253324252288905,
                        0.006235573880758238
                    ],
                    [
                        -0.0062041816278153306,
                        0.015313926714334514,
                        0.0008377202760811997,
                        -0.007815007393467965
                    ],
                    [
                        0.0056253324252288905,
                        0.0008377202760811997,
                        0.015625089006608306,
                        -0.003096102526892963
                    ],
                    [
                        0.006235573880758238,
                        -0.007815007393467965,
                        -0.003096102526892963,
                        0.02223535676403543
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            4
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            4,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg2ODk1NDg4cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM4Njg5NTQ4OHEBYS4yAAAAAAAAAHdK9gSmbgJAnX89M0Rk5T8dbpNZ2Lzqv6tn7Ju29va/ZCiazVz7CkAJVXCBRd4GQGVetPGpGgBAC12BFkGSAkDVw4RYqCEBQIk0Vj7hu/S/3UvYKB5x9r8cwr4eg6fvv1CQBaSZZQNAgJk6HkmJA8BNrTRXx/wFQC+59I++zfM/oGhgy2OhzD9XWwEKnhC4vxuhvH3a9+y/ANz0lbVr2D8UHCRJybzRv467mAK5Gse/YQwimXeQBEC+htr/iBH/v/7R4yrfnvK/Reh4w6mB5z+R5zQJ15r6PwL9Qq0cUP+/vXVy++EV9z94qiROugjrP9AE6HLOgtY/7VqDfQVc+L+vfHVhFsPtPy0BSTWwU+4/iBuZtxRRAUARBwz+cUj1v5FkgEQYnP6/3OECB4Sh9z8cTshmoLvxv3xu2EeuHdU/YUh/RlMyAcAhTj0mzQXWP5k2yD08l9Q/CoWF2sKcBcCI94oqR6bMv5yU5jtNHu8/qjMZA2v1/L9c2WiB/6D3v0Wlbg1LZPk/D7RXCqYS1T8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkwOTQyNjU2cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5MDk0MjY1NnEBYS5kAAAAAAAAALEl5JL6WMq/XXCDR01gtj/tcqPrjeqDP+ACUCZgUYa/t0wcnrjY0r+fvD7bvbniv6RU1luteqY/6MCGRgU8wL/bZb9zr3bXvy6SXrv+ldG/p+bkhDGy2j+70DjhSjq9v2s0axj4ba0/v8XnB4riwz9J24uEhDTAv8GYjkGjeLW/4PFKs2ABxT/p0cyn9hDGP2ls/JkZGNG/E+eqvZ5Z5L8/c5S+l+POv5azXNDhcs+/JeQS5qBxzb8C+H+EzIDSv7ZX7f9Y1LW/+8q/Aw9D0b9XxDgPx5Swv5jIgnvMddG/Afa3aosnqj84EpA90kLKP/uBC83fXM+/Ee0sKzfrxT/sHrBhRlu9vxNY7fxuV56/ZzQnDpCLyb8ZukjgXtqhv8IQspYKwcO/byHVNC0NfL8vGEhm52GlvyZt9soHT8G/JcS3TnmRtj850GKt31vHP4/COwH75NA/MoF535hM1D+EJmgLpJm8v164Y1638sc/00bQpW9DxD99wPP0J0mHv78eZagVHL0/5PnA0nlh0D/+aGTITN+8v/LHVEwotL0/AghhHhrqur+2UN5hDjuwv22cpMLdp8e/onhqXjxInD9644YXfqfEPxOiW9rHdpY/+qFpoaFpwz8xOHbTxQ28P56DOHmtLda/gexD7uP/uL+SI9gTnF/QP70vqymFwMI/y/DHS9FQw78D0ER1yeOwv604VhLMKM6/S7D5qTcwwL+haHq6XJq1PwG+NKzP0Ni/fy7SsMLYsD9XuDEKo+jEP41f/pFM8rm/yOXaoo6YpL/cZf40jFq/Pz8KAQAybro/ne/ule4X1D9BdX4iM0DLP1jZzi6besm/4gO23PjAij+vZhosiFa6P1mEX4GGztK/3yXOltqHsz/ubfgi7u6wvz0KYfCAC9C/JH5VmFANpT9S2JabvMC1PxkrDtdRmLK/w6KM9h2MvL+gwgHXeejDP0AFwYZ7Xsc/zmUBmambxD8/QUUTT9jDv/54l+0JtMs/yzF0Z9DSvb+gIuQIXdqFv4QTDRQmYas/3A4dEjqYtD8vEscsL/axv7idzvqjELs/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk5OTg4NTEycQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5OTk4ODUxMnEBYS4CAAAAAAAAAIXryV58LMw/pMpBSknbwb8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    4,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        7.112994841540119,
                        -5.996227086620219,
                        2.3640464908524015,
                        7.916712882482427
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4
                ],
                "values": [
                    7.112994841540119,
                    -5.996227086620219,
                    2.3640464908524015,
                    7.916712882482427
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 65
    }
}