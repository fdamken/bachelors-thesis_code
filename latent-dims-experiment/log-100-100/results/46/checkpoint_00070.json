{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            1.0060311882781978,
                            -0.0020204684993085495,
                            0.01583166201270132,
                            -0.06656638202336009
                        ],
                        [
                            0.0075949705618479245,
                            0.9825871939477973,
                            -0.10028108758453236,
                            0.12018301216268566
                        ],
                        [
                            -0.01680732089097288,
                            0.017878357431160986,
                            1.0010141734995208,
                            0.1322919101110641
                        ],
                        [
                            0.01115751459444808,
                            -0.001525986423871559,
                            -0.0060661306457641204,
                            0.9865600331315375
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4,
                    4
                ],
                "strides": [
                    8,
                    32
                ],
                "values": [
                    [
                        1.0060311882781978,
                        0.0075949705618479245,
                        -0.01680732089097288,
                        0.01115751459444808
                    ],
                    [
                        -0.0020204684993085495,
                        0.9825871939477973,
                        0.017878357431160986,
                        -0.001525986423871559
                    ],
                    [
                        0.01583166201270132,
                        -0.10028108758453236,
                        1.0010141734995208,
                        -0.0060661306457641204
                    ],
                    [
                        -0.06656638202336009,
                        0.12018301216268566,
                        0.1322919101110641,
                        0.9865600331315375
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.8843230086681806,
                    0.061543246113660736,
                    0.1011400157789292,
                    0.5473368148595764
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.008362433918717216,
                    0.00454556977465461
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.025479610531732533,
                        -0.005126965705890996,
                        0.006115305691700712,
                        0.006093369009249727
                    ],
                    [
                        -0.005126965705890996,
                        0.013824172400951795,
                        0.0003890326279236689,
                        -0.006928321384528147
                    ],
                    [
                        0.006115305691700712,
                        0.0003890326279236689,
                        0.012625582147077985,
                        -0.0021322214862919964
                    ],
                    [
                        0.006093369009249727,
                        -0.006928321384528147,
                        -0.0021322214862919964,
                        0.02095931482018898
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            4
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            4,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkzMjIwNTc2cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5MzIyMDU3NnEBYS4yAAAAAAAAAIujI3Nz6AJA8XysGmxu5T+JkZChtqbqv9CWHbb/I/S/ildXY9ULC0DAFCadq78GQNI5DdKr6/4/sR3wkNoWA0AzP1E5440BQPv8JwR2A/S/SjWW43r99L+UrPfakNLwv8jug+9YYQNA7rSp/0mpA8Ak1EbPQnsFQDBy8OBs//M/K3zseNuPyj//9mG6nWm+v4JZz7NCBu+/65v9NSIZ4D/ghP+XpSzRv648G73cTsG/P2/kDR+7BEAuDSJ8hqMAwEOgv4aPo/K/ulleIfit5T/lmfXSvoD6P/JLtqIfov+/4UaJchyP9j+vyj26JEXsP7j6em7Sk9k/jWCoCHLD+L+KNXqaSD3qPzEx7iNCnPI/11/vtgibAUCLKd6Rw0L2vyhkaBJ3RPy/U3Otj9F19z+wl4FJ1YLxv/h28t0TreA/5LEPMx8/AcDRc4+guMfVP054Xr2CStM/Eyj+GsH0BcAJtOWcvKDEv7PY4dntRvE/66PL75Vy/r+DXUc12On8v4S8IJczZPk/na29CbOB2j8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkzMTE5MzI4cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5MzExOTMyOHEBYS5kAAAAAAAAACrYG3C3Lsu/RAHNNyo5uD/hKVulmY5kP5CwG/h1D7C/phmMRNFF078uVkEO9oTiv8m7yE5kFKo/3vqkdPwKwL/p4M/oOgLYv/DE105GBtW/V3N1uQem2D820KFDGFm/v8wTia+3NrA/hd3yvtkUxT+qRIuB/Zynv3RpItgV64s/uR05CSPjxT9Iw6AlQRK9PygnM79QjtG/xAYhBrm35L/fpJSBiNXPv1YwdGolxs2/Rt/73bm9zr95NGzAA/fSv2DrNvA1rbe/PSliZjAY0b/iycnTH+y9v/MG70Tu69G/YI2L8N2xpT9LGvBmHi3LP+gpnc9feMa//5lMV5Zkwz/HXrLbdWC9v3mO9sJJk5i/Y4a7lYPMz79Z1ZNEQo2DP7U7P9T4rcS/bOrnZ0c/sD9JCvUmZDCqv/w9NPo2YcC/R6yI6ROmuD93mYclTkjIP8QYUfxAMNE/6kAlXN0M1D+N4OWAkNm/v8V7TRYW3cg/3CsFvz/kwz8x9cKXBMhvv6Kwrpjy9L4/DUDJ6NDX0D/wcg4QEpK+v4nUFQPh570/ABci1dIdu7+A7nz17Huwv2kPD60IvMe/NA2sYJJarL/rYmBMGaPEPwlAT3FgYZs/9z6EU2mWwz9BpyRcrxHBP35E93lRPNO/BaLSp7EtuL84bQE2OHnQP9YADrHHZME/vf7COnLawr/9bbHaySq1v0VEZLYmnM6/VNrpBM6St7+9iJX7o2a1P/RcPWMhmNu/Lw/7pPS4sD/BqEkav1fEP6qhweVkaLq/dz+GDgAApb+RVz1+0ya/P7n5zWhLobw/anMfPSRE1D+/9kd6RSbLP+tfw/V3Ecq/QqO9iUdIjD++NFXRqru2P4VEe+nACNO/dCbZ8neltT/0f6cqLdemv0POu1bKys6/v+aXbfZBrD98GRFot4q1P4gdJ21Ca72/dv70fHSCvL8yIUvYVQHEP15utd5rusY/m+xh9IW1xD+tFp3GJijEv3jz1+CJfs4/rG/WCpjQvL8ZV2ikrjmEvxSV3bNbeqU/zYxW6WjEtD+oBAZ2dsKxv0BtL+7RQ7s/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzc1MzI0NjQwcQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM3NTMyNDY0MHEBYS4CAAAAAAAAAAi77tbqGM0/DkTh7mzBwb8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    4,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        7.132215004651873,
                        -6.055266485973772,
                        2.4086284294679206,
                        8.001096736321617
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4
                ],
                "values": [
                    7.132215004651873,
                    -6.055266485973772,
                    2.4086284294679206,
                    8.001096736321617
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 70
    }
}