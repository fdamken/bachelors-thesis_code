{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            1.0012899066043337,
                            0.003348941413685189,
                            0.0042740373765956735,
                            -0.015071980778254326
                        ],
                        [
                            0.032813136428070405,
                            0.9750667748017624,
                            -0.03850094190205529,
                            -0.11178531206186315
                        ],
                        [
                            -0.014938846940805741,
                            0.007643625131575834,
                            1.0111502607357192,
                            0.10493282235701001
                        ],
                        [
                            0.021876388137830136,
                            -0.00018437702803981992,
                            -0.005030267143828052,
                            0.9746842460411728
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4,
                    4
                ],
                "strides": [
                    8,
                    32
                ],
                "values": [
                    [
                        1.0012899066043337,
                        0.032813136428070405,
                        -0.014938846940805741,
                        0.021876388137830136
                    ],
                    [
                        0.003348941413685189,
                        0.9750667748017624,
                        0.007643625131575834,
                        -0.00018437702803981992
                    ],
                    [
                        0.0042740373765956735,
                        -0.03850094190205529,
                        1.0111502607357192,
                        -0.005030267143828052
                    ],
                    [
                        -0.015071980778254326,
                        -0.11178531206186315,
                        0.10493282235701001,
                        0.9746842460411728
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    2.081914405857319,
                    0.5037595469638507,
                    1.2110714632648003,
                    4.674036724106334
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.04020939305340289,
                    0.0726022058863116
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.08643895254292033,
                        -0.028478983023333626,
                        0.005988796892811621,
                        0.014378026763019136
                    ],
                    [
                        -0.028478983023333626,
                        0.06928288554931683,
                        0.007237921390569113,
                        -0.027670167347078944
                    ],
                    [
                        0.005988796892811621,
                        0.007237921390569113,
                        0.07752075860201568,
                        -0.01848323087807735
                    ],
                    [
                        0.014378026763019136,
                        -0.027670167347078944,
                        -0.01848323087807735,
                        0.04434055820052407
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            4
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            4,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg3MjU2OTYwcQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM4NzI1Njk2MHEBYS4yAAAAAAAAAPsK5SndiPY/zcdk98vAsz87PrZoxYHkv1+REQse9Py/itdJlca6CEAXtmuQHUIGQNmwMbWa0/s/CHa0+RoZ/D8T1pD3v+78Px8hh/H63/O/ioc1PY7d97+iM+5CSjTrvw5x/ybzkgBA0BT6DG4Y6L8/ImmjKmMDQCvf5HQ3au8/L6zIx/zGzz9YALa857bNPw6EsRyB6+K/UkOg3ePu2L+P7QifMzKHvwlNeWvXmtG/yA7AjKVTCECHGG6N9JX9vxZ6xGVle+K/xMLJnYkH5T98ouQJ6qb6Pyr5vhIiw/y/OL52KBOC9z8TAdy4nyDqP74pTv2NZtu/6bg5AWX69r995iF0HczsP3sxy5U4z+o/NP/AETwz+D8xVR9c+H71v/p+aB4uX/S/3RwmEiLw7T9vACeYu8bxv3fnogCJN+o/waO9yxXV9r/XX733MWrYvyRlIBe9+cc/dSOl16KTA8BzUcgpC+HAP+dmz27Cnuc//6pe6D9v2T82dJUYNLwBwHQYUNEa2PA/0TbCrymg2r8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg1OTAwMzY4cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM4NTkwMDM2OHEBYS5kAAAAAAAAAPv6CzW328S/CBAcS6vSpD+AXkO9h5usP39r6JyGwsu/C86WZKtC2b9e1k8Hdancv4S6it7Hj58/mDEiu23E1L/nDdIiUNjXvwiudTsfZOO/eFKTCFYF1z+8X5LfRkLAv6c+Q113UpE/uiwTRhsAwz+Qss58c7aaP+2MBGZ56tG/DCToSfrdwD94vDTUXUzKP8/kNAafTMy/MexkbX9CbL8keOUQHd3WvxpQ7FaEHc+/kSlbGlXFyb9cSOSiEBnPv0qFmUHPUbq/pgsNaiYj0L+8RMGyINOqvwdzyV9cAs2/5IoNOtTAxD8oDiNgNVrEP5lTRikBZKE/08WswyEQ0j9nW86akRPCvzGNdTG4/Jc/bVmwUKXEyr8ok2EbC/CsvyHRLhu78ru/yyMeemNM1r85sf9L2sWsP1RDeBPnJcW/5HXQfyTEsT+r71H3rhnBP/e55abeudY/ykQC5lhDxz83qWj/WhrCv8WU0aInD8I/P2LMBxCZyj+uf6QtYsWsv3gyjC1lSLE/wsHoufLUyj9BPTIjw0G/v01/zMu/mL8/71evuK2MvL8OqSdxVmHcvwfxhAXLgLq/bEYqWu0UnT84i2Cjd/vGPx31VXA8xF+/zCvPc1fYsD9wuKHsvnrQP8PrkP4esNS/kIATnLQFtL8oZ40q+1PRP9oxYKMLRcU/WrJkOcOKy79ifqA6BfWtv3VtweswEc6/EHC9MI+ylz+ggdEriiO0P3t2dE9x29G/j1cHde3/tz/prwsZyRDLP9WFeFcNZsG/TMMcYPClp7/OowDp8fi8P1xik9z04ME/lIIKnDPMtz/k2Lpr933KP/yZ11g35LO/Y3GrDLB7kz/3PipOrQyyP4i/leGXfc2/uoUyNdkmeD+BjN7UjEXJvzVWFwISdLm/oJe8oipNvz/Fuskhu/K0P0PcHjaz2MK/98oopwe3y79RW51cuHzFP3mO2gbwB8U/ciKEaI8EyD/GA5B8BlS8vzQHOVc3Ws8/G4YyNxPrub/vTbNDtIRzv0f5V3vI378/hIOYieSHtj8Yjt/gZXWwv9120daJJL0/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg3MTk4MDk2cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM4NzE5ODA5NnEBYS4CAAAAAAAAAKTeXIHfQ8Y/LMB31uIXwb8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    4,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        5.988034606910133,
                        -3.9678671076535563,
                        1.35751071410668,
                        6.759444797083127
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4
                ],
                "values": [
                    5.988034606910133,
                    -3.9678671076535563,
                    1.35751071410668,
                    6.759444797083127
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 25
    }
}