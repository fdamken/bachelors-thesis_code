{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9951242249352366,
                            -0.004430240522347262,
                            0.02006505566381298,
                            -0.0242836702169747
                        ],
                        [
                            0.08590837322518122,
                            1.019452269527093,
                            -0.12465804147177467,
                            -0.08976937978590947
                        ],
                        [
                            -0.011286431134580983,
                            0.014357768553142438,
                            0.9721193925117325,
                            0.1572583434263448
                        ],
                        [
                            0.021211798423560052,
                            0.003135837441042272,
                            -0.006466971698735765,
                            0.9685106285314451
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4,
                    4
                ],
                "strides": [
                    8,
                    32
                ],
                "values": [
                    [
                        0.9951242249352366,
                        0.08590837322518122,
                        -0.011286431134580983,
                        0.021211798423560052
                    ],
                    [
                        -0.004430240522347262,
                        1.019452269527093,
                        0.014357768553142438,
                        0.003135837441042272
                    ],
                    [
                        0.02006505566381298,
                        -0.12465804147177467,
                        0.9721193925117325,
                        -0.006466971698735765
                    ],
                    [
                        -0.0242836702169747,
                        -0.08976937978590947,
                        0.1572583434263448,
                        0.9685106285314451
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    1.8651779749382191,
                    0.3650743203457652,
                    0.6593431216581909,
                    1.580345917271006
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.008445837843823028,
                    0.006522517043682796
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.07401812373300487,
                        -0.019447512003569756,
                        0.005734766894461174,
                        0.008198295743639505
                    ],
                    [
                        -0.019447512003569756,
                        0.0492989462713318,
                        0.012299416188719547,
                        -0.021065566729085106
                    ],
                    [
                        0.005734766894461174,
                        0.012299416188719547,
                        0.06415713435699821,
                        -0.015418488017877152
                    ],
                    [
                        0.008198295743639505,
                        -0.021065566729085106,
                        -0.015418488017877152,
                        0.03867942145285497
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            4
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            4,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg2NDI4NDQ4cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM4NjQyODQ0OHEBYS4yAAAAAAAAAE2FRxrJFwFAr8AIkThR5T+U7HjL01HqvxM4P2CnVfy/jwNE1aM8C0C8CF39OfEGQNFdTkmN4QBAXx//fmO0AUCNDlEpBbsBQP9tjiZpoPO/g8Nrmvwt+795dDt24yDxv+4WZXd7RwNA50xoEQ0R/78lJtukohQFQJHswnVt7ew/a9KV2A/lzz+NfpuDvXOhP+2jnmMQXua/V5r4J1hd279oT0taPuHEv6n01YjEQLu/nw+wRYudBEBUOW+XUrT9v/OeLcCSid2/22mxHtjc6T/h4tGxyqn7P2sTAfZj4/y/P8sD86JW+T8/00nrZSHqP1VXB84z5uY/RGEYy2N1+r+ffh45qwnuP3TeimbWMuU/XSTQyjb1+z/eVA3HbyXyv5LaYssTg/u/2JghPV8a8j9k17PDf+Xxv2m1pjFTwOE/GqakC2fM/79RqRB0x71DP7C1vUJCvtM/jHW1lqalBMAJJ4ITCU3dv5c4THl1Neo/9EL2A9349L+VeFT+G+j6v7szF5xAFfk/Faq6b213zz8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDA5NDI3NDQwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTQwOTQyNzQ0MHEBYS5kAAAAAAAAACptD4nIb8a/j+JtAyMCsz+VeJStJ26XPwuwKvWnYZm/qburgkG82r8MIRFGmwfkvwvZMBfv05g//5AtM27Lz78pXCzlyG/Zv2+kyhzkD7y/QwwDITtp2D/LTrriXWm5v9J5sEQF2ZE/a6RO4pu8wz+tgWOjNuOxv3Tl8Mdpcsu/+IRKhp3Wwz+AdK6MCn27P+48S1zPQNC/1pwOLLYK3b/LIMd8ZWPVv4Q6uWsaJcu/UoyCHIibxb85TCMvTKnRvwBgZca5DLm/5cSsBx6R0b/hCtK51bGjv+DblQ3yndC/KTxnCiwNxz/JYYUbvZPIP7GxvKc8yY8/bRcj7eF10D8qnAKk8A++v5o1Bc7qcbA/wA8IElY50b8ZGDDuDYiuv81iuXT1EcK/D/q5sqS9vb89OoTGEq2ZP1QRsQSvaMC/aH1Vtrk3tD8H14hvuazFP4tlaQka1tY/tI/ViyYs1T/Eh12HXYLEvwHuMl6vSMY/Rbe9jv4Lxj++ycYGPR2Zv9jIT2Trvbk//PUfsgQTzz85rV721HrAv2Dl2ER1fr4/KxiNUN20u78Uo44GlbPAv3PDb1YCacG/DM93MuI3mj9ZYmRRwUPJP5gvvRCwJKa//3rw2JKdlz/+4xon4UKbP0LXGi6DC9q/L/3jXTnpvb9kvJskqGvRP0IQXbFjasY/ZNTvtvbi0b9BKz19TPCXP1RnG/7oItC/GWIUTGDaur/a7Ilntc60P9PhG+cxcdi/xSskzpxtvT/UxnabcofJP2j9fdUBgrm//Bn8gfAspr/PX+Y1ufC+P+dhaS35t8A/3uHBM58Twj9p5EJjN9zKP889YZZQVrm/Y4NrULCJkD/irb7kmn67P728ROsBD8y/z3EsIc72hz+vF5MNmcu7v3L44JrEzdO/rN5UtANcvD9xyQ6jb/a0PxSuP9RUlVu/VZRxVMmyxb9DolX7TmHEPxQ4YxSotsU/zqkxfNsAxT+lYECoZ0nAv6c+3jtcNdE/FFPBIniTuL9uCrw0s0x/v/8oLSAdlb0/L+AZC4ditT9X1kI04iuxv2HGriFf5bs/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkwNTUyMjcycQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5MDU1MjI3MnEBYS4CAAAAAAAAACY1vzxnfco//Lv/zSJ2wb8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    4,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        6.272331939596026,
                        -4.509171479961308,
                        1.5733730917672304,
                        6.943249960796957
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4
                ],
                "values": [
                    6.272331939596026,
                    -4.509171479961308,
                    1.5733730917672304,
                    6.943249960796957
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 35
    }
}