{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            1.0088553692034812,
                            -0.006290856573366795,
                            0.016222214898651863,
                            -0.048150716102224426
                        ],
                        [
                            -0.00406389875583072,
                            1.0129273178169251,
                            -0.11811595072749856,
                            0.03821482585978043
                        ],
                        [
                            -0.029470680599229995,
                            0.02372588987159784,
                            0.9860586162144553,
                            0.17505591353721267
                        ],
                        [
                            0.014828145909049312,
                            -0.0007318237087133098,
                            -0.008232646057653814,
                            0.972529829516423
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4,
                    4
                ],
                "strides": [
                    8,
                    32
                ],
                "values": [
                    [
                        1.0088553692034812,
                        -0.00406389875583072,
                        -0.029470680599229995,
                        0.014828145909049312
                    ],
                    [
                        -0.006290856573366795,
                        1.0129273178169251,
                        0.02372588987159784,
                        -0.0007318237087133098
                    ],
                    [
                        0.016222214898651863,
                        -0.11811595072749856,
                        0.9860586162144553,
                        -0.008232646057653814
                    ],
                    [
                        -0.048150716102224426,
                        0.03821482585978043,
                        0.17505591353721267,
                        0.972529829516423
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    1.3776991899729052,
                    0.1353804048906865,
                    0.1746229902766904,
                    0.7487697385885858
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.003986409181488852,
                    0.0022751216222625316
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.04908947983675915,
                        -0.014904219106497862,
                        0.0007387855474014771,
                        0.006834298922392179
                    ],
                    [
                        -0.014904219106497862,
                        0.024947403067077545,
                        0.0036161463885751033,
                        -0.01043513198814594
                    ],
                    [
                        0.0007387855474014771,
                        0.0036161463885751033,
                        0.03333278215467539,
                        -0.0063034730456763555
                    ],
                    [
                        0.006834298922392179,
                        -0.01043513198814594,
                        -0.0063034730456763555,
                        0.027570707202393407
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            4
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            4,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzc1NTEwNDQ4cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM3NTUxMDQ0OHEBYS4yAAAAAAAAAKuv7N1l5gFA84lzXxxl5T+xxUf4cdXqvyocUGM7bvu//ELWCPbkCkD1ZfOaG7MGQCndULHn1ABAaAVOYS5yAUA4yWQfymABQBAx4VSh0vS/rX3Te0yI+b9g+X8cpMjvv775aiFDYANAovh+TQlmAsAMrnsjfmMFQMA4UyqtkPA/j5c7ROXCxz8Dl6sAmD+ivw9UvvPt9+y/UF1e27ULx7+0O14jMgTQv0eB/2zcI9S/Y2qBgpzEA0C64tE6CnD+vyIabJJRfea/rYsu4ne25z+UTlV+W8X7P9oI8WuJT/+/eKoqRt3b9z+9VbaZwgnrP0B62UHvDeE/lKcc0mpb+b8ALQEzdEnuPzehL2TXSug/HgUb83fS/z/wUIp9fC/zv70aI7CFm/6/PFKGGwbe9D/9ynWlefDxv0R+xVdil+E/1OhP6EyDAcBrHod2aRnWPzplWxP2xNQ/WFMhI7UJBsB00BLWgODgv5AZToiELvA/VbHRLq/P+L9Onsiqm3v3v1+jpu4sZPk/4F6WavMW1T8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkxMDc5NzYwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5MTA3OTc2MHEBYS5kAAAAAAAAAJWFvWCb6cW/nzdj4Jc4tj+tHKUkOSiFPygrFNNS346/QFdO6z2Q1r/C1fs/QZHivwcbo/vmiHg/lopwLT1Px799tF3OqOHWv2KBx1JFXMO/a2x8oaqV2D+AfyVfZ1a4vxWbL6CfkqM/5qSRPly6xj/ChLmuzNDDvxeeDYMHiMK/vcUVBOSkwz+35MnVBtzAPyVeNEAsDtG/Rr2Wrxqg4r/tuLvSYG3Qv1bjaMzOLs6/WFk+8HK3xb+Jz7cq33bSvyIVrDuKubW/56R9cKhJ0L/FRjwjBpWyvyi6uiHfa9G/l4cvvzdKuD+29P+J9y7KP2lM1k/3kMe/jo/R7i1Uzz9sL6Xfy+i2v+ZAsb60z5Q/qIR6DRpqzL+Zsgh9E7mmv1n0IeMvrcO/hpC4sA/Yt78Eh7ZFLphnv01xq6qLacG/V/NyuiYxtT/usdL5BEjHPyeX1QLPONI/d2GN7URy1T8JaAtgOL7Dv2uqUXoD4Mc/JcxMDGNrxT9ihfUt04aIvyTnREFg9Lw/6Ov4eIxX0D9wwOIC41a8v5mge4/KOL0/quCHYbxuur+NQduRJpu4v4UzCogDvMK/MZ0GRJjmuD/TavenEzLHP/LQkknz5IW/PylyRw2tpj9suDbTXmC3P9vSsQ+1MNe/ZPtRc2w1vL8RqmEYdO7QP4p2x84T5ME/DnCJsZt5xr+RT7I8JZiQvxM3top+cs+/unZLgBI9u7/Nj1N3uhW2PwEPQzvoCdO/+AJW7qFLtj+P3PbDYGvGP/iRcoWepLi/oewqKdOho79Q+xRAa8y/P2BzK5oadbk/QC1z4xJ/0j/TCOsA4n3LPxo0C2YiesO/Lsrs9Qrmhj87sElIcujFP1TXnaLaqsu/pxR/xH11oD/9mcZS4QWnv0J1hPgtHNi/Ax1t6AwnqD9+/29YGjy2P0kWy2SKsqC/YDdZ66GnwL/F3VUN27DDP1UGHHVolMU/HtKUuvpdxD+QnUYIQwPCv/SDf+AJWso/b6S4EQKJt7+skUdsl7GJv1o5sNXnK7U/6+NDVdwctD9ZOaDpjHGyv8N29T1Glbo/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDA5NDUwMTEycQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTQwOTQ1MDExMnEBYS4CAAAAAAAAABfSOauhGMw/S2CuKPgYwr8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    4,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        6.873107949750149,
                        -5.424287793915192,
                        1.9374868596728099,
                        7.47014359781337
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4
                ],
                "values": [
                    6.873107949750149,
                    -5.424287793915192,
                    1.9374868596728099,
                    7.47014359781337
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 50
    }
}