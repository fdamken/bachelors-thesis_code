{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9961395397584782,
                            0.0012940763727447512,
                            -0.009620006556407877,
                            0.0005607973948574736
                        ],
                        [
                            -0.03162579664715432,
                            0.9792565539330648,
                            -0.0327253253414697,
                            -0.003982114936359815
                        ],
                        [
                            0.047839391752951294,
                            0.02052374543291229,
                            0.9885395516077762,
                            0.005906320342409885
                        ],
                        [
                            0.01981615053961881,
                            -0.011677368312631676,
                            -0.02415145773453841,
                            0.9981073487858064
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4,
                    4
                ],
                "strides": [
                    8,
                    32
                ],
                "values": [
                    [
                        0.9961395397584782,
                        -0.03162579664715432,
                        0.047839391752951294,
                        0.01981615053961881
                    ],
                    [
                        0.0012940763727447512,
                        0.9792565539330648,
                        0.02052374543291229,
                        -0.011677368312631676
                    ],
                    [
                        -0.009620006556407877,
                        -0.0327253253414697,
                        0.9885395516077762,
                        -0.02415145773453841
                    ],
                    [
                        0.0005607973948574736,
                        -0.003982114936359815,
                        0.005906320342409885,
                        0.9981073487858064
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    1.4004619615605074,
                    0.8095007018465642,
                    0.8319514540261715,
                    1.0829914155621376
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.048647119932320494,
                    0.050132085352177454
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.5048815993407061,
                        -0.04582455501450333,
                        -0.09784340303965333,
                        0.09650336417900007
                    ],
                    [
                        -0.04582455501450333,
                        0.5524568160667931,
                        0.03425390272051887,
                        -0.05993863658933751
                    ],
                    [
                        -0.09784340303965333,
                        0.03425390272051887,
                        0.6191391756510511,
                        -0.17653566457728953
                    ],
                    [
                        0.09650336417900007,
                        -0.05993863658933751,
                        -0.17653566457728953,
                        0.3419172362371654
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            4
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            4,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzc0NTk0NDgwcQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM3NDU5NDQ4MHEBYS4yAAAAAAAAAKV+ZSjtJOY/M9TOmPpl3T/MhVwEBY7XvzXboS7G8+O/S28cRIRwBEAFBN+joIoBQH7ccqGTrPo/DjxNWvy97z/82KTeQFXuP2UwyiFig/i/JYfPKsd58787UZ+zSXP3v2mwztXk2fQ/9TYglKOroT+LfGs2vGf+P5eATO5lRvk/ZLgLjEYBk7+duin5gUfav5mwV81M1uC/2qC60oGa7L8BS8uP2/DjP4WabWD79bK/eleWt5j+AUDsVZGS29v7v9ZcpIyxXtq/pmDJR2O18D+OnCpLaYH2PxmoWKDnKvu/AcclGftX6T+5ePmGTv/DP+EbC7PYT92/M0Yx+FMo1b/q8+8YNC3fP9BPj2m6Yrs/iedwDGXM9D9ixV2bJWjvv1xaMqEAqvO/WEZuUUF59D8p4kkjwDX2vzsGpLtZ9fY/kM8lhzSv77/JADM8sWuevxrYbLDmsqO/ucEka1km/L/zYutwXe7MP622OwQ1IpE/H85hMJ0y9D9MOsFseP34v2EDgLzvn+0/HHX56JEz3T8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg0MTc1MDQwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM4NDE3NTA0MHEBYS5kAAAAAAAAAC+aJHM6BtS/6DEummxtxz+zekXoGGStv0UdqBiuNLG/EEtPCMv227/ZHZ/rttDTvxE6113BzKK/ZPgYgTA1xL9ddnzzC5rFv6NtO+fqX7G/8DQ6r+RTxj+SKbXMLvm3P1xq6rRYwrs//mfv3KlOxj/7GD4eZUSKvxKOgNPPS8q/Ms92kRkprT/v50ToypTPP4NvL3/qOsS/Ybktgnofs796+zs0poHIv0eoloDnts6/lXn8ObY9or+m/wLOzzTFvzls11UwNr+//flSU3d517/iXfihsljDP00r4WJTpcy/VyrjqMu9br9wv/xVSu60PzWXy2ISscQ/gBt0Rpgkfj93wy9nekXIvwu8G4Qj0bg/swgleOUm17//nbABuEy2vyIp5CVGNrm/5LD1fz74tb/7gqdUbP7QP13SeX9OF8+/SzB/ev/Nv7/JeqbukV/MP+IR+/Dq6Mw/EEi5Wfnwwz+eMZVanfO1vxO0QG0j+bM/RFJJUSOwqz/uGwxxvzuov2LEJtvuu6w/iiVqxTQewz+qNS2M1DzHv67uT4xG4K0/fT9HM4A8yb/TRgNZM8qtv29Cxu5k6se/K2bVCQF4lz90osH8oXPPP6vWGJj0XKs/1zeVi3pP0z+puA43oB6VPwIPGOPRwaO/rQ7bEFWDw79WMpKAAOSRP/acrbuKp5U/tReBLLKow79tESd2vwSWvxqwLN+PQMS/99eEoNG4sT/mJDE0VTPAP7cWSmcuGbi/mFT1v2+s0T+pbB2/LHTDP20JW1gdfr2/tmF0bzdhe7/8rXX0UCm9P7dpyqD1rrI/VlUqebwvg79yYY8LP6TBP6k299an1ra/9f2+IRjplL/4os/QzheqP3EVvTR2H8a/32qjfjv/sD9+JR0sTYtQv6iaM2aPUsW/VC8f/SiXoD/67+pQhfzEP9MLoGY6ycW/C6+QI4qu1b9faEAbnLeqPyX+uIWzc8I/TxBDGkL40T+FIMRvRa+xv2wiJ45dH58/vxhYovUkwL9CtLh8he6kv9uaWCm79bY/uADvTOf+sz+5fmgwOzrOv5cftKXj47U/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg2MjY5ODg4cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM4NjI2OTg4OHEBYS4CAAAAAAAAALUFf3M7v7g/vu+uxFQmxr8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    4,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        4.073384033910395,
                        -1.3308513651397833,
                        1.0218597618794085,
                        4.670665761805341
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    4
                ],
                "values": [
                    4.073384033910395,
                    -1.3308513651397833,
                    1.0218597618794085,
                    4.670665761805341
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 5
    }
}