{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "byteorder": "<",
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "shape": [
                        6,
                        6
                    ],
                    "values": "eJwBIAHf/snqLv4w6vA/1P1hn0PJgb/PxfPtnu2gP/newmt8y5+/wFhWMsevrT9OIIpfj0uJP8gH6YEiwLG/w8sIWORn8D8uhZvvASKMP3vm/z/tK6Y/W+eo0J8Irb8Cp9WpaD93v6qLXA4++58/E/x4M+aKtL95pirEl07uP0AINPnPAFw/cOvrJIR1m7+gso+2Hh2kP/o3eGiyXKO/8nvsIPpydL9zm+DsUQWJP0oFYF7wee0/ur5kaEIiBz8/8GWv5RqTv39UZ34Dxq6/9jTeHMtGxD+8DwgAvJCxP7GYmWQ2BZ0/kuWiJUEY7j+sVZ1CL/mbP2It3ifVl6S/A/7GU3gZsz8bp9Sl8k2Vv0rfQab4nGw/1XMBImXzk7/38kZjy/PuP8i7l7I="
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    6,
                    6
                ],
                "strides": [
                    8,
                    48
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.00026463611125920384,
                    0.0007326917034762066,
                    0.00024002513462160086,
                    0.00011529592925232017,
                    8.331680977040699e-05,
                    0.00030738198052450666
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    3.742707343735674e-05,
                    1.2297404596836258e-05
                ]
            },
            "V0": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    6,
                    6
                ],
                "values": "eJxjYEj8I+IkY8/AELHGZuFLOwaHxzHzmEX3MzAkdz+YzAYUN/rVyfjCjoHBybS/g20/XN0BmdhHvGr2DC9cFR59+bWPgeFZmV/jdyC968mjV9ftGBrWeriZq++HmwdVd+Pjsyj5Qi17BgddxyPLruxjUN78wfEJA9Ce15ZM62/aIeyFmgdTx3BNIjVW0Z6h4c3ipSuEgPIFYtMvXNuHcB/UXph5MHUKc1qZN/IC1U+Sftd/dR/cHzD3we2FmQdV5/BtzeR7xvYAJV510A=="
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            6
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            6,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDAzMzc5MjAwcQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTQwMzM3OTIwMHEBYS4yAAAAAAAAAPeUrZAWdAjAaDQQ9ojEBsDskt65B23sP4bIqnC/GOe/KIBbqVqf8z8lF4D3w8/2PytKIlEivvS/GWLy8RGC1r8ZMvpkVK70P8anO/FegNW/s9TYLPCr9b+W1V6im5vrP3szrEYFWvK/fMRvgr9V9j8b1ymXFXzgP2ieoocGvvA/xBwXzqPyy7/sG5GZtzj+P7YfdbYcQvS/N8QzemQ2yb+gl7kDzcPeP9kTAvF44fA/pIowbJoosr9t+sjZjAXzv0skUZycBgHA3JEXYGK0y7+/dFENqqL4PwqUTVhxegFA+5rkqXJI0b/1nC2kMOL8v2XQnmu7XuO/fleq+szr47+avwad9j3av9Yigeu0R7A/+rbt6XKx9r8vJfJjxBCyv3FxQwVZYf8/8Ij8AwwH9L/fQb3lIwb4v/gmwOQTauu/ObW4ctY94D81e2kflpr5vzOjkEraAAFAfi3fMFXT0r8Inh2i44X1v3P9j+xlJ/O/2gbjKSV757/D5NJ30MnCP3lT43JNNea/ZY+03tD52D8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDI3NTc2NDgwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTQyNzU3NjQ4MHEBYS5kAAAAAAAAAI23mHi+sbA//rGBiQ+fz7+gVkmgdVuzvy5og7SQGqQ/YZpg4uwMuT9AEhPM88zGP6B3Lmxwkos/yPDKD8SIir8SAw0xnpmuv2Pzt3Ry48u/0ikAAwaqf7+8jidbyeDKv0oInyxW17Q/46DGgBc5wT8NmogUmlbDv5dyfJXCAbO/qUDEbrJ9vz/H3AOBARfHv7XMWqYpJaU/FUkUTn8TeL/k0H87WHCaP/c3lb8sY9a/AKmWlb9Qnz/rPtcbpayCPwBjlumr6MU/pTgKr6wVob/e2ZRBvQ+vvyqp44zfl80/r9JBD+M+zL8V4h2ZSTSGv3xxMYJr1bK/pPpjACivxD/aBOVwkPCrv29Y4ddBAG0/bYOkH2Iayr+3L8kOv86kPzHZLXMfZri/qBVOonU4tT8Fbr88SrWcP/4Ugbf9n8W/OrOidUzmxT+FV3pdIo7Qv0p9Tkh2d88/dstmMYY1hL/MkyQuKJLYP7fv2yBcP7M/KqCp6r8N0b/4K4AfaDHDP4TGyQ3pTYk/dfDF88w6qr9KYuD1Bhq0v3ixcjydRJC/B3i2l6A80j9319Z7wkWLP00aWOxRU7G/8nWPlF1Xx7+6pc6JeY/Gv5m+xr9Afn4/HEmp2rwqur86XqfWZ6i7Pxodnn0B3IQ/Fix5ZdTq0D8jvGtwt8ukP0+UvTT+KKE/x3GSntvlvr9EAW6bfzWgP8zbBls7sbc/kWFqCx71ej+MxC2JHJ06v39lV0pO0nG/mEY1Xf/kfr+xwPMUy5bFv16HprD/CYO/u1RprkqJlD8ARpWFAuqLP8mXWinCp4A/u/CUtGM0rz8M4Paq3uGov5aiswVsdYs/uChowzo8cT9l9qPym+OgPzVE4omTJqk/vv9Wfqdjur8RiClUsRSxv05lmVpd47g/wIaHxT+thb8hA1M4UJG8v9wShGnyjKS/ikd7Zmu40L8LFxeznzu0vyM3ddoSXpg/Sbjl5om3rj802PveLl6IP5oTgQn6qsS/bfnQrUEcqL/xyBtfiB6zvzxCWWldbZi/5owxu0g2sD9JbM1wZvljvzQAiUAka3+/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDAzNTMxNzQ0cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTQwMzUzMTc0NHEBYS4CAAAAAAAAAKGDbVkbF8Y/DjBYGprMmT8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    6,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -2.5574961789196706,
                        -1.499306981170488,
                        0.037343002770063874,
                        -1.3987082964110762,
                        -0.36893828425827424,
                        2.556833457171462
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    6
                ],
                "values": [
                    -2.5574961789196706,
                    -1.499306981170488,
                    0.037343002770063874,
                    -1.3987082964110762,
                    -0.36893828425827424,
                    2.556833457171462
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 70
    }
}