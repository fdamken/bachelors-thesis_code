{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "byteorder": "<",
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "shape": [
                        6,
                        6
                    ],
                    "values": "eJwBIAHf/lH4iIiY8vA/jZa17O8Yg7+mD0GwhQShPwJtZAL/R5+/KRg5+IC1rT/kPeL73veMPyExL4Y3lrK/el0CixJz8D9P+oQWDMmOP8n7Of0krqQ/jsF/FeFmrL+AMuZgwEKAv/tfhKWwn5Y/YywRYSOQs78DhLMPKUzuP9NdGeSF82c/U0rCy2oInb/63+WRfgykPx+azf7wQZ+//GJ/ZOFimL9MDwpP2dKBPwSV+bmri+0/30NffiGRS79IUWxwkMmNv+WL5akdqK2/STkcvasVwz8/eCF1yYixP5B7QpctlZo/8ZUOrSQh7j96xjfszkSbP1NNxsSyc6C/zRThh0xssT9foh0ZDjGWv90WUOoZOXU/iQEYRzjIk7/18QobovXuP9DrkIA="
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    6,
                    6
                ],
                "strides": [
                    8,
                    48
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.00022490489036517867,
                    0.0006274330095796966,
                    0.00021395748722908704,
                    8.82919625118729e-05,
                    8.194356312009757e-05,
                    0.00022978709688675712
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    4.7278202535380845e-05,
                    1.5731986545517885e-05
                ]
            },
            "V0": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    6,
                    6
                ],
                "values": "eJxjYEjs3F4sbs/AsOV+ltdrO4YPfAtOPxbaz8DQrWXEwwAUN3u18sEtOwaGdd/SXzPuh6s7kGDh/kbRnqHjzb6t1R/2MTAIXLlzBkT/OdN+5D5Q/cLj0ZuV9sPNg6qrMJ9z2khCzZ5BoCirSO/rPgauzjXZ3F+B6jsX+ytstkPYCzUPpq5Bw02pUcieweGnklEPM1A+YkPC3Ct2CPdB7YWZB1N3oCD40jUmoPqULxsfH9mH8AfUfXB7YeZB1TXobt88T88eAJjOd78="
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDMzMzExNjE2cQJYAwAAAGNwdXEDTSwBTnRxBFEugAJdcQBYCgAAADE0MzMzMTE2MTZxAWEuLAEAAAAAAADmVA0IzVvyvyE/S7rN+uU/UKRFN7qH/r9YrL05BvzSP64xD+Zlj+A/xS7y89Z21D84S0mE2Sf5P+WynAsrhPQ/7aNzVkgz5T/waqulfRbsP8YDjKgi4Pw/RVD4A7T367/eTgerIsKuPz2JOYiFvdA/5GLDd1aOx78/wPTRhQfnP8a+J72aUe2/j9/RFkls0z/xDF1JbdLKP7vyK+2T9cK/PCdRXHo+3b/lUtoE58rEPwbMY6/0c/K/Mkoc6nmF17+4ob28iifMvyHzCU0sXuC/b2wZAbMC9z9V4ACQZiDuv+t/nDsvLeI/sroig/Rh57+SCEEyj0MFwOzBv8ruuv+/CEapL7CclT8dcn5JxI/xv8GPxaJn8e+/4+hGwslw9D97Q4z1hozXP7UeY1hMptK/Zc199J2Gqb+UWy/aPQzOv8sXmO3eXuA/yGY9XUU+z7/bmWj7Qz66v1le6B47g5+/MZEoGh3x0j/iqqO3vYrjvziXYxQvYtW/hG3IoQJVxL+tPL/kstZ7P4SsKQy/YtQ/Nc34JY6fsz88z6Q7ozC2vzysZ537dvO/Xd04ZZla8z+w/VIAzkfWvyWfAmK24uQ/74gKq5YD3z9SOujVQ1rmPxgV2+sFSMG/WHObepDozb9YAC/Is+TKv908gj88is0/QG43Lp58179SdvHl5M/cvy8R1KrDdIC/LKiYS6OowL+CgIsCMHDhvwjASZduRrY/0+nTPqqE0D+jMGoh0ibEvwAigPobP9O/ICRnaw251j8qWlsCD+K8P3yHxkdl8uG/8BHRvlS31797WQIx1gDlPzvDqsCXG7c/K3mrWIiOCcBQ8sxE98jyv3bXWvPaovC//zn0iUWXB8B5DamudULyv6N1Gd9Ljei/wLMC3IcP0j+CAlJli4ayP6UKxvaMBdo/6bCk5dndsj8nQu5iGSDMv/Y6Kn31aPa/I+eeAsy89D+OInqeEAvjv0LcdOV4LLC/RV87k6FZvz/qbtd76rH6P2PTA8h+S8a/TnXmvMcF8T8g/JO2NA6uv4LH18qlGbM/QOByowb21r9TRgrjs8TnP+CejFvGPvK/iO87pUga0L/SnpZziq/EP3993A5KBts/9JP/7feayL8aM67/+LCgP+0rO2177O+/Qm0fZHUB7z+Ep+hdaoixv+uhrrRZbM0/IibKQR5Ipz9uX+LdnPyxvzSunU2u2dK/Gnecs8ft6b8laJNiJn/Uv1ELYf8g5dI/OFtzQKDC3z/XCpugH7uqv2Vdv7ZZ7tw/S6PBcdnOu7+aIUj7KaDVP98duz4U+8m/gzU/aSsJ1L/PXvdmrA3wP6l+bpUCSMW/YAQI5pJCrL/FEBwVDcbRv7w4C6EGUa8/6b+Wnk4h0z9XTJL2lTXRv1XGKLBX6vA/njWLRQAX2D8MTKKFb2PBP2yqXZIoD7i//kvN4Rd7zL/IsRnqOl+sP8tYy7TZpt2/Kr989SUPtb+9XHB/Ne7EP0YapecYVMm/ehK+d9cP17+3RXiXAXfRP8+Pprah49W/4pYcnvVRyL9bgUTc71rAvynAXtfMJdu/gN7AZIFXyj+4e9FqI/TAv/ax0CY2Au8/RcpZa26e8L+vREEGEuPVv5vWtHZ/AtM/GPCLhD3NwD+9RGaUokHoP43NTGnM6+k/jZO3uEA5yz89pdJ8bx7Xv4/+oW2qzNY/p9eyFEINyz+LIoS7IdHaP2xP9O8U4dE/lNvNjzct2z/B0DRrj9EAwFJAvS+atfu/MeGN8m2T2L/zyw4JuYPZv/5JfAmHAtC/WKOI/2OZ/j+f4H/gRfmgP7NMNHbXlba//RW645OC5j93uXQR7rz1PxJ4S/Qspuo/BLehIvN0wj+ibrTQPRvGP6BoyLBeT9K/m8Hnfvk1xr9hRudhmQXTv0gUQcRTMfA/oaPb3vx8ur9/sV6KreCbv3gDhIej2ti/TFC94fE44r9Ohpzm7A76P/raY2uCYNI/4qq+CaSV87928Iz+8i6+P30nhCEKwu6/+Och4mvkyz/3EzliiCDkP/oiH3zeUtU/z2dGqQEb6b+TgH5kl1/kvxZLnXHYL+i/pjgnLKap8L/tNoEUfo3kPw/FQyrb4PK/5IxTDAEq3r+w9IzCloqhP0hktP0IctC/nvUCVolg9r9t+XftxSXvP9xb5NVg3uy/7kVrCmku6L9NScrv3OGCv7iUcZBSkuE/YWAIrkgJ8j/CGEfbyJrhP+LBcn2NmNu/logPIL70679qA8k0D0rZP0p+vy/7Ydi/a/FmTBwW27/UN7Hl9P/xv53nV0i44uK/dnJGC0eRij8/ZqA2Gta+P11qJwInLNA/pGAWkkaTtT/Oblfes6i+vwu+2bDodd2/md+jv9pq/D9ktXb7DZzYPzwOnzBJDtO/LPZ1vFue3r9Z8A+8H8OVv7+lx40k9L+/mNPCj5TK0L9k8ysyjNnXP7No6Cz4B76/fAkp9kTutD/7iiAtyAHYv/ag03qDvtw/EmqD97npsD+l9YgZ6MrVP/H4rnKpwba/AccbdvfZ0D+jO2F8N6fOvw4E7PJApvM/7yMxGHqVxT//CfEPjiTzvyDKHGK098W/x2q6vZML/r/y68bek73tv2DXGeFQXuu/u9fR9h2t5D8Ado6H9EoAQFzR5Wcd6fg/bd412DNX8D8N9jUHSAy6vwL3IvUSiOc/Ky0NZLor/L8kuqIjxqX2v4SyeRcxtvq/MM3UqnEg8L9Kh8Qg3KjDP9lSoKk7r+y/Aq+rXoCe+D9tG8UoRjjPP0z5vrIuWNW/0C23oqHUv7/fMbf3b5XuvwZUaD1NZ+w/QytbMiCvhL+Q4+SS1pvgP7plpYSGh82/zVx/xX0n2L/Qtdzd+iGgv/2zkaoYXdi/KkWD0+ZY3b9wiSvZ8kidP2aRKkeAPeK/7+CVXC1ZwT+EbHLStiDbv/T32ojk9fM/nCJ9dTfU5L9otBhdBLTxP7j+K8Qi7s8/PpW9YEqG1z/S/yKwPgf7P7gjPHBbOeS/Y+FzWFeG2798DZE8kHTGv/QSgbVIEu+/3F+mQAu6hr9HwFBetEu9Px/DonzytvE/asEN+tLv378u+57330m+PzXAreU+AeW/X3tvrNAPqj/Oem8pR/7Kv9DhfODZ99K/V6XWkuOZ1z9Tyzl7STXHv+GMsCe+8ZE/tH0Y8gX72z++YslpLznYv2bfAcY8CvI/gPGevY8o2z8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            6
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            6,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDU2MzU5Nzc2cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTQ1NjM1OTc3NnEBYS4yAAAAAAAAAAVKGVJ9lQjAzbzUb5nWB8AQr46W3nTsPw454t4bvOe/1euoJeqw8z+3VeDx5f72P78oybifkPS/Vwn68hc217/d/smE9BH1Pxsw2W1XTdW/EORhFXZ39b+Q2WT0JZDsP48fxXfP/vG/lkOSMQHj9z/13pq4KorhP5J6Bu5P/PA/ubZPjEuT0L9gAgbWhHH+P/GAqr7QCPS/N5j6KXwYyr8x1Pn7RQ3cP6XY8J0/mvE/m4SUtXDhtb/6zrMuEArzvzTzFLWA9gDAVoYgGrutyb9hJrAUyIH4PwDpe7rrtAFAwTM9Fuy30L8j6QWc8WD8vyJcJgDIW+K/C2lggPkD5b+Vbja/sUDZv80dZmT1o5Q/SG3SSHsQ9r8mGCNQ1QW9vw/LucdcqP8/+UvIq2If9L+J4veuh+n4v8eyKkgFY+u/4nCE2R6M4T9lWWns/aD6v9ASsxz5lgFA7RDJey5s0798ibjPSfb1v94+zzWjpfO/Jem7Fb/7479VNSB9sL6zPyeHr3ezuOa/FGQJGA0p3D8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDE1MTU2NDgwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTQxNTE1NjQ4MHEBYS5kAAAAAAAAAAaZ82m4YLA/XNz0aSUU0L8A1/YbfrOxv49w2B1HOrI/cqHGcjYguT9sP5GmNlbHP8yxhK+McG8/Q8+ANRIuYz/kpZKXtauvvzKnlEDWycq/3OKBmpW8rT+/6/qcod7Kv4P5KNJhUbU/EQGYVFrCwT/E8MH8VovDv4WDBSdjS7K/Jg69oyk5uz8mbkAuWTLHv4Xs1MfTTJ2/hsXfWoUdkL8dbmFEdlyBP8YKrqrDvNW/lGlxTpEyhD/pPeAvfHanP6NZR8DG9MU/vazAW1Qtlr/t2MByfza2v5VGWWciIc4/nKNemsWVy7/0I6BCnZNwv4V8YIsgOLK/JiL+gLfPxD//WwWTBg6qvw2nxZ3OSGU/VVNGRvuhyr+WV11K0z2hP1+gmFKEEbm/KKnmlVyKoz947pQ9Pa6XP1Gt2NkeEMa/xfy3WDpmxj86niLFw9LQv0YYBCtcANA/nSWCOijPib9Gh++RJTHZP5LqmLolZLI/ZuRbO2FS0b9ku8AgL3rDP/H2FPqjmIC/RYujbme7q7+lFTSt6pK1v6Oh692RpX+/xWqZdBq/0T9XD0VT25OYP0bH2ug01LC/dnd94r1iyL8HrV55g1rGv7GjnIh2XmE/mGpT2GPtt7/PCRhzY4i8P9ztMI25eoK/R+rQ/5RP1T+KKPaXjMujP3kWrmD59pk/ZiIJTwE8vb/B3L4ZIzupP6UZ/Rk1060/vNUpk8PKiD/nWPCbpwClP/Wz2skfiHI/V20JTQO+ML+Uw2BntRvFv9kYQVmG/lY/dWDyC6X5JL9R8qe+1AV+P+iGT6U4v3k/pR3Gse6BsT/JeqXiXw+tv/WOBxw00Ze/0QTiaMTIgL+PRv5fOUefP0jcBKBLRaY/dumcKB1pvL8noLfkG6KyvzRSqeZ167o/v0JdQWnHjb847H5F3He7v9n4YyOWX56/02Uv1b6Pz7/FOuE0aPK+v/qZyaobXo8/DEmkioVysT/OU16jiKBuPybtk8SSxMO/nltUgib3oL9VQI4ZGj+zv7jm8wpdEpC/y7tw+mFurT/HRCo5PQiEvzBFkXKv/Yq/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDE0MDAwMDAwcQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTQxNDAwMDAwMHEBYS4CAAAAAAAAAO2x6zNeoMY/7ujnqpdxkT8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    6,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -2.5520657844875205,
                        -1.4894269566460439,
                        0.031183238871782162,
                        -1.3977206897584902,
                        -0.3687309089361148,
                        2.541217441257
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    6
                ],
                "values": [
                    -2.5520657844875205,
                    -1.4894269566460439,
                    0.031183238871782162,
                    -1.3977206897584902,
                    -0.3687309089361148,
                    2.541217441257
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 75
    }
}