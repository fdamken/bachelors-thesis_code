{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "byteorder": "<",
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "shape": [
                        6,
                        6
                    ],
                    "values": "eJwBIAHf/s2CUBWN7/A/0a/0KYmSh799VXE2nZWhP2F107ch5p6/UvMonkIQrD9sTcH5E6h2P1o+AFJUv6u/KnMlDvk+8D/PxX2Ev2WAP2ULbdYuIas/Z2HILC5mq78ZW/Mn916GP4HMFSAwnHs/jN9bV7sGn7/1YD/u3ZPuP3OvWj6aM5G/Ugq2iMBCk7+qfTF/Y0CMP3zQ2w6UQ5M/YlCp+pAepr8XxBnaKASVP+bl5R2aBO4/h7TB7LAYir/znOGXbCOjvxEk3SK6H4m/DzNfqVcAwj86BZm9M9KvP5PUxCxYhaY/VuMe3IPD7T80fERvvP+pP8z0Bu38CaS/XQLdZ1+Sqj+DxMtkLxegv+hB7SWog2g/eQQw8mp2nr8uGpQSck7vP7zYjQA="
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    6,
                    6
                ],
                "strides": [
                    8,
                    48
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.002312789839665701,
                    0.003920660920438584,
                    0.0032254765273044355,
                    0.003067414070314582,
                    0.00049824143585677,
                    0.0029125394999255606
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.00016907105214158946,
                    5.140279966036587e-05
                ]
            },
            "V0": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    6,
                    6
                ],
                "values": "eJxjuMCz4ZhfpD0DQ9RuFxYW+4aZn6YmZgfvZ2i46+RzS9Oe4cGBbxcfaNkzJHTI/rBwhatj0Ll1oFEuzZ5hQpSxSghQvYDEI+7NHvsZEiZ1fFpmYc+wQ4hfc13ifrh5UHUhSydOq3qXZ88w69qulodG9gckJ8V/fO+wn+Gedvk2XXeEvTDzoOoY/uzhUf2XZM/Q8q/A9C/QHQfkFY8vtERyH8ReuHkwdVV/3EozHewZGupu3XQVQfgD6j64vTDzYOpeyHqkKhfZAwBp4Hhr"
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            6
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            6,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDI3MTY4NzA0cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTQyNzE2ODcwNHEBYS4yAAAAAAAAAE0hn20PJwXAsqdoMxRLCcBaTVpZz37rP8jBIE/p0+S/3q+/i1ke+D/WNV3ENPjzP1wcSJtmZvS/Rtj5pro1x7+Ko/UFMQnxPxYT/nMfAte/N4yd6RHL878q9OSSVsXnP8T5FWA26fC/EJ8TbHq46z89uRnxtmnQP0jSSkiMgO0/1g0CFtuNqL+E4zjQ57L9P6PpuzinoPW/9mXp1rUL0L80klBOEoXgP0nGP8oWNvE/H8Xa9MGzoj8dtsjM7Mnzv9VKj/VyCAHAv1sAeKX6zb+CxVgsvwb4P7WsLYkghQBAd+T/gh7B1r+XNJhdkvn7v+E4E8ihWd2//gK0mUHEw78YnonyN/fevxjAlZVDgLs/JjoS7/i29b90/xiZxryxv+QaEpKXf/w/fszmvEHm8r/oGmswsA74v//oPWKQRvC/uWl5pb7g4z97Cl9Tbm/8v+q1j5emLwNALZDpqBvk0b/kfde4ILbxvyNH/ZSc//K/DVTixsUv4r+4wIMQW5rmP6CbiBdbLem/wlQ6EQMf1D8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDI3NjYyNTYwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTQyNzY2MjU2MHEBYS5kAAAAAAAAAG1OyVo0fbc/F1CIqD53zb/BREoAOi7Fv//BvvCsBbw/RxwB+j7Avz9ot7BAg5nEP7uJImNKZa4//D3Eb5g8kT+Y9fAx+Xy1v7H9JxS/7sG/nDwXhCrgbb/B42Yt3vbBv0B6+Wt7yq4/IVP9kg0bvj8ZQJvqyObJv/+8A21hjk6/mqAqjQYJxD8o8wXolJvPv6FfYGL+B4Y/UugSqerDh7+iR3kHv6ueP698iaj4adK/nFxhdUTChT+cFVwtpIGiPzIRlt2grco/OwTIwdGiq7+DWMmM5zPEv6U7gQFvZMs/mJFA64Lcyr98yGYIgttxv1eZJRsHybu/ZZzxcOh7xT9G9qm6rbCyv4MEVzHFFYq/tVTI7QF/s789bm1SedecP86X22O80rS/skXR1Fl4xD8W145Jzj25P4WaTDliOcS/Fgs5qL+/wz+DuFUv1OjOvznGC+wFRM0/naf+mRUnpT/6ypXC9mvQP2WDujYUG7Q/kZ6958Loz79Z5d5vnkLBPydrsOebXpI/DnDMrmm2qL8VLfQETT2wv2GA+Hte7Ie/qimVrePb0T/L2DqSB1WjP15Z/qUezXy/uIvhkdnax78xEqppje/Bv8aX0ZR+LXI/aE5QdUJVtb+0sCFiDeqyP/shd9SXHIQ/8X/C4MGuwD9dOinLco65PzYet/xDQJ4/B71K4IX5uL8gq523BDiAP/VSv0JfVrc/brbdAp2akb/MubFS7FguP7BVeqwweXw/yRPfhEOvob/xwFo3ePvGv/t0yJVwOGc/yo5wFGhzgL+4kqfxaqK1P+cpBCjRjIK/fo2GiuDIsz/lLD+gzu+qvyuwnG2VAnQ/mNIcx5dpor+zsr44s0W2P8hI7kmRwK0/Pt9FOKAZvL+l9RhWnmK+v9UqbMSDtpY/Cut0T6fYhr/dJW/gsk++v5qGAIg1pau/G41rkPstyb9HLRj1U8C9v0JbbXin+ZQ/z0Pi7rxisD/Yhz3kbCaAPyZx0YUhNcy/I07hbBEoML+q2m7/hhWVv03S7t0pTJS/OkiOnJjusz96czQab+mFv3a1Pb7/F7C/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDAzNjMxMDQwcQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTQwMzYzMTA0MHEBYS4CAAAAAAAAAIAhC86q48M/cKHHL7qwlT8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    6,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -2.642097301817502,
                        -1.6512478767714194,
                        0.0936882620700341,
                        -1.5889294214644454,
                        -0.420925427313433,
                        2.884705203177673
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    6
                ],
                "values": [
                    -2.642097301817502,
                    -1.6512478767714194,
                    0.0936882620700341,
                    -1.5889294214644454,
                    -0.420925427313433,
                    2.884705203177673
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 40
    }
}