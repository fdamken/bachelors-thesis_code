{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "byteorder": "<",
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "shape": [
                        6,
                        6
                    ],
                    "values": "eJwBIAHf/rMws26Tv/A/SLODSYmAfD9NCuF3+b+hPxz7qCm9mKC/dnhx4yzuqD8UK9Dc9cBYP/MbSuUjZpO/EHcIXIar7j/OkFun7yaHv64pSwu1vps/jYoU1redor/U0qwFCSFrP6S04rUgaWe/tKIEkBb+pj/iIKC1rxTuP+Ar9Ec2nGI/yNOkAXJYlb9+Z3ANYaacPwjDfYk2a4C/BclJ5Lhynr80RCTU9ruhv5ApUcS2eO4/t6bGxR5RjD9eHFzMW1mcv9iVWLx/2JY/HRVzzQEtuD+MOiE8YkWmP1/5ukbAGpc/qIPEYlNY7j81FpuM8QCrP0n2NZhVLrC/NZgvGwxLqD9etv+FkmB2v215fFnAFqI/ZXZVQMl2pb9MI3dzgpbvP+kajV8="
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    6,
                    6
                ],
                "strides": [
                    8,
                    48
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.09300594995975754,
                    0.1328799311622624,
                    0.10353632118337969,
                    0.06682842449818181,
                    0.037805372901020894,
                    0.07918853053110332
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.0014322102806236217,
                    0.0005424108355368844
                ]
            },
            "V0": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    6,
                    6
                ],
                "values": "eJxjWCDD2io63Z5hQW3CLFU7+4bjXW4GzlP2M/gbnPLq7NjPUNI9eef5iv0MDDH2lZuD4eoWfD/n58Wz0v6HbsvC0wxL9ju4aeu2vmq0f1BpcPlsbL09wym+I1lHCvfDzIOps3nLEnzjxVb7DZ5a4kIzZtpHmR2cz3uxbr9DyXsf0wsT4fbCzIOp4wjdIKA18ZB9XFON2J8Ha+wZLlb0K55rtoe5D2YvzDyYurz2nzMUIjfYH3A6qbstfS7CH1D3we2FmgdXZ1RV1Pljuz0AELOD+w=="
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            6
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            6,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDEwNTU4NTI4cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTQxMDU1ODUyOHEBYS4yAAAAAAAAAA0wz4pJiQjAgl68ARbLAcDoVjlKGNPpP27Ua6LS++G/RAXbXYDa9T8oWN/pr9HxP1CPtXLRt/K/IJto2JkqwL9qeiCYvu7sPwwfSHg05dy/V28L8RuL878ObP8uxTfePwYy2JiBKOm/ds6uOvX77j/DRzT0pdpDvw5MkKGImcA/+MAUlRClsb9VH3nqdmf4P1tLyyMVMPO/i+ETSHuZ2L92mGi2zFHkP3PPROBwkeg/MFLzatLXsT9g/ISEHI7yv/qkvZ5VPf6/knVmMskt178zCGnAKgP2P2ac5XNfYP4/ykRiYTUf179GGON2ifv1v0BPRaFQqs+/HTydPaqr3r88hiDuEDjjvwAZryUWQsU/46CtO+1C97+8lfenCfCaP8vql8SA9Po/GPdxkH+J8L/GvoIHmFz0v3c2OFQE1O6/0ygH+tr2sb+fjoCYqcv1v7KRINU/JPw/KIfB2Byh0b/Zy5Yw3CDnv9XblJFS4e6/7/IwUI9/sL+8A6rfeca7PygnhML9Wue/77c5zkxZzD8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDAzNTkyOTI4cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTQwMzU5MjkyOHEBYS5kAAAAAAAAAE3LsxfEsbc/oXmM3XqRy78Bhia0PxnDvyqvvSOjJbw/y+IDamc/vT/8egrQvrPCP5brnYiK+as/GqaAEIoNwT/ir5H0nJOuv3z9CMXKm7C/yTwpkF5Wsj/xwCNpnyLBv4EjDFYEnLI/4t5TH8VQuj9IMYuT0z/KvwhWLbr+GKA/Si44hbpvwD8RghigiDHNv0BzbZvg+7g/L+4wV1p+or82/jfsABSvPwEt3mnLiMW/pUbS0Zw5mz/0FPm5CXTIPzvRFtN2X8g/CDyjLW37nr9XeOjWWM3Bv6UC25Cqfsk/zT154Ltnyb+NQ1/RSvxuP9fAl2pl4sG/A3ILEWfkxT9tpLzZujS0vyZSvt63CKm/YuV6GnjquL+8ZGLBX/qlP3BgJiVtIrC/LkAwS1JhvT9sW4bRV6+wPwuZ0WmDusK/jK849PoPwj9j2a++DwPNv4hHrHtBXss/r202BJBbnT+ZRZuw/abDP8QcG3ybB6k/Pr9NZ68Dzr8cbX0B5LK+PzV+7XQcLrA/daTwm4wEsL9p8L9zdAWlvzjVPsAIU4e/nZu74jk4xD97uWzzjF21P09P5yDtpH+/m24+q27kx7+TjX9vLuS0v2wHZjJeZ7A/snRpEwPgt7+v9peQ3wW5PxzgO9ssq70/hWDcRDcewD+vGq3NPy64P3qIU6X++50/u5OV1hgkur9RIEC133Z3PzKAY8V5O7o/PLGmcXxFoL+Wsk2J6u++v7T3cXdToIm/HjGnAYlNsr9TV28LVVzJv1sFIY4TsbM/gfmMwRdcrb/9Rq2bJGW2P9Q5Wf88GKG/ewFFiK1hsD/ourIFIxarv0IUAFOycIW/+f5UyUUqpj+UFl4Gz4W7P6TxB1xsiKs/Sdyu733quL9FtsnK0Ri9v62ueq4jCqE/MWB6hdRWpb9FBybqnGbAv5moMuUovL2/aR1B7wCZxr8wkpmAeyidv5NJX9YC65I/QFGcIed1sD+1o2iTNhp/P0Qi44Y0cMe/C5+PckpGlr9EQdh26FepPzevFpgH+pO/PdoF3hTusz+6vjv5Owx3v99psnkgG6y/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDU4NzY4MjI0cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTQ1ODc2ODIyNHEBYS4CAAAAAAAAAKXmZF3m/cE/z5HgZBFklT8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    6,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -3.144119106826519,
                        -1.1227051381484026,
                        0.4445506759470662,
                        -0.5404195637822745,
                        0.0362961391158097,
                        3.192195493945406
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    6
                ],
                "values": [
                    -3.144119106826519,
                    -1.1227051381484026,
                    0.4445506759470662,
                    -0.5404195637822745,
                    0.0362961391158097,
                    3.192195493945406
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 20
    }
}