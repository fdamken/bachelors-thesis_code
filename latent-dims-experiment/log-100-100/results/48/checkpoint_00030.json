{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "byteorder": "<",
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "shape": [
                        6,
                        6
                    ],
                    "values": "eJwBIAHf/rqn+0z80/A/Nkipi+rOcb8u56S3PxafP4MFwpoygaC/3F8NywMNrD/TDT88q/VOP/fPC9G1wKK/Ui7y1mic7z/hyfsdhHZwP24hAxZ1VaU/F3TRkDWDq7+F+P6GzXJ/P6grU6of0nw/IycWp2m4ZL+654XlpI3uPx9Bef6ko5S/QM4nwan7kL+QnMv/17V2P0HW8emKLIo/gLEUYj0mkr8Alr5kjsN6v7Lft+a0T+4/FaODKaJVUj/Q7j/vSVegvwx/OmTEGYE/huVICI/7wD+R3u7N5JusP+bEHgiy3Kc/OPHesTjW7T9nAar1+/ixPzsWXyw9lam/nvsrKUsnrT9fGhDbX3qZvzOtuuqaV5o/Ssih3MRsoL/Od1qfgAHwPxXLmEA="
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    6,
                    6
                ],
                "strides": [
                    8,
                    48
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.013012712016576418,
                    0.02151493821978426,
                    0.015420863172177909,
                    0.01426862827287209,
                    0.003233944702584406,
                    0.012676491187310327
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.0005767589040005987,
                    0.00019118372963845332
                ]
            },
            "V0": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    6,
                    6
                ],
                "values": "eJxjOCKo6R5Sac9wYJ5I0htLeweBlrSoG3X7GXiY7lmzVu5n4CvcKLAqYj9Dw6aCF3HGcHUM9f9mbQvosv9w4MDT9IaW/QxzbjLp7Czdz9C3SSePI8aewaNl42Hfov0w82DqTFfw73YwmW7fwBO3aPvRCfYHLF4UfH8ea8/gsPl5yuIAe7i9UPPg6uT3qdQxLrJ/8Pm35LKgHnsGBovv3otdEe6D2gszD6ZuxfW/ng/jGuwZbMPKgsqTEf6Aug9uL8w8mDoZ/yrlh732AD5nfzY="
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            6
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            6,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDEwODI2MjcycQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTQxMDgyNjI3MnEBYS4yAAAAAAAAAAav4KykLAjAFkmdPrOBBsCO+KUw75HqP+sJh/S/fuW/o7AFHLKW+z8da6z+q5LyPxrpgLUWp/O/zYizFoGAzb8IVO0vzl3wP8nlDtuDbNu/nIG0A0ov9L/OSIC6jIXkP09Qcxu6ke+/s0VBGDKl8T/LRYhNF+S3P7sNZ8tsFtc/nuzhf7kItL+uYD9ae3b7P82bNvKRw/S/MDNuaaga078HpPbkm5XgP91ajN9Xie8/hHCOMTrQlz+U4twy+vDzv76LWERoKgDAlnLLd9m90L+n/5XTV/j2P4bTE4EsI/8/8GnAO0042b8vICFybNL7vxe1e5OxTtm/Kw33Ee7c179WY458RObhv8XePGFH1rE/4TsfJAJV979J0Y5GTzOnv7XUmqhMCPw/Dg7uZpnw8b/gENA6kPv2vzyoTncMHfC/H3A7NOMs1j/DP35efJf4vyquvH9tkQFAIdK0rQqL0L9uRBtEym/vvyISOPGdh/G/y0FPkKX/2b+wb5aLrsLWPz40vJ6JUem/GbuAFwb80z8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDI3NjcwMzY4cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTQyNzY3MDM2OHEBYS5kAAAAAAAAAJ1q/Dhe67c/APl9uQpTzb+pCZ5ucD3Ev1Odfh3wRLw/7/FXCUdBwD/FDqVRT3XEP8EIzHnN76Y/4wx04F/Qdz/UooVDYgC0vzCioytwMLW/8NSgYoKtqD9ld6zpFYzFvwOzwmz7lLM/kwCfpr3TvT8wotm8oeHJv9rvkDyHzZE/7E5YSubXwT/1128aIIDNvyUHMo764Kw/tWBYdG8Jkb+6FxRWvX6cPwX7IF+alMq/4ONt/Gttlj8B9bUQe1SvPwLxogzxfsk/JqeTQwNbkr/Yqe7/8/fFv2yUdRI7QMs/bwDJDPNnx7+yxruorkiEP17qI+P2ZcC/3Aw0m63QxT+E5nWSD7Oxv4C/6j2Xe6a/QEriYk8Ru7/WE+dHd8KyP1QNCitwJ7W/GztA23atwD8Eqk0+rAy7P81KHChbvsO/Tvuff6mbwz/wGEpAoMTOvx4pAP3RH80/herkKIjfrz85VPgr83vNP6Ng3Buly6w/wAZCH5zEz7/XTKu2ux3BP3Yw7aTLx4U/AW7+ieTss7/ENvKAH42mv+trcba+Zoe/qGBBFdQr0D+I0K7s8xuzPwgopMCfXX6/Sec5jjPjx79Vmmjegl3BvwquFJK8/oU/tfBvNaAlt79lm72LZeu0P/J4rO2ST5o/IoyFM/4+wT/+SFmMOoi5P/HclMDu/50/w7TdDz26ur/6AGvQo5tyv62LvOWEi7s/FDjZwcmhp79UaSXQzuSgvwMEaqCtcoy/RCWHkYphpb/04SoOF4jKv8Lm62VL/58/ezgTmuqRnb8gg16gSU63P1Ji4MNnpZK/jk9wM2fotj9DmaCRNhGrv4J+KuMA+Za/6YKEovkZkL+GMx1VSkS7PxsiSJzqJa4/Bu2yoCa5t79c/edDtSm7vzF2+9TIKJ0/O49AggKwhb9HoKTbJ3S/v6gsgjeKV7u/c2YDwKSTx78gDSHdEfu0v3894R3OtpQ/GPuS53BzsD8XAnA9mkF/PyTHdQGI/si/qjI1QS+LmT/w87i0gfqLP9QqkTAtCZS/ginHPorhsz+jxi7d7DyAP0N0zHhn4Kq/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDI0MTg1OTg0cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTQyNDE4NTk4NHEBYS4CAAAAAAAAAMVy/952v8M/6c0ETeptlT8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    6,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -2.7855647641802723,
                        -1.4767930381142846,
                        0.1450508475607783,
                        -1.3986326141409529,
                        -0.26605767695472843,
                        3.086623549637702
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    6
                ],
                "values": [
                    -2.7855647641802723,
                    -1.4767930381142846,
                    0.1450508475607783,
                    -1.3986326141409529,
                    -0.26605767695472843,
                    3.086623549637702
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 30
    }
}