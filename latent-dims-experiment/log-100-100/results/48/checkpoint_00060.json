{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "byteorder": "<",
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "shape": [
                        6,
                        6
                    ],
                    "values": "eJwBIAHf/g9zDvGg5fA/+vXUySxOhL8SKWgQu5qhP98Gh14TiKC/JibWsjCPrD8szhLzSKaFP0EHtX2Q0K6/b0btHqdu8D+q3gzviQ1+P3VUpNjc5Kg/55bULmrtq7+tGJI48A50v4uagYjBG6E/tz8SYNHJsb+DR331xwzuPx/OunOxvzE/Hpc8R+n5lL/WQmiM3SWhPw7bI+TwCaa/vJDxfEXtkr8Bz2e7ix6hP52fgDp0Pe0/vNEPdjTnkr/sv7yiIBmGvyS7z+m9v62//ahN9WnUwz83m14u/KOzP+pufmyqUJ8/Q+9lUq/W7T8uT18Yy/KhP6Yu1WO/uqq/OGovhAEIsT8vvJ+pf7+Dv5SR/t1t7hK/gPoD6mXBmb+C4ljZLyzvPwPLmSg="
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    6,
                    6
                ],
                "strides": [
                    8,
                    48
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.00041929353985783573,
                    0.0009567201591298562,
                    0.0003634444529326176,
                    0.00025118935038196874,
                    0.00011624712099041872,
                    0.0005617658516894517
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    3.400542987219524e-05,
                    1.8804051973916102e-05
                ]
            },
            "V0": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    6,
                    6
                ],
                "values": "eJxjYLiqy/lQxZ6B4dTKD+2/7Bhu1HftOSSzn6HhU1vqVCGg+KLu9W2f7RgYfjxd6S22H65OId5M8bCBPcOF7u4Fp1mA4gJNSndO7mNoUNlpcBMkP3drgYnRfrh5UHUGwg/28CcY2zNM8J41oZNjP0OE159NB//ZMTiw51VM+WqHsBdqHkzdhl1XpO8ZAe2zVcrkVwLK/0n/UMm0H+4+mL0w82DqMq7k7lWXBKovWFaf/G4f3B8w98HshZsHVZfQWnKl3cEeAF9mecY="
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            6
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            6,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDI2ODkzMDU2cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTQyNjg5MzA1NnEBYS4yAAAAAAAAAErTAqnoBwfAFP0gePJSBsAxKbpsnSPqP7F2duy0XOW/npj6NXhz9D9iVYWI1TD3P5t/XhvYpvS/X1ilBLHm1r/QFXw1h0n0P30sjjD/jNa/zrjgDH3L9L+fKhqm3LzpP9BjxVo3V/K/thuyhQsm8T9ftMTdFzjbP0eDbd/xdu8/x2hiwmQ7w7+7AmA81pz9PwMSS6kHWvS/fmjYE/w5yr/t7StTeBLfP2q+GtDAc/A/Khfq2R1Yt7+GeLR9h7Tyv8Ici2DeTgHAx7GrAqV9yr9dK7TaX874P4mGbR+l2AJAugfRLx900b/T8H/6INX7v8MGx7JfCuO/8faPxbMq37/ZQxdGH9TSv24XS6/pCMY/T/E/v1DG+b99OQBu1oSqv7izlMqp9P4/QlZwx3rt87/x5yJWfC73v9XrsNPsV+6/pbttgedQ5T+9RN+T/2P/v9U0bUE3lgNAN4lZfbCw0b8HCf+cEUv1vx5SOaYRwPK/+Tjf382Q4b8t1luIgsrCP1rEi8Z4pue/32ySc7ha1j8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDEyNjgyMTEycQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTQxMjY4MjExMnEBYS5kAAAAAAAAAEYgrZwLZLQ/QfSW8srHzr8VihFjKAqzv5IYwPNAAaM/SAAKMrGyuD/cwzc+bvHFPw5Jf17hyZI/+NbUXuVJj7/nrI02OG+rvzLKa1/gF8+/f/N0BjM5lz/odyIDybfGv9y81O5gyrU/GP/LDLNgwD+VlZen9+fCvw8PTjntCaS/3xgjF64MxD8QCZgKmLzGv/PgpqG2b5w/+SuBGO0umr+92ETTy3eEvyHWm/Jb7dS/9WOfUakSgD/PGPtVg6SKPxwt9uie2cU/tahMPWgpg78t3GvEVBvCvwlCCP9ZvMw/LlxP403Fy7/UYm2kJd6Qv3x2MSy3mbK/EUXwtKYAxT/kM4A7VJOvvw6SLE5S/Tw/PxZtC9NNyb+eM9OXMQyeP7T1JWMlEbi/wplSpEW6xz+pHQxa7t2rP5uamCMnWMS/VQLRLX4XxT90Xm6WXyDQv3B7kOnwm84/Tymv99jkjz9v6dNePZjQPyXMhiT9XrM/4cz5AP6f0L9wFhI61XDDPzoNkvDfDZY/YLfNnavptL+gkROFJziwv/pv01wD5Z6/RkcUnhHa0z8ln70cLpqXPwo4hxSeO6u/z3UQBjd8xb+oqIbwe87Bv2g1jwhyioQ/ldNLnWrtt7/MdIuL0uG8P7lEXBr3rXk/UPwl7zqMxD80alXs6GOqPwq4dGkEkag/CLLLEjx/u7/V1auHpOqgPyqC0pIJxLM/3+EBLfrimD8EGPMNBJllv06vtPHMxIA/fuKtm2yviT/tlCTQu2TIv7sVgR4VCF4/kNY8GR/MNj+WELPquZOjP1rISkuum2G/tQa0qxb6pz8Kv/pwRHWhv8Wv788TMao/5v++t8zamL8mHWC+YOqmP/N8vEdv1Kg/j6GtI2i+tr+k/pxgB0q3v5Gc/HxmQrU/ePgPT3YriL/Dq3qnB5S8v/s0+tgyi7S/7KRx+1YYz78Buax0bIexvxvJ/nZ+96M/20p/ru9Kpz/wTrLQSgibP4jAFC5rfsi//xLdLNGkpL/JzQCJgr6zv6xg79JMo6O/4BPHABJktT+wj2e3p7lsv9+/QNli36W/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDM0MzM0NDMycQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTQzNDMzNDQzMnEBYS4CAAAAAAAAANkyksuVO8U/dBYoR+dSpD8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    6,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        -2.55974971083508,
                        -1.524492570858487,
                        0.05354600062039819,
                        -1.3910088144754942,
                        -0.3676355388596842,
                        2.5698814557784626
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    6
                ],
                "values": [
                    -2.55974971083508,
                    -1.524492570858487,
                    0.05354600062039819,
                    -1.3910088144754942,
                    -0.3676355388596842,
                    2.5698814557784626
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 60
    }
}