{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "byteorder": "<",
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "shape": [
                        5,
                        5
                    ],
                    "values": "eJwByAA3/1gnHzKCGe0/ikqlDQ92j79xi6RlQHOjPzRVoFQ57bO/jxQoU3LApT/P6jhGJgqiPw6GZ+tcRe8/leMuPeo9r7+1tcwvZ/u+P3VB73sRLqa/A55NfPCfqb/NDJARdSidP4ijBGe29uw/8jS4I0CUuj96+Lh+zsWGvzduAh9xta4/MnZZhgyRi7/e3POq9UKxv1HZ18CTUPE/r6rz5TQfvr9FgMWvbcSxP6qs8s47VZ2/0NdGxJaToD+FVsWsYUSkP1qFoOQ6gfA/vRdmMA=="
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "strides": [
                    8,
                    40
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.007865978250433153,
                    0.0017189123272199245,
                    0.003447829238179045,
                    0.0010194657889862541,
                    0.0009297682813275186
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    7.836308473997633e-05,
                    5.728478517204394e-05
                ]
            },
            "V0": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "values": "eJxjcJBOzflebM/A0DN34lwde4YH2fzX9tkB6ZpHTM6h9gwOWSs4pB32w+UbPts/aLIFqq9KTvz3fR8Dw4ecG9FXgXRLTVLg531w/TD5fXebpjU72zMkZHzl65Lez6BQ/FpAS2U/3HyYfrh82bY+L1+guK1uub3CfoT9UPNh+mHyB7qLdcq17QFB7E2J"
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            5
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            5,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDAwMjI4MDAwcQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTQwMDIyODAwMHEBYS4yAAAAAAAAAC0RLL9YaOE/dkO/4uez7L/UN0LASbT7vzTNwATZWAPA6YN9/nWlt7+kVHGT/gvaP0D9ttovbPk/Nd1g4ngPxz++2ydXvyrBP/CZPzC7O/S/+P2aAQmNmj+un7fqkNXQv+FR4pwtUPQ/cYg/s5OA4b/ZA5RNeTICQN5UWBuP4fC/WGtPH3Wrtz+LBMQsNY/ePxN/QcWZXuQ/RWyEcdNB9D/Bz0b/Egbuv/IiGRrq3Pc/esUUmYv8zr+W904CLS3kPzuLexiIqwTAHiKApQrwwT/BS81lfGj9P7pxueW/xfW/0hSsPlA5xr/n42O4qBnjP3sFRqcp/Yc/wd8MqfR/979MwQ+nmQ3cP3/UrtMRINA/BvFcOqVA/D/6CxDqBovKv+q0D1hI1e6/lUxjvGWH/D/hBEjUOQkCQJNHOsUJx72/f+NFLg992r86yPooT+HGP4SmlcF1DOq/stnAloKu/T/8cpUvVJryvyAsB/bBu/8/FBG+hZ1w4b9k3M3UtbXmv5OJODPT0/e/e2hWz88F2r8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk2Mzg5MTUycQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5NjM4OTE1MnEBYS5kAAAAAAAAAGb7Y/iqGom/7QYfQXbxxb8D9aXK+HXFv604Ic5kdMY/qIsnuFnK0b97A2mi9hDCP8z53uve1qQ/xlvD/iAYlT8RVK78TVJvP+xIv1R+J7s/WuqIqCm/ib8F2uQtkASlv9uamBNiq6I/eOETkfJph7+1lcbUYObUv6tv4DwxFtS/5KW0pwbRuj85QEVFCMzBvx5u5OoDIbc/+pAWdk8Uvz+N8Yy1gTiPv3vOrTmSD5E/7Ipt/O8rt7+AIq/UY+DJv+fiG0KXf60/Q2Be69b4o7/5V5jds1vGvwaOtk481pa/e+cytrGFyL8vvToHqMnKv2glJZZR2ca/e6X39G2AnD+bHpD+4tSzPyMAKYD6gcI/Be5FtXOFwb9+Ck3ZrlHCv6tXswJwmNE/87ioo2Sjxr/NfpXjmazSv/uoAnn4Np6/5pXxnAhiuz+74FfXWh2Zv2uA3YxMaZy/ususfT42y7/71tp1MMDUv7c+YdwaNdC/HMHhxBh2VL9mVjQ0TZXcP5yXmoLl6F2/N1zmK0GUoz/NJLjRWp+3v7KAu0pF6bG/4epzaMvO27+c0X6+YlPCP4kXciIwQ6Y/NrSVfXxVyT8p3A2qFdKpP1zF9gSsYHu/gubk+a/Iez/eiDJiKi6tv39y3GWLoIu/IuF7/2EjPT8c2mugbOCtv7Ia5x/Nl4w/249GNUNmub+ys6XjEqXLP0ekwY/sFZI/aeF8lIO0rz8qGepfuu6wP8NqsMot/cO/Vyg/8CHJbT8j+oW5E3NxP0qYfn0fV7g/AUTfUmUL2T/JSD5PMpyov8+WdL7TTbc/I/O/Y5Vvwb8KeQdPGbmHPzq0Nd/eVry/9kEEqYpWtj+YUwUThk7KvybjJsEwYr0/4W5YEEgWsj+P8P171rCqvxx5ofcEirg/rB4QIqU9jL9qlNem1+O6v9Q1lt1NqMM/u7SO5HSBxb96xu+TACh7vzUsqiyCjMk/0x6uzIMAtr9W04z//zFnv9VQUaScYcq/mXox0YxFrr+bXbea7tSoP4y7tw5nOoS/kvtZwqYFqb+SLmSpTh64P86xM58Dj4e/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk3ODQzODcycQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5Nzg0Mzg3MnEBYS4CAAAAAAAAAHUIei4er7E/mMjHztVnrL8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    5,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        5.763912734029775,
                        3.1104459391258357,
                        0.6639209246587646,
                        -1.417021916221135,
                        1.5370088075228932
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5
                ],
                "values": [
                    5.763912734029775,
                    3.1104459391258357,
                    0.6639209246587646,
                    -1.417021916221135,
                    1.5370088075228932
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 75
    }
}