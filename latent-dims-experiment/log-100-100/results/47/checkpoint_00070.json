{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "byteorder": "<",
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "shape": [
                        5,
                        5
                    ],
                    "values": "eJwByAA3/xINHEcdX+0/BZ4RRbAxjr8TigmkIgakPy2k4Vz6SLO/4G31wbccpT+As/b/ZCKiP99vin3XPu8/wH7MPqLVrr8dWDsKqmq9P7ROJUMsTqS/R1vP0U9apL/VCP/o43qdP+gp8AX0+uw/f1lon5JguD+eT5BDsDh0v8m1pXSVGK0/1sR7f6kSkL+PZyuUCeSwv2AzOOgWQfE/UqOyhpf4vb93e6lZRhywP4o/yaAUdpy/OdIzt/axnz9q4i5sGjClP+3OwVBwf/A/cz5kuQ=="
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "strides": [
                    8,
                    40
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.009030450933119985,
                    0.0020395628764932274,
                    0.004048303951318752,
                    0.0014022958788963095,
                    0.0011399353470970639
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.00010576499202034029,
                    8.207084195430526e-05
                ]
            },
            "V0": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "values": "eJxjcFjy8HpsqT0DQ6vtkuuG9gwOW15I3LOwZ1BgOTSzLsyeoeGb25ICm/0IeevcXEYXoPhUhRwZeaD4A4f6vjd2DAwqVpdyfu+D64fJr3iRf3GLB5AvbpZ9XG4/g0K0xlZv3f1w82H6YfIBTszLqwOA6s94dxcr7kfYDzUfph8m/2D+l6DLRvYAafBM1Q=="
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkzNDY4MDAwcQJYAwAAAGNwdXEDS/pOdHEEUS6AAl1xAFgKAAAAMTM5MzQ2ODAwMHEBYS76AAAAAAAAAHAcbfa69uE/bAY6OTIMuz8oqExDUpTvv1s956FewfS/YPN+N+SL4r9ah5+JVsEBwEfMKoyLzag/imCnih6Q7L9GazAYr6+tPy/w1pOmNfy/tUOhF3z2Z7+2ajXX9z7AP7oRJcfibrS/BGNaZbCV5j9kBtbYRXPcvwSnnHYabZs/Hn5UkM+6AMB51wbn2QnZPycpia4Hp9c/TlgdZnxstr+p9RvCcLHtv9+YMGoJaaA/FLx7g4lc4L9vA3Foyn3qP5rftRbCc+C/o5Ww4cap4L8k051k25Oyv0oymiUkV+A/QJZSLNLc3r/IisBAOL/lv8YCteDzhte/tRq5h3lw8L+h/VilV1TVv3GW2svkBec/IZTXPolD4z/YLmldBOzaPziUjHDFxdM/SpoMHy4x3b9HkeODA++QvzU+5yGQst0/k+H2y6oq9j9SWQRIX9HhPzSPZJkNR+U/3xwRdmL/6b/D7lYK2uPAP3kp8HDc18o/sPIkIW9btz+viBrqnjrWv2jsr4jY26E/JYZ4nz2Q3z91h6hg9zXYP3jb/zwZrcw/302aKyvQ1b/YkIlkEEabP2UpaYkBLNY/jdj3ZECW3j/bw7H1Q0a9v44L56k1sLU/+l0uV4SR3L8gNub9JnXDv863SmS58Kw/b4SCF1xfu7/UasacjbbWP6MkN8XgrvK/sIoZQRt/+L/kfIZcWzzGvwU0D/dK7JU/LkNGzQdl4j8Kg6ofDfDHP48c1SembNS/livDzrYYxj82rOgIkRHzP+N+lZh14eC/lnQ80jzK0L/bNN5UP9LTP7VN0ohzruC/NQb5pn1Xzb8tNHkAEaDLPyofQTvhfMs/yyvRkekl5b+ejVB292DbPwOzwDHTje2/cfaewNWHuT+vIWeAnRjuv6Wc44qI68a/jb/aHRfRwz94mecy7X3fv0VeKsLc09U/LhLm2se93r+gM/yNMH7hv5DjlA/jDek/MCornWfCwz92rkREV5vwP4x4D3kE4bA/h3qKjwE75D9cvHSqWgrzP0fMfpJpkrq/yb8R3yzW9j9JSp0scga5P56zvt/FPfI/atAMisYK1r8QaUWj1f7BvzHETI9X2t8/wgf5KYEwzj8w0naRV/rWv1UPTTj7x8s/OuPWp8ue6j8Tg3Ro8G7av+rTivdrr7g/k6CCCLTs6D+ZXUQ/LYzXP/F+NiHhPd2/u/hbA5b/wD+FyVmrxyLxvxKXxt7I28E/PqeRcw6E5D+Rz2e26NjoPwkpxHmATtS/F6P2PCQ0178BIpAqmBfXPx6usa1FwZK/U9FJ7UAUzr9FUs4q1nrhP/fb3j3YKMi/bO6FGLfiuT+oKxtClfLsP8wkxFUmqdU/dzentj7V2L+FFlrXrsvsv7H0h0KM2Nw/rhQHJ/cT4z+ne/j+ftzUPxw0ia4Bvsw/6Vhbhdy35z9CLbt/1WbNv94TBOiXKtw/JoFfjtbMbb/VPexPmRXjP7KQsgQWWNu/2bdG+RIYnT9cMQ8EfgqZP32rOfAmEs2/h+W79JI4778eeA5vEZDYv+SUxwBRTdy/1EIcDDiI3b8zso2I1Yzhv0yCv0AVLrw/at0RlkU527/WIU9OYPuRP2R38WLae6G/9bhOA2DI6j/jjXRmd4+7v/F/+VsDe/G/n7eva8/5qr+kC4On1xbfv2Ry89gflOS/Qhgyy4bd7j99X7L2aNbZP7vWnR2kOsa/g2udS0pg6b/EAg1vNswJwBa9pTxzoZ8/+ZQCziy9+z8jgEDcVG/EP67ApaEV2/A/9T7qYYVTzD+aFu7j3ovuP0084gSW6N+/z9NSt28z0j9PDqV6xjbdP5jFNOJ/qu8/lsnIjf7zxj80GR3g/WOyvzp8uS+lGcA/kV81YVBd1L9nJYL2oF/gv+d1bdtRFde/pJpE17kF2D9VLbOVy4bjv1HhACpGOte/261DhcLQ6b96VqNFrUrgPwS/vLpattk/QyrzR+pa1r+1v6ScGgDcP8KlxxDWrtY/ry18vgO/4L/MyQYP927iv+5SN8I70sw/cyls5jJtzz9iQMIJLST2P8klTS3Artu/IL7snxxz4L+z2eVMs1PFP4MbBMMqLd2/ja/m6RPg778qPkv/2Ijpv3r9uL8c8c0/FR814mJL4b9jrdY+EKe7P0dO/tIO1sC/C1hPDYOCxL/IvocdSUjsvwz2uqZnpuQ/J1qXZwT84T/oEgmCFAjgP5SZXil4gry/9N9JNjiE0j+JhhSHC2XMP0gwIHrjqe4/quIzgfeB3L9cEMpuEWaVv+LdtkXWsuW/OuvilnzPwr+lJSo4opffvwKcC92jtOC/XwenNcPi2D+AZs2IzsK/PxhinGbbFOC/r5+bfRU837/4P4c/qz/cP4bm59I85My/7W1NGnPi5T9cbtofXJnkv9D6xyVV59s/j6feJGKE6D858Nr8fpvgvwilseuwTtK/qQyUuA0D0j+d0V3RMe3QP08S0wp4/bQ/LVVPgH2v2L+QijbxPN/CvxBEv811CeA/bDdnlhYqxj+r8+ZhnOLnP1Yue0RS6eQ/Qgk66c1/tD9oVfQyhmjNPyCUnqo9vsa/ds5LlrwNvb+w2qOl6hDiP7Cvr/Ht6OQ/Cs0u9KP17j+I3OkH4JPev0X3kwmibNo/WNt2l8bLvD/KO2z6DAvePwiJDOmXetc/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            5
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            5,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkzOTA0MjU2cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5MzkwNDI1NnEBYS4yAAAAAAAAAFUOVA6MdeM/08K3Vtlx8b/MnVVmoOD7v9EraTEdTAPAUylvjhNsvb9fX4NhGsvZP7n5elRX5Pg/EhM76SPkwz8hhjCuiBieP0Uh+WUrEPS/7LPONKO0kj+h1lL6t5PRv50M1aYvAPI/xu1QXtes4L+uTnxWfxICQOmw4mv/3vC/ml7zV5HxwD9JIxHuoE/cP77ug2Y/2OQ/MeH4qfUH8D/fDm1VGb3rvxRyhf+yE/c/N2AbWi4Azr9WQC26ulHlP7yTLi6vdQTAhoplvKPayz+ozhhitoj9P6bUrO+SFfa/Zome465Htb8mYOS+blDgPyRoONW0NqA/MFHqzo7T978324h9MwjcPzyyerCPEck/SEmb7wyb+z/K5+Vug/rRv9a3q2Xe2u2/e7R0hMUL/T/UxFqzYNUBQC8qQGo5A7a/HsRcwz9l2792S5OnYP7KP2N1hl5X9Oq/bXlhO/BW/T9/rtS3mCbzv00x56LVvv8/KjSLUloF4r8IoT8CtWDmv86BXG7kmPi/ruxbB5Sb2b8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5MDEwMDE2cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM4OTAxMDAxNnEBYS5kAAAAAAAAAPPXkhJdcIa/0NwwgCNQxr/pSwF7XNPGv3hMHTw/+sQ//cEK/Zw40r8qTtHYz/nBPxo6bb9G8KQ/xlQZAc8Piz89UafQZ92ZP3XRAki1Nrk/pVS6t/Vpmz+BH9P4K66mv4AJ+4IdPKQ/5Qc1aGATnb+Qc55zKhXUv6ZMOJkUr9O/oZwbsvbevT/idb2t+ibBv3UmR/tW3rc/C5UvjoDRvz/aRkI+Qvtxv+9iiKfvfmI/tyJA9k7ltr+LxP6rQt/Jv7de1rVLtLA/U7pILz/0rL+Q/UHRF1HFvwz78hcRS34/l3uhZ/fmyL8pgvwbYivKvzWSLRJHkMa/NIlbflhwjT8350u0naixP84tlsCD+cI/HFnIhkuhxL9sOOzOTcG+v5EKPXjdC9E/7tfBp97Jxr+rWfFg7uvRvx/pHZPmpZe/NPHooASIuj/OCc4jJamkv6VM72dieK2/vKOSbGpuyL+sKzdJt+/Uv3u0MElD1dC/4WblrEKipz/lkL0YZjPaPztqgbJKvly/eRQ7f976sT+0xANOnEe2vx8fFUyM3LC/PIZpjho8278/+UNbkAzCP6JTPdBmvag/r2R5qaqPxj8F7y3+QkmnP+tXi2CMsW2/ECYazTsbjj9L5B8dJcemv4vc0e8kHz0/fAcr05xKd79CGqH1KsGqvyZM+b8jppa/0D5Y1m3nuL+EH/5vGiTEPxYGh4KKeYE/zDpcNkRtoj/ltx5GO8SvP2pMpqV6g8S/Qjp6AmmiZT9mJ4h9nI2VP3OidoUV+70/4oqkqKPe2D+cXrkelFadv+G4CWkphLU/iZre7nhfw7/GlZ5E62Vav+UizXBkTbu/VcujCDRPtj/l8uKgdqvJv3TvBUUQkr0/IIzyneDKsD+L7XYy2xmtv4PYCvGYorw/hp7r7DHejL/B7WXkUFO7v4G3H5yDoMM/g25cN40sxb8/L2s61dx2v78DkC5668U/qPPH4J91wr+1+ffAPauWP+ATu4exR8m/R2PQnYAwrL/G+eNzzUOiP/szCg/hEJK/v5wsfIYkrL+OUzUJDAO3P0q+10MrdY6/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg3NTkwNTYwcQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM4NzU5MDU2MHEBYS4CAAAAAAAAALe1dUZPbLI/eTrPOAmBrr8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    5,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        5.745506839798551,
                        3.1089493732808,
                        0.6979721172113692,
                        -1.4555309194365122,
                        1.5280350424525466
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5
                ],
                "values": [
                    5.745506839798551,
                    3.1089493732808,
                    0.6979721172113692,
                    -1.4555309194365122,
                    1.5280350424525466
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 70
    }
}