{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "byteorder": "<",
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "shape": [
                        5,
                        5
                    ],
                    "values": "eJwByAA3/76Ct0j1zu4/30EbSylcl787IlrPoMCiPzo2hmDXvaa/jOCAtO2ooD9JL+iY9uaZPxEi+GYorO4/tf4a6ckVXz90/1KpVqWlP6dyhtA2Jpy/JeW9ihlmkL+PlhwF+wk6P96npg2k0+8/FDkGO+86hb+6DU40bkuEv+M1ix1Ig5g/o00oWUVGoL8SCbfDCROXv7ph2S+sWfA/p+yCM1JOuL+klRXjIC+mP0cgqgklJ5C/adMm5C3jZj9OWTwFDTmyP5SMSnAud/A/aNVe+Q=="
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "strides": [
                    8,
                    40
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.04292656573198621,
                    0.02576215900448377,
                    0.048567189462341495,
                    0.015448697361671567,
                    0.021588268519606314
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.005277613969235972,
                    0.0021018509509309526
                ]
            },
            "V0": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "values": "eJxjuHDo//eC+fYMDBN7t7KH72cQmlXpMa97P0PDx0kb3fP2MwicMK/hqtgPly/JmRgh2GLP4LFG8M2XanuGBcvbUnOC9jOseLDh+MkMe7h+qHzD7NStO75MtWdoCDlxc5L1fobzIg9tGRvt4ebD9MPko3a/nJ1Sb88g8OoGt1Icwn6Y+TD9MPmcv5FbSyrtARzjWTE="
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg4NzU4ODMycQJYAwAAAGNwdXEDS/pOdHEEUS6AAl1xAFgKAAAAMTM4ODc1ODgzMnEBYS76AAAAAAAAALvc0v5jQOU/EyOkjbLPpb+kwYHmzhPyvxtT+nT/CfC/zvE7JIT8yr/OohPmWz77v8DVQMH2X9C/K2UK3NZh37/lJUVc/KnfP5ZZBsVOz/i/7VupPIWgwL+ZREX3qiOxP1RK7K+4+rW/nIVnqIky5D/k1L9ZkDHQvyjy60oSkKk/KV+O8NHe+r/nqphEBBbZP15vjPEIQNk/G1lXmGfKd78tPspYo+b3v+dIcFw2DLY/1Cg72iLx4L9PXek1NknZP0cKgfzukuG/i6+2Krga5L+0vibgwiC1Px6txCstx+I/wcK2h/Ik4b/iUzVQQ3jbv/VHdsVM+s+/wYqF42Es4b+j0KHYpDHTv95AutCIMdo/yAEhpi5fxj+qoNU03IzeP0KVogoPZtQ/rSjo2tpS4L8rdn2yy1OcPyl+ePRc7tY/zqjr/CYH+D+56jgWWhfZP2lQ75N55+0/WYeDHTEQ5r/5C7GXhrDDPzwaoPxmVNc/LKyysr8GwD+0T4hC9+ngvzAs6rzXy7c/gbLVBCfo2D8UVWOngQHbP2EfQ+PhFdA/pD+ZcolQ4L+ozK4HGMCoP0wYqlECGNQ/jzGgnpVc3D+H/3BahRLBv8yXxm/2zaI/8D/j1WbQ2782EEmOqvq1vyrap4Da664/bJ1hjZczzb9fYd4tRWWlP1lgd8LObPS/8ZnwxXK+8r+aj3bA9UnAv5uuYRgaMnC/Lgo/DrTC4j/JuhKiHS7OP8yrxs+EsNK/NNxGwchAfj8OZEi6X1LnP+GVRH6H8OC/K8pGFEytt7+UfzcJV4XIP6HSERgpzNu/KltHvkFWwL9YO19fd6LRPxJhtkyYU9A/5IKV2aro4L+RTpjXMTfUPx3DPu6Rauq/nHNkf9UB1T/dHthYt0jsvzTOpyfy0sG/5+9wR3j7zD+ZtkdXKc3dv+aRj5mbMdk/HUMLJZNq2r+8J3V4GIPiv3zMvABpzuc/iIY2Gs4P2b/ybtxpqmLZP5TsmvSF2e8/dtwBP0c7uT8Rq1qdM8z1P3LIp5axWuE/gRiXA/9G5T9Z/oSFOGXmv8ioW2gY7+o/11bJTwMZ17/QV2tzzQrQvyPxZD6/Nd0/MD5djpd/zz9HDSLJWC3Sv9q4Hv4ISI0/NRiT3eWI6T9nOAFUT0Plv3uJoeMkm7Q/MyMRqKet4T970ArTIe/WP5oyq43Fj9u/K3buCkJAiL+ZbC0af0Hwv674B7eT+74/QUcaTKMI2D/pRfjNJznhP76zQczyQdq/Cs2gsOcYwr+Scl/AJcPOP8gVr/2jYJG/c1jqYGq5zL+55CMvUHvdP6GrG5Rrv8u/M5wfeV+Ssz8naqWfoMzhP712hDmoOc0/mLZ4YEqA1r889lcYqyntv8Ou3VIHetI/IQAv83sk0T/jKW+2vyPVP23ysfzoRs4/NUpNP3pp3T8x547sbEPTvxFOnuXbo9U/0EY1ZQQ9YL8TEPlUaqLiP8VANMBBttq/d4VSODSQub8Z4/OPEB6qv5ryiyyy4Me/xBVzxkKrAMAot1mPZarXvy1PnXBSIr+/9Rp39O5s0r+9qkWkCIHTv/IPUF+R078/SqrfqWyg2r+yLDKxk66iP3g5jiynt8W/+8nmIW7A6z+hpcAkWm+9vwokYcdbjeW/f6d2HT6Alb+GVsl1BrvVv4we6cyvlMy/aXJkVzRE7T8n045qfLzOPwX6h/Kj+72/rVxatKvf5r9KISNUP9DGPyBcccOq0L2/qz3++lwx3z/gvgYAv67KP+sDzzWq4/Q/ZTdjJoSXtD+r+3pheGbjP6BFgz5n/OO//rRNAmjTzT+RmCnTYs/IP+waqpcWHew/M1CeV3Qfzz/g3wyfdMjDP8unb4iJSoW/l6JdUEFu3L+l5bz9NiDcvwj6PywMNsy/+8OxwSdg2j+88KvS7YXivx01wl8uhba/7OSSAOJX3b/DFrxNTmDePzeJz9yFR8o/v957hpfN0r8A8QPtCynaP9528m4+hNk/qPVH2jaQ4r8jNh/IY5nWv6+MH+ebDsg/uk799WGjxj9a5tbpM/HtP2StjZRPBeC/4/DXW+Ed0r9UrHtbUx+KP+kL9N1B0t2/dFh3xcuU8L/uqImsWZXjvxmffADyutA/8x1hYWub4r8wykgwAwbEP2V0WUQoE8u/G6OrXCWj2r996F8Ou4Hov0gc4AiU6uI/l88AEzIT2j+FzSVUn5jaPxGdlMYUNbM/qvoPqCJqwz/+Mv3dhpHQP8oHrVFAhOc/QzhQ3biczb8AQ2O8Fq3PP1UGAMG2r+K/BuCWCzXUkj/TPTI9oBi8v2Zw8DcXY9S/yiqfh2Rd3z9I/g1MGOSdv+ViFu2sJd+/sN3UMflt5r/qRo0CKpbTP1Vhw8UvCKs/HJ1MzK/t4D+hSQAsRF3Uv3TdFdM+0tE//n37QSXH4j9q3gGHzFrjv+56yvA0WtS/VOOUVQLPyj9dtDFEsknbP/POCnkvTqO/2Pqgdp6z379IkaSvete6v2bq+gMi290/0jQzkXQfrD/8DZjAkCLoP4slEsB8DeM/YEEQyRxWrj9KqteE1drSPxhdjeSvp8y/gtA2EeF2xD9ZOpvDHJLeP9N+BKcO7t0/6P6nrpVA4T+H5UBUojjYvwqJlN//w9w/zrYy/sJ1gL+QDZL4Rb7fPxrlrsFNL9c/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            5
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            5,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkzOTY1NTA0cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5Mzk2NTUwNHEBYS4yAAAAAAAAALeazl82TuU/3CLdl2cB7L+18FDQoW/4v9a+yn/D1AHAH5xMCmqu17+Z5gh8URffP/bOL5SiI/s/x809CdEmxz+M7vXBo8zEP274+PtPUvS/rVopue0QtD/baBGiIabQv4glZdfpDvQ/0kjHZGYH4b9f6WoLuxMBQLYA+oa2wfO/HLbiZEwpyD+cxgM/sefOP6RIGY8WptY/n0JcjzcP3j/rZkhSq37ov9X0n0rPgvA/rxW/w5lh0L87L7Z6U2rqP7Md0dBmhQPANkHptKL6tz/D1vVQacz8PxUPoD6KMfW/3FDqmaNjlD8jvgfSzyzDP0yMwBTe/r6/90aPO5b19b9LoMED4CXkPzAwr80agdg/OYzoIT5Y9z9x96hCQU3Zv60O6IfMz+u/0x6k5VlJ+z/X4+dL1Kn/P6p908kO/8q/tcwCdUXh079oVjIsML7XP6dD+MJr8+y/ZseEiLl09j9LLUFFFPfvv24I0HeWQPw/ztsR2a9o179ecIXDMYPWv5YmSo4iivq/OOCUN6YC0L8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg4ODcwOTEycQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM4ODg3MDkxMnEBYS5kAAAAAAAAAM2ZAHEx3Kc//cxv12cGw78shXS5mri0v9FeDCT54rw/GiIvpP7T0L917ExLZyewPxT+NOMW2W8/53HmqdXRqD9QeUMuh+DBP5cHH9ef5dI/LZ+ZdT+rxD85TW2DucmQv74UUWrxI7Q/9VCqzOQxrT/CMNRtqRjQv1RbMAVuKtC/608xrpv5vj9aCBXfjbPOv9nokbBFQLE/FElUuSWUtz8AfEwbyIzFPzZFx7KP6Zq/jQYlhwKUeL/vWkFGiuXGv2ZNFdBDQsQ/73QvkmqZt785ETr39HPQv/dbkpjMJ8w/3Odo2Thhwr8h8MdoNQevvy3/X+kJuMG//SDsVGqvpr/KYov/kZJkPzB2CvWkwL8/XCRWBBPQub+9X81hqA7Lv4ntdB53Mc4/kG2bwsol0L/bf7AmZLXNvwtbIPbST6u/wqa5cLRKuz91DRzlA6WkP/XGQOvSoHm/44eiOJsYoj9wTUmJfUvTv9RMAfMEZ86/lzpdoX/boD82mEeoi+awPwgqaAp5naq/o4mTiighuT9ia+qKC/atv/nj9AVjnLG/IF7s0hW70r/IIMC/oWi6P8Bt1+dwYKY/XgoO3oousz+edqQPOJGiP9hrTdOMXMA/PPNMUDJzjr/ls/ET5qzEv0qSC5w+z80/80WlfGTIpz/x/RFuBsGov1awPrR5jba/Fwiu5MY+u7/joxznTZ7EP3tC6E0smoG/hmBvAkjAlz95qexvtb6wP0VObgiTy8W/7r8MEyyPwL+k9bPy9jmZv7HosKLJo74/upw9cnLD0j+zLlCg3/SrP7mZoiJfJnS/bX8ZMubexL8z5urxkNmqP7jKUy7HXLi/OQfvyMuTvj+QlDFV6dTHvylRXI3CX8A/obkngUzKfL8gDNDqkLmqv0HZFKUQgrE/B3Tu9Dx3sb8aOjZPxAqtv2JYC2z9j7U/Sx3J2E/Mvr99OaHWDk2RP1OYMM1qsrU/a7N2ZPpaxL9bDGm2eZG6P1Tzbv0b7cO/aS/Jl1TZrb8/nolKKR6rv/3b4Zo68qq/B+2pLefOfD+pzhGWkZezP8BWtnk9FaG/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg4NjQ0MzUycQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM4ODY0NDM1MnEBYS4CAAAAAAAAADfYGbWwmqc/Fb6RBi/4rL8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    5,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        5.9816510001388306,
                        2.8837526415576633,
                        1.1603504895352514,
                        -1.951288288752186,
                        1.6353076379671847
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5
                ],
                "values": [
                    5.9816510001388306,
                    2.8837526415576633,
                    1.1603504895352514,
                    -1.951288288752186,
                    1.6353076379671847
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 35
    }
}