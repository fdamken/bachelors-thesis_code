{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "byteorder": "<",
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "shape": [
                        5,
                        5
                    ],
                    "values": "eJwByAA3/7T2pmfR++4/5/8OYEKrnb9qGQhD3ouYP4Yg0ZqHNZ+/OHafSWe1qT8bia9GyOCOP/1AA6m2t+0/MvrERjyopL+wtJFMzTmMPzBUfZ1qHZO/sutdJ//2i79/wR/29rygvyfVx1K/Xe4/rHWEcKxwob9iK99TxsdYvyPdo6cjMIw/nIo1kGgNqb+f5zCmCauZv8OWyX2G/e8/pV+4YSBHub+BZwfZIGOkP7MXSklysmA/ph6QEpaKkz8WD0jqcxCzP0uBstDRX/A/DTZn0g=="
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "strides": [
                    8,
                    40
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.20698523744945424,
                    0.1297597777286688,
                    0.2025361976952617,
                    0.05910139214223844,
                    0.09918377509139775
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.0023044500936903207,
                    0.0011714631434902004
                ]
            },
            "V0": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "values": "eJxjMLAPTJh40J5hV94qVY159g1HFEoM/FfsZ/BqdD4dP3k/Q29wddbSlfth8gtkJ8jePLLXnsEgbZ/YKi97humBzRd+L7Q/YC1yhYl3HUI/VL5jh2fjndbNQPUZQTd4K/c7MB6uY4yYaw83H6ofJs+Q2tbrumW9PYOKxt5J8/rg9sPMh+uHyiv0WX/ZoX/UHgCxjlQR"
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            5
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            5,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg3ODI5Mzc2cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM4NzgyOTM3NnEBYS4yAAAAAAAAAEfD2djCWdo/vG9vec9R6b+/FXP/Yhb3v6mf8E1MpwDAOvBZhffM4L+rztlTdVjkP/hpmp8CG/o/hLflqszT2j8G1RGlDPvVP9K9sujkSOu/sLhjlygw3D8pKBg/ReLYv/BO3VDX/fE/AE6ngDnz2L9meLW/5QgAQGxLt8A2K/S/gkebQarAr7/E9UGhtx+/v4IJ1Yl/29A/G8Jj2que5T/Z8CZm2Gnjv875ZhMcFeQ/2sSa7EJx1b/dLJAocuHoP9/sGuQ3VgLAY1QrRy5uuD/xrjXUU3n6P3ft9OcW8/G/RrL15aE8xb95MaK9hx2hPy6Zox1iPs6/LaezwAFS8b9JVAtBnwynP6RMeBNzD+E/86FBQ+g39j9Cbyz07bzEvxwzyag/U+q/MOci5cGB+T+OBYuduEf8Pzkk2r0Chti/ef+O6GNAxb960SwkGxzUP7QI3HbQQem/McQT3yK57z9IWzKP8//ov3oAmt0vzPo/BH8u4GtI0b88U/UJjDDNvy7+OZ6rD/a/KhvksIbJuL8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkzODg3MDQwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5Mzg4NzA0MHEBYS5kAAAAAAAAAGCtvh4kvKk/ddbn1oT2wL/RYKjQPxXDv287BMpumr0/jsaHesdUz7/AY2VEYiSQPzuqyOew27u/EDMVOuM/vD+nijrlyOHAPzldtCchj9M/uogTE8qAyz9IzgEjFiG+v5g1qCDbH7Q/yIUsICDDtD+P9zsMFpDQvw+elDu1/8K/7SChYbvhuz+TJRZC0A7Nv1NErJ80Zqo/yzGzgBaRsz+DIxaG6O3MPzvlFJszR46/oH3BnGqDqD+2bES9EZnGv77iyV9OeMA/0+r3OVh5tb/PXEZjr9LQvwgCiZVths8/G8yKWhrvwL/clYEoQuagP5aKxy9RMcC/0vv6iXG8p794oMlBnaivv9o1pVu2nbo/Ins58NARv7/M41lOYazDv0LzKk6CWM8/xJsED8Jx0L9ABq7IJxzOv5A9ftYKFLC/I3IaUGTSuj8tqi6LK1yXPxAU/DAll6O/mQauieFInD/8A/wMxS3SvyDOSKiaYs6/0slMVCejtD8ZAdEuWUa4P8g1kVw9f66/27NuKniWvT+9e6mInnmjvzlh78L4d7O/aB3+uot1x79R3SOHhHG2P4Y4eOomqKM/MnD3ie3Itz9zM2E+OJ+XP35+wH3hI8Y/E24oVrYDeb9+tGgQIz3Ev+C8j/+0j9I/x3NP3W07wT/qdJEz9xmjvzoxnG3uB7+/9GEeYK3Jv785Z0fM7R3AP8aKqXF3S4m/tP36AFaonD9+p76MndCyPxwEkABndsa/SRJtvlapub87CZUEY2yrv9mX0T8oGbU/MNmCsdM20j8d167XwLa7P6oDyLmmsZy/AbZbyo6ww78dPeBZz16fPwV4/7k5N7m/kJu2W5zvxT+cVf905BnHvxVppn1z88A/d8lEuB/mr7+By/z4EXmsv96NLdqOhbE/K+bhWswroL/dGYCEi06nv8PMxhI3frI/6Hv5aeXeub+7xpj9YGttv3a8d4CsQKI/3TFLfP7GvL86lSaJ6NG+P90hkiSfYb+/Vh1M+7SisL8kXGI2DuSzv3KAxqPDXL2/Go3ObLoYpT+1XuBwOZuwPxN+xmKSEq+/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk3OTk3ODg4cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5Nzk5Nzg4OHEBYS4CAAAAAAAAAJvfGJp6lJw/GWC76EE5qr8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    5,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        6.099815641574688,
                        1.9136767113239346,
                        0.8338793564446495,
                        -2.610590581221217,
                        1.5347983033056818
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5
                ],
                "values": [
                    6.099815641574688,
                    1.9136767113239346,
                    0.8338793564446495,
                    -2.610590581221217,
                    1.5347983033056818
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 20
    }
}