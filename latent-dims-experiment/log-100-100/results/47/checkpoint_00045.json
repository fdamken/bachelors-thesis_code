{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "byteorder": "<",
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "shape": [
                        5,
                        5
                    ],
                    "values": "eJwByAA3/6+oxajWau4/omNEbY3ikr99LY19hJOcP1JkSzaAOqm/RU6F6CVBoD/Q0z/t6DqjP5P+1hek2e4/DiIZbv/cbb/rWxmszTmrP1erl0/g95q/Mkk0+Xwmgb95E2hvD9CFPyUfp9Lgke8/Hn8j9FJybz8Hx53sPrRZvzMPqVZoU6U/5lpOjV3un780ET6mY8yWvxGMVO0NfvA/z8dNVcySub8f/jKtk7+kPzjgWsARgJK/18sT74ZOfD/nB0Vr4nmwP0C4kMVggPA/IbFl3g=="
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "strides": [
                    8,
                    40
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.019792748572310122,
                    0.011346662959105728,
                    0.0335569540567597,
                    0.0068289496344962125,
                    0.0054551603816854295
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.0005881918824161403,
                    0.00039868622916861793
                ]
            },
            "V0": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "values": "eJxjYBCz57TptGdo6LHlPOppz2CQ3azQFrGfgeFud98bS3uGByu6D4qF7IfLn5j5z9SgxJ7hQ++s8L+hQH0LFO1POQLVNxVtSFTYD9cPlW/YpOEdaV1lz7Dg3x2Dq777Gb7sCkn/H2gPNx+mHyZ/7Pbl6XlF9gwTeBsET3jvh9sPMx+mHybPsDlBuSXKHgB2WlNL"
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            5
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            5,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0NjM1OTY4cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5NDYzNTk2OHEBYS4yAAAAAAAAACEDGIqJEuU/Ntd1yHEE7r+Vj3fnqWn5vxRLzuFUKALAClNbOBELxr8Z7ZuTXbPXPyy8Mi5fD/s/hwizxVeAxT/1zA74QXexP4QYu17vifO/ysifYG8gtj/c9kzrgtXQv/oGg+vs8fA/8NvzjEE/479clMduMt4BQISKJiUjj/K/U7LMnIW31T8S+Y+8KQDVP8Cf3r1nrOw/A9lcptw85T/pGS1w9ajsvw0rylcJXPE/8MdFZXAn0b/iM8oSQPXnP4wh167xsgPANfiwgBZ8yD/nBfgynSz9P7vGuypJwfS/YYyNJE+wvj9JgY+YNCTIP2ZDFvUt5pm/GcrdDton9r9mByYWAXrlPwb//7t6Vu4/50VDsm6q+j85n6YL2DravyAx+PTuKe2/5gtdf8hD/T+RWP2GaLAAQKo/NfHuPMy/jtQzEl+z2r9ZOuLndcvXP2xYDVEVYeu/4DqIlMEE+T/h4DFb2iXxv/TVdselz/0/XppmmpMD47/3RoC9Wv3cv2v6hEkecvq/bYIgXWEz0r8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkyNDI1ODI0cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5MjQyNTgyNHEBYS5kAAAAAAAAAIRAH+BcB5w/KZp2MlU9xL8a7P0yKw7Hvw6E1DVUYMA/9EBbz2lt0b/NNJU5v0qrP951fhMNzYk/AdVIdB1CpD+cwH11fxSUPwLo3qiWAs0/KT7bexWIrj+hMuQRio6dP1JeNNINW7E/HrYGC6bpXb9FPDwOZj/Rv3Sd+VDFydG/86LKEYZQwD9lJ9l/XGfAv/K+MYIBrLM/c2m989ufuz+Y4NHyYM61Pw87Q7heS6m/Fi9qa+QDsb+/iflGQ87DvzowLNsSEMM/7ZgWyYabvb+5ct7qQlrOvxeZ4fi0c8E/VjIoiXRiyL/8nhsocuW8v4R/alCiBcO/bJAfft+eob/41oVsRy+jPx7UdKeREcE/sB/Dtiktur87T//IPOy7v++XO2C5OdA/dpHYIhYx0L9FPw+96XHPvxJoF1rMPpi/3VxYFqVnwz/gME7tOWS8P6UX65Y0wJq/FqNJxDjwtr9DURw+7ObTv8/0YG2W5dC/J+vBeHX7qj8uslshcO3GPwlE8mewzaG/hLCRFAnauz9SVK4oPf2rv6u3SvMZca6/PFJw9tQF2L+GqEaoK3G6P1yX8lhLM6s/Y8BhFBqGtz+BuZHhPsifP/fOioUGkme/wbX15EsBir9hR15i1IOyv/PpT0uIZI+/5LwOsWQqfj+kj4K8JAOnv4LklRjiPpW/+Ce6zRYju788VC+1UgPGP1QI8WTz3I2/emmFZbzSh79wlWLtirSsP6/yGXN/U8W/yI81og8Uor/1XfCM0xSLv3+e/olz6ck/g7ESR+sV1j+kBOp5mmWgv96fB5bqt5Y/6zApKclTxb9X4JJGG+CAP37/iW34ebO/8aX3xpiCsT/3RoD2TTnHvw4PozfO+8I/Y/hoGXrEmj9VOnHev4uvv9kk3IUS97s/RmRh6DqQtL/Eltr7dzC3v2N5t4LeusE/KlOEFnqhv78128JR/YSQP2SNnDDtZL8/DOdK8uEwwb8vME5sB8e2Px2ge0RNpcm/BC+YR0sRqb/rBaaR7dikv47KBM8SnzQ/TWGkdqhXor80dRPQtpizPxSAbzjkFJu/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk1MzUxNjQ4cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5NTM1MTY0OHEBYS4CAAAAAAAAAB4lLlFqdqw/CBUpguvfsL8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    5,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        5.95350954610634,
                        2.8755444427815675,
                        0.9729900860987931,
                        -1.8060860937619923,
                        1.5753501879309295
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5
                ],
                "values": [
                    5.95350954610634,
                    2.8755444427815675,
                    0.9729900860987931,
                    -1.8060860937619923,
                    1.5753501879309295
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 45
    }
}