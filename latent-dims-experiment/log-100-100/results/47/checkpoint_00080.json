{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "byteorder": "<",
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "shape": [
                        5,
                        5
                    ],
                    "values": "eJwByAA3/3pRgwN6FO0/9J0uvfh/j79QyHrvqeOjP1qfAajHULS/RrEUnmr6pT/Ji8skKjSoPw3oZe5SR+8/vsZUD1Wjr79gWx9os7LAPzMsPYotlqi/6ob99wlyoL///aElexCcPy8M3o2K9uw/PDO5Z1LPvj+NkuGLhvSPvz2TqzcXbLE/TKWrq0+XiL/r6dr/2qqxv+drcvFqaPE/FUFTRSrhvr8hF4kjEHuwP6895Ms4iJ2/e7ATrDPWoD8L2ABOoYqhP1UnRMERg/A/8LlmuA=="
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "strides": [
                    8,
                    40
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.007611207298230179,
                    0.0015448455733513002,
                    0.0031096382310938945,
                    0.0010837783833821247,
                    0.0008977891300706753
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    8.212594364704273e-05,
                    7.229630078808213e-05
                ]
            },
            "V0": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "values": "eJxjaNjwvndVkT0DQ9ZjbUste4YNvUnBNg72DAqB6wsqg4HiFYzfWx32w+UZfpZ4HjYH0hv2K7YfsWNgYJDwentjHwNDQ8izjF12cP0w+S97YuJaHIHmHdAr7pDcz2Bw1PbzYcX9CPOh+mHyHnqB31w8geKT5p5xlt+PsB9qPkw/TN7h0deD5er2AG6+Swk="
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            5
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            5,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg3MjQxNjY0cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM4NzI0MTY2NHEBYS4yAAAAAAAAAIPUhNkny+E/I6rvkr6U67+8N1G07E/8v9oTqmkXgAPA/CInRKaStL+EVfrO1i/aP4un1SnOpPk/x2xi342xxT9vuO3lKKazP3octbjfw/S/o+6MInzEq7/N6Bm9QT7Jv4pNwnPkCfU/E6SwMpVJ3r+LDJBD7D4CQKk+Hn2y4/C/UvL0ibwKuD8BWcd/TC/gPzSuprpBqeM/uNNt7Uuk+D+Ci38jpVDsv4/CLwbvtvc/TSeaA2oqyr98QyzN38vkPw1vWPT/+ATAgoKhV21PwD8bzTBsLdv9P/zpLy+8Fva/Ps32crG0xb8UATvPsNHlP/tnh4kA42U/PSXkeTK9979RP67946LbP0qMpr/TatA/MsC6xKjG/D+v9lAGfZvIv5ePxN1+Le+/LSPUCJqm/D9+OuAa3i4CQIsQEv0Fdr+/jqOjC64a2r+Xd8xFSAfEPzhqqhtnuuu/Jd2MpT0q/j/bPuWTl17zv0BIYMmfLP8/+AETHj0H47/DL6ZVf1HnvyyaV8K4ove/U6AY3oYU278="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkzNDY0ODk2cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5MzQ2NDg5NnEBYS5kAAAAAAAAAIb40YAJfJG/+rAr953exb8jxE3yhWPCvxtPEOxjCMc/b+64n4SE0b8IwMqtmIbBP2njQ6tCg6Y/zPFRdRdZjD+W3zoVaxyQvwk4yrZK+bA/6Yvz3HaSjz8LvFBBIktmP9c7l3YUXqM/MY2VJbx5Yb8uTxvnOzzVv0yLDmhkaNS/6XdhyJHqtj8cTuqLt1nBvzv3YaWO+7Y/toDFI8bvvj8AMmNKVxOLv1L0Fj/bHYU/ZI5NZzf7tL8wjiP/3FTKv/hrb0YXm6w/slal5DfGor8Y6nikMrbHv6RLnBzXfYM/DuFfl7dyyL8pUkWfvAbJv/F2z7CLR8e/Cu2gHTLaoD/BxLTMz8y0P7DHTSYsa8I/PvNUru8cvr8gFx+ImCHDv3YaFTfn3dE/3/IksRzkxb+IAisYuO7Sv4aYiHjD/Zu/m+oLb4l0tT9pq/sv/fygvyllnwFaj5S/VpJ8r7Fhyr8/7fKuo7bUv3SfX8QHT9C/LXhQb4sOmz+Hbq8KA+fePxnLoHDulz+/m3vF4iZ/oT8PZ6Fc5fe3v0IhURJKNbK/Rpvmruvf2r+kzMjB0n3CPxry7objKKQ/3M3KbGVWzT+PtGBopZKqP6+cOHb6qXi/7iJwdyajfz/O6nkWjTmvv7E5txfRg3G/vwxekgrmfD+tMRFGIeSxv3twUMOL3HM/g4k+wbBOub+iCuuIkV/QP2CkO+pRp2Y/1N4jaGFuqz85ssav9zixP0qkHUZB2MO/9bTMEDgYZb9RL0RnvjNxv5ZsAyjom8E/Yu0GEqtz2D/3iz58xYuqv+RTAk2Pk7U/jJaF5eZywb8RC/BiQemIv3uKbDlMory/WDzArO5luj8gBa05zHzKv/ydMJLHJr0/aIRqMJfMsj8e+0kBDhWqv6J0Gk9SXLg/j7gdt9fXgD8NGB5Fkqi6vzTpLXqBh8M/DKD05+Haxb8oHq10uFShv+RujdNgVso/njClgvjmlb/fDefyD4EcP0/oybzupsm/kqH2A3DWrr9ZVVqa59ypP4745ToqkIS//mCoPPvxrL9KvlG2f+u4PxLkyjmKlGu/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0NzcwNzg0cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5NDc3MDc4NHEBYS4CAAAAAAAAAEH2KNyUirE/FE2EvCPUq78="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    5,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        5.781408780109322,
                        3.109174268462023,
                        0.6458305700328845,
                        -1.392869191503547,
                        1.5373146960196247
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5
                ],
                "values": [
                    5.781408780109322,
                    3.109174268462023,
                    0.6458305700328845,
                    -1.392869191503547,
                    1.5373146960196247
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 80
    }
}