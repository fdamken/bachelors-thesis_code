{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "byteorder": "<",
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "shape": [
                        5,
                        5
                    ],
                    "values": "eJwByAA3/0tBVZ/ByO0/lQVU/wcdkL8boIpy95miP76h3aZpX7C/ISgZJO1uoz+xoKsVH4mnP9LAdax2C+8/7A+QDph9k787fsv8tSCyP3+VK83+JaG/XOSvRRzwkb+sRlK6RNWMPx+0OX5bMe8/GkBCDOVxlT/SU7y6SU9lP6ZOltp8Ja4/IRKm2S25k7+p83lTm4Gkv4dxVf2OyfA/TUmhahUivb/N4jKQPYWqP+Q9ApNtL5a/YicRp87Mfz/KFBWrLDGwP1nD6sWbfPA/+JljDQ=="
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "strides": [
                    8,
                    40
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.01266527033879799,
                    0.003097448425761397,
                    0.008425733392036061,
                    0.0022268799659144575,
                    0.0015919403007454
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.0004735055326236761,
                    0.0003632251274449345
                ]
            },
            "V0": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "values": "eJxjWHDE2pq32p6BwfVst5+FPYPDf6+FZ53sGRLO7pLiCrdnaPDrPqZotR8uf8CyeqFZAJAOEwk5qQ8UV0oN6OQDqlvhxFOmsh+uHybfZNv1RSYEaO4koU0z1PYzHDgqavBLZz/cfJh+mPwHqfn8Z0KB5v2xaXUw2A+3H2Y+TD9M/sFER4YSO3sA9SlJSQ=="
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            5
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            5,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg4MjI5OTg0cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM4ODIyOTk4NHEBYS4yAAAAAAAAAA120OQih+Q/wfEoyetY678CxhqWhez6v9umNVtr+QLAaSkTtXB5y78lCFs/rEzaP5N1nUmRtfk/TrxUhbLxwD9cpX4GwNNWP38h9BEbgPS/FN8ZG6F7kD8F2Zg+rabQv4XzLjd1JfI/0xqrNLxN4r9h9+USFg8CQG4eOzZCUfG/0t+j/TPTzz9b6hsDgZLaP0DaDUrCP+M/hm6Qizr45z91Scl5cJztv+ruLUpXCfQ/2cWOagY70L9L+c6mCe/nPw3XZ7fvCwTAIbJbbqr21T8MO0Ll5U79PxWjZ+h4U/W/eneJv7X7qD9Bq85NJ+3ZP8rc88inV5g/q20mLe/m9780o+BPhDveP3aCvBwLF8o/oK8uAVhI+z/ZNKUd/svUvxZUMBuvWuy/U7AOu7sO/j+91EzdrqEBQMmywBtzwsm/ZurdJLB23L8YivQpyMTRP7YxODQwU+m/p/weWZuu+z8Px9p7qlzxv8MkZpmzY/4/Q5BT2CGf479jOy1RiXLiv3eRZVNsX/m/l9cFUA4k2L8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0NjYyNjg4cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5NDY2MjY4OHEBYS5kAAAAAAAAACkujtByJYQ/8+tjqujoxL8dY5+J3CvKv3uIaFV6sMM/kuvAeNi60b9KG1tTphC0P6aMLvbT5pc/UdcYoLZ9mj+wx+0wH7ljv31yvrGvnLY/3v9P0Ow/hD8zUd1EjRiUv9zO1ovlxKw/p4Rl64nmdb+zfb9vsR7Svy48iMzDmNK/oF2QcE2AwD+pGS2uLUazv/HmEzu6D7U/D6sI5poCvT9KjkrDLoWmv9LL5yPV/6e/9VvkKeqDsL8vuotMjh7Fv3SoXQT6K7I/IRduWdJLwb/dhgkemCLGv+4PoAMOvaA/m23OZFWrx797Olr5OxDEv9he3z4N7sS/B46tp8ZGgb/HPZXLSECwP0X/jPyEpME/jAgsq84pwL/ARlfoD7y1v9xd6LLhB9E/SwDWUc5Iyr/8djL9Eg3RvwVLv1rZk6y/Z3VMYmVUwj9G5JoXOkiaP8/7EZg7mW+/4HQ9KA8Hxb+Bw0+KNT3UvylaLRk249G/7HIJBKx7jj+s214R8MbZPz4G7wUKNpm/rvER1XC4xD8VbKMCyVy0v2kAvppIArC/BUIdh1mk2r8zXkdmAi/CPwZaYarfsKk/cBA/LuSZxT+sdmP0gICjP5WkVl/z5oG/MhtLdpjlgr8Pf7o7zSmSvwNnHN/eTJS/n+wqo9PRZj+Oojdspr2ovw+9/3RoCII/2IULWL9Uur+XC6tXPyzHP5AFW8xsXYI/FD1JuwaomD8oTNnCKRCuP4PWrCvj8MS/scrJqEari78Dwm6cfbhRPzI5KApLD8Q/fQwvIAm62D9C812LtdGWv6+d9728zLM/FlY9aApLxb+cGZ6voIxHP8qxCmBWb7q/Y0NNVgsluD+WyBE37UvJv1b6gtnDbsA/el/Uq/InsD+RTeFr7e6uv2/LtzrLdcI/zGZooHnIo79fSi7NL0+8v9jI9tic8cU/IobaXL8Dxr+Rjmk+C+mJP/YGCLMixsI/TnH3/ORAtL8S/a/cDriyP0lRQVfHPMi/CN7hUGyJqr8/54Xevi+XP8r6jDDUa5O/7GNBDxBCpb/GhC9Psw61P8LrTFllUIC/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0NjY5NjY0cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5NDY2OTY2NHEBYS4CAAAAAAAAAB9UYbHVOq8/UUFvhVIbsL8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    5,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        5.729458257254194,
                        3.073451123712046,
                        0.7570758263495435,
                        -1.506635762011266,
                        1.5181897721647981
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5
                ],
                "values": [
                    5.729458257254194,
                    3.073451123712046,
                    0.7570758263495435,
                    -1.506635762011266,
                    1.5181897721647981
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 60
    }
}