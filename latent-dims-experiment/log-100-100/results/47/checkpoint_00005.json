{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "byteorder": "<",
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "shape": [
                        5,
                        5
                    ],
                    "values": "eJwByAA3/4dOgt222+8/E0GlhIOPjb99pFkfBk6ZP3qPOgrsAJs/Myo2wSRhmD+FGAfdUDT1vrZL3Ns6r+4//gnSoEPyiD/5P8Sh7Rtov4KJdVLmQJO/KXzSDVmIgb+wOwQeLzhyv1n6FMUxZ+8/zTu6qZlCmL8DSRcTMgWMvyDQGqMXFJK/8Er5aR2uor8giOKdeSmfP2sjH0LkCe8/VHGKO0BQpL8C61I/3rSgP/g8hArbXGe/30/4DSXmXT8epqArrm+hP9CAgSJ3GPA/9ZBdfQ=="
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "strides": [
                    8,
                    40
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    1.1761683960122575,
                    1.1045515478056955,
                    1.0920420754955193,
                    0.8936300965716347,
                    1.303376182579582
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.051564619710448824,
                    0.023882190498668195
                ]
            },
            "V0": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "values": "eJxz2H0lb9bsp/YMXOx8bE6H7BW0PzCs9zlk36ChOLPEc9d+hqezQv9f278fJl8x+Vn60zsP7A9E7lkQ3LfI/sA6Xr65J3fYLzBxYmK6cxquHyZ/otZ1+uLiO/Yc/Ys72cV32zN8XlfezD4Nbj5MP0x+3++z27m+PbXfUDwhJmHNfrj9MPNh+mHyBjEeSxhantoDAJ1fXW4="
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            5
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            5,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkyNDQ0Mzg0cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5MjQ0NDM4NHEBYS4yAAAAAAAAAN3WOW2/tMS/V+EiSvtW5T8e/1vJUTb2v2AKw9I4DPu/mkd7aOFN7L/o1WG6MRjnP1jTzTwVmPA/YWDZDRnm6T8U+CsJ0+WVv6xHrnU4sNa/lHF4PuPO4D/V7oio/QK7Pyuvfe8OVeE/jSbro6m6uz+z0xODDAD5P7lWGlFnTvG/b0DYWSCv7b9jMTgI1YjivwNxUBZ45Oi/pT/qAs74vj9f41JG/AnTv4ARjVD/YdI/HYuEyH2xsb+jzyh45OzgP1J2NjN8Hfy/z04ksIaoyb8ugmj1OAbuP1pnVgYnTe+/zeNAi3Z50j94OLo/okLFv6iaIxmLTMw/tYe8goD95L/MlphCcUy2PxWMwn1jsMO/YTEeiHs13j+MlwBwtdqnP9Mpn7dc4OK/gl70x0v/8D+pvQCWL+PxP8XcYBg+auW/COVKhWI22z/4q5qrrTAeP8QriRKq8PG/etyd2JO85z+Y5SDe5H7Bv/vLvYs7ofE/zebh4au5yr//ZbMW7p6bvz7f63kPF9u/aVfJuBTm4D8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkzMzQzNTIwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5MzM0MzUyMHEBYS5kAAAAAAAAALN7JENanq0/bnkWU/Iour8rcvb0G1nKv10UeM5Zq7w/xtxmE19Ly7/pXmtGMGefv4HyBeUWxrq/kuRL0TApuz+01A+TNOC3P0h4MLhNL80/h/guVe3ixj9MCa3xdgDLv8uROslndLI/txahiWAoqz+GhNKE0UjMv/mnSggGadG/6KBM48HTsz9GoulUUMLQv6/Sm8UD3qY/2tuBabatpz9uQHJ4rlfNP3ATGJv9tJw/GqOxC5Tpqb/7yqexwNjEv+X6DanAN7k/2SBf1UFvtr+pu3fl7J3Ev01WPbtBXsk/lh1p1Q9ovb9crovaUCmRPz6lADhIkLy/D8MI2ZYbsL9i7BakfMCwv1KcChFdW7A/KtM2ZT+RyL9hGSDdL9TCv78xr9p+qs0/kyjYmtkozr9QzQmtg+jMv7xJx7I5tbu/0fl70oQJzj9MfUZjQblvP4Tz+/F8zro/WPCB8ActnL/OocsBpgXRv1Wl70W8I8q/SF2fBioAtz8OJ+ZWyWPDP7xmzFNdb7W/9SEylbQLsD/kIOkmNxOnv7F0vJaeC7W/OTcQiArQxb+H+YFuap20P0Q6j8Vec6A/grDnHy9xsj9ieiPZQHubv1LpnbJqP8c/NNfk3UwxRj8NDg6IvDWJPwIi5hx5jNg/vbdPsITaqj/ZXyQ2d1inv2eTeIBrKb+/CcXntttIvb/EvJrYnyK7P9yucGTj6pO/xmNjhcOMhz/sRMshMgSyP83c4LMhs8W/P6jBCNXJtr+kVztWOSOev+9DgXJRDL0/2duOxXoE1D9f4Rg++N28P+mz9ETIK6q/o+l35IPvsr/pi2LGQLubP8wTIoNb6ri/JMopRhOYyT8Pz617xJnHv0MOmxDWcsA/dlQp0etqqL9cMVxbLImlv9etgNhyXK4/7JlFzL2pq79qa0F0F7SLv8H37zlSA6o/PzdBvOyitr/tpz/DL+dOP1bGYej2RbA/c5fisVS7xb/4J0TAuNrBP7MewfKtzse/vtUlpaqKsr++4P6Cu962vy159vXSvca/ZD37XLUYjD/cerrkZpi0P1jnjtHwEL6/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkyNDQyODQ4cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5MjQ0Mjg0OHEBYS4CAAAAAAAAABsdaB2qyG6/wcpkxiA7p78="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    5,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        4.034727830954632,
                        2.3027544947029472,
                        1.6286970789393984,
                        0.5725353571714227,
                        3.401382258473338
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5
                ],
                "values": [
                    4.034727830954632,
                    2.3027544947029472,
                    1.6286970789393984,
                    0.5725353571714227,
                    3.401382258473338
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 5
    }
}