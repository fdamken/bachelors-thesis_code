{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "byteorder": "<",
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "shape": [
                        5,
                        5
                    ],
                    "values": "eJwByAA3/94vngknEO0/QTn5PAmgi7+FJCx20dOhP/xDS0kul7S/Jn1vaaNLpT/OW0PN7Z+tP3+9ZIAOT+8/Jm9qJXV7r7/ES+8S50vCPyblHbA5Yau/A2E8pzI0nr9Vor+OFKCjPx3bLGR+pOw/UgUQspT/wj8J5Jgj4ZGUvzV/V5LHr7M/YmqZQk+Uh783kdFtwmCxv8JuknuWf/E/KmbGaEGxv7/Wz7f5CS2wP1WTCOoJ4aG/lrt25SXdpD86XGXrlweXP8W78Fn+ifA/hMlj1g=="
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "strides": [
                    8,
                    40
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.00551643998042237,
                    0.0012006502388330572,
                    0.00251492058513083,
                    0.0009768546638325116,
                    0.000973664113269639
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    5.901674682900193e-05,
                    5.2277847590687545e-05
                ]
            },
            "V0": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "values": "eJxjaDjV8+V6jj0Dg8Z+bkMxe4YDYbHiax3sGRw+R0oY+ADFX+e/17DbD5dvWBGammQEFH9TV7nq0T4GBrGJZxyYgPIdywJlGBH6YfIFMeue8NgD+Sf3z/rHu5/hwhHrUzwK+xHmw/RD5T2CxBc6OwLtiVVM2ym3H2E/1HyYfpi8w4LMTXzK9gAHYkgs"
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            5
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            5,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0NjU1OTM2cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5NDY1NTkzNnEBYS4yAAAAAAAAAHWEpr6iUeI/ORIFx2Lg8L8/weXsUfr9vw/DXzyXkQPAEa52qX/2qb9+UQf6Sc3ZP1LefAhFq/o/Bg0PjgB8xD9OMyukQabIPw/ILy390fW/526t/gONXT91z3zxz/XHvwRNW6hF3fU/lScTzQRm4b+55/LO4SMCQDXwOhAnKPG/ACijuAe4vj8rX8TbvXfiP+wVqxdXtuY/vSbPiL63AEAjxI0orqnuvwcHADW+ufg/7PDDJ0DQxb8Dt/wqKqXnPyeMBdCMbQXAoju4M+Tiwj9mPcAZ91r+PwGxAtDsMPa/orLRySRS2L+ZeWaORLfoP2And2svKKU/1hW8fKvQ979/7zWixl7dP7rpjfK0E9E/SQ4LOtt8/j8a2uZC4mW6v/xjB+408++/H7wWfeWe/D9fHT98rm4CQN1hQEHDXLu/gXY58QKf2L8TW01yb1ymP9OQQYs8uOu/Sk7TJm86/z++XHFQolXzv4tdirRdO/4/zzf83V/+5L+z0Gpn5GDov8uE7tg1EPe/x2OUpR4T378="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkzMDg3MzYwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5MzA4NzM2MHEBYS5kAAAAAAAAAGq7Jl/4VJq/DmthGnvkxr9fbhFIfO6+v5CQqbXYL8g///Pf/jNQ0b/wCm/2NDi+P7hFrNi6m6c/0lKizJMhlT89lHM/hL2Uvzncd7Y6d6I/oAePof2Ffr8tfnnE1KySv+0KJfR6kaU/39h3qS73Cr/hHY0YzQzWv8arKFD8otS/N0dp37LatD85KhakuQW4v8/xK0SvBLk/aAuGHCl+wD+f0pi9I0iDPxm2C9eqXk6/Hv6+efX2tb9NYtVfcWnLv+zYwUrC2ng/BKN4gexJkD88sTadyXfRvxNdwol3W3G/Ah3K6nx4yb9FxmtAWp7Qv2b8KBMg3se/rA/tUui8pT9eecD8WL62P+/47j9nbMM/HcGBtMOkur9pyn+Vhg7JvymVJe7JjNI/1fuXliYdxb9wsp0jqYPTv2ZiJcQLUqu/9gKOVc+3sT8yxbGGxqCvv9ncQjsIsIi/1zwLp2TAyr82MoSMnTnVv0D+SR1BttC/GBdR8ezloT9X21ycdY7gP7lHHM5FhXE/zFzEVW83nj9AR+cbMrC4v3S4l01jlrO/b65F+hLu27+yTkR2M2DCPxYxNUl77aE/t9mPnwsG0T/jMBFxVKesP55aiwWOvI2/O3yiYto0lj98rnYt97Kiv9HO32hr03a/UbPATFupgj/a7Ok482S2v4ZgPZi66I2/ffKp+xYtt78gWdmPLrbRP7YjM4pcanS/vGp3G0rCsT/2GTVDaZqyPz3scyNZKMO/hurVEukFd79PkIJ9Hn9/P9NiDjpeyrM/lYNZ+03z1z+74y0xg7iUv6nXDdGJf7M/g9kCDyUwwr/h9gMNim1pP1maDzx0Ab6/kFWPsWzsvz9Yjn51Fs3Kv5c4JBNNJ7w/xneYwZdBsz/PC5bmilKnv0nwzERB3bk/We1llp5Ioj8VVA3eIoS8v7QGNhaztcQ/QtY0VwzSxb/yiftzC1mUv1kCJREaW8w/7lzoyyRZlb/CvU5iUvVyP8fwIYvc48m/WL/mb9LJsL8eL8RDLHqxP1kShxPcJIO/OsaFxBamtL+Z/5J+x625P42zYdTeuIi/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkwNjAwMDAwcQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5MDYwMDAwMHEBYS4CAAAAAAAAAIiKb/Egl7M/A5zdMYMUqb8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    5,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        5.79513325259459,
                        3.0961972385571377,
                        0.5991110156594975,
                        -1.355316703367662,
                        1.5491200630070379
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5
                ],
                "values": [
                    5.79513325259459,
                    3.0961972385571377,
                    0.5991110156594975,
                    -1.355316703367662,
                    1.5491200630070379
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 90
    }
}