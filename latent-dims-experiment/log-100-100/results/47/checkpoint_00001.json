{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "byteorder": "<",
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "shape": [
                        5,
                        5
                    ],
                    "values": "eJwByAA3/zvHc80CF/A/BzhdKPdMc7+dQ+HY5eiDP/PuNBfAqmk/zjRsvHJXez+Ssfu54vJtP3OluaCQ6u8/LUHzYI7RZz+damfdsjgqP47C35b/93A/Q3lHT0Rser8uw4D3uix5P+e4xZfNd+8/tfJcoJ6DfL+7pTOnf5d5vxnZJ6vy0GS/Cj9hwpgAZD/MThVRsmx/v8Sg8vQN4O8/psITc9+TXr9Bo3BgCbpsPwyhtUV4i2m/4clQ+bOkgD+abRe0HS1sP9/Jnx/xC/A/36BpzQ=="
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "strides": [
                    8,
                    40
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    1.1208366810592387,
                    1.039420757426382,
                    1.0769394736397333,
                    0.9975005985012643,
                    1.151543483526291
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.4159142633534502,
                    0.2709517814827482
                ]
            },
            "V0": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "values": "eJw7sehL4Lkrb+0beBq/HdHfZJ/A8Uur6cBGe4d794NCopftd7D44dvMvHA/TJ6LzzrsssAr+wa7A9M9ZvTaN2yznlObtsFeIWTnXnHGLXD9MHmJZV2b521+ZZ/wWGBttvBCe4ZNr8IyhQr2w8yH6YfJR2neWjt3zzv7hi8brl2LnAe3H2Y+TD9MfkLxajmVTe/sAW0TYoc="
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            5
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            5,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg3MzMyNDgwcQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM4NzMzMjQ4MHEBYS4yAAAAAAAAAEeBxfGjX88/jdsSDRX25j+NX+Um3vXZvzn8+4Kz/PG/cXqAE5zw5L8PMRGhFxbUv8f4COc3mM2/h3k1PTz35T9jIJtq0kDWP+d/oiRhTuG/mDfjGONx3D9a/DNOMMnRP4fQKV4Duds/a2MH6LFc2D9xmHqI2DjuP9eB9AOs0N6/WzS0zO1d4b//57mHw6yBPyaGc5RwXuK/o/l/m57d1L/8FWqmC4rjv51/LpRMlcm/uNJveRRK0D/R1h9+VgThP0B1+idxC/K/f8vLwXDk2L+G33b1JojvPxd7x46s7+2/hYQwSHCix79p1Ot3OZu3v6Gg3Ra+ns8/V33tMZ5k3L8Zclv6G5TVv4q2gZ4HJqK/RA/DBkFHt7/HgiEh7s3DP6mINbOAub6/bvi3PBr95D+rRCW1/yfnP+KTu/UyVee/UoMg2/VSw7+lsWb6eSidP2JuhGl6md6/bx6s3tk+vj/S7n6N6zTQv41vkM9lk+Q/X9jUX8nt4T/CKNjc8lvIv9sVRKY1TtI//gfFKdxs1j8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg3MzIzNTg0cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM4NzMyMzU4NHEBYS5kAAAAAAAAAA6bC22uRK0/Q8Rjwn8ywL896/cQp2q9vw+u3J+xfKI/SmdkcRdIxr+SkNtmOmiev9g3EQkC87K/OZOozh4lpD9mTvj2VLOrP1Sv7aKLTrY/omKtkstml78u/xjrCLu1P2gW+k88eLU/uo0qzPcBqL+nTbfDmw7Gv8TinUkATbW/heCHEe/1rD9gylByquC3P/Istb5iVIQ/PjR0u2W0mD9eD5L/Wf7BP483b9d7HrE/emBh5gnvs7+hrpdgLza2v/Har+gUjbA/3SFZrI8Yrr+ap7Fy2C27v+jBi6n4zcI/R2plfQZktr8FONDylQSivxLLzdHuN8a/DzoKraAatL/bFMW1nbCmv7BzF1bbfpQ/J2lTZQuxt7+0ceZlYACxv3jfRi3ljcg/ON+oT4SBxr+6p7RlALTGv5XY7By6srS/hqZWQZVnwT/XF3fs+bq3P5jzvE+RSbs//qDNkL79rj9MXp565SHBvzaMeeLZa8C/3J9BkJdKtz+E83Kxv9q+P3zp/Jbv1bm/93lOtL5UuD+uMTt7YlSDv6oCb7VP78C/aoweDZb9wL/w/M07FGSxP0E1afFY05c/CDf6IdrPsD/cTkLNXdmivy061Hz4/8c/bT3Pw46Kgz8Cxe8WkhdWP9pGO/57z9k/LRghAMtvcz8uOE0CfcR0P0jQW2+dUJW/koy39S3Qu78no+eWqXG1PwM6Rmi/xWM/QhPcAMVunr94WEubl1S+Pzah0LR9EMa/QXxRPz9ms7/tCvekNm+ivwgk5LUwk8U/esQLi0PIzD8Fwn/CIc26P3CCcYiMEbG/l+LUCFZjsb/qy1Hd4v2dP8Oi/cnkwb2/4UijAskYt7+t0V3a64W/v9caGyTU2r4/bRa9Y+/Jp79DNFwdbYZYv6mZU4adbna/YYcs9wxTnD8VBB3nZV6JPx87WfiHGoW/+J9FpYXQtL8xsszIYyCKv9y/DLoKsoU//zBJM/pOwr9ABjr92eS6Pyh3R/aFFsa/cvlWqqB4vz+SzoPh13m2v+H40QWTHcO/zdE0diiLgz9uAu7bMqq5P6Obj9SZ66y/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg3MzMxNzc2cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM4NzMzMTc3NnEBYS4CAAAAAAAAAPH3z9iq+aW/KCzkA2+xor8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    5,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        2.0707072139868457,
                        1.102580499162698,
                        1.4046560418025735,
                        1.0259274489801076,
                        1.8459594310400633
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5
                ],
                "values": [
                    2.0707072139868457,
                    1.102580499162698,
                    1.4046560418025735,
                    1.0259274489801076,
                    1.8459594310400633
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 1
    }
}