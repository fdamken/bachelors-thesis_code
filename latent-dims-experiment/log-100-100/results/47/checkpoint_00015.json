{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "byteorder": "<",
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "shape": [
                        5,
                        5
                    ],
                    "values": "eJwByAA3/2J22xKuLe8/yK0jpBvPm78cf0KIHWyHP/nxDg5MTIW/+7RQ5byIqz8d43AGrNxqP3bjHx2T9e0/j70/zY4qqb8Wd5sqWICgP6z4nMBMv4K/vJHo1jnolL/oO6SkjNubv82JuoQa4u0/fD41BFnfir+AdCr7D6x5Pz3qCBtfd1I/cU2xWIB5p7+S6Gwqy1SVv3soLRdy9u8/W7NvKYyitb+qNK38aEGkP+Tw1fXnAHI/t2Mn4re4nj+BnfsKxhqvPx4sSxDMMPA/gxRmsw=="
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "strides": [
                    8,
                    40
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.3557172944863282,
                    0.2595736014224889,
                    0.3812283830126264,
                    0.11468428448551822,
                    0.21355539525387565
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.006138156911323677,
                    0.0030704695613094374
                ]
            },
            "V0": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "values": "eJxjaBOpZ9I/a8/A0inyMH6jfcObSUs0vObuZ5CS9XK6tGY/w/RiK4fGHfth8gyXfS8ZeJ23VzDvdGxhWmzPUG21Updvtb1ClDn/sYKDcP0w+Rt5PBdqdx60Z3hlHjGZY9r+hhVMb3u3L7OHmw/VD5N/kOJ78/mq4/YMPw5M2nlzAtx+uPkw/VD5gs+L48I/X7MHADwSWRM="
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            5
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            5,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk2MzY4MTI4cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5NjM2ODEyOHEBYS4yAAAAAAAAAMU0frLm/sw/y5zjHO0r6b/2qbGlvFL2v3Kh3ZpQEv+/hFts71T4qD9PAsmGbdznP817xcV8efk/+np5lMak2T9v3EiMIODCv7ddMgFc1eW/P/NqDVAV4D+nhbNWLG7Yv/YkMtlxsO8/tc4k+ZvJ07+7EsTniD/+P/pFJraYwvO/zksUknA4zr8A0p0I6YTSv9zNGSAWUdA/BkrMlKzu0z8HE3J7h1Phv6Zsot1XKt8/Ba5ezlmN07/0TbEFeMfmP+Al+7EtqAHAOji003zcuL92J2TpvI34P9xvrKqOwPK/5eyddUsSsb/Qd2q8WsOTPzLrOoOe7te/GFcuiBPY7r+EIQsUsuDUPwiXRhSjGr0/TYMw19Gq8j/biS+HYrO4v+y03/YPmum/aGF9IJ98+D+1yO62GoX6P/sqC1Ldd+C/RQ9baM+SsL/YY/pHSdvPPz1vb5FG/em/QeL7fJHv7j/XZeljekPov96kEE6vOfk/ythzvt+by7+ExxLYnR3Hvz2V5TjlSvO/p+A3N0Ixlj8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0NTQ2MjQwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5NDU0NjI0MHEBYS5kAAAAAAAAABRS7XQKKqo/VXp5E5CVv7+T8MD4fQbBv7KGRg4oe70/BZYL/Qopzr87kpm1rUZzv/BlBcjPh8C/qWOjMc61vD81dw07GGy/P3UIlHVc/tE/f4lsJpLFyz8ThHFXRKbDv9vTiy2CjrM/IJdqs2Rhtz8uydtqhF/Qv0ai803c+ca/AweOByz5uj+kxVqFPb7Iv9lMendsQKo/t2Tc5pw5sT9nGYmnh1zMP+gnEmJFr4C/ygXJNN2Jpj/A2Y6ij93GvzEfXFTAg8A/ZFHP3grmtb9MS0CIuMfMv7h768JGXM4/X5Qb4LCfv7+B7sV39Ly1P+8gR8tOKsC/OcJusxSvp7+AyrkeyQWrvwxieiKATLg/gffoZjjowb9RRfAYk+LBv9K+8qCWhc8/NfpcPls50L9GllXni23Ov9vRGvMCTLm/QC7/Ca/0sj+ECHezUECQP1VKmP4VLqa/jFKUZTvSkj8q56GO8JvRvxndtuvBIc6/lk6QFfI6xD9EABccBQa3P/FkxMIwv66/09mKWKEEwD8GilIKCvOgv2tVxUMgfLK/8tHyd1K8x797Lr34gDG4P+InpHLan6U/o6AANW3Euj+v2gTFs9pAP3KqOqJCe8c/OmAgep9ghL9nZf/QVVbBvx4cenJ4HNQ/5Ezx3lENwj8a5pK+BIudv3I14cTvC7m/ZFxIwAeFv7+DvgeXoSzCPxXCBZpSeJS/7twKp/1rkD9AeGfhOayxP+c2rkBT9Ma/FVmhhS/Bt7+FZRFDLYCqv6tjsEImSbI/eqRDZByJ0j+lutMNTE29P2eT9fGZkqu/WvCAzLeBw7/aucHMU+2YP76OG046F7i/0YXOL1NSyj/GzsxCSW3Jv9QQH2NdvsA/WsGyV/Lqrb913wM/smmuv9Fgh2wziLc/9fLQdUXer78jrD8ui1Ohv9A++Vt7/qw/2I2Pv2WSub+Rx26cYw+WPyH8bVne8ag/9j5PMNzvvr8iNNqFzyXBP6TdmYD0M8C/t5mT8ABer7/m6Uaf10S4v0IkUVR1ZsC//XE2oZgYqj+6Y6Pr1oCyP+X9duiAArK/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkxNjU2MDY0cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5MTY1NjA2NHEBYS4CAAAAAAAAANYbwDCUNpM/aoMP5/IwrL8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    5,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        5.2369088753159705,
                        1.7639919478770754,
                        0.7250977408494066,
                        -2.4137022323990838,
                        2.776452721539261
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5
                ],
                "values": [
                    5.2369088753159705,
                    1.7639919478770754,
                    0.7250977408494066,
                    -2.4137022323990838,
                    2.776452721539261
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 15
    }
}