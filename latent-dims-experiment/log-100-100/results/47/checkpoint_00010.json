{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "byteorder": "<",
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "shape": [
                        5,
                        5
                    ],
                    "values": "eJwByAA3/2dcwRHDIu8/Ca3PesTVnb83bNiaoa2GPzVeU3jck3Y/uvd6t84Mqj90Z1JRZ3x2PxQgwHJlSO4/VjFWQabMjr8rHzw26RKVPxNHsBId45y/GlIWzZ1Qhr8Z37baXM+RvwSYzUeV6O4/LitPB1jqj78FxCaIPsyOv5dqjbKBXXO/ErtozW87ob8n/w0zKAaWP3vHpXDnd+8/VmpjmykQs7/V3SFib5+kP5Xryym2c2G/DsibtGT9Zz/lxMxcjmesP5pk8I5KIvA/tURh9A=="
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "strides": [
                    8,
                    40
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.6384096661280936,
                    0.5619074184768778,
                    0.6337688719418776,
                    0.2765050314556721,
                    0.5530286910520252
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.01595265812517937,
                    0.006875701881170187
                ]
            },
            "V0": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "values": "eJxrOHhBa2veDXuGu2I1FduP2DME/DC4ua3evmHu51uNB7fsZ/hbaflr1/79MPkDUmVmr1Ru2h8I+616/tB6+4Yzj51i5VbYO1w7ahAdeQyuHyZv8/rnX+O8M/YM52aenVc1z76h/Fr93PZFcPNh+mHyPLMnrUx5DnTPtqcXVuxYB7cfZj5MP0z+gPLzxd/m3bMHADG/bhU="
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            5
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            5,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkxNzE3MTIwcQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5MTcxNzEyMHEBYS4yAAAAAAAAAKR5N+kDTcK/LSvYXClM4r8utph3NnP1vwYMpFniQf6/IiYSE/4Qzj9sXjH9i8fkPxLHc/Xc7fY/SLa45me94j9ZgJ5D/zfZv9GiQSLEAeC/COfqH1Yq4T/u9tvj2ePRv4fC69IXauw/AcAOUfrEwb9qL9bDB+v9P3U/HZwzJvO/BeLiReX25L8xGsmKIXzivzGAnQw01qk/rLYOC7L/ur/sNul4eiXfvz9SOc1iduA/mcD6izDk0b9ku+Uu+OHkP7MsgLBdPgHAhUkQ7vK8zr/v0iGbo9f0P07KBJX7VvO/qk13bM5fpj9kRd1B/j62v5C53WBV7tu/lJtF7OVi6r9i8r6C28neP46N6GYoM7G/1c1CWLgG5j/5ZC37ng6Wv5mrAc1s6Oy/NqQHMamB9z/gThJ4hnb4P1GO28CBeuS/6IxAqhoFuz/CN8aeUjvOPyZoi3nnGe+/174eid1w7D+5foueWDnev5QUh8nbM/c/zS+lp6+4sb9Yk5vZNNfFvzdysfPE6e6/fxFDDx820z8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkxMDMwOTEycQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5MTAzMDkxMnEBYS5kAAAAAAAAADjjFVCVoKw/VkqetmHqvL/TKF5eSUHLv5Dl4dsAdbw/KMfPzfjVzL9gGzRdsNupvwQKRdIosr+/zMKJn3FpwT+kvpip9si8P4/2Hn92Nsw/JkgqXOBNyT8BGKt9pM/Jv7Txui3M17M/nol9kPZXtz/TgGHrrw3Qv/osUPD/5ca/7I5tSkqSuT9LLkeA2f3QvxdL7/5VDqk/bpDD0Q4grT+EXIv7nJ7MPy6POEqqgYY/AT7cyYXLrD8ku+JPYvvGv7H6b1eWY74/qRqugWQ2t7+D264adDzJvwZ6zMJZsMw/BjsHfBrvvb+qPPpz0zeaPzsHlz7gdL6/+i/maWlkrL83zf9toe6mv1iXoWyIobU/w8hHpLFxxb8DtfsebMPDv/YSRYTDTNA/0+vuA0Ms0L/kuVUAGRbPv8dwlgnkt7W/u/+qNaQSwz/VU/lCyWCqP7YWUh76PaC/ENUDAF9zfL9scIvawwrRv/PkIXXCCs6/ClyorujwyT//jK08jVTEPza+H5F4OLC/tqW80ZfdrD9/TZVeZfKovwGu0Kigz7O/B4+M5x2cw7/LP82e+Xm0P6l5jyuy8KI/AJYVXmG4vz+x6n0j/VONv5iGGSwBH8g/Pngpd01lc7/Y/PFbI9Wuv5HI9gUkC9c/Ot5icFI+wT9UdRmHep6kv+QEt1/+sL+/6veHcyJgvb+e1TwzG1vAP7gZtf4aV4m/rEuc9GyItD/sISDlAzaxPyKp19UlS8a/z/lZ1DX9uL/ew3eXpsCkv/g1xTjZ87I/89HrLoa30z+pCtBWiCi+P7+R0hceL6u/KTvdY3NAxr/mpS2W/qiSP7eiiW0gnLi/+CpW6kLqzD8+JV/WflDHv1Zm/AvLccA/HxqtN/xMsL+V5qeYssKrv5D1dkGw/68/7dTdOF53sb9I0IIBlbSjv8VcvVvcJrE/1b91t0+Btr8AxfZ1LYmeP9Ixwl8nI68/GEieQPI3wL8JUIwypv3JP9O0jnmsd8O/JdQ+sVXYsb8a0Z1C/OO1vyVdS1GPjb+/ysCU/K4Ckj/Vs1v8uxy2P6qtW64gMq+/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkwNjgzMjY0cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5MDY4MzI2NHEBYS4CAAAAAAAAAAf4mnq1E4E/F4X6HPKJqb8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    5,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        4.497313293896531,
                        2.00758140442723,
                        0.9857813213638351,
                        -1.2198440932917523,
                        3.661223163678852
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5
                ],
                "values": [
                    4.497313293896531,
                    2.00758140442723,
                    0.9857813213638351,
                    -1.2198440932917523,
                    3.661223163678852
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 10
    }
}