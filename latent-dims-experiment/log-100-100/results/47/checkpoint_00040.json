{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "byteorder": "<",
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "shape": [
                        5,
                        5
                    ],
                    "values": "eJwByAA3/3FRhhpBsO4/8x3ZsyZ3lL9qohuj/NCaP0BtiTZFfKa//gHcu0byoD+3f6T7Z/efP+IYzCLQxO4/bEP+ACliTD9EJ2oX6zOoP58G3gVEipq/V07RvI4Lgb+hVAB4O7qAP2La3+yIpO8/w4TdJ8bsTL9LVivYxYt5v00tiAD2kp8/ejXhtafgob/G7DqzfrGSv3SySmXrZfA/N3kHVk7OuL8hjWA5cDCkP4xegHW98pC/ZFOIXqxogT8L6btZ56KwP2YZeNwmgPA/QH1mgA=="
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "strides": [
                    8,
                    40
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.029516907116832847,
                    0.019855242991291093,
                    0.046127754824163945,
                    0.013212736814016817,
                    0.011068913353802329
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.0012336881497139985,
                    0.0010529030864310017
                ]
            },
            "V0": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "values": "eJxjkDgiaes+2Z6BYUKG4cS/+xgaZrL/PlC6n0HhIGd0afR+BoGDT6o3pu6Hy8+Qfrbmf6M9Q83sk56tZfYMCQ82d+gH7mdYIPRujVyiPVw/TD42MXxiU489g8R+hpW6AfsZZuoIWhiW2MPNh+mHyTNMdRKLrrRn4GDS+v8jDGE/zHyYfpi8g51mv1qBPQDyR04y"
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            5
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            5,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkwNDgyODgwcQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5MDQ4Mjg4MHEBYS4yAAAAAAAAAGnp2kZCROY/NIuWCkXA8b/TYplaTs/4v3FXaPICEALAsUV43OOQ5r/I1zyc9VbYP6KW6kAA1/o/v4bIKBGmyD9DyhoQflfIPwSqRL6zx/O/OuKL1iw8sT8BD65ClU3Ov+EItChzyvE/hhgYCbGZ4b8OICOE/YoBQGPlfpgag/O/MawOD/R/yj8W0TdO79nSP5/L92iZItg/1oZ0oCqN4D/e47f/07Xqv/dBUmYtofA/Cg9uhWo50b/nRyB2v5DpP4IyTBUrswPACIupXGK4wD+4agodGSf9P2+BW9EzD/W/ZIeP+M+OuT9K5hdA7sTFP80UPqPydqi/GL4xYCgi9r/T+wSNhrbnP+xcM6X6QeU/bLd/NQxx+T9xN/YjWrTav4zsxOtmR+6//3nrrq81/T+3iLLvDz0AQKpevbuARsu/APLpojaA2L8Q+8/DVZbWP+BNtpnzLey/KcngaVqY9z81kVzGn9Lwv2dAYW7ZGP0/iofUrDTe4L8q4oNZrKrav/f/eUGIEPu/Tnk4ZEEN0b8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkxMzYwMTkycQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5MTM2MDE5MnEBYS5kAAAAAAAAAO0WsM5MDaI/lDuT3Pi9w7/T0GJXiFrDv6o0XX8x/L4/fQoYI8cv0b9APRN+e++oPwxkV/ohkIM/SV1e//c8lD8jLA/gcXusP0ZIG0HyvtA/pKx0ecNXtz/KTXpne1eUP7KuFLKT5bE/ne+C+K8cpz/HU3Qyob3Qv5qGC1buXdG/hMIfANgpwD+xM/vXS7/DvyZ8fKU5rbI/5OGxrnOcuj8aMXc8nk3AP/ADTQ+026O/YP54cDd4pr8ekYkfwzHFv4PJI9dbF8Q/OL9hkFW0ur9bBNdMZ0fPv/kM8U8o9sY/v29rVf8aw784xhY7oMe3vzPldjJff8K/D6mdhnPlpb/VIVcCGlmhP5epsUs0ksA/1PbudLgXub/Ib+0l0w3Ev/vKqm33O88/DjFs0WKA0L+h8oiyNqnOv18yNp5Gla6/tySbP68awj8X8paaUga3P2qCm/zY75+/e1EZJQkLpr/NkiiKPqfTv8mn/+DcD9C/EVJv4hAZsj+Sj4Ff1Y3BP/1uT18Cz6O/kGfJRJ05uD9RZzmLWQ2sv2nVa9wala+/0KYCqw231r/jh5+d3ga6Pz3F5C0cBKo/dqTJx9E7tD9VYvEGqoOgP69WKmjjnIo/WREI1MS5lr+1CeJ84fu5v6R0bDOo4Jw/6ZjsM3fxnT/mU63w6D6ov3FOUavSULS/ImsmMsqZur8f2S3qWufDP2Rmt3OZp46/6Q3/OTfzd7//NLQk0NitP+qPVS0jF8W/4rWE2urIt7/JT0Hfo3CQv1AFJQe64MM/+XE/yYnL1D8YhqhYCzehvze78rY1wHo/z6Bpbu/cxb9BATMTsSmhP1SSUVNZGLa/WmElt1Ndtj8oy/zQBzPHv7UAz+OBWsM/f0Rpe8rWmT9zfsIMw2euv/b+skiz4bc/xRQi8bERsL8P3deHiQazv6ptcvrVFLw/QUZgEoDMvr/a0BiMDSF8P/SHK5rj0rc/mBlZUlK/wr/doDcRvH+7P0qquED7n8i/qgiR61I1qr+lt9M6nAmovwb1LVonuZy/XCQ2LV56ar+UbyIq9/6zPxOM1B7pE6O/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg4OTYxNjY0cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM4ODk2MTY2NHEBYS4CAAAAAAAAAGPhecr0eKo/rDbqGu1NsL8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    5,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        5.961083494024079,
                        2.8555477743372157,
                        1.0360380334191408,
                        -1.8880734639177188,
                        1.5904980216192361
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5
                ],
                "values": [
                    5.961083494024079,
                    2.8555477743372157,
                    1.0360380334191408,
                    -1.8880734639177188,
                    1.5904980216192361
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 40
    }
}