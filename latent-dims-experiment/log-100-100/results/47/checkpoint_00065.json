{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "byteorder": "<",
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "shape": [
                        5,
                        5
                    ],
                    "values": "eJwByAA3/6jXlHNdp+0/HYBKr3bZjL/ZIRMLo3mkP/rpvA/eErK/veCrSVv1oz+38tc1ojegP6UrKb4qJO8/2HSjZn7/qb8T7NUahKC5P8+LkI41FaK/uuLG2DmApL8dS4+r0IKYPzpuZFZHhe0/rvH3NNLQsT8fW0vTg+8kP/L7ZmKff6o/Yh1FQhAXk79Jt9T9kG6uv1j6ovXlGPE//zt/Sqlwvb82Kry4SpWuP5Q3gZO+Ypq/OgNnXOkbmD99UllHpgupP5wn9qKrf/A/8Jhozw=="
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "strides": [
                    8,
                    40
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.010999273313151018,
                    0.0024907677212424374,
                    0.004980144804063595,
                    0.0019679120908810814,
                    0.001509129260564455
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.00016843009095646267,
                    0.00011006385636198956
                ]
            },
            "V0": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "values": "eJxjOHB/bseMCnsGhqX+DSoWQFpP7EiUnT2Dg7GDwsMwID/W+N8my/0I+a8B7Jye9gwHYi/K6qoBxX/03fnOAhT38LVbJbIfrh8mnxHz9pKQL9C89gP5kXJA+c89V5X19iPMh+qHyXvs7Cy5GmTP0BClnNejvh9hP8x8qH6YfEMF26uJFvYA5OdHMA=="
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            5
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            5,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg3Nzg1NTA0cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM4Nzc4NTUwNHEBYS4yAAAAAAAAAHchYzLQteQ/Q+oJgA7L7r/0pBcIuWf7v+g34aWDHAPAIS8XYeBYxr/zmiMS4gzaP2dGUJUJB/o/TaG5w4QsuD+ug8D3XnWrvycJ/TsKL/S/2tYsziPPrb+rNq/AT4XSv9AeNRxZNfE/VIEHeVN44b+3jnNffPQBQF83fETGUPG//Oza64Dsyj+6Yji0qLbaP1Rm4ghvE+Y/A9CtNBQV7T+eoK05/K/rv6YWdkiWRfU/jXcJgYa8zb+wTdCuva7lP6A2lW32GATAB2f6hJ3d0T8lQGNSTXj9P4psJJDmXfW/CqRpStM9p7/YUIfmwfXcP/GTWLt9gZI/wH5oemay979dKtv1K8zdPwHzeysqL9Q/VSD/Q6K0+z9cXfzJlm7Uv53MIRW3Ie2//ICSIfme/T9u8YDK7tQBQE5wLC1g8sG/Ygw9BcNg3L9pdoM+tBPOP2QRKbQsyOm/2Z2tAsO3/D+F2X36NazyvzfKcsRIz/4/iCkMNx6o4r/+j8KONtDkv9kH17tbFvm/o6nhVRAr2r8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg5MjYyNDY0cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM4OTI2MjQ2NHEBYS5kAAAAAAAAAF81p1DgenU/Djm7Po9Zxb9vLoXXjk3Jv4txat+XTcQ/m/OzAFrj0b9qGRegwa+1P1HLXl4G8pw/qp3ntgRMlz/CkXhC0gCEP1EqhhzN/rA/FreJBzG8cj8NeBUd4O6cv9kKNIc9Mao/62KMNejNnb8TWp0wY5TSvwK/IejjINO/xARHsJUjwD+tpbuVLk69v+PgN+w28bU/UIWRRFPkvT8q8irNjnqVv751mRdOaX2/44V9NAsjtL9hg2Oa4ePIvy0HQzvYvLM/FFNbEYbEu7+pXZ8/FCPHv9ETPXegB6A/ie2yexT7x7+KGH8wl7fJv48Og0JwpsS//E7ZCFehdT/jq6+DxcCwP6fjaEyADcI/gD1TLRvjwb8wJ5UKz667v8Y2cPyEFdE/c+BW1kK7yL9sqoeW1YfRv478YSfLG52/EykZKu4bwD8rSw5ZS8JbPxMOnpNRq6W/2ehC26bmxL9dGXaIfXTUv3oBKWgQmtG/eltLV/YDqj842QIDz1PYP52oBofRdJK/15uXbcCKwD/MxZM0+Tu1v8xjI6oBdbC/+fL0zBfN2r/aqbtN8iHCP46/IlDn9qg/r1SzV3OSxT+J6oJzHhilP9fm/Lv/+VK/kTO6jRdYiT981yObn8mavzbF0Mjixmq/8m7Da4bMlL8mU1wqqSipvzLYjuWBoG8/4t0s/FEzub/arH/SKtjFP/nbjiEbNnU/ZIge3JeImj90CFZcPfWuP0Vu+t1At8S/hpJODcIVg7/fwRlk0INtPxAIKkBHisE/K+GetcDL2D9BYMyshfWYv60/4RofEbQ/nmeSDKH2xL8+GLK200uQv5XYBQEe57q/n4M2uNgOuj+nESlc233Jv777R4BNv74/79BwLHeVsD++S1tzAPStv18fAvxMx8A/RlevhQBVob8OR+KNryC8v2UcmVuFRcU/OjP/zDqIxb+tSajhyd9YP2mEcPk2ScU/UgzsaT1zwL8qXA+6X3KpP7mxMmPNoci/9RKiguBjq782n4/CryOcP/e/C0lnenu/ueOm3kCVqr/FPXwsIeC1P7n0ivv8rp2/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0MjY1NzYwcQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5NDI2NTc2MHEBYS4CAAAAAAAAAOKbYBUif7A/tMW89SFQr78="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    5,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        5.707069855366,
                        3.099160120627954,
                        0.7231644290615148,
                        -1.472172263301808,
                        1.5127163940197883
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5
                ],
                "values": [
                    5.707069855366,
                    3.099160120627954,
                    0.7231644290615148,
                    -1.472172263301808,
                    1.5127163940197883
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 65
    }
}