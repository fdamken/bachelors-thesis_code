{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "byteorder": "<",
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "shape": [
                        5,
                        5
                    ],
                    "values": "eJwByAA3/0cTWq952+0/2zPaP/lzkb+derXkBaSaP9p18SAWsK6/e6p6SA/4oT/pLP0Um2KqP2ozeXdUBu8/hYZHdXZRgL+leilTdlawP08tZNblL5+/u6J2T9zadL8auVEs3VaQPxXyWPxthe8/efr7sFiIkD8ELi2aIFlwPy/qnXhQeq4/XIvS1E16l79WjDDmJuWfv9HKO8i2q/A/KL9b+0kzvL+L45cqrAGoPw3HghcVzJS/wnLph99JhT91prxlFFywP5quxfdff/A/4ZFmfg=="
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "strides": [
                    8,
                    40
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.0126709652213923,
                    0.004100741672758347,
                    0.014166661259716096,
                    0.0027893207566841213,
                    0.0018568750749404434
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.00021742478440864944,
                    0.00011270143021914692
                ]
            },
            "V0": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "values": "eJxjUGgN8TFqsGdg2BXjsMECSPNZWC1SsmdIUGhqnx4B5M8282Cy2w+XP7Dp+oRekPiO5xpVukDx8wk/FaXsGRyUlvooGe2H64fJX77q0vIl0Z7hwsfMyt0W+xkauE1epKvuR5gP1Q+T/6DjOe9EtD3Dg6pJ0T5W++H2w8yH6YfJX7AW7J7iYg8AxmxICQ=="
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            5
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            5,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk3ODQzMTY4cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5Nzg0MzE2OHEBYS4yAAAAAAAAAH5QXNngt+Q/EmDaw9Xs8L9aK4Sifi/6v8EcEUzH2QLAJYSd7V5cxr8QFSddEfjXP2X5jzgTb/k/s2KWz9Fywz/DV6xpgu+rPycBvWCke/S/jv3NKgTbgT97OgByWcjQv8CH7LH/R/I/6l/4QUsO4b97P9ZpOUgCQFbJQL4l+fG/Nn/0qrL80T9ioJjxMFrYP44wOLarQeI/gQLO0Mz16T+3O4eneAHuvxmkblxyQfI/PHH+dfj90L9Y6i/FFVzoP7qY1FFs2QPALPvTiHLk1T99ZaavwZr9P7povdGjzPS/BRlSP9NMsj/zRVlJVJzWP+22wpOPiJU/rNdukfb8979+hFUjaCTgPypCvbp92c4/S1t0DdFN+z+/+PQRT4DWvy87Ztwuuuu/HNyuwslx/j8mrdwy+GUBQDHhj9yry8y/J/fcXro83L/rZc1DEC3VP/c8O3ZyH+q/zhDaRl/7+j8nxOU9IQDzv4PJWgVPWP4/ymt/JGY85L91vnOYAznhvwVxeNDxQfq/s9JnO8UZ1r8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk3NDU0MjQwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5NzQ1NDI0MHEBYS5kAAAAAAAAABklvtADAoY/yOLyMF/kxL/uLearXkfIvwGz5+xH+sI/ergcWTm/0b9Mnbbxhw6tPzZNuUPRmJc/9CjXt+LqoT+Pr47IcCKAv4ZsRPBW6MI/ovrr63ZXhz8kvYrx1aJdv+oWB/ojBa0/EdnPuO9Pfr8WhI/rMArSv597rkZP2tK/XlnGDNbowD9IptLerK62v+E7ivT8BLU/vfIannf5vD8h+J8ak9eIv2qmllt/OK+/qQxywFtMrb/ou04vICfEv0hNCE221LU/la+VLP62wL+VfMaMwe3Hvy8DPw5Ek6k/bZzuMecMyL/XPsEiONq/v1JZanza6MS/NoWW74Yqjr9tgGDuw3utP/I4ALfN1sE/06DZ9uVYvr9Cq49w7E63v1S4IE906dA/T9wos+bLyL848Eb5i8zQv7Q0MvGkFKi/I5OUevLUvj+Eu8VojZmVP8iQU4qeFHK/ZQTWcypPwr9sbRH+ND3Uvwyo1thKpdG/KOJ3Ti3+oz9AmFOsMxDWPxPaZzZX65i/ZsQwgFSGwz9Kh3COarWzvwlvTaHMAbC/hiLP7kvZ2b/2Nfdq7hrCP3xkjJFJtak/07e7E96Cwz9ZW4FvLfqhPwd0zsZ0pZW/M7D1y4nAkL+9ONqSaEGrv6CZKOVC9YC/19T3FXG/SL9tSXLctuGpvw9anCjl226/Q3Dp9adLub/UBX/fYb7HP/VWGEuPHIW/H9gWTzmWfL8tIyMRqyquPximumck8cS/F6VmvGtNZb/6yUHdO/6Hvz2bnaccvMg/Ql4sjkdi2D/BeX6wC1pEvzWZEgmk4rA/1jfi72aWxL+rHdUcCgygv6RjTKRrnbu/2tD4Duc6sj9pE3e6q07Jv7ZTlP9XTsA/HYSyA8kysD8fN8iYnr2tv64OBO4FbMI/qAhg2CNNqb+ELNdwDOK+v61+81c0Ksc/+x8m9iWHxb/2iEJP6pxyP/5yxrLKosI/VnZbPWOPtb/dkQIse521P+utZlZLBsm/uG80YImZqr8KgRWwTc6QP0cAojQJG4O/1LxnMuEDpr8UCHyfgGG0P9jDhXgdQaa/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkwNzk4MTc2cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5MDc5ODE3NnEBYS4CAAAAAAAAAG5d4EewKK8/hyjrTs4bsL8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    5,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        5.822442262274093,
                        3.001479899118976,
                        0.8471374634096991,
                        -1.6111196151316491,
                        1.5238449856748995
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5
                ],
                "values": [
                    5.822442262274093,
                    3.001479899118976,
                    0.8471374634096991,
                    -1.6111196151316491,
                    1.5238449856748995
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 55
    }
}