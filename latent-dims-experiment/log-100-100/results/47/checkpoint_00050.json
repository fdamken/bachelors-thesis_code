{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "byteorder": "<",
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "shape": [
                        5,
                        5
                    ],
                    "values": "eJwByAA3/2ZnJ1nII+4/MYlyn4ffkb+CYW1Ra9WXPyxg5HC/1au/+DO8/qB6oD8HJea0VRGnP7IOxtyE9u4/sacrKt0Bc79EvAQmIhOuP7hd7aXCbpy/rJ1vcBR7gL/bS81V27GKPzeshbNNje8/JwgQeL6ShT8KB//nDwh0P+iBAZNx/ak/2klZbL/lmr8pgkB67F2av+O6b2BNkPA/3nWzKd+8ur+vvFKeedamP5+XsvjE9pK/HIjmzRz3hT/tUf9DyIqwP0JmG7rZe/A/Hk5pVQ=="
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "strides": [
                    8,
                    40
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.01443931801321867,
                    0.006481492210504784,
                    0.02123687920075263,
                    0.003924883487518295,
                    0.002930485757040329
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.0002896796441655169,
                    0.0001623391550208453
                ]
            },
            "V0": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "values": "eJxjUJjO+ii42Z6B4fc5lQZ7e4aG8N8PzynvZ1iwuPqBSKg9g8NUobd3XPbD5Qt8SmMZUoDqWNZxTpUD6lsk5HZZCSi/R3/zCuv9cP0w+S1vTdRY8uwZLiSvORjkDhTnEvk2X9Iebj5MP0z+SfKJb7bp9gwTlrCwb3Dej7AfZj5UP0xeYVvM1Kd+9gB1vE5e"
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            5
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            5,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg3OTE2NDgwcQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM4NzkxNjQ4MHEBYS4yAAAAAAAAAGk1A7zTRuQ/FvaNoq0o7L9foVsMDNP5vzH0HJizdQLA1Pcx7vbjw79kVzXj67jZP0pxVi984Po/k/3dGYRZwj8n8btJMKOsPyskfAu3+vO/Pljj4TAJrz9Ex7xMlrvRv+Jf1JA3Du8/BKjq95bH4r92c9Sc/CwCQPPO2ZK0X/K/w+ZHh5qC0j9+wkzeh3bVPxpAEdHVQe8/2bQFxH4F6T84Lyi/esbtv0frLFc1pvE/DGMGTDKU0b8RCE7XFRzoP8VMxT5NugPAMYXPA7Bp0D9ZsS974RP9P/aXggqYrvS/Tx9wAq+Gqj/opfPi+fLQP5GfWc5f2Gu/HB/Wr1269r/Uy4q594biP4hXP0G4t9I/qBjhmCM9+z9oKvzFtKzZv9EPwo9Zwuy/64uJsWjh/T/C4aSlaRsBQN6whhstk8y/lrfSIpc927+DeBpx8nDWP59SSppRb+q/Y9bGKpIt+j/YV8z22P3zv/BWhM24PP4/5xGwM+6g479VtMvzRjPfv4a8PjdanPm/3dK1jr1N1L8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkzODg2NDAwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5Mzg4NjQwMHEBYS5kAAAAAAAAALtzENyMP5U/c93j1jSqxL8nxSaMjU/Jvx0Odw4v8ME/ZoxQbeKl0b/yi7+nAcGoP/EmQ6S0So0/QL9TiW6gmT/V+6xe26SZv6tHEutDA8c/2tplmtnYqD9tGnUD05abP+CDPcUTVq8/rN5c3hR9d79nYKJeJvjRv+CcmsDDCdK/hEEnC0qlwD9iAD9+u225v/r1qhi9kLQ/4vWhiA6FvD/IGjykwlCVv7P7wkgr9a6/vzpautL1rL96jw2d+i7Ev7X0FPJ9Tr8/1AsxHYY7wL/kJPTXgM3Lv4Kvlkl0sbg/xAf3YeYfyL9L7ytXVLLBvy+mhBTpwsO/8xuu6z72k7+uJ0S2KB2oPwv1T+0Gi8E/Jw82SOncvL9JPcZ5R9O+v/RbnzNI1NA/XQel+jwqzL/XXv6b8YLQvxY8sJ4gg6S/23Sia07nvj/9LqDMtLGwPzPnZIwuboi/STTBqLABvb/+faqBGiDUv+TqZhqJldG/8RXk7Wc5rj9YPIUNW4zQP0sqvi53UaC/Wc41/0CGwT8Roiu4Li+zv90hWCX/j6m/HqYPA7h22r8a6RL/8Ju+PwLQ/nZA7a8/aLyQImUeuT+BMrX/+o6gP3e3UVYU5mE/0oHJf9tWi7/GVhWXDlCfv3SLPWSOeZm/0FDPaI6ieT81yu9DvW+rv0xVe32RXIU/EHZ6U83Ctb8wMVXKqE7GP4NVlicytpO/ooyyWPSZl78+HkYhKsmnP9Vwoo8Njsa/Xminla1ner9aSq66Wvt6P7lQLuO+Ucw/qXamTuyu1j/jXdyN0LJvv2WxKcRqVKQ/BKHgOW4ux79pew7ONSBtv8hu+7tvWLm/sCAybpA5rz/jv5UjHofJvxgm/5iN5r4/xy3WfYBopj/gAnv1hDSyv/UMPeG6or4/48fr6O73or9AHRgBID+7v5T7tCMP7sE/KdQt95nywb/WmRNi5Tp7P6jSLLsG7r8/Ja6sO9h0ur9Zhka5ury4P3t6iZuDG8e/p/MaVeMlpL9fCWnFw16Vv2irTOzyNna/HCW0jSjLq7/sXhcHo8azP/5d0HbBw6S/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk1MTk3NzYwcQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5NTE5Nzc2MHEBYS4CAAAAAAAAAJjB+XzhP64/prQq55tVs78="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    5,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        5.913764940817592,
                        2.9465907363860855,
                        0.8949983197780944,
                        -1.6891280919920828,
                        1.546995532325206
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5
                ],
                "values": [
                    5.913764940817592,
                    2.9465907363860855,
                    0.8949983197780944,
                    -1.6891280919920828,
                    1.546995532325206
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 50
    }
}