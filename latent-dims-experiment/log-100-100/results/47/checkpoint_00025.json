{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "byteorder": "<",
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "shape": [
                        5,
                        5
                    ],
                    "values": "eJwByAA3/78dfiVq+e4/xGvgTnrwmb9d4Dvs9TegPwoPbitIoKS//XEz7iB8pT9aNdJ0X0qgPxMy6OfxUO4/jrZzClFhV79ciwGfK1+EP13u/1JxAZ6/JRix4cXUOr/qEHrmiG6Cv2og1YkXgO8/q5h0oY9PpL/xCE676xmLv5YiABUxvJo/6BAV2OPgpb/6RlkwR6Nxv9fdA4XkDvA/VEQ5TC7Pur+wXCC0uQKiP/FIDxpOVYS/vC7HxCH+bT+rSgPHi9izP9+BKJBXh/A/T/pjiA=="
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "strides": [
                    8,
                    40
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.11967591777814567,
                    0.0662472906334007,
                    0.10166778564783824,
                    0.030699776269572824,
                    0.0520762691569348
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.00152426553058649,
                    0.0006441555325100125
                ]
            },
            "V0": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5,
                    5
                ],
                "values": "eJxjEHlYY8G70Z7BYHv3rWXJ9gyL7G5u616wn4HhXYLfh679DCvy970L7tkPl7/90z8gc5k9A4PQUkO5EnuGnoqnAU+77Rn+7ZcJ/D8RST9E/gJnm8D1kOX2DA1XbjWoyO5nKFLfmKfeZw83H6YfJq96K9bAeIE9w73PRWwP6hD2w8yH6YfJv2iO/ym2yB4AfF5ZOg=="
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "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"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            5
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            5,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0NjgzNTIwcQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5NDY4MzUyMHEBYS4yAAAAAAAAABH9Cqt79uA/xYWed6tB6L+Flo0IRYr3v7Ij9j5XgwHA6swLw/2wyb9iYlKHscThP8w2qNJkvvo/6Gt13V330z/FAot6LZW/P37aqWZkz/C//RsmlKSY0j+7k2NHwG/Wv4d+jCqgTPM/DTYLG9kp37+kqGa4dPYAQLwyq9LeEPS/x8MfXrr1tT8kyN6jKMKQP3GTiVSsScs/76nUiFFx4z98BF9Yz8jlv/3FKaqJvuc/jXiruyYZ1L+yWf/j6knqP+SaeQpM2ALA2BpgjXv9vT9OXiRgc5f7PxGftuQjAfK/G9fEBli5lr+fWKfUFAm1P/pL4CxDj7y/NQd0+fuK8r8oaXxIStXhP4drU43dZdQ/8eO1pOWt9j8eB+YDlbbQvy0x1j8hyOu/SZJq0FgT+z9bCrIELHz9P+b1B7m+b9W/hhMLli8HzL8ECu2kM7DYPxI1j/PVm+i/zah+PQVC8j8gXVKrY3jwv9XHk1ItL/w/7fZGaYuk079D1p3J68rKv7qWmrYGJvi/R3h0/YSNxL8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk1NTI5OTIwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5NTUyOTkyMHEBYS5kAAAAAAAAAMXQm0VC2qk/Ft74Jxovwb/Le844TO29v3iz20wXnL0/W1v+B6eMz78WZgKrWgmlPzsFUCLU+rW/Hy1Mc7z/vD/Hf31KPBrBP94GA7hvttQ/hCBAzSThyz+wMY8dE7ayvzHnKakHlLU/kD2U1BwSsz+iBlTjJIHQvwpGC79i8Ma/gfreIBMovD8DQ9P8mKzMv1gbXTN1iao/R2E1eSUCtD9dwIRiRdTLPxyh9UkPQpS/mZ4CV9S/rz9jGHfBwV7Gv2tsg7mUJME/nA5cg/u9tr+Rp/pSVhrQv2gtWficOM8//1eOw+Ylwb9vKq+n0jGeP8xnDacQKMC/zG5Wh+CApr+fUa6lJUSwv2TbkNSwCbs/w5ddHGSRu780nFMirPPGv/gKZCsFAM8/5MV2j/WJ0L+53DYCxP3Nv+sAU+rrKae/zhYSQEmcvj+w8o1H/WGZP95m+uzS3Ji/1zxk4V44nD8VagcerknSv1ZWmeWKbc6/Ovxb+WrSqT+KgxNXGKexP/Y3lYL1QK+/aO4DvIpJwT+p76AoggOpv2+gBAUWIrS/Zg4KljbqyL+i/Y5WXNi4Py6Lj62iTKI/7uWKCj8gtD9COR9oQFqfP+unmJscrsY/cAbqRvOUbL8FR4Y3EsTHv7DYG+kn79E/b08TXPB5vD+elVo9demlvz8RxesEo8C/Q+wLdE1wvb/uQKCsu+XBP37zDTztAHq/UqQtijXXoD+/U65RRDWzP5lxk2wCIca/1HTQ2iZovL/fDmzEvzOmvwqIio65nLY/HGQVPPQa0j/xkRdMWVS8P/tkQPIleZq/O0kSdGeUw7/tj4YkC4uiP34Lk+6h47m/xdECQ/kowj8LXkWe0bXHv4mqkfjM7L4/QZrbBeeesL9vQ2Na7M2qv8JkQ5UJlbE/+cGiZrhiob/2ot/0g2apv3Qcl0cP7bM/W2MpitRkvL+9Zq0CJXqNv7nSRe9Xtq4/IZ0137bdvr8IsG4jxDO+P95Q8pFtBMG/DfbXszhNsb/0uXTDXlyxvyXk/3speLi/IIoCkZBkoz/J69qQKbuyP05d++xV5LC/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg3ODI2MTEycQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM4NzgyNjExMnEBYS4CAAAAAAAAADgT/TWhWJ4/ZG5ar8LjqL8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    5,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        6.208950346184115,
                        2.316659523820772,
                        0.9151071268587709,
                        -2.225273009902265,
                        1.393035826140701
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    5
                ],
                "values": [
                    6.208950346184115,
                    2.316659523820772,
                    0.9151071268587709,
                    -2.225273009902265,
                    1.393035826140701
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 25
    }
}