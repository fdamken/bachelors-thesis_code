import matplotlib.pyplot as plt
import numpy as np
import unittest
from src.orig.lds import lds



class TestPortedMatlabCode(unittest.TestCase):
    def test_state6d_observation10d(self):
        self._test(
                X = np.array([[1.00656466, 2.00155238, 3.0046599, 4.0209807, 5.996403, 7.99321034, 3.00690966, 4.01321465, 4.99084304, 5.99377945],
                              [1.09873851, 2.19652012, 3.2964232, 4.40367785, 6.61398663, 8.79304315, 3.29624531, 4.40240467, 5.51719866, 6.59668693],
                              [1.20413469, 2.4150611, 3.63809774, 4.82875912, 7.28228306, 9.62621674, 3.63108701, 4.82594086, 6.07285732, 7.21607326],
                              [1.33351519, 2.64767695, 3.99975945, 5.30519016, 8.00234474, 10.59342605, 4.00089801, 5.30558087, 6.66754377, 7.94182638],
                              [1.46699263, 2.9226465, 4.40185818, 5.85442641, 8.80142995, 11.64831163, 4.40224674, 5.84853303, 7.34415468, 8.7216445],
                              [1.61463487, 3.21285926, 4.8545139, 6.42949387, 9.67751466, 12.80608533, 4.85396906, 6.42683462, 8.0642276, 9.5865745],
                              [1.77276678, 3.53211566, 5.34134655, 7.06896826, 10.62945052, 14.07754636, 5.34267102, 7.06745512, 8.84356765, 10.54225777],
                              [1.95503998, 3.90607468, 5.8767188, 7.77539816, 11.68991211, 15.47366549, 5.87607314, 7.78520072, 9.73091767, 11.57261088],
                              [2.14397632, 4.29578361, 6.44445132, 8.5559501, 12.84011489, 17.02781758, 6.44764748, 8.56110209, 10.68557522, 12.74141149],
                              [2.36318612, 4.72601076, 7.07773583, 9.39669725, 14.13129778, 18.74320149, 7.08578636, 9.39746119, 11.76420977, 14.02262148],
                              [2.59815076, 5.20838287, 7.7980903, 10.32279465, 15.55274531, 20.63023663, 7.79862247, 10.32625699, 12.96088199, 15.43304755],
                              [2.85176095, 5.73334182, 8.57553551, 11.39436158, 17.12254431, 22.68879732, 8.57356436, 11.38731335, 14.26448839, 16.95991969],
                              [3.14152325, 6.29350458, 9.43664074, 12.53796136, 18.8232795, 24.95630079, 9.43115274, 12.53322234, 15.6801441, 18.65747414],
                              [3.45610485, 6.95359775, 10.3820323, 13.80342182, 20.71701802, 27.48525021, 10.39179578, 13.79826589, 17.2636212, 20.52869377],
                              [3.79901, 7.65388908, 11.42367773, 15.16889472, 22.78438558, 30.25527665, 11.41712956, 15.17154488, 18.97419346, 22.60276308],
                              [4.1774435, 8.41573337, 12.57626057, 16.70028248, 25.02989463, 33.27442939, 12.57738856, 16.70226676, 20.85013181, 24.8521962],
                              [4.59059649, 9.25186422, 13.83115724, 18.3747546, 27.53178249, 36.58855193, 13.83056438, 18.37911387, 22.93033178, 27.33343022],
                              [5.06482989, 10.17946023, 15.20619908, 20.22450952, 30.29112347, 40.23714397, 15.21258536, 20.21624263, 25.2210189, 30.06224],
                              [5.57308763, 11.1926171, 16.72729449, 22.23939298, 33.30885924, 44.27933694, 16.72182819, 22.23664977, 27.73669325, 33.08446776],
                              [6.12840004, 12.31850578, 18.41162586, 24.45735303, 36.64963018, 48.70205259, 18.41117219, 24.45379934, 30.51743858, 36.38654348],
                              [6.74596625, 13.55280182, 20.24412855, 26.92871238, 40.29441355, 53.55007392, 20.24239462, 26.924584, 33.5552319, 40.00214788],
                              [7.41469858, 14.90169248, 22.26879826, 29.6130011, 44.30370736, 58.90634264, 22.26801589, 29.61159232, 36.89534586, 44.01216334],
                              [8.159049, 16.38999766, 24.49877851, 32.56565987, 48.74119078, 64.79665465, 24.49931862, 32.55954415, 40.58421487, 48.40281055],
                              [8.98094916, 18.02455945, 26.94984085, 35.82377323, 53.64586642, 71.28567863, 26.9444269, 35.82129801, 44.6580851, 53.2595861],
                              [9.8663126, 19.83219137, 29.6408578, 39.43503627, 59.01919247, 78.4055797, 29.63961534, 39.43352601, 49.14594691, 58.58034189],
                              [10.84765086, 21.80945834, 32.60996618, 43.37439022, 64.90710117, 86.25224023, 32.60473447, 43.37680379, 54.05487473, 64.44352115],
                              [11.94024755, 23.99470341, 35.883773, 47.7152218, 71.42977303, 94.91758266, 35.88507917, 47.70533219, 59.48804775, 70.91733352],
                              [13.12889982, 26.39515662, 39.48537249, 52.48281704, 78.59446773, 104.38502522, 39.48003287, 52.48503812, 65.46787845, 77.9870026],
                              [14.44441322, 29.02565916, 43.43164067, 57.74002045, 86.44214463, 114.82291428, 43.43819214, 57.74340568, 71.99559266, 85.79921251],
                              [15.88947404, 31.92230625, 47.77621209, 63.53152782, 95.08474364, 126.29626209, 47.78282678, 63.52818964, 79.19893424, 94.37100446],
                              [17.47692906, 35.11308059, 52.54919902, 69.88528755, 104.5751073, 138.89840583, 52.54410847, 69.87977594, 87.10097534, 103.77892927],
                              [19.21916836, 38.62872728, 57.78788584, 76.8517179, 115.04213654, 152.81539107, 57.79009679, 76.85063063, 95.8212741, 114.19101737],
                              [21.14550861, 42.48627787, 63.55818683, 84.54985744, 126.55348001, 168.07745222, 63.56105231, 84.54243165, 105.40523418, 125.59189811],
                              [23.25847398, 46.72672244, 69.9231499, 92.98072028, 139.21409163, 184.8526915, 69.92851346, 92.97836391, 115.95204958, 138.13250188],
                              [25.57904658, 51.39369751, 76.92762528, 102.2783662, 153.1311203, 203.32216508, 76.92239048, 102.27619378, 127.55252731, 151.92794648],
                              [28.13112127, 56.54354692, 84.61867392, 112.50008232, 168.46302543, 223.66649897, 84.62562372, 112.50050105, 140.32802361, 167.10747061],
                              [30.95406914, 62.21346419, 93.07359689, 123.76656571, 185.31390846, 246.02162577, 93.07564753, 123.76307359, 154.36351929, 183.8165191],
                              [34.0473846, 68.43021538, 102.39256073, 136.13299144, 203.8468947, 270.61457097, 102.39147432, 136.14184254, 169.79290824, 202.17732587],
                              [37.45577788, 75.28179493, 112.63573741, 149.75109032, 224.22888221, 297.66012762, 112.63289177, 149.75028616, 186.78526887, 222.38228793],
                              [41.19253416, 82.81112858, 123.88904274, 164.72073377, 246.65281587, 327.43765609, 123.89214549, 164.72231553, 205.454051, 244.6325021],
                              [45.30808468, 91.09730501, 136.27530366, 181.17748023, 271.32251759, 360.1961219, 136.27518364, 181.17177949, 226.00819538, 269.09526995],
                              [49.84821475, 100.20535333, 149.90326232, 199.29131702, 298.4385051, 396.20604287, 149.89713343, 199.29443211, 248.59493354, 295.9876584],
                              [54.83502536, 110.22945078, 164.88499748, 219.20666944, 328.26294045, 435.85386084, 164.87885065, 219.21249452, 273.43177266, 325.62569824],
                              [60.31939694, 121.24980365, 181.36859379, 241.14197192, 361.07913621, 479.45145625, 181.36590947, 241.14924555, 300.75646546, 358.19680449],
                              [66.34501833, 133.37938768, 199.49044831, 265.28397988, 397.1458759, 527.43675474, 199.49253271, 265.283193, 330.80049403, 394.0533922],
                              [72.97981779, 146.70794596, 219.42689176, 291.81792989, 436.86488869, 580.15919159, 219.42988964, 291.81500706, 363.88776436, 433.45693315],
                              [80.27656923, 161.38382908, 241.38889556, 321.01296609, 480.52298978, 638.15806211, 241.38532478, 321.01081284, 400.24093457, 476.77242987],
                              [88.30059924, 177.53099963, 265.51515732, 353.15047032, 528.58744885, 701.986363, 265.52061196, 353.14786086, 440.2759289, 524.46348148],
                              [97.13362866, 195.288161, 292.07309032, 388.45719552, 581.44506968, 772.21721203, 292.07595167, 388.45375551, 484.31484503, 576.92405365],
                              [106.84795734, 214.82993136, 321.29169879, 427.30554685, 639.58707776, 849.41542553, 321.2907149, 427.31173938, 532.74398715, 634.58291467]]),
                K = 6,
                expected_A = np.array([[0.3481927, -0.0263047, 0.0236092, -0.0454983, 0.0617564, 0.0679586], [-0.5760616, 0.7152031, -0.0067554, -0.0032237, 0.0602832, 0.1238487],
                                       [-0.5738643, -0.0957931, 0.7862912, -0.0712341, 0.0704619, 0.1912451], [-1.3197754, -0.6501853, 0.2969984, 0.7199196, 0.3143660, 0.1606400],
                                       [-0.0213126, -0.8584805, -0.2375248, 0.0674260, 0.9120546, 0.4008564],
                                       [-1.1993624, -0.7885525, -0.4570611, -0.1501613, 0.3404071, 1.4267959]]),
                expected_Q = np.array([[0.27241, 0, 0, 0, 0, 0], [0, 5.26995, 0, 0, 0, 0], [0, 0, 14.42310, 0, 0, 0], [0, 0, 0, 48.05964, 0, 0], [0, 0, 0, 0, 26.23670, 0],
                                       [0, 0, 0, 0, 0, 3.12331]]),
                expected_C = np.array([[-0.381220, -0.061911, -0.021875, 0.017974, 0.061631, 0.145465], [-0.766741, -0.123316, -0.044577, 0.036017, 0.123848, 0.292544],
                                       [-1.146431, -0.187241, -0.065730, 0.054490, 0.185651, 0.437229], [-1.522048, -0.248886, -0.086691, 0.071476, 0.246698, 0.581501],
                                       [-2.282403, -0.372246, -0.131706, 0.108183, 0.371094, 0.869638], [-3.029169, -0.491189, -0.174019, 0.141509, 0.491229, 1.155765],
                                       [-1.146433, -0.187358, -0.065611, 0.054454, 0.185661, 0.437225], [-1.522303, -0.248919, -0.086718, 0.071546, 0.246715, 0.581508],
                                       [-1.900931, -0.310378, -0.109870, 0.090256, 0.309413, 0.724183], [-2.262458, -0.367819, -0.129401, 0.105431, 0.367389, 0.863219]]),
                expected_R = np.array([0.000021034, 0.000054583, 0.000048034, 0.000137012, 0.000122996, 0.000239927, 0.000045468, 0.000124693, 0.000098830, 0.000176742]),
                expected_x0 = np.array([[3.4983], [-24.5147], [-40.0398], [-55.1718], [-85.0948], [-117.7485]]),
                expected_P0 = np.array(
                        [[0.05105660, -0.02646941, -0.00433552, 0.02201083, 0.04612712, 0.09955844], [-0.02646941, 0.29783934, -0.03793635, 0.00746559, 0.02778223, 0.03938690],
                         [-0.00433552, -0.03793635, 0.35384477, -0.00044069, 0.01388014, 0.01985653], [0.02201083, 0.00746559, -0.00044069, 0.35758138, -0.00780101, 0.01993550],
                         [0.04612712, 0.02778223, 0.01388014, -0.00780101, 0.35142405, -0.01363158], [0.09955844, 0.03938690, 0.01985653, 0.01993550, -0.01363158, 0.28418335]]),
                expected_LL = 1351.19,
                # A 10D state is less stable than 3D or less. Be a bit more patient.
                delta = 1)


    def test_state10d_observation6d(self):
        self._test(
                X = np.array([[1.99936483, 3.99617196, 6.02189139, 8.02292202, 9.98342, 12.00407381], [2.19870549, 4.3991568, 6.61336584, 8.79506097, 11.00042587, 13.21011533],
                              [2.42283187, 4.81772985, 7.26731931, 9.66035292, 12.11608343, 14.49409598], [2.66551089, 5.2963533, 8.01053446, 10.635214, 13.3018233, 15.94178448],
                              [2.92633834, 5.8296918, 8.81627534, 11.73058427, 14.6412957, 17.55128543], [3.22514061, 6.4119503, 9.71808479, 12.90124938, 16.08270648, 19.3089181],
                              [3.54974225, 7.04931862, 10.68994704, 14.17916327, 17.66134426, 21.24450205],
                              [3.90267209, 7.75739771, 11.76891854, 15.61759097, 19.44297926, 23.32782518],
                              [4.28758807, 8.53393249, 12.92105499, 17.19633666, 21.35645865, 25.66603652],
                              [4.71691617, 9.39617131, 14.208911, 18.90060147, 23.49142941, 28.24411572],
                              [5.18473969, 10.34328212, 15.64185833, 20.80370405, 25.85694366, 31.06239008],
                              [5.709824, 11.38398964, 17.19096443, 22.91860795, 28.44662297, 34.16574368],
                              [6.28046717, 12.51906785, 18.91084503, 25.20318886, 31.28614926, 37.59452067],
                              [6.90785717, 13.79605446, 20.81646639, 27.74482934, 34.41800743, 41.35495163],
                              [7.60335661, 15.18856502, 22.87733836, 30.51550268, 37.84473887, 45.49928348],
                              [8.34594544, 16.70527774, 25.17911252, 33.57235631, 41.63564604, 50.04605263],
                              [9.19116323, 18.36323805, 27.66171138, 36.92325478, 45.79040398, 55.02299727],
                              [10.11392436, 20.19689091, 30.42750925, 40.60992376, 50.36889319, 60.5333268],
                              [11.12139516, 22.22431187, 33.46163142, 44.66093432, 55.41357889, 66.60849385],
                              [12.23649939, 24.44408258, 36.82289063, 49.1344109, 60.97506376, 73.27840743],
                              [13.45269491, 26.8816653, 40.50627172, 54.08327054, 67.0684878, 80.59512025],
                              [14.78821722, 29.56801074, 44.56060465, 59.47973513, 73.75247958, 88.66883578],
                              [16.27438579, 32.52814083, 49.02422783, 65.40403751, 81.13527355, 97.5542319],
                              [17.91402526, 35.77817951, 53.94225392, 71.94053444, 89.27804225, 107.32962826],
                              [19.70214518, 39.35462798, 59.32870195, 79.17090843, 98.20702505, 118.09213776],
                              [21.66404207, 43.28831485, 65.25260141, 87.08612347, 108.02396273, 129.9162574],
                              [23.8363414, 47.63506123, 71.79537092, 95.79787335, 118.86424884, 142.96331134],
                              [26.2210924, 52.39170871, 78.96519408, 105.38613076, 130.78777226, 157.23695787],
                              [28.84390033, 57.62389038, 86.86683901, 115.92457846, 143.84578355, 172.95452097],
                              [31.73338527, 63.38461939, 95.55172897, 127.49836244, 158.21018694, 190.26777838],
                              [34.89818026, 69.7135891, 105.08376695, 140.2332854, 174.04002937, 209.28210852],
                              [38.38580147, 76.68794025, 115.57045314, 154.2466121, 191.44394596, 230.23527198],
                              [42.22517528, 84.34962152, 127.12038665, 169.68751564, 210.56377761, 253.25088772],
                              [46.45379228, 92.76739601, 139.83759736, 186.63855585, 231.61284303, 278.55009402],
                              [51.09009635, 102.03597992, 153.82320424, 205.30043573, 254.79786436, 306.39212514],
                              [56.20270479, 112.25685708, 169.19718351, 225.8144158, 280.26831455, 337.01139764],
                              [61.82327407, 123.47627271, 186.11036639, 248.43710206, 308.30071488, 370.71554848],
                              [68.01061055, 135.8270631, 204.72545013, 273.28804637, 339.13579243, 407.74876133],
                              [74.8054283, 149.40810539, 225.2234676, 300.61274492, 373.06417116, 448.52463739],
                              [82.28631169, 164.3465911, 247.72572278, 330.69036761, 410.3583452, 493.38098701],
                              [90.52247143, 180.79940011, 272.46653375, 363.73594999, 451.3992676, 542.73181293],
                              [99.56571064, 198.87656618, 299.70730782, 400.10814583, 496.5138419, 596.98987505],
                              [109.51691434, 218.76927182, 329.6789191, 440.12366365, 546.1539825, 656.70671431],
                              [120.47218198, 240.65061729, 362.65161142, 484.1476161, 600.75605289, 722.36218396],
                              [132.5045608, 264.73437322, 398.90880675, 532.58017728, 660.79142428, 794.64288269],
                              [145.75728079, 291.18889915, 438.78796596, 585.84608637, 726.86925328, 874.09060539],
                              [160.32790651, 320.30692594, 482.67328119, 644.4453301, 799.5287573, 961.45569931],
                              [176.36661721, 352.34777519, 530.92922091, 708.93468814, 879.48343226, 1057.61739284],
                              [193.99415549, 387.60246349, 584.03132052, 779.79940358, 967.43160168, 1163.38865981],
                              [213.39195969, 426.36021181, 642.44569635, 857.79457932, 1064.1767135, 1279.66975685]]),
                K = 10,
                expected_A = np.array([[0.4874679, -0.1203505, -0.0022180, -0.0296527, 0.0635012, 0.1086218, 0.1398700, 0.1398700, 0.1398700, 0.1398700],
                                       [-0.2455860, 0.9118421, 0.0026236, 0.0233815, -0.0951524, 0.1588326, 0.2591244, 0.2591245, 0.2591244, 0.2591244],
                                       [-0.3560860, 0.1911377, 0.6686090, 0.0559606, -0.0253538, 0.1876521, 0.3973556, 0.3973564, 0.3973554, 0.3973547],
                                       [0.1488799, -0.8175261, 0.1899452, 0.7721571, 0.2943077, 0.1212519, 0.5264748, 0.5264747, 0.5264748, 0.5264748],
                                       [-1.1401516, -0.1985248, -0.0743456, 0.1413497, 1.1351641, 0.1570816, 0.7145796, 0.7145797, 0.7145796, 0.7145796],
                                       [-1.5891125, -0.5117404, -0.0650346, 0.1711320, 0.3211076, 1.1709736, 0.8760476, 0.8760476, 0.8760476, 0.8760476],
                                       [-0.0347696, 0.0145632, -0.0090948, 0.0190563, -0.0168389, 0.0065146, 1.0042704, 0.0042704, 0.0042704, 0.0042704],
                                       [-0.0347696, 0.0145632, -0.0090947, 0.0190563, -0.0168389, 0.0065146, 0.0042704, 1.0042704, 0.0042704, 0.0042704],
                                       [-0.0347696, 0.0145632, -0.0090947, 0.0190563, -0.0168389, 0.0065146, 0.0042704, 0.0042704, 1.0042704, 0.0042704],
                                       [-0.0347696, 0.0145632, -0.0090948, 0.0190563, -0.0168389, 0.0065146, 0.0042704, 0.0042704, 0.0042704, 1.0042704]]),
                expected_Q = np.array([[0.00000063780, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0.00001899936, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0.05975277332, 0, 0, 0, 0, 0, 0, 0],
                                       [0, 0, 0, 0.00005647366, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0.00002972819, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, -0.00000582550, 0, 0, 0, 0],
                                       [0, 0, 0, 0, 0, 0, 0.00000825944, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0.00000825947, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0.00000825944, 0],
                                       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00000825946]]),
                expected_C = np.array([[-0.6847417, -0.1469024, 0.0039869, 0.0812304, 0.0927270, 0.2025374, -0.0493268, -0.0493268, -0.0493268, -0.0493268],
                                       [-1.3696923, -0.2765270, -0.0088953, 0.1647666, 0.1866599, 0.4049574, -0.0986554, -0.0986554, -0.0986554, -0.0986554],
                                       [-2.0651736, -0.4240309, -0.0051290, 0.2462370, 0.2808089, 0.6104177, -0.1485663, -0.1485663, -0.1485663, -0.1485663],
                                       [-2.7554229, -0.5648030, -0.0100368, 0.3299716, 0.3755658, 0.8145575, -0.1984413, -0.1984413, -0.1984413, -0.1984413],
                                       [-3.4146260, -0.7264616, 0.0157413, 0.4065081, 0.4621314, 1.0093656, -0.2459901, -0.2459902, -0.2459900, -0.2459900],
                                       [-4.1214648, -0.7764561, -0.0705573, 0.4974171, 0.5656299, 1.2151687, -0.2963823, -0.2963822, -0.2963823, -0.2963823]]),
                expected_R = np.array([0.000015892, 0.000030514, 0.000124163, 0.000175033, 0.000071452, 0.000022059]),
                expected_x0 = np.array([[-9.7081], [-49.9861], [-81.9138], [-112.9251], [-139.6245], [-172.6500], [5.7209], [5.7209], [5.7209], [5.7209]]),
                expected_P0 = np.array([[0.01538659, 0.00694806, 0.00996696, 0.01459831, 0.02764007, 0.03810134, -0.00026432, -0.00026449, -0.00026427, -0.00026414],
                                        [0.00694806, 0.00552407, 0.00755053, 0.01002451, 0.01356423, 0.01700192, -0.00011767, -0.00011760, -0.00011769, -0.00011775],
                                        [0.00996696, 0.00755053, 0.01111755, 0.01995245, 0.01755866, 0.02243106, -0.00050588, -0.00050371, -0.00050656, -0.00050834],
                                        [0.01459831, 0.01002451, 0.01995245, 0.11513492, -0.00068816, 0.00501313, -0.00537767, -0.00537793, -0.00537760, -0.00537738],
                                        [0.02764007, 0.01356423, 0.01755866, -0.00068816, 0.05918835, 0.07707634, 0.00093987, 0.00093985, 0.00093989, 0.00093990],
                                        [0.03810134, 0.01700192, 0.02243106, 0.00501313, 0.07707634, 0.10448098, 0.00105012, 0.00104982, 0.00105024, 0.00105047],
                                        [-0.00026432, -0.00011767, -0.00050588, -0.00537767, 0.00093987, 0.00105012, 0.75029410, -0.24970588, -0.24970591, -0.24970593],
                                        [-0.00026449, -0.00011760, -0.00050371, -0.00537793, 0.00093985, 0.00104982, -0.24970588, 0.75029414, -0.24970589, -0.24970591],
                                        [-0.00026427, -0.00011769, -0.00050656, -0.00537760, 0.00093989, 0.00105024, -0.24970591, -0.24970589, 0.75029409, -0.24970593],
                                        [-0.00026414, -0.00011775, -0.00050834, -0.00537738, 0.00093990, 0.00105047, -0.24970593, -0.24970591, -0.24970593, 0.75029405]]),
                expected_LL = 952.076,
                # A 10D state is less stable than 3D or less. Be a bit more patient.
                delta = 1)


    def test_state3d_observation3d(self):
        self._test(
                X = np.array([[0.00638699, -0.00117769, 1.00130776], [1.01032855, 2.0046205, 0.9990908], [2.00816343, 3.9979599, 0.99610263], [3.00146504, 5.98712799, 0.99523823],
                              [4.00138927, 7.98485319, 0.9951815], [4.99105759, 9.98741895, 0.99220059], [5.99174662, 11.97307853, 0.99240306],
                              [6.98034317, 13.95205674, 0.99052856], [7.96967405, 15.92016887, 0.99014478], [8.96138477, 17.90272298, 0.9886416],
                              [9.94262122, 19.87477107, 0.98634692], [10.9261943, 21.84063415, 0.98806541], [11.91392185, 23.81111784, 0.9739718],
                              [12.88765958, 25.75906553, 0.97258377], [13.85923589, 27.69957544, 0.97874053], [14.83458456, 29.65730874, 0.97026931],
                              [15.81071265, 31.60469313, 0.97358333], [16.78656197, 33.56242359, 0.97495556], [17.76041834, 35.50522098, 0.97612526],
                              [18.72453401, 37.44626962, 0.97060386], [19.69452415, 39.37808784, 0.97958889], [20.66689477, 41.31486174, 0.973194],
                              [21.64300611, 43.26474051, 0.96905126], [22.61488062, 45.19838116, 0.97137287], [23.57818224, 47.14916534, 0.96781657],
                              [24.55076189, 49.083292, 0.96246802], [25.52273074, 51.01023539, 0.96344874], [26.48658343, 52.93524149, 0.97000441],
                              [27.44592852, 54.85802702, 0.96227215], [28.41517313, 56.78243637, 0.96983638], [29.37531534, 58.70232496, 0.96010586],
                              [30.32834376, 60.61708528, 0.95787836], [31.29019983, 62.5221033, 0.95620396], [32.24665661, 64.4361445, 0.96018168],
                              [33.19900068, 66.34508118, 0.97066135], [34.15971909, 68.26300235, 0.96389484], [35.11696899, 70.19355956, 0.9540551],
                              [36.08228371, 72.1012632, 0.9550594], [37.03573019, 74.02028818, 0.95409737], [37.99857296, 75.93237177, 0.95244948],
                              [38.94796877, 77.82981371, 0.95029297], [39.89636053, 79.73025762, 0.95983615], [40.85719304, 81.65538338, 0.9498911],
                              [41.81206851, 83.54783476, 0.94595833], [42.75613328, 85.45114263, 0.95477331], [43.71960572, 87.35360952, 0.95949942],
                              [44.67702249, 89.27125047, 0.96035269], [45.63534219, 91.18301489, 0.96686452], [46.6058489, 93.10967018, 0.96703263],
                              [47.57385461, 95.04060515, 0.9691818]]),
                K = 3,
                expected_A = np.array([[0.7913131, 0.1072774, -0.4706017], [-0.4221447, 1.2133847, -0.5690735], [-0.0049835, 0.0061686, 0.6419861]]),
                expected_Q = np.array([[0.0000278715, 0, 0], [0, 0.0000216066, 0], [0, 0, 0.0000023456]]),
                expected_C = np.array([[0.197905951, 0.432250256, -1.272405574], [0.394887769, 0.863951395, -2.548929429], [0.000039012, -0.000474456, 0.003613186]]),
                expected_R = np.array([0.000021839, 0.000017608, 0.000041501]),
                expected_x0 = np.array([[-16.8776], [-31.4180], [5.5274]]),
                expected_P0 = np.array([[0.036605, 0.050070, 0.022655], [0.050070, 0.068495, 0.030991], [0.022655, 0.030991, 0.014022]]),
                expected_LL = 536.967)


    def test_state2d_observation2d(self):
        self._test(
                X = np.array([[0.00361892, 0.00394178], [5.98127430e-03, -1.58766809e-05], [-0.00186396, -0.00072831], [-0.00512787, -0.01305985], [-0.0057148, -0.01488854],
                              [0.00172061, -0.01739807], [-0.00370347, -0.01229228], [-0.00387223, -0.01081579], [0.00039202, -0.02889073], [-0.00596962, -0.0393046],
                              [2.30492385e-05, -4.37881928e-02], [-0.00570453, -0.0483294], [-0.00256119, -0.06920773], [-0.00282494, -0.06797544], [-0.00830006, -0.07688314],
                              [-0.01529619, -0.09292184], [-0.0106357, -0.08630195], [-0.00916236, -0.09763933], [-0.01973337, -0.10025858], [-0.01202846, -0.12131976],
                              [-0.00957165, -0.1259183], [-0.01533161, -0.13884111], [-0.02141726, -0.14755948], [-0.02735671, -0.17238522], [-0.02777585, -0.18362367],
                              [-0.03613078, -0.20636744], [-0.03309711, -0.22110595], [-0.04822117, -0.2443785], [-0.04678666, -0.25219163], [-0.04729204, -0.28347328],
                              [-0.04905907, -0.32462072], [-0.06012116, -0.34014358], [-0.06727619, -0.37515551], [-0.07487659, -0.40501297], [-0.07907032, -0.45683496],
                              [-0.0941712, -0.48938592], [-0.10108644, -0.53819774], [-0.10444969, -0.58445043], [-0.11698965, -0.64489067], [-0.1275752, -0.70182188],
                              [-0.13560718, -0.77190516], [-0.14755204, -0.83763208], [-0.16875566, -0.93534016], [-0.18190589, -1.02126296], [-0.20185475, -1.10847173],
                              [-0.22252754, -1.23267645], [-0.24026533, -1.35333695], [-0.27002782, -1.49528988], [-0.29425273, -1.65445811], [-0.32689134, -1.8238864]]),
                K = 2,
                expected_A = np.array([[1.040007, 0.022372], [0.148327, 1.060737]]),
                expected_Q = np.array([[0.00000061698, 0], [0, 0.00003410682]]),
                expected_C = np.array([[0.0082166, 0.0592152], [0.0451099, 0.3248670]]),
                expected_R = np.array([0.000016490, 0.000031421]),
                expected_x0 = np.array([[-0.64860], [1.33886]]),
                expected_P0 = np.array([[0.000000149880, -0.000000073696], [-0.000000073696, 0.000000301574]]),
                expected_LL = 382.716)


    @unittest.skip
    def test_state2d_observation1d(self):
        # self._test(
        #        X = np.array([[1.14440269], [1.78560705], [3.12948244], [3.67578711], [2.65856131], [4.13543894], [4.3788163], [1.26264305], [0.99201493], [2.22701278]]),
        #        K = 2,
        #        expected_A = [],
        #        expected_Q = [],
        #        expected_C = [],
        #        expected_R = [],
        #        expected_x0 = [],
        #        expected_P0 = [],
        #        expected_LL = 0)
        self.fail(msg = 'This does not even work with the original code iff initialization via factor analysis is not performed.')


    def test_state1d_observation2d(self):
        self._test(
                X = np.array(
                        [[0.3011789, 1.90939822], [2.31946075, 4.9700876], [5.96926442, 9.10395858], [4.995872, 10.64384584], [3.28764304, 9.54745763], [3.76587575, 10.84088336],
                         [1.91679625, 9.90093096], [3.6902987, 5.17470058], [2.98179419, 4.02210119], [2.50681181, 6.29996913], [5.12481847, 4.99151513], [2.17272657, 0.29241116],
                         [-1.46654194, 0.73136154], [2.62760341, 3.40885927], [0.99387766, 0.74845933], [-0.24975245, 2.29837489], [-1.60567651, 2.23360153],
                         [-0.61426206, 1.55114132], [3.11813269, 2.41537463], [1.83228862, 4.10725191], [0.42359523, -0.19228057], [0.14355008, -0.09305687],
                         [0.31183719, -1.70331472], [-1.50861919, -1.86430733], [0.14236486, -7.8456299], [-0.78492661, -2.23891976], [-3.58910733, -1.8671838],
                         [1.81683082, -1.27939873], [-2.12620121, -1.5386451], [-1.70087938, -1.17750087], [0.55547395, -2.62164687], [-1.83230585, -4.62528505],
                         [-0.48981596, -1.71077622], [-3.19239668, -2.97640267], [-2.81002309, -3.57895583], [1.56345219, -1.96114467], [-0.84506866, -4.19312475],
                         [-0.69210414, 1.92898537], [-0.62286966, -2.14773386], [-1.08588681, -4.34077078], [-2.8694623, -1.18293771], [-2.73596975, -4.03404997],
                         [-5.76760685, -9.79255352], [-7.87173227, -11.26056334], [-6.5113265, -15.66243689], [-6.09683651, -10.43376192], [-5.57936701, -7.35564707],
                         [-4.26340758, -3.71905426], [-0.5168887, -4.9944189], [-2.75182402, -6.55992198], [-2.64575872, -7.23312114], [-2.39278708, -6.62475376],
                         [0.50145041, -2.02205863], [-0.61855155, 2.63281869], [1.237738, 6.15913572], [4.14468708, 8.64670727], [1.56914334, 4.01221113], [1.372319, 3.44517631],
                         [3.04247093, 3.76370178], [3.55398348, 11.70342966], [3.60088818, 8.11171334], [5.17938695, 12.00057128], [6.06167448, 11.13179307],
                         [3.39088513, 9.25583604], [2.56338623, 8.89516862], [3.62008479, 9.95749606], [3.33596343, 10.41072279], [7.27710237, 12.98117437],
                         [2.47083301, 8.32260567], [5.25210839, 14.49602706], [6.9370144, 12.01132637], [5.80643037, 13.57792138], [4.82443642, 9.63228931],
                         [8.54855757, 7.9095603], [3.96492984, 11.82389655], [7.87656887, 14.04716512], [7.73516735, 12.51524759], [7.14463798, 13.23887728],
                         [11.00868135, 17.36038484], [9.4399633, 21.95726417], [9.09281529, 19.22431409], [8.7819644, 20.48582353], [8.88381869, 22.11226084],
                         [8.59733719, 22.05904558], [14.84180483, 24.6146433], [14.48855099, 24.39294037], [14.4200215, 25.33816939], [8.65649772, 25.03198101],
                         [11.11852475, 28.0748915], [10.23831443, 21.90615773], [10.86828382, 27.44276105], [11.52530844, 26.48025556], [12.34604935, 26.48848346],
                         [12.81050626, 26.23633116], [13.14239951, 32.80243469], [11.9176094, 25.09653805], [11.64901834, 24.76496759], [10.99895221, 24.86639849],
                         [11.35741384, 25.94689831], [13.92148377, 26.43427591]]),
                K = 1,
                expected_A = np.array([[0.99448]]),
                expected_Q = np.array([[1.1041]]),
                expected_C = np.array([[0.99197], [2.09882]]),
                expected_R = np.array([2.0343, 2.3722]),
                expected_x0 = np.array([[-2.1986]]),
                expected_P0 = np.array([[0.0044810]]),
                expected_LL = -435.105)


    def test_state1d_observation1d(self):
        self._test(
                X = np.array([[1.18754578], [5.81828236], [1.55799504], [6.03092159], [4.86414947], [1.95417335], [-0.94046162], [-0.35895226], [0.16867977], [-4.97614568],
                              [-0.25024938], [-2.83573272], [-0.17174191], [-1.20743678], [-3.54920152], [0.39392382], [-6.13209761], [-5.3336193], [-6.69030779], [-3.7464958],
                              [-2.75915032], [-3.97918115], [-7.00645925], [-3.68448311], [-9.50460825], [-5.96507683], [-4.69356919], [-2.52085979], [-6.48151814], [-3.14023579],
                              [-6.41442181], [-10.23866896], [-3.3821397], [-4.27265451], [-7.44772334], [-2.05494684], [-2.04611725], [-7.41181601], [-9.7951435], [-13.4411126],
                              [-8.50890838], [-8.376266], [-9.48272404], [-6.33107726], [-6.66768028], [-5.51213672], [-9.40362061], [-12.49798935], [-8.2229558], [-9.32401439],
                              [-11.74168965], [-13.07971614], [-10.61037689], [-8.45602453], [-8.64862726], [-11.25500023], [-5.60255822], [-10.70829416], [-14.0449079],
                              [-8.13409547], [-10.7302329], [-9.84756427], [-0.98498105], [-8.55009886], [-8.26869612], [-9.18254811], [-9.77919903], [-8.67268743], [-13.966285],
                              [-14.84794275], [-8.85110949], [-13.63444028], [-11.93155528], [-18.38170758], [-14.02686208], [-13.56200786], [-14.77905474], [-16.48126106],
                              [-11.18579649], [-12.46197817], [-13.54851003], [-15.50508458], [-11.38455733], [-6.90363686], [-13.17743141], [-14.57419674], [-12.09618876],
                              [-10.61808991], [-9.19913943], [-6.74113855], [-13.85545703], [-12.37442405], [-12.17273562], [-13.2628806], [-17.68487873], [-13.01407894],
                              [-17.41182717], [-13.51975992], [-15.28757916], [-18.10475867]]),
                K = 1,
                expected_A = np.array([[0.96103]]),
                expected_Q = np.array([[0.65833]]),
                expected_C = np.array([[1.1845]]),
                expected_R = np.array([5.9909]),
                expected_x0 = np.array([[9.9060]]),
                expected_P0 = np.array([[0.018924]]),
                expected_LL = -248.987)


    def _test(self, X, K, expected_A, expected_Q, expected_C, expected_R, expected_x0, expected_P0, expected_LL, delta = 1e-2):
        T, p = X.shape
        A, Q, C, R, x0, P0, LL, _ = lds(X, K, T, 10000, 0.00001)
        self._assertAlmostEqualMatrices(A, expected_A, 'A', delta = delta)
        self._assertAlmostEqualMatrices(Q, expected_Q, 'Q', delta = delta)
        self._assertAlmostEqualMatrices(C, expected_C, 'C', delta = delta)
        self._assertAlmostEqualMatrices(R, expected_R, 'R', delta = delta)
        self._assertAlmostEqualMatrices(x0, expected_x0, 'x0', delta = delta)
        self._assertAlmostEqualMatrices(P0, expected_P0, 'P0', delta = delta)
        self.assertAlmostEqual(LL[-1], expected_LL, delta = delta)

        plt.plot(np.arange(len(LL)), LL, label = 'Log-Likelihood')
        # plt.plot(np.arange(len(ll)), ll, label = 'Log-Likelihood 2')
        plt.title('Log-Likelihood, %d Time steps' % T)
        plt.xlabel('Iteration')
        plt.ylabel('Log-Likelihood')
        plt.legend()
        plt.show()


    def _assertAlmostEqualMatrices(self, M, expected_M, matrix_name, delta):
        regularized_M = expected_M.copy()
        regularized_M[expected_M == 0] = 1
        relative_delta = np.divide(np.abs(np.subtract(M, expected_M)), regularized_M)
        comparison = relative_delta < delta
        self.assertTrue(comparison.all(), msg = '%s invalid! Expected %s, but was %s. Delta%%: %s; Correct: %s' % (
                matrix_name, str(expected_M).replace('\n', ''), str(M).replace('\n', ''), str(relative_delta * 100).replace('\n', ''), str(comparison).replace('\n', '')))



if __name__ == '__main__':
    unittest.main()
