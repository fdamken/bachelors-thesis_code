{
  "artifacts": [
    "loglikelihood.png",
    "sampled_states.png",
    "states.png"
  ],
  "command": "main",
  "experiment": {
    "base_dir": "/home/fdamken/Development/study/bachelors-thesis/lgds/src",
    "dependencies": [
      "matplotlib==3.1.3",
      "numpy==1.18.1",
      "sacred==0.8.1"
    ],
    "mainfile": "experiment.py",
    "name": "state2d_observation2d_multisequence",
    "repositories": [
      {
        "commit": "c559beae3d3fb9ce7d8a8f7a9113d0a46a3db361",
        "dirty": false,
        "url": "ssh://github/fdamken/lgds.git"
      },
      {
        "commit": "c559beae3d3fb9ce7d8a8f7a9113d0a46a3db361",
        "dirty": false,
        "url": "ssh://github/fdamken/lgds.git"
      },
      {
        "commit": "c559beae3d3fb9ce7d8a8f7a9113d0a46a3db361",
        "dirty": false,
        "url": "ssh://github/fdamken/lgds.git"
      },
      {
        "commit": "c559beae3d3fb9ce7d8a8f7a9113d0a46a3db361",
        "dirty": false,
        "url": "ssh://github/fdamken/lgds.git"
      }
    ],
    "sources": [
      [
        "__init__.py",
        "_sources/__init___d41d8cd98f00b204e9800998ecf8427e.py"
      ],
      [
        "em.py",
        "_sources/em_fbe9d79ac952d79b65becb7dae88005e.py"
      ],
      [
        "experiment.py",
        "_sources/experiment_25a34bdaaaabfabd3b179e68471329f8.py"
      ],
      [
        "util.py",
        "_sources/util_a8f239b2310ac69d19f815c389d82a9e.py"
      ]
    ]
  },
  "heartbeat": "2020-05-16T14:43:06.771412",
  "host": {
    "ENV": {},
    "cpu": "Intel(R) Core(TM) i7-6700HQ CPU @ 2.60GHz",
    "hostname": "dory",
    "os": [
      "Linux",
      "Linux-5.4.0-29-generic-x86_64-with-glibc2.10"
    ],
    "python_version": "3.8.2"
  },
  "meta": {
    "command": "main",
    "options": {
      "--beat-interval": null,
      "--capture": null,
      "--comment": null,
      "--debug": true,
      "--enforce_clean": false,
      "--file_storage": null,
      "--force": false,
      "--help": false,
      "--loglevel": null,
      "--mongo_db": null,
      "--name": "state2d_observation2d_multisequence",
      "--pdb": false,
      "--print-config": false,
      "--priority": null,
      "--queue": false,
      "--s3": null,
      "--sql": null,
      "--tiny_db": null,
      "--unobserved": false
    }
  },
  "resources": [],
  "result": {
    "estimations": {
      "A": {
        "base": {
          "dtype": "float64",
          "py/object": "numpy.ndarray",
          "values": [
            [
              0.7256261756245842,
              -0.5608209687537359
            ],
            [
              0.1831560866031888,
              1.3743730033573294
            ]
          ]
        },
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "shape": [
          2,
          2
        ],
        "strides": [
          8,
          16
        ],
        "values": [
          [
            0.7256261756245842,
            0.1831560866031888
          ],
          [
            -0.5608209687537359,
            1.3743730033573294
          ]
        ]
      },
      "C": {
        "dtype": "float64",
        "order": "F",
        "py/object": "numpy.ndarray",
        "values": [
          [
            0.28858089476228443,
            0.38071225491576344
          ],
          [
            0.5778866859516334,
            0.7623806928164345
          ]
        ]
      },
      "Q": {
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "values": [
          [
            3.411622280825158e-07,
            0.0
          ],
          [
            0.0,
            9.344668574251082e-06
          ]
        ]
      },
      "R": {
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "values": [
          [
            1.3931322087046283e-05,
            0.0
          ],
          [
            0.0,
            0.6407215745439316
          ]
        ]
      },
      "V1": {
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "values": [
          [
            2.272874377688401e-05,
            4.241617186680313e-05
          ],
          [
            4.241617186680313e-05,
            0.00012600847158926207
          ]
        ]
      },
      "pi1": {
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "values": [
          -26.225055633476792,
          -38.772806936985226
        ]
      },
      "x": {
        "byteorder": "<",
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "shape": [
          10,
          2,
          50
        ],
        "values": ""
      }
    },
    "iterations": 1649,
    "log_likelihood": {
      "dtype": "float64",
      "py/object": "numpy.float64",
      "value": 7635.132214863143
    },
    "losses": {
      "A": {
        "dtype": "float64",
        "py/object": "numpy.float64",
        "value": 0.7506681133513461
      },
      "C": {
        "dtype": "float64",
        "py/object": "numpy.float64",
        "value": 1.586415309953219
      },
      "Q": {
        "dtype": "float64",
        "py/object": "numpy.float64",
        "value": 9.681043661805995e-06
      },
      "R": {
        "dtype": "float64",
        "py/object": "numpy.float64",
        "value": 0.6407115745559927
      },
      "V0": {
        "dtype": "float64",
        "py/object": "numpy.float64",
        "value": 0.00013121832825593592
      },
      "m0": {
        "dtype": "float64",
        "py/object": "numpy.float64",
        "value": 48.19833841422966
      },
      "x": {
        "dtype": "float64",
        "py/object": "numpy.float64",
        "value": 960.3721957721899
      }
    }
  },
  "start_time": "2020-05-16T14:42:47.092527",
  "status": "COMPLETED",
  "stop_time": "2020-05-16T14:43:06.769590"
}