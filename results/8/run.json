{
  "artifacts": [
    "loglikelihood.png",
    "sampled_states.png",
    "states.png"
  ],
  "command": "main",
  "experiment": {
    "base_dir": "/home/fabian/bachelor-thesis/lgds/src",
    "dependencies": [
      "matplotlib==3.2.1",
      "numpy==1.18.4",
      "sacred==0.8.1"
    ],
    "mainfile": "experiment.py",
    "name": "state2d_observation2d_multisequence",
    "repositories": [
      {
        "commit": "e82cb58f22e17955dfbbc35516a6d7ec57b03ed5",
        "dirty": false,
        "url": "ssh://github-fdamken/fdamken/lgds.git"
      },
      {
        "commit": "e82cb58f22e17955dfbbc35516a6d7ec57b03ed5",
        "dirty": false,
        "url": "ssh://github-fdamken/fdamken/lgds.git"
      },
      {
        "commit": "e82cb58f22e17955dfbbc35516a6d7ec57b03ed5",
        "dirty": false,
        "url": "ssh://github-fdamken/fdamken/lgds.git"
      },
      {
        "commit": "e82cb58f22e17955dfbbc35516a6d7ec57b03ed5",
        "dirty": false,
        "url": "ssh://github-fdamken/fdamken/lgds.git"
      }
    ],
    "sources": [
      [
        "__init__.py",
        "_sources/__init___d41d8cd98f00b204e9800998ecf8427e.py"
      ],
      [
        "em.py",
        "_sources/em_fbe9d79ac952d79b65becb7dae88005e.py"
      ],
      [
        "experiment.py",
        "_sources/experiment_25a34bdaaaabfabd3b179e68471329f8.py"
      ],
      [
        "util.py",
        "_sources/util_c09411da402310b39da38fd10aca6b35.py"
      ]
    ]
  },
  "heartbeat": "2020-05-17T14:03:06.746874",
  "host": {
    "ENV": {},
    "cpu": "Intel(R) Core(TM) i5-4690 CPU @ 3.50GHz",
    "gpus": {
      "driver_version": "440.64.00",
      "gpus": [
        {
          "model": "GeForce GTX 970",
          "persistence_mode": false,
          "total_memory": 4039
        }
      ]
    },
    "hostname": "H97-D3H",
    "os": [
      "Linux",
      "Linux-4.4.0-176-generic-x86_64-with-Ubuntu-16.04-xenial"
    ],
    "python_version": "3.7.7"
  },
  "meta": {
    "command": "main",
    "options": {
      "--beat-interval": null,
      "--capture": null,
      "--comment": null,
      "--debug": true,
      "--enforce_clean": false,
      "--file_storage": null,
      "--force": false,
      "--help": false,
      "--loglevel": null,
      "--mongo_db": null,
      "--name": "state2d_observation2d_multisequence",
      "--pdb": false,
      "--print-config": false,
      "--priority": null,
      "--queue": false,
      "--s3": null,
      "--sql": null,
      "--tiny_db": null,
      "--unobserved": false
    }
  },
  "resources": [],
  "result": {
    "estimations": {
      "A": {
        "base": {
          "dtype": "float64",
          "py/object": "numpy.ndarray",
          "values": [
            [
              0.725626175629477,
              -0.5608209687442519
            ],
            [
              0.18315608660069818,
              1.3743730033526382
            ]
          ]
        },
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "shape": [
          2,
          2
        ],
        "strides": [
          8,
          16
        ],
        "values": [
          [
            0.725626175629477,
            0.18315608660069818
          ],
          [
            -0.5608209687442519,
            1.3743730033526382
          ]
        ]
      },
      "C": {
        "dtype": "float64",
        "order": "F",
        "py/object": "numpy.ndarray",
        "values": [
          [
            0.288580894796017,
            0.38071225489912364
          ],
          [
            0.5778866860159738,
            0.7623806927846836
          ]
        ]
      },
      "Q": {
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "values": [
          [
            3.41164900883272e-07,
            0.0
          ],
          [
            0.0,
            9.34466322864957e-06
          ]
        ]
      },
      "R": {
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "values": [
          [
            1.3931322087046283e-05,
            0.0
          ],
          [
            0.0,
            0.6407215745416579
          ]
        ]
      },
      "V1": {
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "values": [
          [
            2.2728746262267452e-05,
            4.241616586337991e-05
          ],
          [
            4.241616586337991e-05,
            0.0001260084715030686
          ]
        ]
      },
      "pi1": {
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "values": [
          -26.22505563326888,
          -38.772806936523224
        ]
      },
      "x": {
        "byteorder": "<",
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "shape": [
          10,
          2,
          50
        ],
        "values": ""
      }
    },
    "iterations": 1649,
    "log_likelihood": {
      "dtype": "float64",
      "py/object": "numpy.float64",
      "value": 7635.130432308785
    },
    "losses": {
      "A": {
        "dtype": "float64",
        "py/object": "numpy.float64",
        "value": 0.7506681133394982
      },
      "C": {
        "dtype": "float64",
        "py/object": "numpy.float64",
        "value": 1.586415309982306
      },
      "Q": {
        "dtype": "float64",
        "py/object": "numpy.float64",
        "value": 9.681041356993226e-06
      },
      "R": {
        "dtype": "float64",
        "py/object": "numpy.float64",
        "value": 0.640711574553719
      },
      "V0": {
        "dtype": "float64",
        "py/object": "numpy.float64",
        "value": 0.00013121832453962738
      },
      "m0": {
        "dtype": "float64",
        "py/object": "numpy.float64",
        "value": 48.19833841373098
      },
      "x": {
        "dtype": "float64",
        "py/object": "numpy.float64",
        "value": 960.3721957644906
      }
    }
  },
  "start_time": "2020-05-17T14:02:51.011806",
  "status": "COMPLETED",
  "stop_time": "2020-05-17T14:03:06.745509"
}