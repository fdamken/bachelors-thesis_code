{
  "artifacts": [
    "loglikelihood.png",
    "sampled_states.png",
    "states.png"
  ],
  "command": "main",
  "experiment": {
    "base_dir": "/home/fdamken/Development/study/bachelors-thesis/lgds/src",
    "dependencies": [
      "matplotlib==3.1.3",
      "numpy==1.18.1",
      "sacred==0.8.1"
    ],
    "mainfile": "experiment.py",
    "name": "state3d_observation3d_multisequence",
    "repositories": [
      {
        "commit": "c559beae3d3fb9ce7d8a8f7a9113d0a46a3db361",
        "dirty": false,
        "url": "ssh://github/fdamken/lgds.git"
      },
      {
        "commit": "c559beae3d3fb9ce7d8a8f7a9113d0a46a3db361",
        "dirty": false,
        "url": "ssh://github/fdamken/lgds.git"
      },
      {
        "commit": "c559beae3d3fb9ce7d8a8f7a9113d0a46a3db361",
        "dirty": false,
        "url": "ssh://github/fdamken/lgds.git"
      },
      {
        "commit": "c559beae3d3fb9ce7d8a8f7a9113d0a46a3db361",
        "dirty": false,
        "url": "ssh://github/fdamken/lgds.git"
      }
    ],
    "sources": [
      [
        "__init__.py",
        "_sources/__init___d41d8cd98f00b204e9800998ecf8427e.py"
      ],
      [
        "em.py",
        "_sources/em_fbe9d79ac952d79b65becb7dae88005e.py"
      ],
      [
        "experiment.py",
        "_sources/experiment_25a34bdaaaabfabd3b179e68471329f8.py"
      ],
      [
        "util.py",
        "_sources/util_a8f239b2310ac69d19f815c389d82a9e.py"
      ]
    ]
  },
  "heartbeat": "2020-05-16T14:43:48.113395",
  "host": {
    "ENV": {},
    "cpu": "Intel(R) Core(TM) i7-6700HQ CPU @ 2.60GHz",
    "hostname": "dory",
    "os": [
      "Linux",
      "Linux-5.4.0-29-generic-x86_64-with-glibc2.10"
    ],
    "python_version": "3.8.2"
  },
  "meta": {
    "command": "main",
    "options": {
      "--beat-interval": null,
      "--capture": null,
      "--comment": null,
      "--debug": true,
      "--enforce_clean": false,
      "--file_storage": null,
      "--force": false,
      "--help": false,
      "--loglevel": null,
      "--mongo_db": null,
      "--name": "state3d_observation3d_multisequence",
      "--pdb": false,
      "--print-config": false,
      "--priority": null,
      "--queue": false,
      "--s3": null,
      "--sql": null,
      "--tiny_db": null,
      "--unobserved": false
    }
  },
  "resources": [],
  "result": {
    "estimations": {
      "A": {
        "base": {
          "dtype": "float64",
          "py/object": "numpy.ndarray",
          "values": [
            [
              0.4753667385792544,
              -0.31848417588419187,
              -0.8620097322258745
            ],
            [
              0.3044607483819164,
              0.766991190213988,
              0.07677107838773192
            ],
            [
              0.003217157578301782,
              0.3223232911339544,
              1.3299864759930018
            ]
          ]
        },
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "shape": [
          3,
          3
        ],
        "strides": [
          8,
          24
        ],
        "values": [
          [
            0.4753667385792544,
            0.3044607483819164,
            0.003217157578301782
          ],
          [
            -0.31848417588419187,
            0.766991190213988,
            0.3223232911339544
          ],
          [
            -0.8620097322258745,
            0.07677107838773192,
            1.3299864759930018
          ]
        ]
      },
      "C": {
        "dtype": "float64",
        "order": "F",
        "py/object": "numpy.ndarray",
        "values": [
          [
            -0.1108547082165777,
            0.40546531870094815,
            0.11872957616145519
          ],
          [
            -0.22174843154628712,
            0.8098912530790011,
            0.23686176953552343
          ],
          [
            -0.33347727796733145,
            1.217235815160294,
            0.3558300041761365
          ]
        ]
      },
      "Q": {
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "values": [
          [
            1.6461364088618025e-07,
            0.0,
            0.0
          ],
          [
            0.0,
            1.462622324708013e-05,
            0.0
          ],
          [
            0.0,
            0.0,
            1.7462773438619108e-07
          ]
        ]
      },
      "R": {
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "values": [
          [
            0.12192949004702314,
            0.0,
            0.0
          ],
          [
            0.0,
            2.3759120722388616e-05,
            0.0
          ],
          [
            0.0,
            0.0,
            0.8457912665735421
          ]
        ]
      },
      "V1": {
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "values": [
          [
            6.232883802352104,
            -0.1242813067628057,
            6.262141613222602
          ],
          [
            -0.12428130676388573,
            0.002499435678475895,
            -0.12483765175577996
          ],
          [
            6.262141613222659,
            -0.12483765175464309,
            6.291576019774447
          ]
        ]
      },
      "pi1": {
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "values": [
          -10.525804350139454,
          -45.493554255538164,
          -42.15607212284692
        ]
      },
      "x": {
        "byteorder": "<",
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "shape": [
          10,
          3,
          50
        ],
        "values": ""
      }
    },
    "iterations": 2693,
    "log_likelihood": {
      "dtype": "float64",
      "py/object": "numpy.float64",
      "value": 10924.527476158333
    },
    "losses": {
      "A": {
        "dtype": "float64",
        "py/object": "numpy.float64",
        "value": 1.2652830143651854
      },
      "C": {
        "dtype": "float64",
        "py/object": "numpy.float64",
        "value": 3.3939117262231355
      },
      "Q": {
        "dtype": "float64",
        "py/object": "numpy.float64",
        "value": 1.4651781684244408e-05
      },
      "R": {
        "dtype": "float64",
        "py/object": "numpy.float64",
        "value": 0.8545234421181112
      },
      "V0": {
        "dtype": "float64",
        "py/object": "numpy.float64",
        "value": 12.526907868569953
      },
      "m0": {
        "dtype": "float64",
        "py/object": "numpy.float64",
        "value": 64.47434617196774
      },
      "x": {
        "dtype": "float64",
        "py/object": "numpy.float64",
        "value": 1592.8965969568976
      }
    }
  },
  "start_time": "2020-05-16T14:43:15.908120",
  "status": "COMPLETED",
  "stop_time": "2020-05-16T14:43:48.111561"
}