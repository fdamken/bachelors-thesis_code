{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9920578199545963,
                            0.0038645440119684502,
                            0.0027647610573279234
                        ],
                        [
                            -0.06050158549401368,
                            1.0179381059745896,
                            0.033057518578887536
                        ],
                        [
                            0.15221197104268525,
                            -0.09219170698177714,
                            0.9891329226636734
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.9920578199545963,
                        -0.06050158549401368,
                        0.15221197104268525
                    ],
                    [
                        0.0038645440119684502,
                        1.0179381059745896,
                        -0.09219170698177714
                    ],
                    [
                        0.0027647610573279234,
                        0.033057518578887536,
                        0.9891329226636734
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.2344633764854468,
                    0.004380097852451521,
                    0.00562567236735953
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    8.096296711300966e-05,
                    5.336705099784922e-05
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.001137949891995227,
                        3.8533900320381065e-05,
                        -0.00013175433750900467
                    ],
                    [
                        3.8533900320381065e-05,
                        0.00013948597537272178,
                        0.00012787800049451903
                    ],
                    [
                        -0.00013175433750900467,
                        0.00012787800049451903,
                        0.00015072121438697295
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk5MzYwNDgwcQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM5OTM2MDQ4MHEBYS6WAAAAAAAAAO4+x/lrfcW/EyBAg++8xj95kKXInc3yP9rKzYZYkfS/cHFTmEDd+78i97tM5xn2vzQf+jy5Jg9Az8a6nr6LAkB2Cc//eqf3P4tw1b/ZYM6/XvS05nvj2L+XLDaL5oDWP/ZdXyXxIuM/dfRvugaY1j9uI/Un4EPKv5DbjSkgtPE/6nJ59RbD+j+MKJzuA/X/P7Hbg443Hag/lWD8M4XY6r/pHqpQBk7uvwlNsnYRu4Y/s0zrZU1L8L/I8O+aAu/jv344TCEttcG/KjAu6wJXxL/xAMp/coXNP3in/UrD6cy/N/40OnmSxL93FuJPebTZP2PtntjSRLe/hAJObUFN9D8CW2pub/XbPwPjRCwcxANA0v9O+wy96j8+N2F6YqroP1VcK3rfKdo/lYNG/9jNzr9MdHKfGFjEv44lItJaErI/PX8YqioG4T/RTNiH4g/2v/n+AVLawaS/xDAeY4YR8L9LHWvmTMLcP78lMBjbvQxAaOUSOuIf/T/fpNLEi7L0P02+fZMx7L2/dZJAmfV16b9ThuNQ9RjkP+nDFV+vsdY/eA6zhzLi6r8JU/5se6/XP/9GBDLV1bY/ISlU4qQ59D+nDk6ugyLKv15MQl4EBro/NK7xwDv05T/iCGvXv7PovxNAX61Fsw/AG1bJ4ysA4L9kLq4Lfi4FwEjVJovNh7a/TIovcwhp6b+0CMgeIAHcv9ydBTrV59o/b9I7YGBytb/iu8+CGKOsvxlIC5i97sO/gntdfvgx1b+kP8HFtkrwP8rEw6Q4ycq/nxsMy/RG0b9FWGewIL7NP7QahWuOcMe/CADkIcEN4z+o8phQ9xLrPxPrtDFmegzAxW4XC3zk9r8afk6MP7QGwKQoBFXnGaY/lbPs9eaFvL8shyY3T1f7v4MGaVaxAOE/x+JavQqV0D8DDusNmf64P14ooKoeitU/yWUAhsdh3L8g+pDlfn/gv2Kw2JOaIdI/8Wj9Ewh+4j8sGnePrevkvxAE3Czw+b4/wKKkdY+g8T8hJ0eJUaPWvz4TIdl0Fay/lkH4emv54r84odiDwlrovzHL/axReu0/f3EE1R4+9D+X6O41y4jiP2mOjvCJMus/tMENrwXj7D9w4BYEI2bhPy0L6uVwSdk/9RjmZw3Zrj9MxRLP2sW0v/hGRYYL3Zw/R32TY1nD5T+jtzLAPyTZv0E9l1CX5vS/GAzd3St84b8dQfSqTJ24PzH8q1p+sf2/ZUCJpRQdzL/bvIT+tW39v+xvQMcbGbK/FHdCHd7c8r/OVfP1dNLoP0zZO9rXUsY/q+Bz6lZN4b9o1MhupFHZP7UnPbMTCos/jHuWQMyq8z+VdtutrFLGP6drZdVrcZc/IXZHefzCAECLbTiYC4bgv2Csfrk/DOy/3fv1w+4s8r81QGQPTyHnv0SZkKt6g5m/FlL7Ru7Swb/AY7qud+X8v9tEgBRomtI/YZogJTAq/7+/LQqybUC4v4wgvbw+vL0/Y7HNI44o9T+9YYEw7A2kPzk5w8S4gbQ/875dmXG5s7+LAw545eLzv5srn/mtzrA/myP53pzQ6T8rmuOZg7Dvv19eASOBuM8/7KGLQcRBvz8y+cKB5FPWvw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkzMTM2NTQ0cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5MzEzNjU0NHEBYS4yAAAAAAAAAJF5fsMQ8fM/ZbI5EvBy4L+uaaz6cx4HQLi/+6smHQRACc9dn4XG3b9yGa+RvXP+P5unwTwVG9+/D0nSr2ug4L9xRGHarOnpP2pLqPrwo/k/hlPhW8it0j+G4IaW53wBQMgQdG6SI8G/26n1GEpW3L/lZLHh1QDZP42/7goj2wRAxiGXciQB6D9MJOVuiRjav+xSGcYN0qq/5sil1vMk6b+ox5oLfS7yv83q9wtMls8/5wc3VD1/77/cgBmTPDfoP2v7SQxZxfo/c4IeiiKc+j/Y+0D3wk4KwHKgMTCO4OK/PTZ1reEA0b+UIw9HrgXKvwis79blrPa/9jMa/hJY7b8NIBzH59zVP38esEJuYt4/RU/hO+Kp37+r9KJOZhr7v8JWT/8PDO4/IGxiRE2x778PWXtAedX0vyaiEGD8nPo/X/7f/b6l5j9xBJfbAG33P2ua+8X2RdW/1GiyLWHS+79h9klvmyviv/yqQgOHAPq/Laf8muwq9b+XSMj2Yn/iv4PSYapEHO+/BUh4SsfK+L8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDAzNTAxNDA4cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTQwMzUwMTQwOHEBYS5kAAAAAAAAAJLUtIvAhn2/eQIbdYfd0L8ZWQ1fEFGtPxx4wN1t28e/awKMMwsawz8f679A88bQP7ukBpzDVMk/L3vqY19H0D/C0L5744zCvzmRlxzxAKW/Ls/iBRDhjb9SR0Zkgdaovz1PESfkZqS/DPi1xqppwL/hPLrSz2GaP0dPACmwo9A/+SRhsWl1wD+GxblDLJe1v0/aDK3O1M2/skdwJNmvv7/2SOFHRKWsv6bBrrAoqtE/a1vnf9IU0T/e628orTi5v8nF5wHbU8e/EJIzNGNbnb82t26FCnW5v7a9HEilMbY/rk1z6XIA0T/0iCRVLefKvwCX95ETQLc/eXuLKf6tyL8K6pZaHcPEP8OJ6JFr1NA/iKoakGjy1j/RHuElEzHEP2D4zXFyNsW/pOOhzay4tz8EahYzfLucv34DNThGx64/26qls+zLkj8H+/j+oOPRvzEu9tFYE1c/sOk2wGWq0b8iV60C0tuNP0f1GT5BAK8/ryD5An4jlb9/BRg7LheePxqlGPclTNG/tDTdyNWsy7/q5V5QI8+7P3k0cI8FKbE/U/THGPc1t79Y5LOnzP+pPy+nGRPIlLq/Z4z5pOw9qL8AcRUtn5/Bv059z8JjP8C/fbcXZZ6Fwb/PhrlO57DBv8FhVXc7qIK/WMIXQfBCpL9M+KiEwgfBP2Aa03lKPse/rCpABqVWkz92Zc7DJHzDv0gVJEjf2cE/uUJau9Svzj8D0Oqb6CCyv+lu7tpSwMG/hFtQabNioD8cBF7ZzgO4vz/l1CXlsMA/3UZPqp26kj9o1zmLREilP3s2VkTSvYy/sjj3xKgtpD/LbVj1fDbDv2h1650KR78/AjrjV4YsuT+hkenekgnDv/z9zC8Aoqy/TQKphAS3xr9HyRAKYbqQv22NaAh7q6q/bbXBoM5Jsb/q2XXoWofGv0XMRax8/JG/cCukHFXBsj83Gv216C2dP3Izga9fGoe/f7PPeXKlkL8oSUNsLTKrP6AU4JUN9UK/RzN4LohExL+PC2ePp5NsP1ZSKL8w8qU/jvf6UJA/vL85m2weBbzGvx+ehjzPtrc/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk3NDk3NDQwcQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5NzQ5NzQ0MHEBYS4CAAAAAAAAAL9dhqHRatM/GcfRFdTOsb8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        2.178719706491133,
                        2.398652268106809,
                        1.6849263306917273
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    2.178719706491133,
                    2.398652268106809,
                    1.6849263306917273
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 50
    }
}