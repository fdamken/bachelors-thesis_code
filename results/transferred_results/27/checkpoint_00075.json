{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9913115079439402,
                            0.003255500251036329,
                            0.0025943328854593356
                        ],
                        [
                            -0.07499493670970836,
                            1.0145132745823673,
                            0.030085669554516296
                        ],
                        [
                            0.15650991163982014,
                            -0.09682166903542795,
                            0.9929842215638998
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.9913115079439402,
                        -0.07499493670970836,
                        0.15650991163982014
                    ],
                    [
                        0.003255500251036329,
                        1.0145132745823673,
                        -0.09682166903542795
                    ],
                    [
                        0.0025943328854593356,
                        0.030085669554516296,
                        0.9929842215638998
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.10503471982588372,
                    0.0020004181232961453,
                    0.0026888797351302253
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    6.410779402722255e-05,
                    5.69271288818527e-05
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.00015621418204858628,
                        -6.3458256573945e-05,
                        -7.97591997838687e-05
                    ],
                    [
                        -6.3458256573945e-05,
                        9.532520003396883e-05,
                        0.00010240545725404004
                    ],
                    [
                        -7.97591997838687e-05,
                        0.00010240545725404004,
                        0.00011496106140818085
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk3MTA0NzM2cQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM5NzEwNDczNnEBYS6WAAAAAAAAAGa3PFlpdMO/7A7AIOeVxj8iLz5rb2v1P4wrYd48Ifu/lQwB13jjBcA/bMEDwxD5vznZyTKvXxBA6HPXFue6BECKq2W27+P7P8ZAqihyBtS/aYW6rXsc4r9gMXd9Xv3TP9OlSd7UNu0/GgpQwgzZ/D/9XFsuPYuXP2m7fdXs1P8//f5bAsTJAUD/6XdeFlIFQIFNK37xKYc/zJ3MWblK7b+2wbFlo8nwv4ykFHUdcJ2/UkE9iutP878q/nJ9nELkv74X9uF9fdO/R4PD4OSMy78+Vsv3xPjTP5+PfoUf0NG/YXXbf2ox4b8g2hlQAJLhP69lZZD8d8E/KuIxWtyo9z+s417rgkynP8OXlhZoRwRAZC3posqF8T8LsAgyhzTtP9zt3HIEUdk/G+lO/0v24L/qhP52aXfev+X3BeMVkLo/pSYXqYQ45T97eGLE4lX/v5h1D3G4ibe/M/mbsG9v9r/fZ3FsZqiev/wzwlOgHRBAw2MCbi0LA0A06bWXUiL8P04j3VdAuMC/VL6fn33t7L8OZ0gCZB3jP/betm/2UOE/kK9Fdedl8r98shEw2Tiwv7Bvi8KExL0/xELaIkpb+D93n37AwYbOv2i96fCyGMI/DMuuv3mx7T9Bp9n0PFXyv13cid+azRHAzZMl79ku8r+qV8bjff4JwEfLDx0hJbq/IFk1EcN967+XiKZSjsnov1cFXFqup9E/SX3aGmCxzT8CX/mwV/LQv1GCoXMn8sa/H4P/Z3ii379xca14mznwPy/6EUceCt2/8GXl7PB/0T/pw2FRqTXDP/qhjAHtgMa/umAv/qaU4j98SkGf+i3tP6pMzd4KygzAjE/p19UH+L+1Ipe4fTwHwNxY7Dt+LKo/56dykJl00b+ZKt9q1NT/vwkpsTL00+k/TYka/QWCpL/HUTloHOjGP1GTr/tNR90//82F+m/Q4L9BNF6ZzSHov7vxg8fNJtY/uu+GN0Jk5z+FM3q7Arzgv0D4xeHFEcE/2zKkWHCy9T/8DndJXA/hv4LmD998U62/koQli8Xk5b/1vSzHFQXyv/lBUEV+nPg/Z5pQa+li9j8ibq3O4JbtP3GL4Pml8fc/Wel7Pton+D+0ir6hJLHuP/MD9Pm9O90/CQ1ewUK7zD+KE/iJbuqyP/NZLUToNq8/mhGrGPpa5j9auNJl7J3avxQCiYLiJuu/hBuojpdrxD/JL2G+d0/mP6+U18wxkgjADfU04z9X+r9nwzI/2PMIwEhTVDm6jMC/K4LXS8Cy9r+63d7jol3wP7XHCTD7YMW/+B0F7PKt77+FrwjXLSDAv5zhdJmEDaE/BFMFgHVw9D+M6Dds56uzP4aPTuv4W7Q/RoQxiRwcA0DRdej+RiHFv5Igr2s3Yfy/azJrzeKj9r9mRT3a5hT2v70yhajx/Ji/togc357i0b93TsjOJkQCwMIXRxATgNA/ZNci4wHMAMAFwUCwF8+ZP1IubSipjMU/u/Nw7TV49z89vbTRMk3XP6WI+a00ZMA/H4WVXAKf0r9vhFbq+qr1v/62lGSiT7M/zmHYfsja7T9Dl6jxP/Pyv8LDDM0S3Ng/U9O4lOOW2T/dsf42NXrkvw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkzODYxMjgwcQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5Mzg2MTI4MHEBYS4yAAAAAAAAAJP2+GxVB/U/QC6udDHn6L87wShBlNgIQFf49hmI8gRAnEPfIEVTwL9E9L+MLKAFQMK3mm/dEuW/ltRVfLnR4b+6+4gSvsPxPzeG/bsqawBAGVptan+i5z9E+M4htb4CQOaULvHjbuC/Cix2WmxR4L9PDN6B0APEPxqt2gCGiQhACbmi//W83z+TMs4zjlLsv+THpMefd7C/k/rzWVeO5L+DIUBHG1X6v8LkGbwYS6Q/P1VdMZcR9L8WRmPbC/DkPxAnTRtFfvk/OV2pl6Ea/z+47S/Zt5wKwGpJqpkE9eS/eMtpSLboyr+BoNlsrlvhv8ZPz1W3ZPW/KejeQqwF6b//wM8Te3XOPzK5L4KLbOw/2IJ8Atgtqj/ZkU45gnP3v/QE/5dMXfI/5LqQloRy17+gD6NoBWwEwLL/zUBm7Pg/t+1k4e/30D9rEcG4/NT5PxK+HN7tvNO/LkteoXvMA8B95g42DuPjv0xXbNwEk/y/6MjSH2sI9r/qyto+EUXjv4tSSvKMmO+/PnV//ARQAMA="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0MzQxNTM2cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5NDM0MTUzNnEBYS5kAAAAAAAAAOEioOM1XaW/oBIcw4zl0L/2NnnSQJGtPzhoBo2C6My/wsVfvxWMwj+ElBdP+c7QP+A1GoKLItA/XneJ1gSb0T/q9iXa0GrDv9hucvHHvbm/s4/X6LJtkb/pL3h7UJaov4GUfiMKEae/8QberAfAsr9hHeF0mdujP8ysbTe2q9A/I/OD9yNHuD8B8lpCOny6vyuMs2GGq8y/rJ6/xt+Vvr8VAEu7dOWsv25rTd44WMQ/NiZa58OqzT86Wd6JN4Ctv8jH59ZTs8e/yxs9Jy65t7/PrCS/IpW5vza/EaNfUbY/bHkpb8f2zj+rjErbHPfJvybNd07WHME/kNuJxFiixL/EiE5tWvC2P38cpIVo3NA/wKRuWNH51j+nRZLOX2HBPwb6PAyn58C/YcfW+CHmuj9iWFPY3Dudv2fUDY2obcA/YaN9ZFi7lj+AQ95a6y7Qv2/KHuFB06i/z3cPXmuy0b8rdqvol5GtP7fBZ9XWYbQ/Q1+6mXGTr78WnCzGIaR5P19PNYx+vtC/wgOZrb8VyL+EbjZiwU7KP45bly/nfqo/tiRRflZMs78rlAIIVsS2P1MNXJCN97W/CzOyb6tqoL9xl7ZkSHTNvyfuV2QG/sS/e5MBR7eNq79rNqqGyCKxPwZvrItb+Ig/p9EaHF7fmL+4iLxOHtXAP8bZskY2e8W/CgLvHu4Vlr8v1pJ2VIfBv5rNJ/6Q07Y/m2iq+QFo0j+IPRfS9ciyv20s78lLHsG/GrjCaOQekT9yidvYR0qDPyUeMztla8U/DBNqNnTWoD9Wh14jySeoPwi901EWQKa/9EATIM+0mD9MkHMvrPrBv4P+YfAuTcQ/R+bU86V2uz8GyWymSvLCv5F5EIyxEbq/ziBQhU1fo79l+4O7kU1Rv4KfMeaP1qK/76cWFScJpb/DWZpDbhXCvysYMlCAmau/SD0m72ivrT8B2c4/fDCxP+0DhejDcJI/yxTRNlR7sr/I2YQDFISgP1NMh8svPpC/+7XrZlZFxr+KnVwvq02XvzJCf9srgro/w7bFuI7Go79aUDT6juzLv8ORlOa1TrM/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk3MTk2NTc2cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5NzE5NjU3NnEBYS4CAAAAAAAAAGXE86/XctM/pAK29mbKq78="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        2.025686014334343,
                        2.34209495105572,
                        1.6539153620488227
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    2.025686014334343,
                    2.34209495105572,
                    1.6539153620488227
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 75
    }
}