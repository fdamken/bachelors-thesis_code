{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9911718920780804,
                            0.0029948538579516186,
                            0.002609815843798197
                        ],
                        [
                            -0.0788514431248772,
                            1.013341222678657,
                            0.029594545353671495
                        ],
                        [
                            0.15406900616439873,
                            -0.09593758745228523,
                            0.9939919141085468
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.9911718920780804,
                        -0.0788514431248772,
                        0.15406900616439873
                    ],
                    [
                        0.0029948538579516186,
                        1.013341222678657,
                        -0.09593758745228523
                    ],
                    [
                        0.002609815843798197,
                        0.029594545353671495,
                        0.9939919141085468
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.07576281081632905,
                    0.0024724344227501707,
                    0.0026647855911054656
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    9.300286475809116e-05,
                    4.922870028485704e-05
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.0001432055194623416,
                        -6.36147277095489e-05,
                        -7.721990220055375e-05
                    ],
                    [
                        -6.36147277095489e-05,
                        8.136908188838277e-05,
                        8.716741671399575e-05
                    ],
                    [
                        -7.721990220055375e-05,
                        8.716741671399575e-05,
                        9.724745836514614e-05
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkyMjE2ODAwcQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM5MjIxNjgwMHEBYS6WAAAAAAAAAEiLGqyNBcK/hriWBA1DyT8PFLfMozf2P6w6Ao36lvS/ZwVze8peEcAopdF5fBn1v23KUlMAOxBAKREC2FNeBEABsV9M2c36P9rGOBM8adS/zbU9zFYs47/5VBWlNITQP5GiZXrz4uk/qWLH51KUAUDY6/lugOG5v/DBs9OVZwBARklCBpn+AEC5KolkKxAFQG/kAVDQ0XC/m/B0SC6F7r+YYPyCMIbwv15Eh3yepKe/fxSZzRMk9L8vpwQZE93kv+g+aOfJz9G/bDfNi+bD0b+ZWBU11y/WPwnRE4JNTNC/EHr3sd4c4r9U9UTIbqDlP6QdU2DDAcI/ljkC6AAT+D+YXSqQBhfXP2WvN+DAjwVA58Lu2UwC9j/yEfPXjubxP1W5vui1ydc/WlCafJ6F17/5vj7wJojgv+qaeIOst7g/VrnVkJax5D+O029li+X/v5rO1/O/PcG/aPZLSyH+9r86/643CwHKv7LH1k5z/A5Av1p6MqR+AUACAXWDbrP3P0zUjnB0m76/Cyj1Es6w7r+zq4vSoV/lPwA7fgPVDuE/mNoXch5m778aNXZLkm+xv8nirMnQEMI/QcbC9rSs+D+XAlTYFurGv30TnnQv28M/8EqSI0YA8D9yTdmNeLLzv3pYKq9L0RHA3sFe3ChB8r8Hzxff6ekJwGzMEJ4Wt7W/AtrMcsaN6r/kDHkKkkDqv/AtiA+SRdM/JT3yGnua0D8nNGUvUFjVv6qVj/RmfMa/5vXFtmLR4b97zb0Gm3ftPw8ycAVIR9m/jXDVQQTYxj9yoApfTDjRPwbqIgoa3sC/CYYr5Afc3j/sppame6ruP+yiDpzW1gzAySAudNkk+L+3sww2AkIHwBfkbUhcnZc/k0JLhErH1b8JG8AWRv0AwGHyRm4Zyu0/BDD485P7ur/jTcCBw4XMP7l3cTANyt8/xwupjeNq5L8X89+GF27mv+PA6oFYGdg/JSeT66p06T8rNMIAPN7evyGTsybBisQ/MxI+ABvU9j/w1Xs49dLhv/LNDAbU97C/n0ARQJA657/WEPcQ+n/zv0XrcHytzvk/XusRs+3t8T95fAolC9TsP+++A1A8d/o/ciJXAdZz9T986Tw7EuXwP+yv/N5EZtU/vuQ5FvMGtb8bDnfWOvm2v8pAfR0cuZY/Y4fMVlMm6T/sulGUAu7TvztOd75/Z/G/atxyg6Xoxr9UrIFQfBDgPxKtp/gLfQjA0B/rU2tL+r9OGFQDmMMIwHOEq1xKe8G/G8fKWF6B9r+Ev46nAM/xP295qjjmfri/mfOTTXiX8b9NBlCJxajMv+1juMEct6k/sqitTmNY9T+XzUN7pza8PxZMAmUMTr8/K6IYZiTcAkBwx/LqxK3Mv56arIM8Svm/F8oT2tsU7r/TKZ+l2Dnwv6iZc0u7saW/xmBI/EY01b++n0a2f7ICwObYWmgVxs0/5DgdY2OvAMBq5DSKeQ6sP9Aje02Qecc/CrFRPXAK+T9svhil5EfVP7YL1mjVtsA/wkE57PgP079l6MlCFkP2vzCbIGveibg/bViEGsmI7T+arEpzVy71v3+Ddrqjo94/f6Mz1Vp11D9elCN3Qormvw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk2MDcwNjI0cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5NjA3MDYyNHEBYS4yAAAAAAAAAJbEYGIgCPY/57T1pprJ3r9G093uPIUIQORPscAeQQVAuEX91UUHz79R6bCaiKEFQLMTdhqXnua/esCQRKAr4794Jw5Z9mTyP2BALpO27ABAzJLs0zQh6T9Q5RWSdHgEQLDNOrLmo+G/Wc1ptkys4L/48B/barm1PyhoHyVUPwdA0bfcrj8M2T9MavgDvQ/sv1K2kxFe68e/NTxZbmDx479k3EGASE76vzjppLjPq7e/bT2ydCk09b+64AiSy/LiP/Xim60ilPs/9SSas7wgAEDstcutBqUKwPLxWeD4wua/22uhzfx/yb9Gek7azNHfv27hgTh3RPa/XqoJpd096b99jHx74A+/P82aIEfnZuo/o51FwE9TuD999TqXYFj6vwr4IcgetvM/1qsKQjRi4r/o3YIvy1AEwA8vp3kNQPg/P2kwXomp0j92s01A5+D6P5WjRyCM6tm/pS0RZu6yAMB19k5xV1Llv1Z+UD/qb/6/dRq8YcTh9b/HMFv6uerkv6VcsmcKD/C/zMb4dxA6AMA="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk1MTIzNzQ0cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5NTEyMzc0NHEBYS5kAAAAAAAAAOzdpbkK+7q/cMpUYhMw0b8eGtPGhOSvP1+neKf3JMi/eTpbACWqxT9ZzKLNYRnRP2eeRiCzYc4/BFTUUCN80D/d1K7aclXAv1GpV4hPA6i/WSXhWqF6fr96kOuCDEOmv2u0OKzVb5S/XwGo1gBNtr9tL3+DJviqP37p+LUe9tA/XWo4qkO6tD9IBmOQFly0v0ixDTuZ1sy/DBrb4IkcwL+V3aSvuDivvxWYZu49O78/PmSaB4rvyj9B9rKqcqpPP8Rvr7luCsq/VsulzkHhtb9vnVG5xL66v8QLhZ7hDL0/zhK709phzz+fLhVZT5zGv5i0TF1xU7s/bp5GoewsxL9XVbbOrlW3P5zUjNrQJtE/bsGTDTlE1z9H00I8lzjFP0Znmbd0O7q/O4Mag8nZtD+si4NgMvGgvzKexsNejMA/89Y51t+4qD9mK9OXId3Jvy5pQr2ah7G/ccs73NP80b+nkR4i7M2oP8w+nmkTULk/X6rs3G2gtr8okRdnkGKVP/vjW2km782/5A0seFSVy7/ALLWodNrHPyWQbyJ7wKw/UQVUirFvtL/TJYUQCWe6P5lyZjJdr7a/tPe3h2Gxor/U3ZaaYBPJv7JqrwqAP8K/XRkxPBJ7r7/Y28/TSaSvPxQvaLyq7ZC/czpyVMpsnb9A7+SHpr7AP7pTww4KL8e/0HajelSHd79yLZT8ARnCv8RUgxgaSbQ/x6QfgtEF0T9HqMpou0myv9ZVpijMl8G/MTfOmFCslT8kJ5FjgchxvxV84POVsMU/GDbyZCQVkj9b3vzXkGOrP3WN8c9FhY4/ccAeUDtCnT8TKFwAoV7Av+1OMerGu8M/dzA3HBakvD+j2woXUQLBv6FOw0zyxr6/HT2xwVUIrL8YvyiED4l2vz34Ba9GHaW/y/XCMaTrlr8dApeeE6a0v11AA9Y9VqW/z/wrBx/2rz+t3CUcLFqzP0lMRRW3iGY/8gkWCpYcqr+KDUlj+wqNP/abpriHYYe/CjoyXYSIw7/7E1z5Dgyiv6G5NLHV4a8/Z2IyxhgVs7/dA7sfdNDMv3SrmFZWcrY/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk1NTc1MDcycQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5NTU3NTA3MnEBYS4CAAAAAAAAAPkCfy5AvdM/WMK7Dh0Rrr8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        2.025395839581216,
                        2.328873899241508,
                        1.6404058867344207
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    2.025395839581216,
                    2.328873899241508,
                    1.6404058867344207
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 85
    }
}