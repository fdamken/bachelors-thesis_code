{
  "artifacts": [
    "checkpoint_00001.json",
    "checkpoint_00005.json",
    "checkpoint_00010.json",
    "checkpoint_00015.json",
    "checkpoint_00020.json",
    "checkpoint_00025.json",
    "checkpoint_00030.json",
    "checkpoint_00035.json",
    "checkpoint_00040.json",
    "checkpoint_00045.json",
    "checkpoint_00050.json",
    "checkpoint_00055.json",
    "checkpoint_00060.json",
    "checkpoint_00065.json",
    "checkpoint_00070.json",
    "checkpoint_00075.json",
    "checkpoint_00080.json",
    "checkpoint_00085.json",
    "checkpoint_00090.json",
    "checkpoint_00095.json",
    "checkpoint_00100.json"
  ],
  "command": "main",
  "experiment": {
    "base_dir": "/home/fabian/bachelor-thesis/code/src",
    "dependencies": [
      "jsonpickle==1.4.1",
      "neptune-contrib==0+unknown",
      "numpy==1.19.1",
      "sacred==0.8.1",
      "scipy==1.5.2",
      "torch==1.6.0"
    ],
    "mainfile": "experiment_pendulum.py",
    "name": "pendulum",
    "repositories": [
      {
        "commit": "5bd7d10f8478379c42b5994f981001eefe129b61",
        "dirty": true,
        "url": "ssh://github-fdamken/fdamken/bachelors-thesis_code.git"
      },
      {
        "commit": "5bd7d10f8478379c42b5994f981001eefe129b61",
        "dirty": true,
        "url": "ssh://github-fdamken/fdamken/bachelors-thesis_code.git"
      },
      {
        "commit": "5bd7d10f8478379c42b5994f981001eefe129b61",
        "dirty": true,
        "url": "ssh://github-fdamken/fdamken/bachelors-thesis_code.git"
      },
      {
        "commit": "5bd7d10f8478379c42b5994f981001eefe129b61",
        "dirty": true,
        "url": "ssh://github-fdamken/fdamken/bachelors-thesis_code.git"
      }
    ],
    "sources": [
      [
        "__init__.py",
        "_sources/__init___d41d8cd98f00b204e9800998ecf8427e.py"
      ],
      [
        "em.py",
        "_sources/em_ef8c4a4f1597711f7bb8b15e77be4b05.py"
      ],
      [
        "experiment_pendulum.py",
        "_sources/experiment_pendulum_d8353cbf2cc86c028c9f0173c2c984a8.py"
      ],
      [
        "util.py",
        "_sources/util_584d431d1c7c3cb4f42650f6fda305c5.py"
      ]
    ]
  },
  "heartbeat": "2020-08-11T10:17:11.068771",
  "host": {
    "ENV": {},
    "cpu": "Intel(R) Core(TM) i5-4690 CPU @ 3.50GHz",
    "gpus": {
      "driver_version": "450.51.06",
      "gpus": [
        {
          "model": "GeForce GTX 970",
          "persistence_mode": true,
          "total_memory": 4039
        }
      ]
    },
    "hostname": "H97-D3H",
    "os": [
      "Linux",
      "Linux-4.15.0-112-generic-x86_64-with-Ubuntu-18.04-bionic"
    ],
    "python_version": "3.7.8"
  },
  "meta": {
    "command": "main",
    "options": {
      "--beat-interval": null,
      "--capture": null,
      "--comment": null,
      "--debug": false,
      "--enforce_clean": false,
      "--file_storage": null,
      "--force": false,
      "--help": false,
      "--loglevel": null,
      "--mongo_db": null,
      "--name": null,
      "--pdb": false,
      "--print-config": false,
      "--priority": null,
      "--queue": false,
      "--s3": null,
      "--sql": null,
      "--tiny_db": null,
      "--unobserved": false,
      "COMMAND": null,
      "UPDATE": [],
      "help": false,
      "with": false
    }
  },
  "resources": [],
  "result": {
    "estimations": {
      "A": {
        "base": {
          "dtype": "float64",
          "py/object": "numpy.ndarray",
          "values": [
            [
              0.9902491732401393,
              0.0023303202097753805,
              0.0025215360448342388
            ],
            [
              -0.100041822239288,
              1.0136077315348828,
              0.027966313656680602
            ],
            [
              0.15477551343913065,
              -0.10263653116637993,
              0.9942566113312336
            ]
          ]
        },
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "shape": [
          3,
          3
        ],
        "strides": [
          8,
          24
        ],
        "values": [
          [
            0.9902491732401393,
            -0.100041822239288,
            0.15477551343913065
          ],
          [
            0.0023303202097753805,
            1.0136077315348828,
            -0.10263653116637993
          ],
          [
            0.0025215360448342388,
            0.027966313656680602,
            0.9942566113312336
          ]
        ]
      },
      "Q": {
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "values": [
          0.05332100002755568,
          0.002022401549058891,
          0.0010794031487819553
        ]
      },
      "R": {
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "values": [
          4.895261758065317e-05,
          2.902601969458374e-05
        ]
      },
      "V0": {
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "values": [
          [
            0.00013364139102378658,
            -6.299801786191495e-05,
            -7.521898215046008e-05
          ],
          [
            -6.299801786191495e-05,
            6.301922110196756e-05,
            6.932428162098603e-05
          ],
          [
            -7.521898215046008e-05,
            6.932428162098603e-05,
            7.880081601552291e-05
          ]
        ]
      },
      "g_params": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          {
            "_metadata": {
              "py/reduce": [
                {
                  "py/type": "collections.OrderedDict"
                },
                {
                  "py/tuple": []
                },
                null,
                null,
                {
                  "py/tuple": [
                    {
                      "py/tuple": [
                        "",
                        {
                          "version": 1
                        }
                      ]
                    },
                    {
                      "py/tuple": [
                        "_pipe",
                        {
                          "version": 1
                        }
                      ]
                    },
                    {
                      "py/tuple": [
                        "_pipe._pipe",
                        {
                          "version": 1
                        }
                      ]
                    },
                    {
                      "py/tuple": [
                        "_pipe._pipe.0",
                        {
                          "version": 1
                        }
                      ]
                    },
                    {
                      "py/tuple": [
                        "_pipe._pipe.1",
                        {
                          "version": 1
                        }
                      ]
                    },
                    {
                      "py/tuple": [
                        "_pipe._pipe.2",
                        {
                          "version": 1
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          },
          null,
          {
            "py/tuple": [
              {
                "py/tuple": [
                  "_pipe._pipe.0.weight",
                  {
                    "py/reduce": [
                      {
                        "py/function": "torch._utils._rebuild_tensor_v2"
                      },
                      {
                        "py/tuple": [
                          {
                            "py/reduce": [
                              {
                                "py/function": "torch.storage._load_from_bytes"
                              },
                              {
                                "py/tuple": [
                                  {
                                    "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0MzA3ODcycQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM5NDMwNzg3MnEBYS6WAAAAAAAAAGPufPZfJsC/e2dAyipI0j/j8JttsZb4P5WVL1VPIvO/iJaZ4Y7sEcBBFB9QUL3uv9NfyK5jzg9AWYxrueuwA0AH8oejvLr4PzvYzgu7ytm/1AXewK1b5b+b047ek2XKP8JbruJ1Auw/6YvLwQSmAEA9p/ugNie5v5oTMJKqS/w/scJVEN09AEDyHHdtCcoCQAsEQO+AaJ6/2W3Z0mXA8L9CyH8bFj/wv8mS4Vomx7O/GZqP7/VR9L/7gVWq07zhv7J9JpOZwtW/2T2Jwvm53b+84dBwMp7aP+oJAg7dNcq/VuTFqM5Q3r8EBCxe/UPuPyZLqlGuI8C/HrIL7kM8+D+shbqTmb7nP2oQLS4AegZAwSYj+5139T95CvNVoOfwPwF/Z1w35dc/v3vB/ZmstD/ZloOxQHLjv+eI+SBL37Q/amrMIrWp4j92aZzuUY8BwDT5d9ioGKG/v0PHSlHT9r+n1EJfuW3jv2SnaR+Byg1ASpytx8/NAUAlBJiDG2r1P0PH9WjMbby/7FXqLnu08r9DKV7TbObiP2T78PzI6eA/mmaVR9gY5L/B6l6zQmK+v1XG0+p2yMQ/rptA78TK+T+vIA+qVhS+v+MXawHgAcY/W+HKfn/D8T8xo8XQnUL1v1ocbnjZ1RHAA4Et3uKe8r/ee3/JtQ0KwLBHdgLux7G/gg0D45gR6r/VzbOn51PovywCFT4c+Nc/CQy+zWsj4D+oQlGRIrnav01+JTk2pZC/JQwSInqH6b8bpBVg/sTsP2FY3t+YY9m/tPXPOorZtD+zoHKYo4jPPwOUng5h77G/cE7r9qtH5D8cpHuQsTzwP1gjcOMB0gzA89ebe7Ew+L+cZRukd0AHwOVw1kKSeUM/SdNgTZX73b/JzuY9pRQCwDa19ULI6fA/qUrqJE3Rpr8E0M4q/3LUP7aVeGYwHNw/5YwVp4Yt079GBB1vp+rpvz/H54O4CNw/jxRcfwi/5j90SRqBwUjhv1piZvn14sc/6aA2uAgD+D+0+LLIkGjjv7LgpHNkM6u/UHwyL/776L90y5EEYYP2vw52IEjbwvM/PSpM8sDE7j8EES6LCZfjPyKImXvGtfM/uRF84BrC8T9DKZqUlTDkPxZK1YCcY9Q/rGGpVNisyD9YcLcrFIrOv6Q8l626WLW//95CXyfZ7D+Wv2aw5Gu/vzBgbyfAxPa/2hsCNQdCy7+DvUUvnorUPxO7XhGiHAjA3DLKqxOc+b9l3tELLTkIwDAVBBigJsG/ZavWRYSg+L+WAefgxYTzP4V1KEllKZU/f/R+WOJX8L9jAf9RnQvnv0nqe5nhtrA//J7H2FM/9j+pY4ppzWXFP3gyCl2JNMU/eGYerTtMA0BWYEuYmQHav+5KnAho1vS/URc5oPBI7L+p/KJf2+/pv2sdrkIbNaa/9P5lTfeE2b/iXF1wpF0DwGMvcGsfO88/luKDmyEg/7+bEt40guKhP9gQqPSAr8Q/InSXJLMF+z+JHrbvkD/jP5YLQ17nars/oQcLJzQX079Hdglpqmz5v0F30E2cmLk/Ftr6cjAx8D8WnsHMe574vyegPthjTOA/5eaQn+JE2j9k656dcXjnvw=="
                                  }
                                ]
                              }
                            ]
                          },
                          0,
                          {
                            "py/tuple": [
                              50,
                              3
                            ]
                          },
                          {
                            "py/tuple": [
                              3,
                              1
                            ]
                          },
                          false,
                          {
                            "py/reduce": [
                              {
                                "py/type": "collections.OrderedDict"
                              },
                              {
                                "py/tuple": []
                              },
                              null,
                              null,
                              {
                                "py/tuple": []
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "py/tuple": [
                  "_pipe._pipe.0.bias",
                  {
                    "py/reduce": [
                      {
                        "py/function": "torch._utils._rebuild_tensor_v2"
                      },
                      {
                        "py/tuple": [
                          {
                            "py/reduce": [
                              {
                                "py/function": "torch.storage._load_from_bytes"
                              },
                              {
                                "py/tuple": [
                                  {
                                    "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkxODA1MjgwcQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5MTgwNTI4MHEBYS4yAAAAAAAAADyOnf9ot/Y/YM/J2Hyl0L+Os3f2VvIHQBnLMnkfRAVAeSQTaW8s0L8FC+EXfycEQAMvrs4TP+a/JlgPcxt55b+1TXHa1vPyP5fP2Obj5AFAtamDecIq4T/idHu47RsEQFP9LWfaKeO/j/6JYHAQ4b8E4sRRUmzAP73iraOszgZA6uFwX/Uk2D8vu5ywdCDsv6v0JlPzpMm/eEX/KRG847+9hnVScnD6vwYayVCmo8e/PHXh52Du9b8ZRmMBIoHmP73NjM0Fpvs/W3P3XmnKAEAF8KlVSaQKwCTFiwnshei/khjCCixLvb+G+oRrdJ7ivz01ElOzYvi/AZnBgcMX6r/OB1T1euirP+zFOUUB0uE/oDRnsciQ079P9y8voNH8v7P7zz7LPPI/O5Yy9wqJ5r8wButYVQAEwJv7vlBK5/c/07RBgWEk1z/52/r3MEn7PzZI8qLVIdi/Ap4NEBx4/r87k6c2q+Tkv+1A1Dktfv+/k8MEI5Ax9b9rL4T2G63mv6sE/cc4M/C/KQzxs6Pv/78="
                                  }
                                ]
                              }
                            ]
                          },
                          0,
                          {
                            "py/tuple": [
                              50
                            ]
                          },
                          {
                            "py/tuple": [
                              1
                            ]
                          },
                          false,
                          {
                            "py/reduce": [
                              {
                                "py/type": "collections.OrderedDict"
                              },
                              {
                                "py/tuple": []
                              },
                              null,
                              null,
                              {
                                "py/tuple": []
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "py/tuple": [
                  "_pipe._pipe.2.weight",
                  {
                    "py/reduce": [
                      {
                        "py/function": "torch._utils._rebuild_tensor_v2"
                      },
                      {
                        "py/tuple": [
                          {
                            "py/reduce": [
                              {
                                "py/function": "torch.storage._load_from_bytes"
                              },
                              {
                                "py/tuple": [
                                  {
                                    "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk4Nzc3MTIwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5ODc3NzEyMHEBYS5kAAAAAAAAAPF8vTgEIb+/sOtX5rZXyr9OFaV0KbKvP8NefYczUcC/49jCOCSnyD9tDl1jFhPRP2SvIjeZGdA/P+IcOXll0D81G7EMnQq7vy97e+FHXKi/D+uJL2dCWr/h0KvUZ3Wmv5K/aG6dR5Q/EyNAbuPTtb/9vJetj8eiPwAps0vT79A/KtwGKR0FtD+Mj4SUW2yTv6HYSW/z7c2/b9f90eAPwr8H2XZdXQavv8ZBEkMQvrc/5JPTFVtgxj+aQRXP18eIP1WPcdj4Gcu/LCfj82s0tb85nDoQl6W6v5vGUFG0ncA/XOGd+j1czz/spLduTYjBv4ch4mFksLQ/y6fPx5n5xb9bR7L03Ha0P9qDyMiFINE/L2vofO891z9iEmc/DJ7GP5djKyZl46u/1it74MeFtD8OlVUO176gv+p9FYbJXsI/K4CBcz/uez9q/37vtTPKvxRpzvwZPba/ucncboj20b/0mqqQDU+mP21U4hBrvKg/QPgvksN/ur/CEqanm5G2P6R7M0gXI9C/CSpJcwYHyb+OHV6NZ03FP94iQvhdSbw/PUHQqHscs79tNVUzZk7AP+UVlYQlEca/Em6wxPUKoL/ckNcGQGLKv9ld+i8Kmra/XvpkBB8ypr/xMxqlR8OsP4VCJnZjwWq/f4QyzvIfmL/QbcHOM2LDP0qVXn+GSMi/MOVagF/Ygb+rS9ILZ2/Bv6i/Yledhq8/4TiBGbD00D+xXri1ecy1v/RenEvS2sK/UCW/EnlfkD8sUxtr+tqXv2u0GIrl6rY/6AXIaK0zIL8e1r1z0/FlP+tW/BI/r60/aq4PymP1lz8BpOn1kl28v539wh4ZNMQ/aGbJ1+6Kwz+0CY3Mb8rCv7SuLjvHTsK/15RKvZV7rL9s1HNe8Fk1v8HUdL3ZdqK/KnU95lEYmz9U+aDRhOdxPz+CYqLwrKa/unMkRLNPrT8nVUyGQjO5PzhTFUiHU4G/SQwH9U7Tnr+Og7Q+l+uSv1fNH/+b/ZC/LoineLqmxb/JhjGFY0SVP96SUGxFq38/0DJydV12tb+jOoQ0+lbPv3Oi0/gBJK0/"
                                  }
                                ]
                              }
                            ]
                          },
                          0,
                          {
                            "py/tuple": [
                              2,
                              50
                            ]
                          },
                          {
                            "py/tuple": [
                              50,
                              1
                            ]
                          },
                          false,
                          {
                            "py/reduce": [
                              {
                                "py/type": "collections.OrderedDict"
                              },
                              {
                                "py/tuple": []
                              },
                              null,
                              null,
                              {
                                "py/tuple": []
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "py/tuple": [
                  "_pipe._pipe.2.bias",
                  {
                    "py/reduce": [
                      {
                        "py/function": "torch._utils._rebuild_tensor_v2"
                      },
                      {
                        "py/tuple": [
                          {
                            "py/reduce": [
                              {
                                "py/function": "torch.storage._load_from_bytes"
                              },
                              {
                                "py/tuple": [
                                  {
                                    "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkzODcyMTYwcQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5Mzg3MjE2MHEBYS4CAAAAAAAAAMg4OcT0ttM/n1G0S7Fqq78="
                                  }
                                ]
                              }
                            ]
                          },
                          0,
                          {
                            "py/tuple": [
                              2
                            ]
                          },
                          {
                            "py/tuple": [
                              1
                            ]
                          },
                          false,
                          {
                            "py/reduce": [
                              {
                                "py/type": "collections.OrderedDict"
                              },
                              {
                                "py/tuple": []
                              },
                              null,
                              null,
                              {
                                "py/tuple": []
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "latents": {
        "byteorder": "<",
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "shape": [
          1,
          3,
          500
        ],
        "values": ""
      },
      "m0": {
        "base": {
          "dtype": "float64",
          "py/object": "numpy.ndarray",
          "values": [
            2.016271881704063,
            2.319345195082123,
            1.6350204386930949
          ]
        },
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "shape": [
          3
        ],
        "values": [
          2.016271881704063,
          2.319345195082123,
          1.6350204386930949
        ]
      }
    },
    "input": {
      "observations": {
        "byteorder": "<",
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "shape": [
          1,
          500,
          2
        ],
        "values": ""
      },
      "observations_noisy": {
        "byteorder": "<",
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "shape": [
          1,
          500,
          2
        ],
        "values": ""
      }
    },
    "iterations": 100,
    "log_likelihood": {
      "dtype": "float64",
      "py/object": "numpy.float64",
      "value": 6401.410218419041
    }
  },
  "start_time": "2020-08-11T09:57:32.201780",
  "status": "COMPLETED",
  "stop_time": "2020-08-11T10:17:11.066873"
}