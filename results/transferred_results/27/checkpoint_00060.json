{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.991897948311219,
                            0.0037364439211722013,
                            0.002607696387854998
                        ],
                        [
                            -0.0653149895140558,
                            1.0163567912844478,
                            0.031733146736272595
                        ],
                        [
                            0.1471003500583578,
                            -0.09268789091843496,
                            0.9908599258462102
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.991897948311219,
                        -0.0653149895140558,
                        0.1471003500583578
                    ],
                    [
                        0.0037364439211722013,
                        1.0163567912844478,
                        -0.09268789091843496
                    ],
                    [
                        0.002607696387854998,
                        0.031733146736272595,
                        0.9908599258462102
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.21505708806846618,
                    0.003149228625323427,
                    0.005029325407246026
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    8.655142780662573e-05,
                    4.937667523927303e-05
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.00023709984123154726,
                        -4.999972517083506e-05,
                        -8.201528084805787e-05
                    ],
                    [
                        -4.999972517083506e-05,
                        0.00011395102749034436,
                        0.00012115970323822722
                    ],
                    [
                        -8.201528084805787e-05,
                        0.00012115970323822722,
                        0.0001384812496709742
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkzMDE3NzYwcQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM5MzAxNzc2MHEBYS6WAAAAAAAAAI+2FVWpecW/y0f5QBrexT8TM7aJnSr0P358AUCXEf6/S5RvrD8EBMBg728C8Cj/v6Y/zppqjBBAMUuvmCXqBEB6f79k19/8Pz5VzJ04Z9G/Y/WzXshu3b/nXSwHMWTWP61yaPxuWPA/2Vjqwr/y8j8ywEp7pYjOP/m8EI4xHP0/yr9EYMdaAkBsHYMOS0kFQL2q1wtKu6Y/8kpQpD0W7L9m8zRRsEbwv1qSWOQawHg/vjkGeoNv8L/nl6KaVZrlv80/c2hOMsm/C0SwVFIm0r9JZdwctLTSP19dwYa/4NG/HGbLXywH1r+Afeyc+BnhPxOnnlpn6Hm/yoImqFiy9z9zYnp9aeDIP2ZE+02ahwZA6eIdRWXS9z9hydaWr+zzPwrA0FGqvdM/vAGJHksZ179cL626ECPZvz3Yjebys7Y/3s1kycUK4z/uZb6EnSL6v5fo/YsO/K6/OBYKJ2qy8r+RHiWrY4BQP6vRGbY2VxBAB1MWktgtA0CqgCNMBon9P6u4NiIp3MC/8Dkc+Jek6r/f2jPeIHbmP901XXdIpd0/V3UdFfd/8L8Kmudj+gjHP7TwU+jSpLs/0mYAeSeq9T9irf7WICvIv93yuXjkq74/yXRRskBm6D9HP4ryy0Xtv1xaRATJsBHAqswR5zvB8L/UjHmCD6UJwFgInOLFd7W/hQ9XQO6e6r827O7dxLLjv4IyDtwFTNA/CLWgvmjDwb9EaIppneSbv1UzyWRBksi/9wPVsIFm2L8VHAgCqa7wP3cw7AJS6ta/dptTy0Jc0L80T8AH7V6zPzerkuDSH8y/MO7f8O9l5T/Wskj7oRPrP0OLloY67AzAC2WNylkd+L9Ylx4ndnQHwKoeRVmFx64/7zZMXf6Dvb8s1b3bhRP9v4lnVOo4huk/eu5kten3uT/XyA4xSybTP86dDGdjgdo/vEzCPvyj4L/7EFG+S+njv4leVXYJotM/jh+B0+HV5D+BO+tmq3fjv9SWu1MPtsE/HTy9mPr68j+z5kyKhZjbv7qnuoSBp66/iYlzH9Qv5L9Rk7A70YbrvwiCyYns4vs/OFL5svBO/j906NJ2/rf1P9+AV28/zvg/LRjtV/bZ+D/UzmMNCzfzP/CoUGHt6d0/ad+BkXCF0T900Ty+dEi0PzCgzTaqO6U/i09qrD6h6D8Ge/43rXvcv8I/CMQ53eq/wpY48mXrdr9qzL1pnDDkP2vMG7imOQbAt8eGvM7q9L8nWmquWtoGwKh7SubiQrq/Qpsa+/+V9L80I8bNiYXsPwav6fo31Kw/SZY80eI06L9kzOrnge/XP6FJX8G+jaI/lli1sUyU8z9nYa8oiSXFP0lQr5yzUag/P8vjBc+ZAUCKgxKWQjnYv416fVrB7/y/yOS3RtNo+7/nibjYrJD5vxrVxUn8+YS/jGcht+lYw7/M6ZdOk9j/v/oAiZ4gStI/Q0lBljQG/784Ns5KV/mVv7ie4034ycE/izBYbPgn9z/nXMCSxkrKPwAvGo/Pp7Q/P9lEJVtDvr/uxbKESyX1v8MXtvIqm7M/E4ottn7d6j+GgtTejj3xv0J+BAd36dM/Rp15/14+0z+i7/vSahvgvw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk4NTAwNjQwcQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5ODUwMDY0MHEBYS4yAAAAAAAAAMGtBHs4IfQ/wbfIDkxi8b+IKxXszycJQD93Vr2glQRAgB97YgidYT/Yt5g+ycYEQMqBqd+wu+G/F1tw9WVF4r/w7IW/GiLwP+WfELZcYP8/yIvQsS7D3j86wkU893YFQHy2sPN5fNi/4urm4svB3r/33oitLGHVP7qZAvcQ+AhAko2fnwTP5j9xoUu4hsXjv/aEjioI1be/mhGaOulS6b9sfxI7wsr5vz5HrLVgxcU/+ervxOPt77/rORBLv0jnP2indbf+Ovg/QuEHYWVv/T93gtyFA8AKwKOYRDnEgeO/qjkL+bdqvL/D6XippITWv6zOHQAl5vW/EwBBRFud7r9d7g74uQPTP9TX3k2wxvM/m8oF6e/Tyj/rgotx5Tf4v5xXcC4+4+8/kApXOmPs3b/wDyprTHACwFk0Duevyfk/I996DTsE5z9jqZ0KwLn5P8X8vHnh/tO/moC0KCIHBcCc1jaPHhDjv6RR92W5Lfy/Tj3NBgpg9b/zacBBQmnjv0HDJ0kbJu+/wqh3DYyK/b8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk5MzA5MDI0cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5OTMwOTAyNHEBYS5kAAAAAAAAAIILFomWUos/AuNyZ5910L8QDQ4v0BGqP8TwfzdHeMy/5UD1NOm8wT8w36s6C1/QP6JVZHT2ask/CuNOIZ62zj8eO5GyS77Gv/qNMkGePbS/kOamm3F/l7/KSIeqwRWsvz+baqavNKe/j/hsx/bctb/UEoQy1b2kP21HACPIO9A/VhJZ8fUPvT8VUM5LB126vy9JAew9Xc2/U6WmUHmHvb/2198XBGapv4cVdetoNs4/ww+SbNUk0D+BPEXjW521v6tiDrlCIsm/if6x2YMomr9nGW9tatW3v3HscS8+Zro/bkkarlZx0D92xGSxUQPKv68uoK73b8A/2xj6h05NyL8ew8u0KbfCP3BxXTF9bNA/murX+fCJ1j+sFb6XBMnDP80wUAJOKsS/ll/ngqleuT8rtHyR+zyWv0mpaml9obo/hf/41hm0hD9DdcDiQAHTv/2WZoQ5vZC/kVODSn1C0b8fyhNVt0ylP2M0dP0perA/THTq6OAisb+X09v7CZWXPz8rjZRnH8+/J+0S7J1DyL+DcIVtZQzCP03ZmeLGhas/Xw8RE9XPs79XqVXGoLywPxn3JajTSra/45sHmahxob8emyCifV/Gvxb6B8ye/8O/Drn/6Sb8r78sCW5tIDSov2c1k69NonQ/zVduJljtmr+Mp5Vk+I3AP/8Dw/wc/cW/1SHENT+/V7/+y/LAE8nBv9Sd6+tvKr0/4DXmWdfB0D8pG6RhxE2wv55+Ap6CMcC/in7Cu94skz/di/ZjAVelv3hCVm1vpcI/yfiyBQ91YL+SLUxweWGvP8aRa5Jvo6y/9e4Sc8nCmj/ITCBJs2bCv/TewmGegcE/0gyJbIJjuj/OPFyjKl/Fv2TuymqxxrS/L6xAfadXwr/3FJa+Ywxpv6jXFDjG26O/x7b4PDCorb/S2WTaUxnGv/MRecKsv6C/OkOmGGa2rj88qWCbqW2kP7fjAi4/l3g/U6upMAzasb/zidvsiMOiP+Ag805rYIy/Ponrw39OxL+ANirDWT2EPxGCvnrT5bk/iV4Mjdyrt7+hGimuNT3Jv8zwH9XCVq8/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk3Nzk0NDAwcQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5Nzc5NDQwMHEBYS4CAAAAAAAAAGhqhpvpAtM/rdM1IGTRrL8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        2.051212673383365,
                        2.3800468206354664,
                        1.6902634906787275
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    2.051212673383365,
                    2.3800468206354664,
                    1.6902634906787275
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 60
    }
}