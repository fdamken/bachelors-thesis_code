{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9929626182234738,
                            0.0038167990404041666,
                            0.0026855211503858637
                        ],
                        [
                            -0.06222751934168882,
                            1.0193306549019185,
                            0.03350034885147373
                        ],
                        [
                            0.13249632374900494,
                            -0.08946318271499601,
                            0.9874133903329949
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.9929626182234738,
                        -0.06222751934168882,
                        0.13249632374900494
                    ],
                    [
                        0.0038167990404041666,
                        1.0193306549019185,
                        -0.08946318271499601
                    ],
                    [
                        0.0026855211503858637,
                        0.03350034885147373,
                        0.9874133903329949
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.3373259066082425,
                    0.005772110512693898,
                    0.007349532585982171
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    8.711333028986701e-05,
                    5.759392870891134e-05
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.0027585190555239336,
                        0.0001364364829203879,
                        -0.0002316939168967025
                    ],
                    [
                        0.0001364364829203879,
                        0.0002632105825268738,
                        0.00019658347879225602
                    ],
                    [
                        -0.0002316939168967025,
                        0.00019658347879225602,
                        0.00020513059008875345
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk3NzYzNjE2cQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM5Nzc2MzYxNnEBYS6WAAAAAAAAAOqXpZflo8W/IAxCF+730D9H97sWcIfxP4FM1+nLQPW/Fobjjaer+b9utC2NDwr0v8t2Nvde8ghABtDOvigR9z8Q6/imUOXjPzUCGOKHn82/U/JKI9iZ079Aa3Mx71/TP4bu4qspmdg/tv4d6PH02j9jM+Dk+FnRv95lbsLX7PI/zl9/XQV9+j+ChJV5lqz/P6OF9+D2EKs/a+YqVc+86L8JETspQU/sv3A2qahjP5g/VzdK8HOU7r+AKQ6CiYvjvyY+a3nyc8i/FNR+zGUwwb8GKM4kAoLDvxqpZp1D+cO/GLSEii0hvb+Xa9W8Yz7PP60m4BCw9tS/cJTiTcA97j/xoKt+SVXNP83t5Kwp2fk/CoZ6oH79vD987GqcFkOjP9E998LoBNk/Z5vRtVJdy788a6GaDwiwvwccut9Tkqk/UPfIia0i3T/1ARj799rzv+MCC+vzequ/osM43EBE6b+7c4g7PA3gPxxpMqWaTgdAT+ODY/3n7T+0CmQnDbvbP5FIr/Mhqbe/XEbYvLfJ5L+mtMlBLlDiP60QkBqQxtE/qha0Mncc6r/JuuFKFZjdP45jqtuO1a8/znJKOEBi8j9XZ4Osk6jLv3quO1V+srM/rFb/cIm44T/LpoWvl3/kv4JrZWaAmAnAS7GLspR/2z/BzlhDg7P7vxwj4mOTorO/ukscXSsA57+rH7WgUj3WvwjejCXMstM/RFyntramt7/vPoKaC/Wkv5BP5RZcr8K/2/dGYTU8zr8MRizrZBfwP1NFUJAPTca/kgVDIXhmx7/mrtl5DgrMPynSK/XKfNK/rZyJtSE3mT8DEQIiIT/oP2AAVjI7+wnA8+BG2Bu367/97qd+wyoCwJOwm0AIzpc/eaEYtnP8t7/pGeTmC0j4v4lXR2y4s9M/pQ+rR+YT3j8RnzRO6TDHP/A+C0EaPNI/Dx8ZMn5Z4L/NF9SvZBDav+Q6zoRFftA/0feTojPy4j+E4oZi8wnlvzcw2Odwxbg/pF2PICgL7T9EIhYKLE7Iv93Az8Pj56e/pEH7eFrT4b83sbsHtJvlv1RfUvvMPeg/+Q1FamP48z8U24lce/XfPw8J0xZeU+Y/gi8v/z156z9XOy7AtpbdPxj9Igu4Sco/DccbQv6tzz9tqAKdTJDIv1JLFrp6SZ8/NKoYzhHQ4z+dUaTK1zvXv82btxbpseu/iO7qV4Ro0L8fYPar1MLYP0jKxpCCCva/S/AFCgpD2T969ytjU4Tzv3rRTj/R0be/hFufXC40778ylsszk0vmP5VkOR9wIt4/6KkhFubj0r8wMCVCryPiPx9fiCFv23M/DOj+oBxZ8z8cThq33mPHP1nUi6+m+GO/7KBJB30a/T/n9EBxnhjev9BJtvtdE+a/4J9E5Zqi8r+xr8FcL9flv3t6Lxx0gaK/N10bWl7zvL8hBjoLxhD6v+O6xWzBCtM/P8Wvc1je/r/xtUVALO23v40jmiuVC8E/u4Ek25yI7T+4DpM521PLvzkzB7nndbE/ghJUWeU6p7/FgfyXBoPyvy1BYcxU1Kk/TXANns1d5j+fjq+yPjvsvx/BtZfNVcs/Ch/KDrp/tL9N371kY87Mvw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0NTkyNzM2cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5NDU5MjczNnEBYS4yAAAAAAAAALqesr2QtfM/kQ+ZSw6n2b+dRBhhbmYAQKb0UTY/6gJADGXuRtip4L/E308zY3T+P+TGlmoj8du/Pqveh3Ht279lZucB6GzSP+fvFqlWsfI/g34NBN94kL8H/cU8lzn3P4tb0YVpb6y/xfeSfFQJ3b/JmvkiU7jbPxOpI7VXEPw/iJtc0rnv6T8riAq29SDVv5TlCdg7xsG/LZ+Rujfu6b86/WC+d6fNv+Z2Mnqj/dI/feCB/a2y8L/ZthVmwtnoP7aI2FvLE/k/U96E7vPQ9j90SrCNa0UGwC9nj7FvfuO/w6+yJN4ex7/brMkITyCiP9xe7KY30/a/F1W0c8MD7r+6P0QwxBLXP040NWTCU9o/kvOfhYz34b+JnfWD94/9v342SWlq6uU/V4siUnU65r/EG2y2ozzmv9+29+30ifs/B7f3QrHt7D9Y4dlmGV71P/Y+EyCBZ8m/IVbU87hv+7/+nywfgmbiv4DvcL9snvm/sUUXsEqo9b8eG+PbZbXivyimlH3nM++/FNCMeThp9L8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkyMzMzOTg0cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5MjMzMzk4NHEBYS5kAAAAAAAAAOoN0VYGtpG/EHXWvdWdz7/1kiazLdykPy1dPyGzXMa/2rtEFHVZxz8Cpr/ErXDPPzWd3apqocg/R7geldaZ0D8JoNb0dvfGv/36+jpe4qC/I2C2Y92BcD+n1vWWjKewv4BXmTaobpS/9M6pCUBUvb+fd5/cx5ChP1/RPbIpKs8/eO7ayEgNwT8PltMDzcayv5urovJWk9C/MaVeBXSXw7/WURvVsjCkvyG9aPolttE/0cheZhv80j938o3VCdq7v7kALSYjG8i/p6YkulE2ij/3kLENmTq1v1MKcgMcIrQ/Jgf9AZuG0j+vmRgwoSfJv7DZuEf89bQ/oME2V//KzL/iamsxteDFP3aUrUlvi88/q8AA+X3h1T9jy0ntlivGP04WbL8R8MO/ZaijiOYztz91ag5FvJ+Hv+/w7IQpXaA/MJvev5KqWj/2ejApcq3Qv3WkoK7TmYu/4GI2IMib0L8R6vQF03yhv7JlvN/WKKQ/FBT1uQgdkb8elAh88m23P5orhYSkDdG/1y00T9vRyr/X467irwyvP68agp0KUbM/VuVQk/ldub+4HBr3HIeMv7iHE7W3hcC/4NqpiPGNrL9ZpcL+7dq2vwe4xTbsC7a/TO6nuShJur9igQnfKlHFv23Qg8ZiEKU/eiFXxayVqL8lGH3lZEG/P/nBpkebu8S/RGrgEuUZlz8LY8VzJpDEv7rtjFDOk8Q//WiFoqRjzT/WI+OmDl+4v9GzGg8oZ8K/LgUQBc+ypD+0dEp41PjFvyaGrH5AMrw/XKItjzrorz8nJELwjmaUv89Ye7+eZJm/5lXqoK19qD+rg3MtSU7Dv4uZ93ATJ7w/eTbPBW4uuT/0KOoaULe2v6ddc8GSgqG/fCloHDx3yb/cYeJ/zl+Zv2hqVALVO6+/+RWIHdJVsb8hJpzProHIvzxRjS7yjIG/lNEs+QHqtD/WHZn3pJeSP/pTZLsvHJa//UL3E0b5gz+v8YdggsamPyI/7dRjEYA//b+6VIgdwr+S0cbKQj1ov+FjnxFjW1s/F5s/Jaixwr/56AilAUfCv3d4TtbBWLc/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkzNjA3MjAwcQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5MzYwNzIwMHEBYS4CAAAAAAAAAOaYjEM1XNI/P6XEg9b2s78="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        2.2432567505320935,
                        2.397946165017038,
                        1.677610216005785
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    2.2432567505320935,
                    2.397946165017038,
                    1.677610216005785
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 40
    }
}