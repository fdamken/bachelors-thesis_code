{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9993558487807914,
                            0.0037032337603759447,
                            0.003301088357129657
                        ],
                        [
                            -0.019679167318304557,
                            1.017862220832987,
                            0.04395052566981404
                        ],
                        [
                            0.035127309459867945,
                            -0.0674875388172901,
                            0.9794702810729012
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.9993558487807914,
                        -0.019679167318304557,
                        0.035127309459867945
                    ],
                    [
                        0.0037032337603759447,
                        1.017862220832987,
                        -0.0674875388172901
                    ],
                    [
                        0.003301088357129657,
                        0.04395052566981404,
                        0.9794702810729012
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    1.3532269678931526,
                    0.8580419491607132,
                    0.5961911240366446
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.01156250473547516,
                    0.005172091237993527
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.4161210380980904,
                        0.14765355701437954,
                        -0.026258934084931518
                    ],
                    [
                        0.14765355701437954,
                        0.7169767854501226,
                        0.09447688968518131
                    ],
                    [
                        -0.026258934084931518,
                        0.09447688968518131,
                        0.2723461597405996
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk1ODcxMzkycQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM5NTg3MTM5MnEBYS6WAAAAAAAAAAnf45/fgtS/JMOQD0Jayj8TH4mZ48bnPwdZ/WWr1MS/Ca9OfgZfyb+1Ui5lWAzgv1aBoiKCbuk/gtHekzFqzT9iWfesQcrVv03Wa1tgV8S/3tEMs4yuyL9C82hAGxmzPxlM4FclwME/4Q3wBa941z8UGNNF8k/Xv1+4x5MuscI/2TAZKRyJxb9SceL7xGjZP2ZZ38moILI/RT+7MPLb0L8EDxQExR7mv/kLPDZHY6k//iR+pq4C4L8MB0Q6p8HfvyFYXKCy4OO/VeuzJHkd67+EP6ICa/rQP/yrA+C3xMi/xN35IbcK4L88oBbwEs3ivwG7UXUTR9S/iYCFPGrj3j9LCXGZa13RPwBrP7uxTrw/qouM5rBL2D++SCEumkPLPwsugiGeZ+E/Cs5uhFiU3L+sr0q52mDlv6ASza8+ZDS/e8YRIyBy2T/KVCxuVHrmv3cwN0s0n7a/3dGCzQGH0b/XuMjnyDXeP9cRVGBxFsg/kpTTRRNk2z+V0zsJKxnTv2/TflZEcqi/UPbrgpNF1r8EaSi4P87fP/zF9szQNcE/V5pxw/VZ3L9yPrFqviPdP47+WK0cy4M/GBOwqvvq5T+2smiYDl6/vx40aZz/dZ0/7FcugzI60j/TnhnEWBXLv012am3F19O/y+nab5Fz8D/DpEPStIruv7O2IDjv64+/KAeru1hhzr8nZQvgiS/Cv+GoMhY2lMg/ykr5URc61j9JqQFs6LXIP9BTm5Fhr7i/P/BmyIrAob8GIdY/M1nwP5LHztvYJL2/8phhyfgmw78KgIJdA6eJP756K1Ouc9y/u4JiArqB1b85Jx513aveP0Otg+n39LG/s2MWmgLk1T8QxF4bR8rrv3jtaVLWXnI/O2xNNKYKlj+C0NTKLFHhvwt62sb3d9w/vbOInnVS4z+Bs2fJ6Mlwv+0VXtsPrc4/GlRXlElf7L9ghi8uswTXvwa35gXUU9M/5lcJKAv20z+S77looBDiv7O6ng7jgKk/XQr4W6iH5T/JE0QBX3Swv6yPMkyq4o6/EUnNqwjfxr/ZpTec+QvZv/adIOzOZNA/cggRoesR4z8yDJtct9rQP9CsqlhLisQ/LGZaxH2F1D90TSCRrMzgP4YKofNBB7w/zojAZUaLwj/aGMarBa+av8f4LGsfM6U/Dg+8s20z1j8OCSifiYHPvyygWnyrENy/drlRou5Mvj83Ia1P17jsP29UxaTfRdG/u2eJB3v/7D9QfORokFjcv6e5v5afNNi/l1W3xcFNsb9NxcTNEOziP+QbOwF5F9I/yrS3iY8i4L+BrKg1J+TSv/ThTsynpZa/1yBMwKs34j8/5O1rMbS9PwGNfiUxdr2/ySZ4+A1x8T9N69pa8XrXv0LBc+b17dC/rK62Z0dh279R9upTDba0P1B1597HOqu/s0G7/Nhnp79u2QulG9rlv3F7x+0X7do/Hg/YWB7J8r9ZmCk8vc/bv8d3Xp5hj8k/MzUuLFl+0L9jf0Ir0SHkv6CC1PK/ELQ/QSlkGFYmlT8Ch0cjcN/jv98BWHwtpm8/jremfXST3z+mruSX4r3gv3jK3e5Xp5g/1hBM/vHyr7/4jw3Q3j3CPw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk1OTI0NjQwcQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5NTkyNDY0MHEBYS4yAAAAAAAAAPtFPRgUj+o/qPt8jr7b8j8yE7MunK7iP26ait/R4vw/C36J2fFk5b/kqDDlk9Pdvz41o7FBq8a/14ZFNxDp1L8rGeLltVTVP8HTCoHjgjW/qC44La7fzz+SbiEWHhvzPwZ3T9ktpNK/+g8wktAR4L/LWxmI9S3mP/cPULQ/F+g/W3jsEYnn5z90GRw/XWDYP4za/qYuyt2/ljLTrj+e6b8EtHxnsYDxP/C+s0OrqN8/h8hyrDRn479ek1KlpPfqPxXmaYiNP+4/ul3hkqH16T9MK977oXjov3E32s7EQOS/XiA7mMYn178V9/q/cOyHv97fXKdhQvK/lyzT+cT68L/uL47qHDfgPx0tLUilucS/AgmnkfdI8r85/ZBmd8v3vwqNEYQwAdU/R7kA02ssnr8zXlz11KrhP3Z0jnWRYe8/6w96YESju796jU+gV9XwPwQXUXeqFtk/WsfrFj4z37+PzrVowffhv+lx6lrT4/m/m7KRX1aC6L/TexLcV1/iv71uJXU1qee/cZR0EprM6L8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk1OTM1MTM2cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5NTkzNTEzNnEBYS5kAAAAAAAAABS4XrUwLHM/CCf+vYt5xr+8l4W/i2Gevx5xJMnBN9K/G7ActpUxyz9aepghQVvGP+CSNOONWM4/eQlscff41T9eU2Mn5vDAv+HD4C1FEpe/i3ROpsW2mj+EyzMRMjXGvyg0uNlFram/l0DVragVyr+cpqGxf4u5vzpXhRM5q8I/XFZNl8MlwD+N7ROGImTCv9obGBePxNK/CMz7uQTP2L++r0DtQnF9P44HvgrCd9U/boX4ff9izz8o7i14ww25v8pIw7XIWtC/LB3piOuHaj8lw+Ap0HGXv4f3k/1zqrG/p9du7mhfzD8REa3trESzv4PliqE1tsM/EYRvwD3v07/4w1N1C2TFPzaR/yeyX8Y/z77Mumbz0T9Jfg4c/YTTP3KQDKdX+MG/d7iG+v4Crz+b/oYjrUOkP9LGnUN6eK+/RdOpoHZLrb93gWJnivXFv1s56iJPm8U/VtLAjyc1yL9sR6aAce3Ev0AuPqmsJJe/T98v5xOhuz8SPWotZqi5P75wS2hcBtK/3sGEVAihwL8ARTI5NVO5vyXuhzfP7L4/iZDCeWnJw7+Srjf8pijBv+Zr3zDifsS/4reGmhmGvL/BXUiueFy4v+yu1sxPopi/yzvT2uFkpb8LKg4LNDXJvwpimlWTTrE/IpG/YibSq79fRtvlGWC2P0w0bkr58ru/JoCBcOmLxz+8PXxWA0TEv5DO0DW+J8Q/2PSfkZg8xz8Lc737QleUP7Xa+WJYM8e/Qv9n4DdyuD+zIo1mZS3QvyX0jygNVJU/lYQwjGc0mj/eIi0jApuyv7w7O43ewb6/K1HYdSfNvz+GNLfNuHLIvyzwaoRD9Kg/Re8x20beuD/oicc0raW8Pw+TABdB8XA/iAtSRQUwz7+Hyk4hxhivv6yScgSUcLm/PRavyjQ4oj+EEzUBpzrMv9aHgxpdM32/UyZUpdAUwj8vf9rfO+67v8hHAx1DSbS/eVqyebTotL/Cu8vWH5BgP1bMm27Nl7A/2AoSR/f2vL/5VdpNAMuwv2CPZcLCebg/LfDav4xdu7+P8Klq+qKlv7EKCZBkm8c/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk1OTAzNjQ4cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5NTkwMzY0OHEBYS4CAAAAAAAAAC8nC+Skmcs/NnfN6WsNwb8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        3.2050924545977133,
                        1.3457642141614041,
                        1.6783503103634012
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    3.2050924545977133,
                    1.3457642141614041,
                    1.6783503103634012
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 5
    }
}