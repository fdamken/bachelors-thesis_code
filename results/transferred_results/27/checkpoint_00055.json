{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9916522088728708,
                            0.003822931481459398,
                            0.002743340061836746
                        ],
                        [
                            -0.06448659479057697,
                            1.0169864580937362,
                            0.0325955866304468
                        ],
                        [
                            0.15494228657566875,
                            -0.09203863259118829,
                            0.9906400948232311
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.9916522088728708,
                        -0.06448659479057697,
                        0.15494228657566875
                    ],
                    [
                        0.003822931481459398,
                        1.0169864580937362,
                        -0.09203863259118829
                    ],
                    [
                        0.002743340061836746,
                        0.0325955866304468,
                        0.9906400948232311
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.21838518762800055,
                    0.0035770667582073292,
                    0.004775046525171269
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    8.054157058359124e-05,
                    5.305075330466025e-05
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.00047990376494677633,
                        -2.0438277974044183e-05,
                        -9.42764953788533e-05
                    ],
                    [
                        -2.0438277974044183e-05,
                        0.00011942198166625673,
                        0.00012138771467640197
                    ],
                    [
                        -9.42764953788533e-05,
                        0.00012138771467640197,
                        0.00014168579057338704
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk3NDMyMzUycQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM5NzQzMjM1MnEBYS6WAAAAAAAAAKwGDSzHtcW/IrMitIV6xD8F/NkyYMPzP2eyw8aL8vm//KDFev2RAMASK4T1bkr7v4pYoCqecxBAfGBza2qdBEC/iGyCRjb8P1D9GlXujNC/rH9IXuPM2r/jyBNDpjHWP0h1nFdi2+w/jwec6+ze5z8Vnn4bFAK9P+WrsMGYVvc/QrColKOe/z8AiOf3laMCQOBgcq4STaU/vSVmwlkm67+eIrHLUxPwv1OpZCnQJmw/RtdeKKht8L+ObKgNqwDlv2yc2LmBFcW/CtDbHMZRxr+SKwdHWebOP8SNAmMzL9G/D5d7OvLd0b8i/2JQqfbcPy0Y+vSLFJg/gmQCEjjk9T9vLwumrOjXP/j7mAg5uwVABy6GZf5x8j+hnIOy/iTwP97Jw1ofntI/ZH3q27RK3L+G47+81mXVv5qyTy3KmrQ/BQa3qJ794T/d4WpN1NT3v9ytHx/VM8C/BXuI5yJr8L/S6WW5+WrLP5RP83AL2g9APDARjH8kAkALMz7y7nz7P74liOw+T8C/8jh+y4E86r/KtatBJYHkP3qCyJb/wdk/gahhSvuo7r+8bEKHDQDNP4JqbVUDMrk/ZtizxzDa9D80tc8DzF7Jv0+evVKWnb0/DQYY0Ben6D8GYRCDi3Hrv9HInfoaZRHA+Jt3r7wx7r8ZIbpq/9EIwFNwiicUGre/0Iw9ZZK86b9n0n1QTO7hvxe0rQqkW9k/9HOvkCwNvr9nYSDz2wKIv7b9JuPKPcW/32fbfs5u1r+44oyo4KTwPyiaDfuSHNO/Ggx2VaBn07+5g8JA2H22P5t/bNLV5Me/sxpuN1cc6D/yM0auGvzmPzsh3iEF1wzA9JQVofzc979HtcrH+1MHwBGgjURbHqk/Ww1IsXx9vr/yWbd5IGH8vywUhZ0RQuY/kyXwdKhP0z9KQ6pTZ5TPP+5ypzWVPNg/hYUBW+f/2b+our33t0vivzhrSJYr7tI/Xmy3YB005D+rc+hlS97jv56ZoPpwdcA/PCdmOJaW8T+GogqZH0/Uv0s2+jcu36y/gRHKoR9f479e1MWMNkbrvwNIHZok2PU/iqCZGpS/+T8ZUGnvoCDwP/xUD9Yt1fM/rN/m7yIZ9D/T2fgSnD/tP7Gfy8ouKt0/Of6SDSGayj/2Ap36wgelP0vFlerty6A/qrHORY0v5z+eldn7wMXZv3ba/guLQ/C/Hk/j445gw7+XDPqfH0TcP3njDT1n2ALASUvAyxT/6b8YqiGTeUADwB/m1CC6xLW/VZGWzmw/9L9f4bcY9UPnP4zUy9VxeJG/XI0GcSzI5b+hpG091eHdP2+cdehGepo/F7+9AOJc8z9ou0RKl4DJP6U0yakpfag/dWtO4GvKAUA4Gkifzc3Zv/g7YG6BCPW/CUls0VKL978K9sfcB6Xyv3bmZofw0o6/drVvGkpPwb/p0pef4aP9v0RmiMDXEtE/CCJpIPrn/r8qC2Dz45K4v5Zol1dLLcA/geKRtd1C9j9KjcZ3PAHHP28GSGEZ2bM/xEWLOwYNt79kRbIEaFb0v4EoVEP/ArM/KrBQA6bp6j/YIIGi7JDwv190rIijYNI/GhhtnGMjxj80Awt78yLcvw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk4MDU2NjcycQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5ODA1NjY3MnEBYS4yAAAAAAAAAKuTz+TG5/M/9RqiBQWi6r8MMaRKRfMIQMRHtwfmOwRAoZ7uo8pDwr8YXr9omtsBQMAPTkYqk+C/3W0xMk7c4b/YBOOymqLsP89GL2mxRvw/9WcXYajZ3T8czPvYHn0DQKTHnN89UtS/YG1xWlFc3b/Psv0ui5TRP5bfx7VTJQhAhGV9cTn65T9n59k2cczhv18GZ5brG7C/twhns81k6L9+jZYAsp74v7E1Jre8QMk/Z6hsQ3l27r8dSQ9QAo3nP+lh1SpbEvg/6q1BwqRU/D/qPE2oAqwKwDMBouUzD+O/ulZuzS5Mwb9yV6mcrBbSv973oULq1fW/q6LhlsrZ7b812YaNyabTPyfJDl3qj+w/k89yLxgqvb+UK54cmhH5v5R7QHhGf+8/LbyWBEXv5L+NECk4e8P9vwpniXVh4vk/RCtWmJeS4z+sVE+40Wz4P6A8l7OsAdS/PWCzleiKAcB/bOH9pDPivzaEoNY82fu/yCECdxUi9b/3Ds7E2RDjv5bMETSAsu+/uN73kC2O+78="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk2NjgxODI0cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5NjY4MTgyNHEBYS5kAAAAAAAAAJOq6U/gEHA/foukk4Z+0L+lqCGPCVmqP80ALUG0Tsy/wcw3sXfRwT+Vqq5m8mfQP4tk+VoKI8o/yTzzJRwz0D+ySOf2HejHvyx3q9OJH7O/nWIIqWbKkb+w8n1KiM6rvzt51wJOFqa/ZniJRXVGvL+iP51TjjagP3m6Ak+vRNA/1UYyHhEMvz8sWhrk2x+7vzMYCZt/Nc6/FQH2hTfZvb9Oc/N3Pa2pvw+6kbi+W88/HCvqdzGI0D+B3F21mOSjvy20rcUGFcq/mum6vjmOnL+w53gdB/m3v40fFTUQI7o/XZayQSKA0D9gsBh9aHrJv39RfCDIe8A/PgzdDnd7yb+KS43nw1/DP04Z1mhkddA/HC+0U9mS1j8iRX2nhvfEPzIzm+YcgsW/PAt8IPY3uT/d1aVRbsuWv4W2aigwNrU/rfa7/XBagD/6G922lHPSv1G4Sm1hS22/UsPvdmRL0b/B3s0tvnOcPy/bpHT8tqs/q5u2a11Dm7/HhsZZFbSmP+yqdra9p8+/Vb1Zz8wKyL+7B8gQhOa+P4xfGsUpEK0/HDNghAaVtL9Iu8meofGmP2eeMrG6Ebe/Ldimewv8or8MOWm+C5/Fv1+BIDMQ7sG/Esg39QcQtL/HeZSWiTu6v6iTIH7J5XY/37F17B0Cnr9M+dOzClW+PyHeDnmYrse/Q6EJkejUej87Xpp5rCvCvwnSjspdG74/LQg7CIp4zz/0AsXsIuSuv8UrXWBVvMC/XSP/gKRBlj/MNNdQuQKwv39vAHyYPME/2vjoHJDPgD/235XcbyG1P/WuviP6VJi/1X1POI/XnT+/0ps5RhHCv3m+LqCDEcE/ayFMmNmXtz909MR5lUTCv40Lm2T9QK6/vhV89jU+w7/K/xvWSdl4v4ULBi8uZqW/GSitu8Ygsr+TOthCbLfHv7M1NeKCGZ2/+AelfWQgsD/6YIec3ymkP7W1UX5XsHO/VkqXfz8Tob/G1WO7n+OjP3gKa7zfNoa/5ykYUjxnw7/nkd8bCtR6PywQXxidu7I/JgY1daftuL8083CLTcfJvxbAtUQ8PLM/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkyMjgzMjk2cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5MjI4MzI5NnEBYS4CAAAAAAAAAPfhiMfQC9M/dBLUAsdbrr8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        2.1410464831864133,
                        2.396613780901807,
                        1.6881475111784177
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    2.1410464831864133,
                    2.396613780901807,
                    1.6881475111784177
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 55
    }
}