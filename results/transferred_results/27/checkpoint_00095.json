{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9908984902016386,
                            0.002665471160451586,
                            0.002498234395123314
                        ],
                        [
                            -0.09073117284773181,
                            1.013847387468361,
                            0.0283269124948078
                        ],
                        [
                            0.14793630037813527,
                            -0.0999347669150645,
                            0.9937184407784211
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.9908984902016386,
                        -0.09073117284773181,
                        0.14793630037813527
                    ],
                    [
                        0.002665471160451586,
                        1.013847387468361,
                        -0.0999347669150645
                    ],
                    [
                        0.002498234395123314,
                        0.0283269124948078,
                        0.9937184407784211
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.057082172935744115,
                    0.0020820054690599585,
                    0.0010509567263664928
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    3.918071034058812e-05,
                    2.346647540275626e-05
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.00013655644309551462,
                        -6.378489298697332e-05,
                        -7.600036325738913e-05
                    ],
                    [
                        -6.378489298697332e-05,
                        7.024058691396107e-05,
                        7.630939554337246e-05
                    ],
                    [
                        -7.600036325738913e-05,
                        7.630939554337246e-05,
                        8.575491413376213e-05
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk5NzE3NjY0cQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM5OTcxNzY2NHEBYS6WAAAAAAAAABWsoRRGcsG/ea6SdCDv0D9HH0kLilr3Pw3d68Cy8PK/bKl5bULkEcCDvGPooF7xv7+rEyVMKRBAhffsApZDBECeYwNhOGL6P+O/omdFxti/fz7VluUd5b+G03BE0eLHPyCD/kyH+Oo/ap85OCISAUC4Y14jFf2wv9yfEk8+CwFAaCiGi+GaAUCq27WvF7AFQDCw53PJ65C/LH9JHexq8L9Zx5UYRKrwv0+GXXMxq62/qR0BvQjz9L9TqXPuOI/jv5HNVcPb1tO/2+dWG5Pu2b+EX/J3387YP5guY5IuztC/PmhPP4584r+XUeF3wN7oPwJmSNRQ+so/k9gpHgNU9z/X+ft1Z7LgP7Mtvq3G3QVAxqEb9awz9T9OoX9tcyDwP2PN8yej89Q/7kTy1UZpvj8TAPqxAMriv4hl4xuMKLc/Um9SjrS84z9NIG5ThP0AwJo2YNL+jL2/aLffFgVN97/Tg90keZHUv9WiejxcXg9Aj+Q0Sr5cAkAD1QbYDkr4P9wqV2NN4sC/Vv6Phrdi8b/R3+3npGrjP+TATwp8F+A/0Iy0Fl0d6L/RFHuslE+2v7U9efWIfsU/Lk+ADmVR+T966NcCdsTAvymtuaw8dcU/lrwu594j8T8Of3o+riD0vylR+L4a3BHAGXiRK6Oy8r++NkU51yIKwF673JOrYra/dobHmZYk6r9E+mQ4L7Xnv3kqP6HjlNU/mMblDLm82z9nxyFyXnTZv/xNVkdQeMO/zsaBpaix5L9E/lA6eePqP9FtkbikzNq/pn1q+/52xD9uqUhJln3OPxzEVultp7K/jjNzyXLN4j+wqEylyNLuP1HC8pul2gzAm5FXacs/+L9QTjt8vU4HwNwrQtWjBpo/6drEEsSu2b8yiag6V9IBwCBHa2YbXvA/1xedS5/Bub/5oi0JidzSP1z9oA3+SN4/efuHmHwn2b/iK4/C+Tbnv3vu1HX7CNo/OBq0Ky175z+acKYwzkXhv7qlu7oI0MY/DiiZv7iK9z/OGMS6sNriv4C5COiu9bK/xDrzL5Et6r+yMoiMCtXzv5SZS4dV5vk/L1B8tYoY8j/KXzJK7AXvPxwycAUYOfs/KBSLJ32x9T8h/7CyB4HxP2wRvqqFCNQ/iy4ZzmbroD9UgStfprHGv3UzmUaFppa/cYdh6mSe6z+WaSJyF7HQv6/xdZ3zF/K/GuOYMzM/uL9b2U6L7QriPxA72kMtawjARcdEKpZL+r/bSvlCs7UIwKchyhoBgcC/fFzeZb1P97/CXUnRkybyP/5czawogb+/bhTKRPwo8b+K/Xk6ma/hv2q/KK2mFLI/Ip+dAfsb9j9M4YLRV73EPwVMFUajAsU/Lf++j2DsAkAwwLGV4J7av/SJ8LqJEPm/zQOgb28/778YHsOXWPDwv+G4LNIVeKm/xIGMgiPt2b9l7UrIyWkDwEa1y4K7/s4/ItWCi8BD/7/R1+BkaIWyP12bPpDAL8c/A8BEGD9R+j9RGa4SMfTSP/3J2X5hZ78/jGn8Rj4J0L8H0LrG3zL4v8b1AxQtTrk/1BqZ5BLa7j9Pa6IkjvP2v6bNF6PD0N8/0d9B0W7N2T9GAQo6/8Dmvw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0ODkwOTc2cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5NDg5MDk3NnEBYS4yAAAAAAAAADsx7Ro4qfY/0AaujH7O1L9n+jkVE2gIQLhQT7ilIgVAdwxGuSmTzL9kFOuKaGsGQPQxfqa4L+a/Gx16QMKU4r8YcT2n3JXyPxdbvUZ6SgFAiFbS/Ytl6z/exL9LjcgDQMXZh7R2yeK/9frM7yiX4L8wrFE/pYSuP16qs1sw6QdAFRr9m9+v1z9R15Hy3Rjsv+7XyNxaXM+/hn23O5sh478KlPkJHYb6v1cmtCB3TMm/Q6b0URvB9b8xLNtDEeHhPxcRuUn8Tfs/Q8DSibGeAEDqSsA5N6sKwDisHPStOOe/z4ilDTMPw7+l4mDEy5DgvyDgs0KZGPi/DLex9iX26b90CZs/rKeuP3q+L+TA6es/68pWVGkqvj/Y2TDJT/j7v4Jb3s0+wfI/2RD+C+gz4L96gbvwXEUEwEAwirxjCfg/1p1ip5D0zD9PnJlhVW37PwkpUAleWNu/SvkW2ETvAMDg7mudteDkv3anZ7Q4J/+/6hQiYC2Z9b8V9lZtf2vmvxJeuqtyJfC/6HWQx119/78="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkyMjMxMDcycQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5MjIzMTA3MnEBYS5kAAAAAAAAAM3o5sd3iMC/Z7LSJ1HD0L+Y+y3SuMquP0R0MqaLLsS/Tri1zVNjyD+4KA5PKPbQP1GAEEl9kNA/PQaAEvyE0D8oqeMJ+n3Av9Lgph1c56e/HezW5z8zaL9O81J32Fynv+8tDioW/Im/RU1aNCoXtL80/t3Y59anP71FZDfl0tA/sfbKm8DRsD/cLCsn8Nupv3z6KrLqNMy/4y4a6TcNwb+5vP+67B6uvxOj2L1LBLk/7MorMtRUyT9IJS79dy9yPwk3B1UZ4cm/hvZOQq6Otb8LDv++3jG6v2/3qMSG1b0/VWjNu+gjzz99SXvQDRXDv2Pr3m1rN7g/5JumFK+ExL+522OuImizP93K0ASXA9E/vRXxM/8g1z9vmYA2Zf3EP3+M7aPh5rO/BLUI+18vtT+/+rzXzK6fvxP3EqaQi8E/vvoJdP5qlT9OQ//Hms7Iv1+cVnTVSLW/aha7VZrZ0b8YPyGb+ZyyPy0OsKJ23Lg/9+2HymJMuL+muTqbOE2nP+Q2HqUlrc+/puS6UPnWy782OL73IM/FP2gPlS2oYrw/oQatDDi1sr/FScJkGPvAPw79rdC398W/7+jTGN14nr++dKSZ9aLLv2/2trxDr72/HwXePySTqr9BhdqWU5iyP/y1V2C3Xm+/kCqRXeSClr8r1EZWIH/EP6Cd76JIMci/iFabl1wdcb//rcA9xTvBv/L0tv9Wua0/dZCUfqZw0T/B4CxIfg22vxSrV8jtksG/sHZkRNWEjT96DDdMCXemv/9RA8TVy7g/4JKEZBeBkj8eYVd6iVNtv2/VxW5JAZs/gcSCWVVYlj8fpjLFWIa+vxzwgx7tbMQ/3En1SiVzxD9P8P4mqV3Dv7UXEKx9UsC/jpuV0LWfoL/CZ+1/m3pUP+Q8LNdPqKG/4kzqNlR0oT9V9LM9wKamvw5iqIgerae/pf7dCyyBrD/Qvz1/39O7P7vTnbze/yK/I0ur/FCqqb/TO929NENDP/3GZpmqmpK/UFrU6OfzxL/esFciPd6jv8XSR9gDb5c/T+TZWrSBtL8WngEZ5/POv+3XVpw4N68/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk1Mzg2NzIwcQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5NTM4NjcyMHEBYS4CAAAAAAAAALNh6q8GmtM/E9BtEyqcqr8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        2.016077614751074,
                        2.328096237744914,
                        1.6430659661986589
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    2.016077614751074,
                    2.328096237744914,
                    1.6430659661986589
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 95
    }
}