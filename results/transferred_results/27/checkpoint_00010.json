{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9963497532032857,
                            0.0043172905049467004,
                            0.0031158667178704425
                        ],
                        [
                            -0.03995494636264907,
                            1.0205940171492927,
                            0.03431513433041257
                        ],
                        [
                            0.0542109964489408,
                            -0.07631938283498885,
                            0.9817605313325053
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.9963497532032857,
                        -0.03995494636264907,
                        0.0542109964489408
                    ],
                    [
                        0.0043172905049467004,
                        1.0205940171492927,
                        -0.07631938283498885
                    ],
                    [
                        0.0031158667178704425,
                        0.03431513433041257,
                        0.9817605313325053
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    1.7700596281890952,
                    0.32810837902580825,
                    0.22288772783195565
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.0023685345190169755,
                    0.0012637733408225812
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.17717165532590862,
                        0.04885519654367032,
                        -0.057165364006153574
                    ],
                    [
                        0.04885519654367032,
                        0.13090299905550717,
                        -0.04528964510543876
                    ],
                    [
                        -0.057165364006153574,
                        -0.04528964510543876,
                        0.05208813417045688
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk3NDI2OTEycQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM5NzQyNjkxMnEBYS6WAAAAAAAAAFs6CA4vydC/tLM5Qac6wT9HDRnoxZTqPzNpGMXRNNK/MMvElTsg4r+P+ErLTizfv7MqwCDN9fE/3LFxIllD5D9TojGO3FDMv4IGXctZ48W/Qc/4TyZcy7/GFtTP+h25PzE5Wg8fgsM/MNlYCf/V2z9eFehw2Zbav1enU+/NG98/M8MXdF8t3j9+FHqiJJHrPzncBeiVKbA/UF67jaa1078I4bkpK7Dmv2IDVuQRBqM/ONkvuwve3r+3lmJ2P6Dev9PrMn/U5em/8QwzmZYG1b/c+Lzk3Nm7v0VT2JL9S82/l0AZQ0q71r8OTqS6WcfUv2WBvzZiA9y/AOWYWbfP6D8d5M6tj+yxP6k0feCuWMc/2G4WJhyP4T+jkj77Zwp3vxtgb51Tw+Q/RQll1fvs47+dx91Fn6Hgv+ipIha2AZQ//UZjjr4I0j9wKO4zVLTov6Ej2djLD7e/23ZT/zys0b8Lz7+HYV3hPx3oWTR/ack/bX3IGsmU3D+tknB76S3WvxAPRRqOK56/wcFFg+Ob3L85ERlpGvPbP/ykaZnlqMg/WCTRb0+q6b9NaAyRdZrSPz20CYWvfZg/U73YWnQo5D/L4+y3cB21v55vxCYaV6E/M04IYtHQ0T/Vs2+CrTXLv5FGGu8R19W/4OMR2c6l8j9epWpS/z/wvwoTFUEQPpi/A52f6NEx1b8mX4fIYFbGv7aEdhelQr8/aFUUfgzavT/Z6+aTI4bMP56KIATFE8C/tfrAEJA5wL+H29vJlKzvP0+mViE/cMW/dPa0faL3yb94O25jNxebv6M3Q8MYkNy/YtW6yMlE5b+uiQYG2jnbP3rKlxh3rsC/AECfHY/S4T/F6qyeOOvpv0ryps4V/Hc/X6qeXJwBXz8VlUoSACTmv0jIPaDHgeA/HuLf04dV3D9jTdvwBKTPPzJUprnsR84/ZIBeyNxC47/qjGqaPPjZv+0Qmfmx6dA/OD9wGx4z2j8wbeQqi8niv6Y/IPPVMq4/JJ8o9cji5D9U5dSjnEarv6VZPO5WT5e/0IG3cjbw0b/l6NUk/j7cvwhiqvTq9Ns/mD1nAd7n7T8LleIziJvUP+CCVIRR98k/XfMcOGQD4D9z0md23DjWPxbnLCn7LMA/wPDYWRvixD88pdp+vPCtv3ZEzJx+Eqk/5tePngzw2D8Rz62GALvSv1eHdCZ+Mt2/SqStxpqUvL/iEuWyeBjuP+aGeAPa4M6/usDnwvBX8T93mviK6Fjdv6QbdB8r29a/sQU9fzuc0L8PTFZ7byjlP+Q/Z16ojtk/vY7E5dcp7r8Olzbghnasv2wwTbAKNqC/eQYU9I335D++ca2tPBDLPwG/MCScerW/JdM98sdQ8z8wCVv4WDnav0vIsEUEKdy/w0i5KJxO47+QB+GhyGXTv84xO9xjjZm/cs6t10Jvfr9mUnLd96Lpv2o2ixZX69c/2254V+1Y/L8ar0er2FzTv3cHetPR9M0/C4WpGdHCy7+nx9oMIk7kvy9oPY2uwqk/dThdyUattD+bx//lRUTnv27dzjsi8YU/VHo+ugar4D83/Zpi0vXiv4jm3lxbE8Q/BzMrXed/u79jCsnBa9Odvw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkyOTQ3ODcycQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5Mjk0Nzg3MnEBYS4yAAAAAAAAAKQUY4QNVvA/cFp0ufft7D+OitGjU23uP9r4N8mav/8/YmRc67+R5b9Jujj2vwi0PxljyT7sdc6/WSK6PT+51r9SRPmh6TGnP1YL+MwE4NE/ljIb1PVDyD9CrbAMndP1P38mxCwSfpy/N39tSFYQ3r+B6RkAj8LlP51i2K3uc+k/Y/nphGN+5j+c/9CXJ26YPzjXg+AOlNm/pjv7Jm++6L9ZeVBiQhbrPxFpUM/Lfts/RxaofqLl5r91m3+/g8XqP8ZpCZFyhvA/bO1J22aC5D/bctL/dOnsv6MBX6gbZ+S/IBTfGnFsyb96paUaIAywP1KDg8vGz/O/5Dg/cNR27r9fPyp6wL3fP/A3ajOIobc/ppQZfmnR8L+6bap8f4n5v2CFKdDEINk/NbeDGH6/wr9rLnKy493WPwj/CSV/T/M/ON01sMIMpb90k7Oz1RLyP9vEG81MBdc/rbqgoMen67/wIPXSo73gv0MFKBV7r/i/Bkq5mv6+8L9PWv/WqMDhv6S3NnE+lei/sWhAVPLt6r8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkyNzExODcycQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5MjcxMTg3MnEBYS5kAAAAAAAAAIjQKhRg2H+/jkTx+TAdyL8RLI0TMcKSv5+8jS5zONO/QJz3SM250D9uTBSUFcrHPygYR81w98M/XNIqDNda0D9ESW++9UbCv96hhk8YLqG/tt+gUOmTqD/ZLP0b02fAv3gRxse15bG/d7Jfwqbuur9SBTSnUxZsv7Se25aItsQ/l4ssq3k4xz9Mgx+ygQPCv6NARmW9oc+/j1ErVsRy2r9Oh7kPpq1+P5Ew4JmDbtY/lxKUkkRj0D+8mfd25Tq/v6AJXDp/3NC/zH73CD5MfL8FY3jq7M6Xv01nJRGY4Zu/NsErJKq9zT/bxfr7c4m4v0MwkHBUdMY/I1EDFOA+1b9P2xRNSDvGP5sdrg+93cc/q+Ex2N6R0z/x8YsTIVvUP59vHf8Ar8e/f/fq+X+krj96zJgOSYmlP08Q1ovB/rK/HMjDPEJOtL++ifXvPUfHv+TyxChy8KU/GOv2v+ORyb8Nx4HVRUGov9h9zQNF55S/vb5dlGkuvT+gcnMPaxq8P5QGBpeiBcy/UWGjghb8vb9Ls0uD/Ye6v0+hgKJ2qb8/4Hpe7/Hswb9r7qpHaFq9v4gwnmYl38m/Dxg3p468uL84lBm+cpK6v7ktme8PELO/bOAwOyf2rL88lkaTye/Kv6S3t2+gSLE/VZuBLuhZs7/APCi0B+G1P0csJtTCc7m/6iGcD+qjwD/xHdS5+zHIv3Xs8hqho8Y/hvn3RzG9yD+xQWK/+/uEv3fBaxuOu8a/mifaJX/ftD81/0fV3wzQv2FIW1EGZKM/ji6roPdruD8ZMJhiuBWzv7WAStWrCMC/y6kWdPm1tj/kqLnA67XBv4Hionc7YbA/aRhMY6m6tz9OdTSvAC20P0G0ZTuf9Zo//KjrSZK4xr8FnyPq1UCxv/vo5ZIAc7y/mBqkRAFykz/TKGd0/4LRv9NgsU6hTIm/qmimeGQ3wD+gWR+WQDS9v+KK1t+3O7S/6ZNL2+i8rb8dhrtdvEClP0XXfS+u+ag/0IkgXqn5u78NA0joXzmwv9DDno3g77k/MYmKCN32tL+59hppdZOyv90cfnO1Fcc/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk5ODE4ODE2cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5OTgxODgxNnEBYS4CAAAAAAAAAHkciXyaEc0/0DuGSjhrvr8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        2.984537292506063,
                        0.9488465489377542,
                        1.785049268097445
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    2.984537292506063,
                    0.9488465489377542,
                    1.785049268097445
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 10
    }
}