{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9915422998141181,
                            0.003435895652664941,
                            0.0025191402815930874
                        ],
                        [
                            -0.07008889150548929,
                            1.0142795436263594,
                            0.03055143008676729
                        ],
                        [
                            0.15437909665714908,
                            -0.0948935197507531,
                            0.9929485108219992
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.9915422998141181,
                        -0.07008889150548929,
                        0.15437909665714908
                    ],
                    [
                        0.003435895652664941,
                        1.0142795436263594,
                        -0.0948935197507531
                    ],
                    [
                        0.0025191402815930874,
                        0.03055143008676729,
                        0.9929485108219992
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.13011528078020124,
                    0.0023084812235170094,
                    0.003293390983523198
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    6.39042107250134e-05,
                    5.043706163178285e-05
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.00016355036507231802,
                        -6.0511917894245926e-05,
                        -7.841692837828873e-05
                    ],
                    [
                        -6.0511917894245926e-05,
                        0.0001035228605337224,
                        0.00011097278858196447
                    ],
                    [
                        -7.841692837828873e-05,
                        0.00011097278858196447,
                        0.00012470684178023106
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDAzMjM1ODA4cQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTQwMzIzNTgwOHEBYS6WAAAAAAAAABNlx1Flh8S/Ubrc2QSOxz8RN37F2yX1P0kgrKAW0Pi/vXzew7nWBsAE7U2dRcv2vwgb7p5AXRBAJ6N1w+qXBEDLhThledL7P66S+xHnN9O/ipDPa6Sd4b9/ESk43yHVP6S0bP+oNe0/qLDR4iPH+z8v52XW+HioP0DJx3XEavw/vAqETQlCBEBVSxTX9N8DQMduIuASIZg/7NgtCzY17b9FkYky9J/wv2maocx0IJS/AWqoDH6D8r9Pq1egeYTkv1CccZ+W/tC/vXanZtgG0b+wtyRPIsjTP2zsxPELJ9K/PbLvArCo4L+GMrXc+QnhP/Xvq2/qjLc/zZAJqbSM9z/SymijUYl7P0y7rdHL2QJAwYUOxrv66T9JlJUlJOrlP+P0POCvtdg/RC52c8Wr2L8AL5K8Arbcv9X0S/xnprk/KuMUjyad5D+xoJBAlrn+v1TZHNDiJrS/ydjv6zMw9b+X8GggFBuov1gurJ+NDRBAy7TeYqncAkBKqguZERT8P21B0rb8wMC/BzYLtjlY7L9DxLyYB9TmP+f9W42QZd8/kJb1w8T88L9Tx8jwlRGOv7HfkL1WLL4/ZpD3uEBv9z+u/TlI/m/Kv4YZeA/i4sE/bcXshaVL7D9EipiQd8zxv6zlwXTwxRHA+9Jmr53a8b+E5OU7k+0JwDAw1VMHrLa/GT0Q11j56r9Yxum4qTTovzvF8D9QK9A/yNMfL0ScxT/6uIlCYsnNv4qgZ7CRlMW/z4KaMM7f3r8VrCnkQ43wPzRUhQzA+Nq/TEBziTxjzj8RYpbOBgHEP1zp//EGccS/Hlu6fZ4F4z9gIvoA1EXuP24uPFlhzQzAn0uYuO8D+L+4Ab6el0cHwGOfU5YyAKs/PE2rqNJ7zL8g4Be09rz+v7cjRZZlN+c/z9EXP2a/Y790aG1vo/nHP5+uUtggytw/lGzNmLNy4L/+GTi1+/rmv6N+xbn2z9Q/DkCFlON05z89Kv+VTvzhvy8f/+Q8+MI/3ICfqKKm9D/SxLr3W7revxZ5IOQnwKy/dzZQsuRN5L9GyWoK65zxv7sq27eT2vU/poSbbpuM/D+OhG61ZY/oPxtBKG0+gfU/P3sF3+6V/D8QBaGx6y7qP3ShS02mw9s/OD2CznDmzD99dm79nvqzP7zhFy6HEq0/uLPI0ivl5j8k2CVzRTDhvyQyk9c2m+u/HQEjqFrYtj/spFsfqZvlP/abZbuxtQfAg88jpVA9+L/+zGnKcwMIwJ0sVkbNOb+/Diyxmsj29b+7ZoRSEiTvP8UWKuXixru/jBNs2JYV8L8ARrRo8rCGP6iSm7S9U6I/pHtq5jyy8z+373K0QJDBP6lwD/DG47Q/8fZuo5CMAkD6OnytyvXJv0MELQDvq/m/nw4hgmHd+L/QOORSQfXzv29UALDv2pK/wgLGZFg7zr9HZ60jf8kBwAsM+DbcvdA/d9QWHOFRAMAb7ROXtPSfv+TMEv8HVcU/tJXB8Nde9z/J4OAqtDrXP3bVSE2+bbQ/zF3203JSxr/S2GILwA/3v00tpsiyBbM/5eka7Q2H7T+WpHNJeenyv0kAzi1NONc/TSirNRdS1z9ZYrQO4X/jvw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk2OTUyOTkycQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5Njk1Mjk5MnEBYS4yAAAAAAAAAK3mIvyPoPQ/UjQY4G0d5L9upcP9n84IQGGTIuQ/5ARApif/7/DqwL+9cuYWwRYEQHGAP16sBOS/CFzQmuNd4r/GtRCRCojxPyDtc0W6PABAT0eR6gcS5j8e6J2ZgtoAQIuWPH8lL96/B9JJkxhv4L9Xvl0RWtnHP4dDwys/cghABijtHNrQ5D/31JM9KGTqvxznRGRTDKK/Hxy3zE+A5r/z7RbcFzf6v2ENs7WzIrM/+lc632k+8790BmsSXeLlP93yz7fM9Pk/WYmzvg+y/z9YkHkQOKIKwOxFGJvdVuS/ChFBHMyNyb+1jkzqV5Xfv2LmWhCQnvW/tl+Ti5V67L8AAs2BlMzQP0Yv/DRCaOc/57R+0gOJt78pMe2ZtG33vw1AvwrsePE/iPJuuFg32b/2hVm+SqIDwAEmain9aPk/9QdmxF++2D/GzojEofj5P1f69vxKndK/vyYxMunLAsAr3d27jlvkv1OWuFwyv/y/X6Y7ejrS9b8xKnX/xzfkv3S8DQRQsO+/g8hToTLN/78="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkyMzA1MTIwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5MjMwNTEyMHEBYS5kAAAAAAAAAD8GBxEOKKe/71aJ7dv30L+HElOruSOuP6L0jf9p68q/vvBqGHG7wj+0FTNqSOHQP9HpS+pjAM0/8T8pS6Rw0D9rPrVZLcDEv0d+HH5LlLC/ONbgCB+do78Xiua21wOovw9dW678VaW/Wt2GNMvysr/sKuqyOjiqPz3oiFIFvtA/KJOk6DGttj87xHB1JRq6v4fJHQp1/82/3oS0ntI3ur9C2ySU7Xetv7tRohffOMg/f4s6ixE7zz9EdKb7k6miv2rA3aEgmsi/djuOtbHTsL/impErX965v0TRUuY8Xrg/0s+cXmUpzz9t7WsblWPJv19sZySsT8E/WNECIZDgxb8rN/cxDOm7P1vIXWe47tA/yEKkaSQM1z80o51jZ2bCPxH3GPgwm8O/pSXAjZYkuz8QDAeKzmCev91XEZ48Pr8/6JZGS062fT99nHf1l+XQv+IT9hIl/aS/J9GDebrE0b/zcYIZPW+rP8OB23VGFqw/sIgb7vOesL8s/DLxvWOMP3Llg2EIPtC/1DHuKc1bx7/+dAQIctvHP71iJN/KQqs/QUNYm0ius7/uOiyoHCS5P0MJF5JJO7a/9V+/qY8uob+Lrg/MouHKv7vz29s13cW/WtRLjqZaqL+0x3qKl9eUP+2apeB5fYU/U8sguSZnmr8MpqQrSBnBP4AEnYxXgsS/gBGf6rd2ib+8ZRaFTbjBv41asyQRv7Y/D6B9/nZA0j/YNXiWXN2zv8WAoLp+BsC/rzrf3Kymkj/qlhNWUZGfv89xLWnPisQ/oNliejo+lT9htd2DwhCoP+E6R/5Ja6W/OLwvlJc8mj/RqVG2IZvBv2Df3vkeDMQ//GU4HfYgvD9wmTzfF8DDv3MxU5pxobm/ehQMZSrbsL9ap/+N0eRkvzieuvpfmqO/T4aVCdxYpr9ao/XiKEDDv4hIk6aV86q/64I0KU1zrj+1GBMwffuuP5jEOtCNjZA/6zzEjwgLtb96KAkslO+fP195Qq7ObI2/GamgI6bOxL9IVTkNEkeMv02pnbxpILk/EHQSM9/+pb85ibjNWI3Lvxh1Ppqf1rA/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0NDIwODMycQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5NDQyMDgzMnEBYS4CAAAAAAAAAND+DssmhdM/IT3EMEuOrL8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        2.024817145347107,
                        2.3561335212328025,
                        1.66953834839109
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    2.024817145347107,
                    2.3561335212328025,
                    1.66953834839109
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 70
    }
}