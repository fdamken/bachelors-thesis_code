{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9910695622344582,
                            0.0028346252277903616,
                            0.0025688873693280336
                        ],
                        [
                            -0.08358039475519398,
                            1.0133271541511377,
                            0.028977140387121236
                        ],
                        [
                            0.15112455106199527,
                            -0.09773587250741132,
                            0.9940959135407308
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.9910695622344582,
                        -0.08358039475519398,
                        0.15112455106199527
                    ],
                    [
                        0.0028346252277903616,
                        1.0133271541511377,
                        -0.09773587250741132
                    ],
                    [
                        0.0025688873693280336,
                        0.028977140387121236,
                        0.9940959135407308
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.06053940752565017,
                    0.002517578913601662,
                    0.001434706582274717
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    4.896815946267452e-05,
                    2.912586763341096e-05
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.0001388946537943525,
                        -6.391405973804609e-05,
                        -7.647506533547954e-05
                    ],
                    [
                        -6.391405973804609e-05,
                        7.862414239578897e-05,
                        8.431556609922453e-05
                    ],
                    [
                        -7.647506533547954e-05,
                        8.431556609922453e-05,
                        9.379298700018524e-05
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkzNjc1MjMycQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM5MzY3NTIzMnEBYS6WAAAAAAAAACqOdLDhBsK/aZXqVxqKzD/7GdASXZ/2P0nOjB4E6fK/pfAK7dLVEcAphyuEZIDyvzhaL6GLLxBAg12GIghNBEDGGnO1c476PzPtHfk6CNe/zLGCU/xg47+oe6oNpj3LP/hv2YGL9ug/oBIqweSiAUDJP8XtCybBvxagy8X6IABAlbTnszYFAUD+EdsxEtUEQM+Yxstb5IO/rZLo1Xp67791g72tF5fwv/uOEQfRIKm/hWpoEzUO9L8RNWv9YZPkv/krTfVb9NO/LA+3vjuI1b/54XRGUdPXPx9V0awpHtC/SkVKlNmb4r8Vi0zqZlfmP1f8Ny81oMY/m0QGaZpp9z8ndDsBkoDcP0UhwydnrQVAI82kziJb9T8kHmfZd+TwP2z/IvLeXdQ/VNZiR8lyr79sXFcWBpXhv/VcuTszYLg/zXyPEWkR5D/tRzQAjlUAwHW4tjromMC/Eayf4yUY97+IJmSfNsTQv3AV5buoLg9Ae4OR4H0iAkAkM0uIm0r4P4ghtPYHW8K/rvYcUa938L/7uI0swzLjPwme5deF7eA/Hq8izvr567+rGAmr2rOwv9eQmTZ8FMQ/VoRW5OUT+T9PpiB1oODGv71KnJ9AfcU/f8fHI+sr8T++yAZtDPbzv1tg6sGh0hHAxvsWxSVl8r9+jsB1fPoJwJIEAs2AN7a/IAlt3SYy67+9ZRXIhcjov4rymsFdZdQ/j+78WOSf2D84GiA/SkLZvxpqWKSVqMu/L8LR/Fbu4b9TuMXbxbzqP0ETSLwDSNq/Qw8BHXsZyT9P6TTcUcjRP3Hz6IK71Lm/cyDI1Tcp3z90npqUKpXvPwYpAKdf1AzA03Xi4Xkm+L/GOpIHVEEHwFCuJjyPqKA/EUd9q1lT1r9Z2LSp8XEBwCrWSFDJN+4/iOxhXFcjvb96GPewr9rLP8L5QWtYfOA/gvDYg1KW4b+xJJ7vSyTlv+JEQxp3gtg/+qVXYwxu6D8U9hLMmczhvwUVI2vvr8U/zCBHGCU79z+Vpo63YBDjvybR1NSU+LK/cT8bEokH6L+3D5hPM07zv/4rf54nC/g/1e6CZ7cb8j/OgLwbqm7rP5fwV4ZplPk/jOt9DuNM9T+09rDT3l3wP4MYcsreL9Y/2iqhTHEjtL9DsgaJt1e/vwIbV8CNr3y/D55mF3zt6j+XqKBqPg3SvwqzEmsn7vK/pGV+cYoxyL9nObE5N9LcP8jkRUrdagjAo3ykmTg4+r/vsr7ETbMIwO/eRiAizcC/J/J/v/zE9r/MOol0pzjyP33mXrZSJ7u/mZNskTPW8b/AfKZQ5ejSvzIvBZM5Mq4/NKZfNWXk9T+uVBInGzq2PwNR0VbOlsI/ievyNgXyAkASg2pcdA/Wvxuw7FvHj/e/6mwRf2En778gsKqgGknvvz1artVE+Ke/2e1WR78f2L+pbXfxHdQCwJCOs0oedM8//hmIBM/a/7+z4zUehBOyP4KczpBzjcY/hRa5u0+P+T+TwJYLdxTWPwIC66RGS8A/eTjpfIHX0L9Hq3BgHvT2v6mygIW+YLg/zGZUGLZu7j/PcKMoY7T1v3v8/tZhHN8/u3WmS1zE1z9WfL0teIrmvw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDAwMTQ0NjcycQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTQwMDE0NDY3MnEBYS4yAAAAAAAAALQygxdPVPY/SztpFiFE17/TJGEQn3IIQAHRHLJgEAVANm3q545K0r+bD5+qEI8FQFhfokm6wOa/VN50X+hQ47+0cw7TiHnyPwLVKp0G/QBA0X/DJmED6z+X6CyeEAwEQHoNViQY7eK//882NvZI4b+Rmp+tF5KoP1dQxZycowdAzpAlZUTF1z/qFyaf/sbrv/Qi0hcUWc+/y5Xv7lWg478w/7rqRVv6vy4LBadgsLq/gS9LgtLZ9b9zzB0RaBDhP2+/aBKC1vs/jRegjwaOAEBmE6zVR6QKwK+yI0AvoOa/ImkIMSEYyr9veii7Wk/dv/fVmKIXpPe/XEQmRGeM6b+eSbhtnNqxP0aPrvNdM+k/56mKDRLSsT+j/kd9Gv36v4sYAcvP9vI/LQDAda6s47/5Sf7BPkMEwKcQgr0YXvg/iabw87mS0D9nNz7xZyH7P78LUKBVN9m/QZzP4R18AMCbPgx7PK/lv2VOu4iWAv+/gKFpLBJT9b+mqWUi5Jjlv7jKmhHzDPC/uoFa184KAMA="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk5NDU5MzYwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5OTQ1OTM2MHEBYS5kAAAAAAAAAGF+QTodMr6/rMDMLX8F0b840IlQgBewPyI9pIaDT8a/BddToPnaxT/d3epIsSLRP1klu2teqdA/CtTTHHYj0T8fYs9bD9q+v/5BCv/r/6+/+XEvu91Cib8JKJ2okPilvzMZqQ6Zo5W/13BxK8thtr9Ff42UH+KoP136QDFu/9A/7Ok3JQ5Asj/OMDluKxewv4BPuo3koMy/WuemD7bYwL/iZOWJNIOvv9cJ8ldGOrs/v72Iui8lyD/bb/YZ2WmTv5cB706fKMm/tcdSD89etL+B33GmAuS6v3s5zQ9TnLo/lPDv7q6Izz+Th96LHDHEvxaz/YMHULg/fOXRXq01xL/JThypDAKzP+d1MVEgMNE/OEgWiohN1z+EqnTTaz3EP5DZwN8QT7W/pk79geZptD8aG8Q6rjuhv0MG9W79usA/0ambkl7Vnj+K6cYSOejJvwN3LOVOqrK/mcnWViMG0r+Wn9slWImtP0xT9jZB+Lw/U1cPW5r3tr/m3LSxpGSgP/35Y3m2xs+/kN8o2AR7zb9IsFVoOAbGP6mo87LQgbM/8A8O7Jr/s7/zOnMx6p+9PzPHuakmtMC/5AssSzTRob8bbwzEkX7Kvx3R/dnyRMC/kbBhk7IXs79zg401zdCwPwWrwA8yHoW/J8Aq22+sm7/Iei/S7yXDP2luxBCb68e/heZoOSNVbL8YM3Gt9uDBv4U4AlwTF7E/YymCRrv10D9DR4bB3vOzvwbVu8/h7sK/2mC2H/brkz9TLMmQPoaWv673rU52u8E/I/Np033ilD9sfjJx0TedP2KtUQjepps/p+oG1+CBmz80q6s//UHAv5cJIWHF3cM/EjNw1eeTwD+hIV157mDBv8yPxcTj+L2/YZUjdZZlpL9dEzyzOg9vv8cmM6QYPaS/CkVt/Mzgaj+QTnAFTAexvwjCi/AzhaW/mxGgyvEVrz9pkB1Vlme5P9scQVwNNXA/px9t3/M7qb8ws3jBaCCVP7gz1hw94oq/+s5rERa8xL+2EW+NHi+kvw4YyvZUTag/iidBdOc/sr/XE/ulhD7Ov+8jsduncLQ/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk5NzAyNDMycQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5OTcwMjQzMnEBYS4CAAAAAAAAAJcTx6mPxtM/Buov0u8wrb8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        2.0211041544268853,
                        2.333582146968311,
                        1.6458783572568627
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    2.0211041544268853,
                    2.333582146968311,
                    1.6458783572568627
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 90
    }
}