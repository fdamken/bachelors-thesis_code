{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9945491534724454,
                            0.004343612329066712,
                            0.003281678930398938
                        ],
                        [
                            -0.043265016302860955,
                            1.0218461924983537,
                            0.038679665976307
                        ],
                        [
                            0.09566620371618319,
                            -0.08078357935462087,
                            0.982645391096711
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.9945491534724454,
                        -0.043265016302860955,
                        0.09566620371618319
                    ],
                    [
                        0.004343612329066712,
                        1.0218461924983537,
                        -0.08078357935462087
                    ],
                    [
                        0.003281678930398938,
                        0.038679665976307,
                        0.982645391096711
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    1.4836499110789958,
                    0.0881615441999065,
                    0.06853455470736151
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.0005328811716244673,
                    0.00046575085792983375
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.09520899160540708,
                        0.015284193591336148,
                        -0.02052208524882637
                    ],
                    [
                        0.015284193591336148,
                        0.07300781732437978,
                        -0.009395243476056692
                    ],
                    [
                        -0.02052208524882637,
                        -0.009395243476056692,
                        0.008500169305658556
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkxODMyMDMycQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM5MTgzMjAzMnEBYS6WAAAAAAAAANHxOSAQoM2/TqcoGT5vwT+UdZTt0l3rP0ft10wG5dW/F2bjyd5s8L8JPeDSURfavzfpohJhCPY/X1TG9DfU6j8MboX5YYysPw5qtzt0ysm/1ig444pV1r+nJKD8PrTBP5u0HB24ZMQ/m3bY6OhK1z/LiSTwmVHZv1MwocQrruA/8yqRRIPk8D8EXUps9Vr3P0L27Uqxj6s/W8nw8UuL1r9wfPW+DSvnv3tzORGyWKI/KrB+Es5y4b/mKkhVyBXfv4QVZtBTk+i/7HekaEVR679Yda06tAnrv+uk9Ak5z8C/VfIxwasvyL/A7oBDmWK/v0wN0MzD0OG/WPKCuDlw5z8GuVmdJZOAPyQFdyPChvA/mW+myKPaxz8VvXGtTr+xv1S53TpjqOI/fLlqKt0u2b8/holK1xDQv0PdQqSclZ4/qxkk9enE0z9DG3GG8gTpvx5Y7ipKALi/L4CMs6JR07/uY2aWkD3iP4T9DcW/6Mk//xxomQxE4z84pNwr6vjRv7dinIHGoKW/Wx+ZBsjE4L9TgTFnOwPcP8fdp6IF4dM/Qfxrwh6R5r+1L6+AO5nfPx4QaLCwaps/1GqaH15q5T8GGERmzTi8vx8Tg1P8HKg/v8YmvY+71T9we+CcseTQv5NMbaZVNua/5eS6rRGn8z89nvZy9l3yv/vNFsYmeJ2/9WLAd8bM2b8+shV6Aw3Iv2cXqraChrU/XAXYVU6jwT/ZK6skXX3AP4Bwl+e+l8C/AGarDmvcxb/HDYcNvV7uP790VzIdGMK/569MxwfT07/+QMgkWdmcP46riUaFEtW/c0ZJ2SsA5b8RyVPSJVLePzVEUiRn4dO/OtlUT8oK2D/otU+hjLPyv5puDXlBq5g/VhSk1qc0rT9tyXQKumTpv9/NBqMmZNA/5z5wONgP5j9fAroymgvgP32i8D3rucg/WoYuuU/I5L8UiboS5TbWv7WE5UBiNdI/ALYOU8zA4D/cPTQTzCjkv9HOklBSjq4/0UEoLGdF5D8zeqdW4WutvyiG0NkL05a/8wzc2yqU1L/v7w7Ee8PdvzicuyzLStM/HpVWmW9C7j9av4hgCym7v88WqXzUIcc/Zv5fDuQ24D96U+9kIj2uP+BV8Rr7xMQ/hKSp8104zD+hqXgxw029v3bxCC53Wag/j6FQPFMy2T8OQvlK2TbSv1mLqfiIUOG/jJ4Mm4iwkT89bLVU00frP6ofVELiN+O/qg9u12o78D9iyNJ+R+Hjv/XX06fjzdW/VFUMxH8s2b83NpKg8XPkP6pQjGHQcOA/Eqpxt8y/67+Tsgac/CKmP8siY7Z5KZe/Ff+yrNLi6D9FxfeexlvDPy91rKfDhqy/ch8CXicn9T+abtNYYEXZvzuA4q3IXNe/1kE0uV2h6782DUh9rWTYv18lH5Gl7JC/OiV7aLR+lD+e+KShkFnwv992dsshC9g/HMPuKvu7+79VWuvQ+VbUv7rgssITlNA/x3Vj+Lstzj/8p5BVB5/jv63Lot/E7aw/Vf4u5BT8qj/e9p4xMa7pv1LYDBXDd5U/b7IcEEvP4j85ofB9MvXjv+xjNZMXI8I/WncTX4Wptr8cKb/UNUe1vw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk5NzAzMTM2cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5OTcwMzEzNnEBYS4yAAAAAAAAADPdaeoqy/E/sN/EHwfb6j8JnY3QSXf0PyCm0fawSwBAwQ0d5erm5b+9zzfwyfbkP+PxAZKjGtG/ZlBAqWaK2b9yqZWEixTkv69om1Sz++I/w8sVPframL+M9GGYXnj1P0oFgAEYhZa/2nzOSLHy3b9M+6kwCw/lP5fLzqvJXe0/HQyfl0oM6T9EfCf2sD2/vzGWZkhohta/ZZSkORX46b9w2ZYKNVTjPxHO4K3VKdo/4X3sO9/t6b8qUru4z3jrP8XE7Gc2EvM/xmoG3qH56D8RJZMnw3P0v7EIDTpMt+O/FWfK/1kFdj+tHqbQD1y4P5L07te2TvS/Aua83nyi7b/KRBhG43jfP2dj2AqLMs6/R0BG4w3Y8L+VJAwBWW36v5wJE54kLd0/PLdvEA5D0b8dq41VgUq0P+s9kKuJzfU/pXTXqnthyT9x+AH2MA3zPwWPt99u7NA/uKCKSdSC8b9ZQ5++VwLhv2yFfuyra/i/cWryED5W87/zD5HMPCXiv7UyCyx68Om/2iN3/WAN778="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk4NDU4MjA4cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5ODQ1ODIwOHEBYS5kAAAAAAAAAM10rwyorKA/oM/Jzz7eyr+RarmfBCtwP2DEJZ7DZdC/zP/tah99zT9wCICY2LDKPx1ok93RXsA/hGRHhywj0T+M6gOj0SzFv2lewgozcKy/B0EtgwpQnD+MMSogQCK2v/j+rdvoR7G/TA6pMCG1u79mBFLNJPugv/9ezWRTlco/D2RioC5AzT+cr/KzvovAv7FyfsYq8s6/SfaK9rPs07+7i93yWnNQvxqQBCXL3tU/CRsSu93Z0T9I7JmK9y29v5W0vYAPb9G/edPsk6+vor9mwYbf6XenvwAG0MPjY5M/znHqz6BQ0D9kuCS+2lbCv+C/nPr9B8Q/kFhYDXq51b+1a7+4AbrGP+QesZH/4co/2R8aFXHw1D8HbdkQfkzRP7ubFQ0B7MO/NRbqxrAEuz/3w6jWKeqgP72tzlzwqZy/smq85miarr8I+G2Ma57Ev+3LmWrRQKA/a4p/trx3zL/pC4GgrXatv+nGnAq8u6a/CumwVztKrz9U7sXXsYG8P7IrODeubtC/EtFaCCR2wr+qun9pyiSlvyl4SEQw/bo/yQ/PYV19wL+fqu1AaqS5vxPMXvoVXsi/H1VP3lTgtb/uiZXT+y61vzB+KWfCMLi/xBa4vYBXsb+SZa8FqgnNv1Kr7FtQ/qw/IpDP0elKtb/OsHAVsTq3P3RUcJlk0MC/noe4SSZAvD/1APoXAYrIv12/daMF8Mc/4foVmXmNyT97O2noMUd9v4x1yp+wQcW/dIWReCIDsz9Sq/B+NajNvxLcaoZa6q0/O8vGhgqMuT8Q/6in23K5vxKBRZ8Pl8K/DwTfYKjXsz8Ue5LJnqe+v5VRzxSlRbM/AI06mVW0sT8CMUcIxNunPwkSiokHDH2/wa2z8wvLyL86yjitlXusvzsvS4J1Nru/9q2+iQpEdT/DqGYl0aXOv8H+L7gidYA/NCbC5104vj/DKhZ8zbC9v0gkS0hTo7G/69h4v7vhor+x9401R9exP7r4SWz+OKM/qPCWcQw4vr9u0KU1P8ixv1PZ27YVgbY/X/6ZQgsSu78pfN20B862v+BAOWfS3sY/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkzMjI2NDAwcQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5MzIyNjQwMHEBYS4CAAAAAAAAAHzzkuV9+M8/r1iK3USPu78="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        2.766529830592235,
                        1.5825422883296194,
                        1.5916879925808414
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    2.766529830592235,
                    1.5825422883296194,
                    1.5916879925808414
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 15
    }
}