{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9920140257306882,
                            0.003918577342017142,
                            0.002924083142594681
                        ],
                        [
                            -0.06416407652366805,
                            1.020574865661747,
                            0.03532482181912369
                        ],
                        [
                            0.15573937952019898,
                            -0.08961128618182186,
                            0.9869759290672406
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.9920140257306882,
                        -0.06416407652366805,
                        0.15573937952019898
                    ],
                    [
                        0.003918577342017142,
                        1.020574865661747,
                        -0.08961128618182186
                    ],
                    [
                        0.002924083142594681,
                        0.03532482181912369,
                        0.9869759290672406
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.6107566484776447,
                    0.010700052296746587,
                    0.012775075738423977
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.00012919378479091392,
                    0.00011370089550996453
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.014342458013468118,
                        -0.0016722714451349319,
                        -0.001987132585219431
                    ],
                    [
                        -0.0016722714451349319,
                        0.0013175319542977348,
                        0.0008237413494529555
                    ],
                    [
                        -0.001987132585219431,
                        0.0008237413494529555,
                        0.0006400501025600747
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDAwMzEzMzEycQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTQwMDMxMzMxMnEBYS6WAAAAAAAAANbMSCQf5MO/HLhF9hCEuz//c6+fG6/wP3k7tfR90OS/e4Q1Pnxz9b8VE9EKaRvuv6uB5tFTlvk/mCmS2LiV+T87B7IeJ8/oP73rUMlO+8u/msdzZjo71b9iOgIUGgrOPzhzhtyJ0sc/vahcwjdn2z/thEUimAHcv1Wx5AzL5uY/IyZZk5YE9z+C5hsGgCr8P6tvzPO16q4/3dZmdqTd4r9882Qg3Nbpv08wBr+5rKI/tUb6/P0m6b+voOz6tPvhv+248CHNMMW/qPtIx7H7xr+hqOjcbMfQv17DODGC/72/7EyxCmo/r7+VHVnHWJijP3hGZz6PRt6/ZUEaZOJj5T/ODHTWm4TIP2NL/U8uO/4/XgZWv/wNwj+4NXiffty5Px4N438mIug/lFpG3cFHmb+ty0alH6LNP4lp+M1PApU/vnrEsNA22z8CIdzqUw7vv8m7+QBzt7q/qv/7vaby3r9UxXVm6KrpPxsvr7PCd+M/RxIucrD45j80DWAG4GXGP02W3v02pri/CA30zKd44r+BzFzs8xjiP7cdzoBwo9Q/UqhynB955b/JnnjT5JPkP0uVnCB0Oqc/MdWsabSD7z9MYUKEvBrIv5tpACWkyqw/9ZIvt47x3z89QUBk0W3ev8Y28klb2wDAO0qLlTGw3D/aL1uPL1D8v87jHeboZ6u/5V22qlub47/flqMwJnjQv6a9sD1868U/QYugcUOYvT+u8a8ibki0P6C7EgEJu8G/7coVS9EQyr8JW4lU1p7vP/wCgOmcY8i/UAcVgstox79LL/cZLOmyPzoV0TfeldC/cjUhcZfn078Ffkua+6bkPyPdYO8sb/C/fsCNdEDA5r+VSq1bFBEBwAL7OQAaCpk/zodXD59Tnb9sVOijFGrzv3egfIyMyM8/NZBJeRer3j/e+miT1RXRP7LcrvtKBdI/6u15+F2T4b+kUQueM9jTv79Lrs4+lsw/abjIJ4I94z+L1JCxT0Xlv/8ShhrLrLI/VKl4vF/J5z8x/PQI0ge6v4QmC5tEOaG/wfS5dcZ137+xizj1S4zkv17xn3TOGd0/lOP5X0x78D/EEocK4OvOPx2jGdSe39c/+f2acDxy4z9rMMxzfXDGP9i3yOiEbck/V9+Tg5FGxj8fvt3LN6nHv5zMDS4C1KM/fWEWWs7a4T8MOn5igfHUv5o9m2ZCI+a/xb3Oq4yFxb93qfRWVczgP2OJPbzc5Oa/G81kZSjw6D+5E2gUR5HrvxeXoexU6tG/YX8PEep+0r+ANdV4jjnoPzxNg7ya1dA/kGfPvwCS4L8WmaE8o2PVP1FK5mJLlnm/8K53xUC/8T9VPe7IxL7DPx1BZa8sy5O/sK9TxU9x+D/O0Q6Tu+7Yv1p9v1PNF92/mvIB+h1k77+1y2CxsOHevw5z89Oyw5+/tzFbND11dj8HNh2aynv3v+ZSrCfhMdQ/BoUUM06+/b+BQpg9cXrPv8wZWkXEx7I/PBcU0zyq4z+PMXP6FlHkv16dN4JHiLA/+Mv3U+tpmT+I+fLpaXfwv0Mt7yDpxJw/CoF9UhPC5D9qn6tWm5znv97Akco4cMc/oWqeicAMz7+tE9v5jrK0vw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkyNDM1ODA4cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5MjQzNTgwOHEBYS4yAAAAAAAAANgD5CX9XvM/OaLLAjCluL8V65A+cpIBQEicjcaa7AFALJQDTPbh5L+erQ1oTQH7P0jl7PoFkti/3EtdvoZM2L8pTUQpADvJP7ehYLiyuOs/kQ0pWrvowL+6LRbJuy74P/QEtFBJA8w/dMPQ4XDL27+gXciFZmvgP1VDVB/C8vc/4omO6/VK6T9HiwbtsBLEvza7m4c7Ecq/zMe7CZ8w6b9dBDeAZlPQv6Yf4uK349Y/10mucACA7b8YH0wthgfrP2v0hLCOL/Y/ltarrMhy8j8vcAdURRYFwKiLO28St+K/8avMDa2kuL/LuMxXq/7FP06b+UhNh/a/EKoxYcxm7L/07wA6w0HaP7erVMkuIsU/PGhiQwnn6r+ByS1DHlL9v+SuF+jV5eI/zD/EXf3v4b92cIovoPfUv0BMPjU6Ivo/Jxxr5jCF5T8+jsyqNQD0PwIR69SOmJ2/JB/uNDVX+L9afR23XlPhv9djd9p8Pvm/C4uiouUW+L/23viCloDivz8pcY9E9+y/iB55D1Ui8b8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDAwNjYxMDI0cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTQwMDY2MTAyNHEBYS5kAAAAAAAAAFXtyRZa1Y6/YlX5er34zr/UJyEOvkeiPyZHqK6C9se/aTHEXPLgwz/jAnz7kcvOP+pRAIjW+sM/fHk6F3u/0D8hNSMyk5TGvzVoKdCOnai/t3JPdQybjb+CbnZuXAKyvy7iELZF6Jq/OYGulrZ2wb+Vii08P/iIPyKvojkOhc4/FLMVTrOCwz/bF3AFaN+3v/Y+Ty6OyMy/9yx8VSd6yL+Ft25KNJyhvzAK9VojNdM/qmUcC4cK0T94wcvbvozAvx0MRl3Nzcq/ajLq4YXrej+e4uN3YfCzv5ioK2O0p6s/K/lzt39M0j+s/VqMBYjHv0Bkn9ULP7I/R2IGF/sZ0b8LRG0Q4N/KP7fzJGrw5s4/9aSfFiiV1T9e5BFtZrXIPzb57d2YQsi/R75Stbr6uD8Z7ZrfPl16v8goLO6lJpk/wiebvnkkeL9ZdQg8KcvKv84cAuESWIi/BaRJxT1J0L9coKnpflywv+yQeJ/7Y5g/WkvRH4mPmb++vktcVu26P/3FfIIkqNG/Nb0645Y7yb9eia+Xf1eWP+/5ZDcytLY/GoGyvR/BvL8D6dlsvA21v3UCMY7Kysa/TSvITSCqsb98A9J5g9mzv4ZgFoHhLLW/kJbD6QPmtb+NxRD8HvjLv22oROyxNaQ//gb2AmYur7/Li039ZLW7P6pKng+6+cG/OOa2IaUQsz/mmwdiuEHGv34YR2Om5cU/t+MZPuY3yz/vNOQRQEOsv+ZxZZQ35sC/XRtHHO94qz+ZMrQB3UXJv10kPlcErbM/+E5V/ikDvD/9ZFvLfK6wv7o2lTp0g7a/tSEYsPxDrz+BcYlxItfAv8x/60htFbg/sfvR1WujsD8ESXWzsU+avxLcdq7QqKe/9cUD+gXFy79WDLIAtXqjv0cID1xkPbO/jZNirFxBib8r3L8EOfPKv4dxKz8G63c/JVMyC+lfuD+gJf5f+naJvzuvi1Cf5KO/54l33A0KWb9gqYn8xZuvPwtnibazlZU/B+do4QVmwL93ISWtXLtiv6jv7Q5OH5W/imASxwdXw78Y6VQz/Bq2v6BpU/l1U8I/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkzODY1OTUycQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5Mzg2NTk1MnEBYS4CAAAAAAAAACOWEl6nCdI/pWwpC/5Zt78="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        2.208514338928731,
                        2.379676592292807,
                        1.6669641386733767
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    2.208514338928731,
                    2.379676592292807,
                    1.6669641386733767
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 30
    }
}