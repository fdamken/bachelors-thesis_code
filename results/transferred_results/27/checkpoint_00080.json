{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9909754332509342,
                            0.0031000389947139673,
                            0.002611795754755261
                        ],
                        [
                            -0.07993938190229909,
                            1.014173262014804,
                            0.029755279593267573
                        ],
                        [
                            0.16065198459077548,
                            -0.09762706230572549,
                            0.9936127926007589
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.9909754332509342,
                        -0.07993938190229909,
                        0.16065198459077548
                    ],
                    [
                        0.0031000389947139673,
                        1.014173262014804,
                        -0.09762706230572549
                    ],
                    [
                        0.002611795754755261,
                        0.029755279593267573,
                        0.9936127926007589
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.09932783648186458,
                    0.002114645905461081,
                    0.0025799668836677843
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    7.358865418791539e-05,
                    5.740488068431659e-05
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.00015193029375648592,
                        -6.325176793797738e-05,
                        -7.825131803018692e-05
                    ],
                    [
                        -6.325176793797738e-05,
                        8.355725036235384e-05,
                        8.96350264123491e-05
                    ],
                    [
                        -7.825131803018692e-05,
                        8.96350264123491e-05,
                        0.00010053712743562926
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzk0MTE3MjE2cQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM5NDExNzIxNnEBYS6WAAAAAAAAACtsQsAb08K/Uw4McPl5xj+w6oTBAlv1PzR5M05mF/u//sLS0cF1C8B+WZz0ADf5v31cPQlwbhBAUrlh4XTvBEADSjrJD0H8P5MqOV1tjdS/CI1vpBrS4r/iDa2+ZTrPP7wwtgUIqeo/5mty2punAEA8rKWeovOyv2n6V2tSQAFAR3kdnOD0AkCLW9RjwGoGQB75zvRDqmo/qM6snxpn7r8fZSdfxbLwv2Ywd5LexaG/VjV30Io89L9AcdKQSx3kv8YWxTSQ+tG/Poz/bUdyzr/JFCr059DTP6c+YsrzJNG/i/u7Ym5f4b+pifFCGcXiPy4r9UlgZck/5UqbWg+A9j+U6cRB0Vy+P+y2naiOKwRA0oRAS/e48j9ewPLTJJDtP/6QxT7oR90//l8Elx0z3r+pzm3Qhp/dvy+zDNofyro/fRX0KzAO5T86MkrGhDH/v3cXi08NOMC/eXn/EN6h9r8v5KsU3wJsPxmnWXydbBBAu6BTDy/RA0DLoP0ck4j9P6eCWM1G9MG/OS+ARBAq7b8GfWzbfwnlP5XwVIa8sOE/BnFdGDb98b+UEOjIameuvzHpyb6sqcA/TJfLHQCo+D+Z4oDzDNnLv9qSGN8EPMM/MPJnjMIk7z8ZYBv55ynzv5Psl90u/RHASXRgZCVC879mXzFHBJAKwMIWsqXEULm/DaHJUgOo67/iJ2FAkWjov4AiBHaJBtI/B5NJye0ozT8I29LtpaXSv13MGP0jY8S/dmF6ll9x5L9pDQCjmmTuP64UNQPSMdq/+5MuznKzwj/rfXMUr6XIP/vesWRAtMO/aji5/K+b3z+UWT0g4TjuP53kSu3q+gzAHO9fr+OQ+L8b1JzAPIcHwMA6Wxs87KQ/tZ/i+8Il07/jcjNkQZ4AwKTsOlu2qe8/p1FF2JJomz/VWDpYnufUP4tZN+Eg9dw/ybHQcZXh4r+FhScJvnTovyeR5vWnR9Y/oz5ID68b6D8BHxyxBtngvwqe4Q+RHsM/pVyIn1D19T+zUPIfNmziv0IBDRnmbK2/uIRumAqO5r+NZ5PqCIvyv3VUXc4QRvo/sty5cUH+9T/Hlw3oRxnvP0OVOxSp4fk/HZZ0/tMg+T87ZKakZbnwP92S/lGYzN0/qpHIL9AXxD/KUHzbZm+4PwRLXJe4i50/dKuC9mgm6D/JNdbUYfLXvy5IquD0COy/1RU3xnInpz/vqK7kP/XlP3JbleI53AjAcMaN8U8v+7/C0RnGE10JwLe8X+9+WMG/zNVAH7x99r88Ir8AjXbxP0YTAnLN+r2/Nod21Orc8L9yj8R9gMK4v7oNkq98CqU/7yQPQZrJ9D9mK5pncQW8P8Nk0wpTj7w/SRBF51LtAkBKIQwdEwnJvziJIdMmlfu/uPLcls+S879Oth5mprvzv3IiPomRCpq/Zk7Xp4uK0797j5yZaPgBwKUBaQlprc8/CrVj6qn+AMDzoy8JbeKiPwdtOcCS2sU/zQlGibiq+D8Qubc28nvUPy/iySBdgsE/uRT2ngVz0b//wAKSPKn1vx2NLtIASbc/cXhu8wyC7T9Uc+OXdU30vxYvGSYDSNs/h60LzVt/2z8To3gZFInlvw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkxODgxNjMycQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM5MTg4MTYzMnEBYS4yAAAAAAAAAM+gvboPdPU/rWwvHwPu6b+QPmo8aPkIQDd9RsAEJgVAiri516CLyr8tynLLYd4GQKuTe/ITXeW/NZrDmW3O4r/WHq8yO5jxP9vF/PEMqgBA6N7xD7AW6z/h0ULJhecCQM0DtxExTeC/T1fYPWQK4L9dEsAvYg3EP5i4EaIrLAlAZ+Hn0CZp2j+5Ojxk41Lsv5MU8ckZdMC/GYOY0Iq7478pYiOdgRv7v33jIIhNfKS/fD7e2etK9L84V3W83znkP1n7GBafDfo/oahivnx4/z+EgMpMF80KwLwOTIbQ5eW/qWy1+UxSs7+5NdPYovXhvzyA2hJ8TPa/WUGfsaET6r+4i5/Yj5DEP3Fl/kCBpe0/zeOL3OMcwT9zfy15Vz/3v21OXfJa9PI/SZ71mYzF2L+v45WsSrMEwOr++h79x/g/HR+MzM3A0z/UrYa9xqX6P1saxE0Z59i/tvCdJLaWAsD5klFVpl7kvzu63Vp1Ef6/BPu8eGkh9r+BBIqKrNPjvyZrgV7Gze+/NPPoqIcyAMA="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkyNDM5MjY0cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM5MjQzOTI2NHEBYS5kAAAAAAAAAAAwAQoDGLO/tivBxpHN0L+2bQj4aNGsP8YWPf3jR86/uCncuq7sxD+YdslT/rbQP2aWF2fWL84/daJKh1ij0T9IV+S6jpzBv9dNLVB2ALa/ZMGAFqEOgL9wec1VKFapv5hfXiTKJ6G/4jE65yy7tr8Gaf5cdEOlPxmUHzy7k9A/ZU4MmGyHtT+Q6vNtGZq3v5J7xHuYI8y/jowzEVbBvr+AM9rgnCWsv5U1L7beP8M/L89S5QsdzD/l1ThYAoaZv4hnMx73qMi/BwTOc4fvtL+XSezRNjW5v38WiHDCEbo/mwqCBViczj8jmh2fQIPIvx2EVRrLj78/ElUiePRAxL8zNvTHNVW6P0VJAmRtxNA/YfleotXh1j+0rpNovxDEP1UDrxrk17m/PMFPX67Ytj9zyXEjLbybv7bm7XfQJcE/dsxFRlRIpz/NLlhgskHPv6aVPqMLuK2/DnejYnCa0b9qFs6j5KatP0skP2Z/sbg/V/KDLdFWs7/WXiRvrXVxP0DUdgG4r82/+OJlphyXyL9r1W2LcMXJP+g8T5DJ1Ks/E3e3qkf3s7/58QvyDVi5PzS8E0YTpLa/g+B+yI3Aob8Z1ZOfbJPMv2A3KW0gpcO/YUV4K9ljs7/BPPm0gU60P9nu3Lf3E3S/3SrfzSKLm7/ViP+H7PnAP18Irv/MFsa/ApuVcpj3fL9D/8UMzdzBvwF84UZgR7U/xefIRShU0T9OvGqH5iGzvxPl/7R47cG/5f5bGqnKkz8ft8Ggb0F+v1eEd/io1sc/KI34ok4FnD+dP/qI0N+lP1Xw1ry+cpa/6Yms0ZNgmz/fg7O3hpjAv1tK+Fas78M/SVMYRILCuz8sAADGJYHDvxhDWQlTZry/fNk7iFS8nb83NMId8wRuv3PdeBd0LKS/hbJQxVOgnb+Kfeqmqva6vxTPTFklDqe/m+DyR0sFrz+HRmKEXCayPzCdSNVM2Iw/dmNUAWtOsL+E8hl5AvOeP3ZwdzPWJIu/LjJboRpyxL/d4o+01U6qv1WYw/sY1LI/mymxh9gUrr9wV9gBy0fLv/bMjrxLp7g/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzkyNTQzOTY4cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM5MjU0Mzk2OHEBYS4CAAAAAAAAAIqupbTcWtM/IKaCT0kgrb8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        2.023649890169402,
                        2.3276945377163223,
                        1.6398968604909037
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    2.023649890169402,
                    2.3276945377163223,
                    1.6398968604909037
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 80
    }
}