{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            1.0000659058131705,
                            -2.3723126704206002e-05,
                            0.0005272600728777624
                        ],
                        [
                            -0.011432829794461087,
                            0.9983486953571611,
                            0.003935560484360102
                        ],
                        [
                            0.015957450212731872,
                            -0.000579283869076079,
                            0.9909320522025242
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        1.0000659058131705,
                        -0.011432829794461087,
                        0.015957450212731872
                    ],
                    [
                        -2.3723126704206002e-05,
                        0.9983486953571611,
                        -0.000579283869076079
                    ],
                    [
                        0.0005272600728777624,
                        0.003935560484360102,
                        0.9909320522025242
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    1.1488194686392386,
                    1.0084376997418327,
                    1.0583058805460315
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    2.8360048626875707,
                    0.5258786648891262
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.8756585890558375,
                        0.063441489016141,
                        0.03478874622608252
                    ],
                    [
                        0.063441489016141,
                        0.9281573150141766,
                        0.03380825068279725
                    ],
                    [
                        0.03478874622608252,
                        0.03380825068279725,
                        0.7975543267253529
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDIyOTg1NjMycQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTQyMjk4NTYzMnEBYS6WAAAAAAAAAFAhCT7Hh9C/xWhAyl/61r9YgnlfJf3tP4T7eDXToKG/EgpUO3Wx5z/hw65OaKD6vzYK6i960r8/DqaHJPMz+r94lZ0JRzYAQNSVcA39lsG/gB5IN+OjtT90uBTDOYdcPy9na+/Ontc/c1RiBXC16z9m77P8fMrgvw4F+Y/+BLM/gPilJcE55b97Vdo1bzbbP6l4B8yaJcE/k109JKs2p79kG/jSTR/iv2GEMKNjb7I/UpUL6oH2xb/CGHusq0Slvw2WpQarFOW/xnwvTGOi5L/c5csaQQXkPzlP2y6kqsy/TxKv+5j29b/rNGsDRT+Jv77hx0Du9NS/CLlgRjtSA0Cyxj/ACiLlvwE3tmfFJbS/j5uabZkqxT/rRg7yC8mMP0En//2mhuo/RPRD2gbWtb+68G1F76vyv4ZU/1H2l8I/g8UnJ0sXBEBxJY7BsAniv+OI4sD6+8C/ko0Os7WI17/D8LEERRzmP3i3jJCi6to/Ca+c0f207j9W3go+mpHrv2InVx7WMpq/0xoWFNugar9a6SNPLD/nP+DUjjhpSLM/z2Af3api9L++IWeaw+flPxp3iXfG6tQ/miaYFbOCA0C01BtZMaPePxEu1MJFD6u/Huki+Ilc6z96gcWmT6jiv2v2cskCecO/Md2rX5wR9D9TxZIeHSH2v10Zv1ldQbc/SvjQ9d/yu7/ZRJkg8uWxv2p3wCicKMo/VJG7wz5o2j/ZRFbF8JyzP0WMI65w+sa/NZ6pM8EF3r+NtC0mxa3XP+thv5xS2tm/J9ov/WCk4r90lTabvLPEPwx+IF+2FM+/eQfHk0Tpv7+tBK5gJ6fZP2WDfGM6Zbi/BW2lOeLzzD86+3PU7izfvzk/YjtkTJA/BljAeK8Cxz9MvEl+Xprhvzqxn8V0xeA/jLvXRefC6T8j90KZUALNv/uNCGLYuc8/dJEDEiLJ+b8K/2QvNm3ZvyVe2Smo69w/CpNERIfimD+GhGCHsQjiv4oObZ/oyLE/NTgRsdmS7z8hjXnFConRv4KzCagW63I/949jMsLc77/FXoOeDKf0v2MGCpFRV+8/g64p1iSR4T80aj9owCuwv7fvKMs3zMk/WvRo6CC/4z8h1gBW0OflP+DkoppiYLI/qTM28g6Ex78YCfBBb9eevzHtcPqCH9s/UOfbj4lG+D9HnhlN9KHRP4Eylxhtq9u/WCkVrSGs5L+/t+9RAq7uv5864hy7sr6/Ruv9pVLR9D8rXr0iD5rqv6UFDxXaN9O/gzD1pFEU4D+u8b2gjl/2PzD2uX3LLNI/mvzCOJPq97+r+Q2EUcnYP3Fk4HBTPL2/meJobWAD0D8A43zU7+avvzVj5tEf6cC/3Kqv/Mgz7z8gsZhrIyr0v9JKdgIWoMa/jxPnHmq9078JGPH3LtTEP6W4sgU9e5W/FhezamoLxb+FGmmZGLjovzJuqHHo48U/gQZPYEe89r+rSZh/z6gAQCohe/Jws7I/Ra3SUaNJy7/UgxpTFROxv6IK7PoEEcM/ciUKKUww6b+GG3SxQXThv1FQ5EkGHNk/GVQ1wl4e+D+As71oAG3qvy2IBLvrWqA/WWJJiXR3zL9AXjhpS3fiPw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg3Nzg2NzUycQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTM4Nzc4Njc1MnEBYS4yAAAAAAAAALpC+ark5BPA3wn0wMjfFsCLymhCB9fvv50uy8m1yQhAE+HkIaaqzz8b9kM7+4cKwCIPZJX94PG/UT1u8Y4xBcABCa+fnFbyP2l2NnkLqRrAu6dC1w3cBcB09TExXKUKQAqz7tHOudk/4n01Q7X5B0Dfx9d2lMjxP+0vPLlPcfG/V9OwEFWYEUBGoRpsPaHoP4sSPnTpWQTAKtf9Ayg+9r9yd6a2klcAQFCbiPdOhBDAi+nEFiFqzj+32ri8pEL+P+KzeMvpcuQ/PSEBUcjxAkBFOhPd0EnpP6iWC9o4qu0/mRyDYJmP6r9xWuoW6Wz4v8pyX34txvu/4nEqQH5WF8CizaBvGqsIQDF8TcPDBP2//Lyd8Z4HCkBlhokJAiUAwHQhyOGMAwpAJ4w1ffVREUB9Fc0t/lPjPxt22+rR5eY/gNUbR5NIwj/dsSas/aUXQCLL8owku8i/KcwhqsSYAkCcoOl9mkQPwDR7cQQFdAXAGwUJ9ja0AMC4mElEHVADwKrc620hOeS/l+I6ZIktwL8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg3ODk5MjAwcQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTM4Nzg5OTIwMHEBYS5kAAAAAAAAADH44ja7AMo//RTtEIIs4r8gFbSg3fbOv+cOpwuesMe/DOX4m9FNwj+0kR75DpbRP496j+h45sc/Qau5Qaz40D8cf0/yH7Oxv5TIXw3umPC/kS2ypAL2vj85vFCo/XrYv373jGk9/bO/XBckzTAU8T/onAfuV/DGvzs2Du17qcE/69WXElG63r9pjLQ8BLDYP1RshytUZfC/JYboRsGI0L8F2iT5Vvy6P67EYp70rdE/I2PKmVJauT9vz94zWVjNv+3kJaxMl8C/ButyCwzqez9XsaOYqNuuPx4fShR/utq/lgggUAxzwz/6pbOfzRPLP8dH/jhzZb8/K6vjv+FQ8r8dFMtqBNTTv+EIZxEL4q4/oVX/dowt3D/0kA2ibMzGP4VKXjSMzfa/1APnl28PwD8MdBkpsp3CP18wRTRrGKO/Odqgna+2wr+kVuDokgrMvyWHem4JRaM/blfmFPUswr8c6f4ouxTsv75CUTILDcG/nFzyFWn1zj8AQzlD87vhvwY1prOyNuO/DjssHnhVyT/PJhgLmwa5v16Z8k/PRts/ON/4+htWsD+eZSX1njTTvxVPG01J/9G/NVSB+M/awL9GnqJVZGqbP0UNlUgkHZO/B4MWq83/w79i2SUVl+GOPzRJhJJUVcI/G2LNXZXcsz+e4H3cPgXCP8a9k3ZLW7u//BKZb/BQ4j+R4a6FTArSvyPGon+MIsw/mOEn16If1j8+siQhcvaVP0tgiuuUp8O/GTogm6Dmzj+5piQ3wiLYv5AOuJPMc1u/uyPS7Iqm0L/iWWT2jom2v4djahDr+dW/87ZGfd5Uzz9aErltfA7Tv2dXqKYG27E/sC6D+XLtrr9h4FrvS93NP+r5vUuLtsO/w1YMuzLGxr91JS2etMa/v9jQ0SRAuZ0/+MDbkU6gxD/6aRCpqcnZP2Z5BSMI05k/xduSXuUSxD9ynExrk5LVv2Uw0yAhALa/tujRYnlUtr8swZX6aaTWP0Ym1K/RhLo/djA/0BTXrL/td0lHUC2wv+iKfY45oc0/ABgBJj961L/tmEKL+RWNP1k2d0mieN4/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg3Nzg4Mjg4cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTM4Nzc4ODI4OHEBYS4CAAAAAAAAAMRnsM5x6rk/RUX4v/l4yr8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        1.8621404088221551,
                        1.0953541466900965,
                        0.9607983954411157
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    1.8621404088221551,
                    1.0953541466900965,
                    0.9607983954411157
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 1
    }
}