{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9941787413904469,
                            0.012158816670494725,
                            0.025471334970775052
                        ],
                        [
                            -0.05196071621869348,
                            0.9993746775511987,
                            -0.007364647007292464
                        ],
                        [
                            0.010928375495728462,
                            -0.000977395904598081,
                            0.9984585434693259
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.9941787413904469,
                        -0.05196071621869348,
                        0.010928375495728462
                    ],
                    [
                        0.012158816670494725,
                        0.9993746775511987,
                        -0.000977395904598081
                    ],
                    [
                        0.025471334970775052,
                        -0.007364647007292464,
                        0.9984585434693259
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    1.6812387152919304,
                    0.8326859105806373,
                    1.1489802488258374
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.20948232818062207,
                    0.06484332882751505
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.5641298085300599,
                        0.05221654508183127,
                        0.03206341879436159
                    ],
                    [
                        0.05221654508183127,
                        0.3564280617165023,
                        0.12923235388456922
                    ],
                    [
                        0.03206341879436159,
                        0.12923235388456922,
                        0.4243470939706324
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDA5ODc3MDI0cQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTQwOTg3NzAyNHEBYS6WAAAAAAAAAMvpsYx3I8s/WOriska94b+ABpPuc5rOPxcvjoN68JW/bBPB34kctL+Qr0efoRW2v+9Z1NOYhsA/XjTgqLw/8b+TgAp7UOPfP/qfj1yZ++O/nc2qVUlzA8DZv+vh7ob1P1TDLPLrUMA//u7tQr4j/D9FzV3L0xHrv+6cv+Qt+tw/KFB8Vzlh4b9KzEzCQ//SP/+9RmueVG4/c+5GGr79A0BmlnBC12EOwIZAGv2tCby/XaPH/EdD578AtlC7urmvP3G/uADDIuO/jccJgEqB0D+3Y/zgRrXuvz9bx9fdieG/yYhLNjJ6778xSGpdXoPqv7HhUnyqJ6Y/GC5OV8dMwz8TK285l1GmP/TCJtUpWbO/q9ufcnNGyz9MWZ1+HGGmv3bMSOhBc98/Xtr/1+YEwD+ShxHa28q+v8QLg6PJHdc/mdRy5bXC5D+VKKsFq4/2v+o4vJ+1QZy/T4SdjHve6b8NYrpF0nr3P3rQ8N9h5tg/0IeVpDHF9j8GxVR9Mvf3vzoawCG51Jg/9dfj3DCy4L+6RBiBEcXQP3Txy2u0nrY/49fYKtusAsD87YX088fzPzh488IhwNA/uUfSqlqZ5T8Kh4BdZge2v8ywrW+JqeK/EXfRaEue8j9V5ZIiwVvrvz+ruIWIxNO/GpZCf9QT3z+Bnc1inL7yvwdT9oFvJ6u/EElrfOjUnj8vW2TsHr6pPx5LlDb+u+A/1RJSSkhxAEDay0N3/a3mP7JADF4abMg/cb0XLAUa579ExUi6ArbTP+iE2UkeNtW/IKy5EowK8r+uzg4D1xv1PyLQYv7B4MS/BiH4vFaQAMBjiZYXjbQGQEsvCIAwxtQ/Ays1vvd+sz9knD6KPRvsvzzCxlzK3L8/Bp/t1zT3wL8OHSFFh+y1v+K5n7LcRM+/+XvSLUwA8z+l57ZVpTIDwENBTYdyZry/IOuEdjFi37/k3J0G1CK+v3jP6WMsIeA/sQRMwr2D8b/ycwImQ9XHP4A83wn9K82/NkmodpS74D8V+JSG60Lhv8/8ZOJ2ad6/mYNRgbxc8r/kaTyNu336v/i9BAZgHNQ/HJAA9e2MAkDhLOpbdksFwFTTLenu3Mw/5VrRfL4x2D9Bm6bBXMPVP4XKypHnGrk/U4WgiEgj6L8rcQNUNmXQv6twclijrs8/FJDj/7j5tj/ZQIyEawbIv3KNSJe6Y+S/jxsarKy4BcArTzbtjjPuvxfXBwby28q/RIL20OO+8z+bSPzLtb3hv3xZO4SGwsi/Q8wH8rEF7j8aYOTezd/UP8pds8MjUuW/KvyTxfQSAMBfk0O00FPjPyfnA1/prPS/vKHLxiYg+j87FOyWxqDgv3koVxFTm5s/7GV0ARtvgr/wXR1ShSO1v/j5VGEUvPG/3IIyE5Dt8r8hB8j4QXfuvyg081XHYa4/LbamOc3czD9Tcp5DiPjAvxFQZnWQwuW/oobDaZcL9L/IaqgRLvD8P4JV2OIVUbQ/wTg/tVbtvL/YfZdgfnS8PyFq/vWiH/U/csxlG1eb5D+NX0A2+RrrP92ht8ZzetG/aA4jfnbQ3j9yp+8/vx/yv8EkqyCHWdo/flP4Pl+k5b8rZPuEH93wPw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDIyOTk2ODk2cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTQyMjk5Njg5NnEBYS4yAAAAAAAAANMaqFoScRrAlgwHkxcBGsBE0x2KMcgAQALrYhDRjPI/K+QJIDW/AEC65j6sHNAPwL+5Vhn23ew/b9pv8WEc8z+PZzExQyDaP9UmD8rPURrAyC4E+RJSE8DETZadStMUQGMtFB4EGRFAFosTiydGGEBOEZZb/iD7vzloA3ttC/m/0984h2+KG0DzKwkHbjbFv1RIRQRhf8o/vTX4NOb287/7V40R8JgJwN1SgOBnthPASDYSjgezBcA8kUVV+aniv01smbyUU+2/5nP/kWPEhb9kQc9zxvDVPyM74QQsuQhA8d9vfX3rEEB7b9h7WVUEQCQ6pN/+a+q/WslC81EeGsCe3B5gTIIOQGe5UjGpZfi/6aX/he0NEkBA8x/O4O31v3F9D28bwxhApayEv+6VBkArBpMJLGbqP06uvVwP+NS/AT0pGrEOB0Dica9xv3MJQKKhfg0L7L4/C+lWWsjxFsDWtxD8Ranmvz5wpZnQMhDAsU/3rSmDyb/hBMe+10zGP8sUSZMOXQlAgscKEdBGAEA="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDIzMDA4NjcycQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTQyMzAwODY3MnEBYS5kAAAAAAAAAJqQmLLjxuM/s4OxXj4G6L+RxHDcwbrbvxPM54AA+Jg/6XzM/f0lsL9+O4jQ36fVv512JkK8CuA/YYTG9NyQxz/Rmnp15mfYv9DjaaQbgdC/+lbquRR07r/WgcuuHIfUvwueXDNb2+Y/iGhb/PG9xr89KiSSMkLXP6EWaHjgGeK/MLSduHFv6b+oGTtQxQ7XP0sSYKBvheG/DvKAqWGToz8yr5TablvEv0FZZwUHqOu/ZKFWoKxT0D/q4KS4IpPev+UUg/dUzNG/rpf+qf8F4T8VlBAfG8fYP4Om2JIE3fe/+2FBzBNo4D93s6BnXZ/lP1RI+q0xouW/e6YC9OVH8r+u0nPRdKq5v9okTkUHYd4/N/KRBa5S7j/vew867y/VP1TS5+pljPC/76af1luDzD933EH+M7zEP9UIWy6Jtua/XW5L7Pbo2r8U8hspvVniv+xlkva4XfG/iMQvGan9tb/USSxiCoTsvy2QIOFPOcG/2YViBlOk5j9rTM7kr9HkvyqlLDgVsuG/pqhWFTMV278C64FOYV/fv6p0/1gJqeY/Of9q5fHNyD/sgHgsyXDXv+AxPNdso9i/vsLLuxoE17/xrxMGgUHhv0/r922RqNK/c8sBIfLt0r+NfiVSgWDevyZNKKNzFNg/TIs8eohI3D9t9IGwoWDQP3JXd9OryNy/WO9MrTKZ6j8L8c9O1bviv1f6WbFBdO8/Ie7Gq2KH3T95nWp+kRzTP7LdEh311uA/Z4OpcPXSzD/O+/dOHM3wv4FqQ71yvty/4oYbqHEo1L/p3AirV9HSv+zLuirKTOu//mSMcNp82T8tDkhFE3fvv0Y/wG/659M/7Zr5jvADtT84Y/i4PAHbP73M160Wcq2/cvGoqpfRnr8+++DZP+KSv+SdlZZ2euG/5Nc8CGvX1z8vg5YlwnHTP2bHzQACC9S/0C7iVNuK2j/h/kUXufTavzqNkYobiqQ/tjTd6k3ozj+/AR9kbYLwPw3QbDuF9qI/gzsKbcY1pr+UTHgRamHTPyXZ+Vpj2NI/Xti574Ud2r95XfMxauiQv1qUlrQDauM/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDIyOTk5NzEycQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTQyMjk5OTcxMnEBYS4CAAAAAAAAAIj6+HqVdr4/NTp0vxjO0b8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        1.1708769881427255,
                        1.9476809992443904,
                        1.389389422808515
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    1.1708769881427255,
                    1.9476809992443904,
                    1.389389422808515
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 5
    }
}