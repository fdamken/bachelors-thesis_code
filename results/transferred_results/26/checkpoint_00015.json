{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9665754240021887,
                            -0.003777692525642907,
                            0.013036607000100361
                        ],
                        [
                            -0.0626961938593243,
                            1.0353137947661268,
                            0.033906657096478124
                        ],
                        [
                            -0.03256648177771647,
                            -0.10058245479240938,
                            0.9914546655577963
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.9665754240021887,
                        -0.0626961938593243,
                        -0.03256648177771647
                    ],
                    [
                        -0.003777692525642907,
                        1.0353137947661268,
                        -0.10058245479240938
                    ],
                    [
                        0.013036607000100361,
                        0.033906657096478124,
                        0.9914546655577963
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.7306388958822936,
                    0.16304639073417482,
                    0.15244452538424735
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.0011960810707951168,
                    0.0010578929829853222
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.014648767673467677,
                        0.008459508774722124,
                        0.0033388459670909976
                    ],
                    [
                        0.008459508774722124,
                        0.008239185911759428,
                        0.008017951089052011
                    ],
                    [
                        0.0033388459670909976,
                        0.008017951089052011,
                        0.03205599574611177
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNjM2NzE5NjE2cQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTYzNjcxOTYxNnEBYS6WAAAAAAAAAKcLDCiIubQ/KCukYRteqb8dBXNbsr2rvwq38PgcJL2/INGFRzPhxL9k/krdUEu3P2IJ9ZGt/IG/H302NRi/AcAp3PGBU+D6v0N4X8Nb6ea/AqMSmRAH/7880xROk5/3P5Mw2mbaJvG/qQI47JEiCEDkuPAea4AJwBbD5PEgCcQ/XP8X9zyFy7+qKm+shoOuv3/0Fg1gsvO//+pcozo6BkBkoKNBENHhv7g6eyVvF76/xw3412JH2L+tdFB/UOrMP/07lOg7psO/79KHXRdF3D8WtrvExW/HP5nR2qkn7Pa/6hYlI/e79b9fqg5gV47rv+YS2hr9usM/aw5kRJGC+D9P3kmvOqH7P/uakjhkR6+/nO0SlYhitD8w6VyaxY+0P4FpO1XBRPU/cRrQIWwz4b/n/3hh+m7sv4YOFcoZchxAmuNOnFQXCcAVgZqyqx4LwDCDch7ZtJy/8Q/bXHPv37/Q7mMpw3LnP+1rasx549Q/WHnVcfYy4z+xmjScJsrjv+nPH166brQ/+rFQC6lF178BZDwAbuzNPxOacDpW0oy/5h7bUpyB0L9Os+ADpCLEPynZMGMJEKo/4HHSY2ANzj9R/CDescKUv0QK6svHOgfADbQ2a6cZ6z9ZK+C/77z6v+NgYQ99UeG/C2URKYvlCUClv657g4YBwAGxXw46qng/Av4IXNj70z/QH4ry7gHXP9HRVbPc8OQ/2FhVSikHAkCzB9zD1yHnPwtcngIWc9E/hmceDnumA8Ak9DHOBNbpvwCVAigSU8i/kLqBSRJg47/kP36oakvYP6aNJitwifA/9JTfVikJA8BzbYWpRgDhP4zFoVvuXsQ/kZbcpjWa8L9eiZLjS13av56ToLEZJN4/rsCafQQhz78I89ck76TRvweiy81H+NK/8+PaxAsV6T/oCuZtLlsBwDEXvuFWZb6/Js5LaG330L+R4cWeURTVP6Vc5fTgR8w/tNTvBk0a7b9wuZ5uIvDvP/3bs2swsbg/F8XqJA3kzD8sOvM4UNHfv5t6qccNgd+/5qNwgKLI2L+zMjEQYmbzvxeXgfNkk+y/fNAv42b00b/195BuBPP1v4YM7k0WrPY/S1wvenlizj8FyV3qtgzzv83CByXM19U/dsgghjeS5b/352Xn5CLhP3DGEKCV8OA/XMG+dlG8xz9nCCrEQonov8N0vhFCSuW/NNzPcZpRAsAKo+o1Hnjnv+G94m5zkri/b09xtgH+8T8BYDxbRIrwP3iXiLGfvuC/TIJOYLxr9j/hmBC2I/nnv7ZPCUz/k+y/Rh3KxwTv9r//LEfCgtP0P2+xIGzPlcu/496YsxC5kL8YtGGNV4ygv+20GwSoca0/fED21n7/yb9hhSJQ6h2uPyj4uixK9gPAd0kr2Rb29r+rS7JfMWjzvyqH8r+cz6s/bf4ffxNLsD/OphunyurTv7xpJFTmULY/7/ygX6DK0z+c/Tf3kQ31P7U6OX5t/+k/nazfgtr2yz/L1xxHRKXzP7zh5pxPSvQ/swBb8bBv8z8//29v6zboP4huBPOmeOy/hD3eI/py3z9Jks1rn2L2vxaqGlu/DMe/yz1O2Iec57+uPv2Yoq/kPw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNTM0NjU4ODQ4cQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTUzNDY1ODg0OHEBYS4yAAAAAAAAALIQCcEWxvy/KyqO/zWXGcBdoEjSJlUdQHsZx6jNTuM/p93zkaUW878qk4D0ek0BwAmcGCmW5vO/bSX8V+6w5z/opRODrof2P15CwN9cUwHAazvErEA/JMAPdQ/fnhQQQFsyB7vdH64/0XyY8ZmXEUC21392LtzuvyP9yxp58+6/RMlCEm3++z8J2OA2T3fQP8QM/VD6LvQ/SavZ3x9Tdb9JGTBIUgsWwEWFH+hUbwTAiAwwSSzo979a1Gw3kpYdQMqlKkH/cvK/wLNbNFSF7z/1GGQjzpGxP8ib0WVhsNc/BrY67qtBBEDv/+q5NgwCQPxNK+fJTPU/1zJS5hbECsCh5EaqGaoRQFIJTxmIfhJAxU4cjgSuBEDrU5xf2ZHov82zTznnkwZAQnLoHXd1+D+vnISsbTYJwCakB461wwLAkmkL1VGmE0DZ/grk1CvzPzhxTX/NRsq/0Sq6mATCFECED0uwqhYLwFwRtqCGLyDA49RMa0LwFMDPXeE4wvEAQP9iQIuEwwFA0lhgNc/oBEA="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDYzOTkxNjQ4cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTQ2Mzk5MTY0OHEBYS5kAAAAAAAAAPhK/Ghg7tA/mqm7MJeFjT+yAmmn8aDNP1bcda/S9Ho/Xq1de73UzL/ykMBrxr3lP03iuS4yFsE/2zH6WLQz3T95rc3H5q7lv3Vs8tDWmsu/HZg0/XhV779Hnm/qWcbHP4JbeRckl/Y/exw1ViPgt7+L1ZfIrQi7PwGoSEgmM6q/J+jvsN2Z4r/jtrx5FEW7v+Jz4b7ql9m/aaz8OaEI0z9xUjvIx1DJPyuWMVd4qeq/ShqY/HtnkT/LktivwezZv7VA9gQ4Crg/RzKU1jWd1D9omCws2kbgP/fXC6uqLf2/vCgxqeFnnj+Oyo7wHmrlPxJ/ezvQ5OK/KWdUKHff4L9O3cduhORxvymFJt0cTeQ/UTZ9Qzok8z/6aWIVkxviPy8ca+maMOq/4ZI9dXZAoD9hBGvVFNXVP6vGIB8EKee/yuR1yXEvkb+n+3cZXW2qv2wvDWFQo/G/giW7+k+Anj9PgajeTvTgvzMex7Pj/de/ONi3we9O0D+tz2u0s1DMvwdpTKo7AOS/I2hCwsabur+ND3gvAwPRvxt+UhBxkqc/2qauuRUdzT+KrB8o/zCkv7+4REKXvdK/m6z5bBti07/NPSYIU/rnv2xM+rXHL9K/L0bDHyWusb+pcPfpWhjHv0/fK6NWP9w/oZqbpcn61D+GvhMzCWTYPzy22Q0f3Me/fNl+cBXdrz8E0Ms8oMjDv+7ODJwB++w/FMCQT+4ftb82WxAhjaDdPxs9jjlXsNc/T7Z+fQ8I3D9Vvx2/VkbyvwbUemTC1tG/4EznCG4W3r8QR8gRasvCv08ds74zs+S/yQsXoLWW0T96Ljo8AaHuv6UfwPRyBKA/mnMTg0gux7/6MHsq6tqyP8y8YdemE86/apPAFn8Mkr8iihFex/DdP3XjkMT6+OO/ZdpWYKwZ2T93nazn7jzbP8Nt0FQD4tG/Iurh2MxI2T+SJmmVzvPZv7b8qydfYq2/yjpdjT7J1D9p/moG29zrP8Tmajg9zqm/Q5/Dl4YI3b8xjgV47iHWP9gHVZ1qMLs/GKfjmIGTxb9JWJFp2JLWv2WYOz12Q6A/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDIyOTczMzQ0cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTQyMjk3MzM0NHEBYS4CAAAAAAAAACfKdf8TYNc/01J5dGL11b8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        1.7986573055958806,
                        2.14961182936261,
                        0.34236941072229127
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    1.7986573055958806,
                    2.14961182936261,
                    0.34236941072229127
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 15
    }
}