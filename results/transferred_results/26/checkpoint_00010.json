{
    "result": {
        "estimations": {
            "A": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        [
                            0.9662773921160562,
                            -0.004531097822849791,
                            0.01008433247495185
                        ],
                        [
                            -0.07423822760369324,
                            1.0293239948582555,
                            0.033302404723943954
                        ],
                        [
                            -0.011434866959525511,
                            -0.09332256326964536,
                            0.9822128069992113
                        ]
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3,
                    3
                ],
                "strides": [
                    8,
                    24
                ],
                "values": [
                    [
                        0.9662773921160562,
                        -0.07423822760369324,
                        -0.011434866959525511
                    ],
                    [
                        -0.004531097822849791,
                        1.0293239948582555,
                        -0.09332256326964536
                    ],
                    [
                        0.01008433247495185,
                        0.033302404723943954,
                        0.9822128069992113
                    ]
                ]
            },
            "Q": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    1.4395235536465112,
                    0.47755394416780983,
                    0.4458110255059702
                ]
            },
            "R": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    0.007986778112384855,
                    0.004174532000046384
                ]
            },
            "V0": {
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "values": [
                    [
                        0.14329206574956688,
                        -0.014486680163941834,
                        0.006063290596495019
                    ],
                    [
                        -0.014486680163941834,
                        0.07080819146768569,
                        0.08586999563386488
                    ],
                    [
                        0.006063290596495019,
                        0.08586999563386488,
                        0.16782025568068315
                    ]
                ]
            },
            "g_params": {
                "py/reduce": [
                    {
                        "py/type": "collections.OrderedDict"
                    },
                    {
                        "py/tuple": []
                    },
                    {
                        "_metadata": {
                            "py/reduce": [
                                {
                                    "py/type": "collections.OrderedDict"
                                },
                                {
                                    "py/tuple": []
                                },
                                null,
                                null,
                                {
                                    "py/tuple": [
                                        {
                                            "py/tuple": [
                                                "",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.0",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.1",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        },
                                        {
                                            "py/tuple": [
                                                "_pipe._pipe.2",
                                                {
                                                    "version": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    null,
                    {
                        "py/tuple": [
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxMzg3ODgyNTkycQJYAwAAAGNwdXEDS5ZOdHEEUS6AAl1xAFgKAAAAMTM4Nzg4MjU5MnEBYS6WAAAAAAAAANU1VLSgZ8E/Z8q8Dkedr7+FemOi3PGwP2zZZz3H9Y0/sbk623lFz78Vg6XSOOC+P/h2whQXTu4/MYSwgOYFCsCdwz1usv7+P7DUco66jui/v7Ey9b8JAcB8lGoP1+T7PzUdoZTxT+O/fd2ejkzFAEBmbqv6BMDvvxbmF9B3QMo/O5Gjxarw0b9r2CfwRwiqv+PtCD6fM9e/OuWZHI2hB0AGyyryFyMHwHOH+MEA6ri/e63/zyel078ap+8DOF7JP9Gi8cCdDsK/tAkFh3ak2D8rQbiZhL+5v+uaHda1Ofi/UyhJS9ro+L/rrDSmKXjnvzqb1yBkp82/EuTuraPsyb8hY83nKVSsv/Ql9i+ATLO/P3jXm3mFuT+topwVj+awP7wTCHl+Hb4/tTEgyU5u2r9NBUy3JRjYP8w5xBCP+vc/CMZ49rbD6b/QtI/TxqADwKgrtFg4Bpc/Gq0spxW957861EHX6Fj0P4Pj67p9ldY/gzvxkFC15T+FLAJXw9/hv9vk8iXnpcQ/GNR3ehD78b8aGqgjs9zjPxJi9ky/i7E/Mig54bJg8r8UndRsWWDyP/sGSZn+vLA/++6Kfhkkzj9AkfDho5mXP7mhUOu/LPG/+6n700hJ4b+H1oZNtK30v8q6YfeYi9O/yx0y3CS7BEApYU4+fSUBwNR41yOHu7U/BmZ3mkUYwD/6VFVGWo7MP80X0+MsZ+I/m4uSh7l/AEDIqGhnBbXjP4N6VHjpnNI/O3yoa2G58r92wiXhgOK3v5cJ/Vluida/8jnDyTx88L/NtQV6Ws/iP9zY51MVDNQ/1EkqGC+SBMAfO7dBjyoEQGKgplCP7Mo/J29lQ4Mh8b9AGgy7aTbQP6Mtq1ktZu8/bwLGBk62zb86Arb6GpXsv+168y2+4tm/5Zoklq2B5T/qYADLynsDwH/r4x4kXLy/eiY/w/WA0b/FdQIGcxvXP1MECz9wEMM/jNJlIXA68L8FBLgAam/bP/jG8ZdN47o/ay91F+BJzT8aQeAow8zcv2C8+vx8dOW/e9c0kTDS5r8m0Ai1ypP6v3vrI/XKu92/nmSoqnOp6z9zNhiZGmf9vwrcKjOJ+uM/QFHu5uabyD/Jez5gk0jwv5izDNLaJMI/ldG3CFH14r+EZwdrC6rHP513s/PmfPI/uEUjb1384z+qk4/S8i/AP9qJOfrR7OW/nElesm64A8AlKi/e8FLnv5d34QaU/d+/kEurXt8d/D/2QjCV0+Xyv9itKDbLE+C/l3vU6H/77D/qWcBM35vYP5Bby9sEbOu/vUBi/n/u978rZr8lbzLxP+0utSlDSdC/3Srok3sadD/etORt54HTv7/nLJFEALE/h4xK/n0Oyr8d0n+2YijKP5Z5LK8gowbAMM63NCklAMB3JRDr3gLav2K/HTTMZag/Qak/Vcdzsz+Jm0sYKfvTvxIJK+OLlsE/lRm2eEiq1z8/CJ7j2xrpP3x8tqb19N8/gVSYbdfcuT+8/mKPnkjzP6mSqKDk2PE/O5HizotQ8j9DWRwu0D/gP3vQyvHZ5d2/cfTJRcVV3T/fotmmB5Xxv11h3gN6Z8O/zKf9pMku4781uU9HEYvgPw=="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            3
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            3,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.0.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDIzMTQ4MzIwcQJYAwAAAGNwdXEDSzJOdHEEUS6AAl1xAFgKAAAAMTQyMzE0ODMyMHEBYS4yAAAAAAAAAObdNy7Y8APADiMPPhEJGMBELtPrJjIMQM3yXEWmYfw/xuUk82HF+b/sjy8x45MFwKZ3rNlCLty/x61Lxkyb8j9qEN9x6Hz7P0UnWYbYfwPAVL28TzYRGcCX3TqeQYkRQCWXaRsa9uA/7XsZ4ZVq7D9uNuTkGqj0v/3ANwWotvO/XC5NNLbMCUC0uKRSng3jvzMOgys//u8/R2S9EFQd1T+8W4BOnFQVwEG/CcM64wvA48ezZ849+L88hTajhn0LQC83jFpgX+2//oystWFS3j+tE7/Zn/niv8SDlVLYbg1A+2ZTFuZNDUAJ3INtitcAQK+a6fC7w98/gcAOGnHWCcCudbRyPNUMQHOkaBtunuc/k/6qtlWkCkC5OCwJ6Q3Cv5fXk7+0iwtAcA6ohpnl+z9z0hHlaf73v1S3HYMQQwnA7XU/M3SKEkBaoRJj5XYBQFd3uqX6R8K/Hc05nYlpCEB+AR3NOoQGwM5ryMmCiBfA8w//qVOl9r/YLs3e1+76PwoqMCvUhvQ/SPE3x9mlBEA="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.weight",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDYzMDIyMTc2cQJYAwAAAGNwdXEDS2ROdHEEUS6AAl1xAFgKAAAAMTQ2MzAyMjE3NnEBYS5kAAAAAAAAAG+V+/rbVNc/w4fRnt0WjT/jMamZeNy6P4S5bYVePaQ/wMyGqtzMw7+xDrJC+vLiP+wR6J8wLdI/WfomPeNI4z/KM7uLwyLiv5L13E2e/dm/d6xRgVZ1778zdI5d9B62P2O14DZvFvc/0Oye/cU8vL/uEfV/gwCRv+9zL/l68sK/arrBxI8w4r9WtEfk+NynvzPA/0jgsNW/uknOjJc6yD/HHhUW8Z6xP4fXdpaTouy/Vg1DWhfKsj/Kd1rBMp7cv/ADghOC9b0/2OFbfJeK0z8U6qVQ4ZDgP4dRALvw7vy/v0lyyrBxkD9jBuLlywvjP+XnZ9MTveC/3iYY07Iv4b9kGXiy7lVjPyVnuvchyec/Ci/Vz4E28z/e2JvPrx7kPyN2RKmYkeq/3cpl3m4Tfj9h3+ifwaDSP1fZAErjsei/ivQi5HJtvL9MQB8U0SHAv7FS7bc8WfC/l48E9nKttD9t03WMDCzmv+rm3HtCyte/EuI8iXzPwz+GUCjUvKLbvyalE/jPQeW/b2XD2G5Lxb8hBkwNx73Sv47OpYwIWLo/gl9+qvbHzD+QobXMwY2lv0KT842WXs6/8Ebdhgtd0L9cMd/natDkv7HO3J1L6t6/6svQNyeP0r9IsXs3MITQv/7UgGYmpts/Ge4hqrKT1D8+OGQNhHbVP/hwJ5iryLq/QAJbp4umrD9+e+I5zD7Lv4LHdulJrO0/jBw91MpaoL+HqbGA0W7eP6eQTSeKgto/vbcCgGdL2T/Mh9IEPjvyv8+ubK5VRda/uVXcu7OL3L+s5LL7eeHCv9VQGS7GVOe/4MQk0BU10z8ziV3iXG/uv741KIMKEK8/83Xzmkmezr+ScdiMehKlP9AR4UFB2MO/kHEGUzI0pr/R++0XEVXOP/MgmOWpi+O/Hpa4Ze360z+svOYlWWjbPzUc3E8B8NS/Ab3p4bWp3D/zrNXSgeLYv4wU/WkVory/8bIb+hio0j/Tx2GShePsPzJ9pMEzTKa/HFdsxGWA5r+eSnHd/FLWPynJfiqz/rI/qU3/3cnGz78B9fGRBI7Lv3H3B/RZcMI/"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2,
                                                            50
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            50,
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/tuple": [
                                    "_pipe._pipe.2.bias",
                                    {
                                        "py/reduce": [
                                            {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                            },
                                            {
                                                "py/tuple": [
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/function": "torch.storage._load_from_bytes"
                                                            },
                                                            {
                                                                "py/tuple": [
                                                                    {
                                                                        "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApEb3VibGVTdG9yYWdlCnEBWAoAAAAxNDYzODUwMjA4cQJYAwAAAGNwdXEDSwJOdHEEUS6AAl1xAFgKAAAAMTQ2Mzg1MDIwOHEBYS4CAAAAAAAAAHp9P4r7y9c/XzmZ6gP81L8="
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    0,
                                                    {
                                                        "py/tuple": [
                                                            2
                                                        ]
                                                    },
                                                    {
                                                        "py/tuple": [
                                                            1
                                                        ]
                                                    },
                                                    false,
                                                    {
                                                        "py/reduce": [
                                                            {
                                                                "py/type": "collections.OrderedDict"
                                                            },
                                                            {
                                                                "py/tuple": []
                                                            },
                                                            null,
                                                            null,
                                                            {
                                                                "py/tuple": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "latents": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    3,
                    500
                ],
                "values": ""
            },
            "m0": {
                "base": {
                    "dtype": "float64",
                    "py/object": "numpy.ndarray",
                    "values": [
                        1.6547933385468143,
                        2.739121754850074,
                        1.2540700926705695
                    ]
                },
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    3
                ],
                "values": [
                    1.6547933385468143,
                    2.739121754850074,
                    1.2540700926705695
                ]
            }
        },
        "input": {
            "observations": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            },
            "observations_noisy": {
                "byteorder": "<",
                "dtype": "float64",
                "py/object": "numpy.ndarray",
                "shape": [
                    1,
                    500,
                    2
                ],
                "values": ""
            }
        },
        "iterations": 10
    }
}