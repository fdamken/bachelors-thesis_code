{
  "artifacts": [
    "loglikelihood.png",
    "sampled_states.png",
    "states.png"
  ],
  "command": "main",
  "experiment": {
    "base_dir": "/home/fdamken/Development/study/bachelors-thesis/lgds/src",
    "dependencies": [
      "matplotlib==3.1.3",
      "numpy==1.18.1",
      "sacred==0.8.1"
    ],
    "mainfile": "experiment.py",
    "name": "state3d_observation6d_multisequence",
    "repositories": [
      {
        "commit": "c559beae3d3fb9ce7d8a8f7a9113d0a46a3db361",
        "dirty": false,
        "url": "ssh://github/fdamken/lgds.git"
      },
      {
        "commit": "c559beae3d3fb9ce7d8a8f7a9113d0a46a3db361",
        "dirty": false,
        "url": "ssh://github/fdamken/lgds.git"
      },
      {
        "commit": "c559beae3d3fb9ce7d8a8f7a9113d0a46a3db361",
        "dirty": false,
        "url": "ssh://github/fdamken/lgds.git"
      },
      {
        "commit": "c559beae3d3fb9ce7d8a8f7a9113d0a46a3db361",
        "dirty": false,
        "url": "ssh://github/fdamken/lgds.git"
      }
    ],
    "sources": [
      [
        "__init__.py",
        "_sources/__init___d41d8cd98f00b204e9800998ecf8427e.py"
      ],
      [
        "em.py",
        "_sources/em_fbe9d79ac952d79b65becb7dae88005e.py"
      ],
      [
        "experiment.py",
        "_sources/experiment_25a34bdaaaabfabd3b179e68471329f8.py"
      ],
      [
        "util.py",
        "_sources/util_a8f239b2310ac69d19f815c389d82a9e.py"
      ]
    ]
  },
  "heartbeat": "2020-05-16T14:44:18.979359",
  "host": {
    "ENV": {},
    "cpu": "Intel(R) Core(TM) i7-6700HQ CPU @ 2.60GHz",
    "hostname": "dory",
    "os": [
      "Linux",
      "Linux-5.4.0-29-generic-x86_64-with-glibc2.10"
    ],
    "python_version": "3.8.2"
  },
  "meta": {
    "command": "main",
    "options": {
      "--beat-interval": null,
      "--capture": null,
      "--comment": null,
      "--debug": true,
      "--enforce_clean": false,
      "--file_storage": null,
      "--force": false,
      "--help": false,
      "--loglevel": null,
      "--mongo_db": null,
      "--name": "state3d_observation6d_multisequence",
      "--pdb": false,
      "--print-config": false,
      "--priority": null,
      "--queue": false,
      "--s3": null,
      "--sql": null,
      "--tiny_db": null,
      "--unobserved": false
    }
  },
  "resources": [],
  "result": {
    "estimations": {
      "A": {
        "base": {
          "dtype": "float64",
          "py/object": "numpy.ndarray",
          "values": [
            [
              0.678281501557275,
              -0.728974745861688,
              -1.0120944550844235
            ],
            [
              0.024751833718168467,
              1.1430582962288214,
              0.05945006010472087
            ],
            [
              0.11623974332828599,
              0.2007026822553664,
              1.3789436724377693
            ]
          ]
        },
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "shape": [
          3,
          3
        ],
        "strides": [
          8,
          24
        ],
        "values": [
          [
            0.678281501557275,
            0.024751833718168467,
            0.11623974332828599
          ],
          [
            -0.728974745861688,
            1.1430582962288214,
            0.2007026822553664
          ],
          [
            -1.0120944550844235,
            0.05945006010472087,
            1.3789436724377693
          ]
        ]
      },
      "C": {
        "byteorder": "<",
        "dtype": "float64",
        "order": "F",
        "py/object": "numpy.ndarray",
        "shape": [
          6,
          3
        ],
        "values": "eJwBkABv/+LXZGi9LlK/28ru2SW9vr9gBeUk7xm0vxnywqYcjlK/MzDloWu9vr/hwEQRyRu0vzuQW9/2B8I/ouy/RGGe3T8u9GjquD/hP7DMjaUbCcI/68b7dHie3T8gJjvcFUDhP5VzYKTcJ9A/wAIzsMsz2z+gcHWw26fmPyI94/abJ9A/WKzcCLkz2z/SIz0Gt6fmP3z5TNk="
      },
      "Q": {
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "values": [
          [
            3.2908072319756054e-07,
            0.0,
            0.0
          ],
          [
            0.0,
            0.0005681511241591022,
            0.0
          ],
          [
            0.0,
            0.0,
            0.00019022837585332442
          ]
        ]
      },
      "R": {
        "byteorder": "<",
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "shape": [
          6,
          6
        ],
        "values": "eJxjYGB48+D0WzsG0kGCecNDMvT183/Xu2VPhn1Rzd8/kOPOC4G/XpCuryE6LMnwlj0AL+wR9Q=="
      },
      "V1": {
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "values": [
          [
            4.785565626504015e-05,
            -0.0002966715668628986,
            0.00033282930730268247
          ],
          [
            -0.0002966715668628986,
            0.0034580403435703006,
            -0.003082014086449788
          ],
          [
            0.00033282930730268247,
            -0.003082014086449788,
            0.00295747636429487
          ]
        ]
      },
      "pi1": {
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "values": [
          -26.521763688674277,
          -45.55818858490117,
          -62.92304106614588
        ]
      },
      "x": {
        "byteorder": "<",
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "shape": [
          10,
          3,
          50
        ],
        "values": ""
      }
    },
    "iterations": 1125,
    "log_likelihood": {
      "dtype": "float64",
      "py/object": "numpy.float64",
      "value": 15263.303970642099
    },
    "losses": {
      "A": {
        "dtype": "float64",
        "py/object": "numpy.float64",
        "value": 1.367914344842222
      },
      "C": {
        "dtype": "float64",
        "py/object": "numpy.float64",
        "value": 4.28811725227733
      },
      "Q": {
        "dtype": "float64",
        "py/object": "numpy.float64",
        "value": 0.0005866075958785865
      },
      "R": {
        "dtype": "float64",
        "py/object": "numpy.float64",
        "value": 0.5786684022406149
      },
      "V0": {
        "dtype": "float64",
        "py/object": "numpy.float64",
        "value": 0.00632243881509306
      },
      "m0": {
        "dtype": "float64",
        "py/object": "numpy.float64",
        "value": 83.73331224779433
      },
      "x": {
        "dtype": "float64",
        "py/object": "numpy.float64",
        "value": 1655.1943586229916
      }
    }
  },
  "start_time": "2020-05-16T14:44:04.276653",
  "status": "COMPLETED",
  "stop_time": "2020-05-16T14:44:18.977547"
}