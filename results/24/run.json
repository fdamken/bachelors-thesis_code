{
  "artifacts": [
    "loglikelihood.png",
    "sampled_states.png",
    "states.png"
  ],
  "command": "main",
  "experiment": {
    "base_dir": "/home/fabian/bachelor-thesis/lgds/src",
    "dependencies": [
      "matplotlib==3.2.1",
      "numpy==1.18.4",
      "sacred==0.8.1"
    ],
    "mainfile": "experiment.py",
    "name": "state3d_observation3d_multisequence",
    "repositories": [
      {
        "commit": "e82cb58f22e17955dfbbc35516a6d7ec57b03ed5",
        "dirty": false,
        "url": "ssh://github-fdamken/fdamken/lgds.git"
      },
      {
        "commit": "e82cb58f22e17955dfbbc35516a6d7ec57b03ed5",
        "dirty": false,
        "url": "ssh://github-fdamken/fdamken/lgds.git"
      },
      {
        "commit": "e82cb58f22e17955dfbbc35516a6d7ec57b03ed5",
        "dirty": false,
        "url": "ssh://github-fdamken/fdamken/lgds.git"
      },
      {
        "commit": "e82cb58f22e17955dfbbc35516a6d7ec57b03ed5",
        "dirty": false,
        "url": "ssh://github-fdamken/fdamken/lgds.git"
      }
    ],
    "sources": [
      [
        "__init__.py",
        "_sources/__init___d41d8cd98f00b204e9800998ecf8427e.py"
      ],
      [
        "em.py",
        "_sources/em_fbe9d79ac952d79b65becb7dae88005e.py"
      ],
      [
        "experiment.py",
        "_sources/experiment_25a34bdaaaabfabd3b179e68471329f8.py"
      ],
      [
        "util.py",
        "_sources/util_c09411da402310b39da38fd10aca6b35.py"
      ]
    ]
  },
  "heartbeat": "2020-05-17T14:07:29.176001",
  "host": {
    "ENV": {},
    "cpu": "Intel(R) Core(TM) i5-4690 CPU @ 3.50GHz",
    "gpus": {
      "driver_version": "440.64.00",
      "gpus": [
        {
          "model": "GeForce GTX 970",
          "persistence_mode": false,
          "total_memory": 4039
        }
      ]
    },
    "hostname": "H97-D3H",
    "os": [
      "Linux",
      "Linux-4.4.0-176-generic-x86_64-with-Ubuntu-16.04-xenial"
    ],
    "python_version": "3.7.7"
  },
  "meta": {
    "command": "main",
    "options": {
      "--beat-interval": null,
      "--capture": null,
      "--comment": null,
      "--debug": true,
      "--enforce_clean": false,
      "--file_storage": null,
      "--force": false,
      "--help": false,
      "--loglevel": null,
      "--mongo_db": null,
      "--name": "state3d_observation3d_multisequence",
      "--pdb": false,
      "--print-config": false,
      "--priority": null,
      "--queue": false,
      "--s3": null,
      "--sql": null,
      "--tiny_db": null,
      "--unobserved": false
    }
  },
  "resources": [],
  "result": {
    "estimations": {
      "A": {
        "base": {
          "dtype": "float64",
          "py/object": "numpy.ndarray",
          "values": [
            [
              0.4753691282162137,
              -0.3184519697725227,
              -0.8620122935717832
            ],
            [
              0.3044583280729737,
              0.7669538883811539,
              0.07677367356192408
            ],
            [
              0.0032179923515346905,
              0.3223372547221827,
              1.3299855806826715
            ]
          ]
        },
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "shape": [
          3,
          3
        ],
        "strides": [
          8,
          24
        ],
        "values": [
          [
            0.4753691282162137,
            0.3044583280729737,
            0.0032179923515346905
          ],
          [
            -0.3184519697725227,
            0.7669538883811539,
            0.3223372547221827
          ],
          [
            -0.8620122935717832,
            0.07677367356192408,
            1.3299855806826715
          ]
        ]
      },
      "C": {
        "dtype": "float64",
        "order": "F",
        "py/object": "numpy.ndarray",
        "values": [
          [
            -0.11080431844882485,
            0.40541583316826746,
            0.11874622244372501
          ],
          [
            -0.22166476298694354,
            0.8098117793129269,
            0.23688781691427926
          ],
          [
            -0.3333619067393893,
            1.217128159299317,
            0.35586477927613147
          ]
        ]
      },
      "Q": {
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "values": [
          [
            1.67041583395354e-07,
            0.0,
            0.0
          ],
          [
            0.0,
            1.462785365554143e-05,
            0.0
          ],
          [
            0.0,
            0.0,
            1.7715442203441444e-07
          ]
        ]
      },
      "R": {
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "values": [
          [
            0.12192948884285215,
            0.0,
            0.0
          ],
          [
            0.0,
            2.3759580926707713e-05,
            0.0
          ],
          [
            0.0,
            0.0,
            0.845791260840997
          ]
        ]
      },
      "V1": {
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "values": [
          [
            5.4978504325466595,
            -0.11007662155505143,
            5.5227605900614325
          ],
          [
            -0.11007662155385772,
            0.002225236790335895,
            -0.11054834377213918
          ],
          [
            5.522760590061489,
            -0.11054834377327605,
            5.547823044365787
          ]
        ]
      },
      "pi1": {
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "values": [
          -11.131933106282386,
          -45.48286734526483,
          -42.76670035332968
        ]
      },
      "x": {
        "byteorder": "<",
        "dtype": "float64",
        "py/object": "numpy.ndarray",
        "shape": [
          10,
          3,
          50
        ],
        "values": ""
      }
    },
    "iterations": 2656,
    "log_likelihood": {
      "dtype": "float64",
      "py/object": "numpy.float64",
      "value": 10917.79820582281
    },
    "losses": {
      "A": {
        "dtype": "float64",
        "py/object": "numpy.float64",
        "value": 1.2652882631378624
      },
      "C": {
        "dtype": "float64",
        "py/object": "numpy.float64",
        "value": 3.3938370887719684
      },
      "Q": {
        "dtype": "float64",
        "py/object": "numpy.float64",
        "value": 1.4648972521250164e-05
      },
      "R": {
        "dtype": "float64",
        "py/object": "numpy.float64",
        "value": 0.8545234362724144
      },
      "V0": {
        "dtype": "float64",
        "py/object": "numpy.float64",
        "value": 11.0478472370129
      },
      "m0": {
        "dtype": "float64",
        "py/object": "numpy.float64",
        "value": 64.98742045466143
      },
      "x": {
        "dtype": "float64",
        "py/object": "numpy.float64",
        "value": 1593.3589417093904
      }
    }
  },
  "start_time": "2020-05-17T14:07:04.461462",
  "status": "COMPLETED",
  "stop_time": "2020-05-17T14:07:29.174535"
}